
test005-LCD-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f60  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800a100  0800a100  0001a100  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5d8  0800a5d8  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5d8  0800a5d8  0001a5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5e0  0800a5e0  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5e0  0800a5e0  0001a5e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5e4  0800a5e4  0001a5e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a5e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  200001d4  0800a7bc  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  0800a7bc  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012181  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002864  00000000  00000000  000323c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00034c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d94  00000000  00000000  00035d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018ee3  00000000  00000000  00036b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014e0b  00000000  00000000  0004f9e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e4e7  00000000  00000000  000647f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f4c  00000000  00000000  00102cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00108c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a0e8 	.word	0x0800a0e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800a0e8 	.word	0x0800a0e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <lcd_command>:
#define I2C_ADDR 0x4E	// 0x27 << 1

I2C_HandleTypeDef *hi2c = NULL;

void lcd_command(char cmd)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af02      	add	r7, sp, #8
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	unsigned char n1, n2, n3, n4, dd[4];
	n1 = cmd & 0xf0;	// upper nibble : top group 4 bit store
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	f023 030f 	bic.w	r3, r3, #15
 8001010:	73fb      	strb	r3, [r7, #15]
	n2 = (cmd & 0x0f) << 4;	// lower nibble : bottom group 4 bit store
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	011b      	lsls	r3, r3, #4
 8001016:	73bb      	strb	r3, [r7, #14]
	n3 = (1<<3)|(1<<2)|0|0; //RW|EN_1|NC|RS;	0x0c
 8001018:	230c      	movs	r3, #12
 800101a:	737b      	strb	r3, [r7, #13]
	n4 = (1<<3)|  0	  |0|0; //RW|EN_0|NC|RS;	0x08
 800101c:	2308      	movs	r3, #8
 800101e:	733b      	strb	r3, [r7, #12]
	dd[0] = n1 | n3;
 8001020:	7bfa      	ldrb	r2, [r7, #15]
 8001022:	7b7b      	ldrb	r3, [r7, #13]
 8001024:	4313      	orrs	r3, r2
 8001026:	b2db      	uxtb	r3, r3
 8001028:	723b      	strb	r3, [r7, #8]
	dd[1] = n1 | n4;
 800102a:	7bfa      	ldrb	r2, [r7, #15]
 800102c:	7b3b      	ldrb	r3, [r7, #12]
 800102e:	4313      	orrs	r3, r2
 8001030:	b2db      	uxtb	r3, r3
 8001032:	727b      	strb	r3, [r7, #9]
	dd[2] = n2 | n3;
 8001034:	7bba      	ldrb	r2, [r7, #14]
 8001036:	7b7b      	ldrb	r3, [r7, #13]
 8001038:	4313      	orrs	r3, r2
 800103a:	b2db      	uxtb	r3, r3
 800103c:	72bb      	strb	r3, [r7, #10]
	dd[3] = n2 | n4;
 800103e:	7bba      	ldrb	r2, [r7, #14]
 8001040:	7b3b      	ldrb	r3, [r7, #12]
 8001042:	4313      	orrs	r3, r2
 8001044:	b2db      	uxtb	r3, r3
 8001046:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hi2c, I2C_ADDR, dd, 4, 10);
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <lcd_command+0x64>)
 800104a:	6818      	ldr	r0, [r3, #0]
 800104c:	f107 0208 	add.w	r2, r7, #8
 8001050:	230a      	movs	r3, #10
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2304      	movs	r3, #4
 8001056:	214e      	movs	r1, #78	; 0x4e
 8001058:	f002 fa9a 	bl	8003590 <HAL_I2C_Master_Transmit>
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200001f0 	.word	0x200001f0

08001068 <lcd_data>:
void lcd_data(char ch)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af02      	add	r7, sp, #8
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	unsigned char n1, n2, n3, n4, dd[4];
	n1 = ch & 0xf0;			// upper nibble : top group 4 bit store
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	f023 030f 	bic.w	r3, r3, #15
 8001078:	73fb      	strb	r3, [r7, #15]
	n2 = (ch & 0x0f) << 4;	// lower nibble : bottom group 4 bit store
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	011b      	lsls	r3, r3, #4
 800107e:	73bb      	strb	r3, [r7, #14]
	n3 = (1<<3)|(1<<2)|0|(1<<0); //RW|EN_1|NC|RS;	0x0E
 8001080:	230d      	movs	r3, #13
 8001082:	737b      	strb	r3, [r7, #13]
	n4 = (1<<3)|  0	  |0|(1<<0); //RW|EN_0|NC|RS;	0x09
 8001084:	2309      	movs	r3, #9
 8001086:	733b      	strb	r3, [r7, #12]
	dd[0] = n1 | n3;
 8001088:	7bfa      	ldrb	r2, [r7, #15]
 800108a:	7b7b      	ldrb	r3, [r7, #13]
 800108c:	4313      	orrs	r3, r2
 800108e:	b2db      	uxtb	r3, r3
 8001090:	723b      	strb	r3, [r7, #8]
	dd[1] = n1 | n4;
 8001092:	7bfa      	ldrb	r2, [r7, #15]
 8001094:	7b3b      	ldrb	r3, [r7, #12]
 8001096:	4313      	orrs	r3, r2
 8001098:	b2db      	uxtb	r3, r3
 800109a:	727b      	strb	r3, [r7, #9]
	dd[2] = n2 | n3;
 800109c:	7bba      	ldrb	r2, [r7, #14]
 800109e:	7b7b      	ldrb	r3, [r7, #13]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	72bb      	strb	r3, [r7, #10]
	dd[3] = n2 | n4;
 80010a6:	7bba      	ldrb	r2, [r7, #14]
 80010a8:	7b3b      	ldrb	r3, [r7, #12]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hi2c, I2C_ADDR, dd, 4, 10);
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <lcd_data+0x64>)
 80010b2:	6818      	ldr	r0, [r3, #0]
 80010b4:	f107 0208 	add.w	r2, r7, #8
 80010b8:	230a      	movs	r3, #10
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2304      	movs	r3, #4
 80010be:	214e      	movs	r1, #78	; 0x4e
 80010c0:	f002 fa66 	bl	8003590 <HAL_I2C_Master_Transmit>
}
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200001f0 	.word	0x200001f0

080010d0 <lcd_init>:
void lcd_init()
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	lcd_command(0x01);	// screen clear
 80010d4:	2001      	movs	r0, #1
 80010d6:	f7ff ff93 	bl	8001000 <lcd_command>
	lcd_command(0x02);	// cursor home
 80010da:	2002      	movs	r0, #2
 80010dc:	f7ff ff90 	bl	8001000 <lcd_command>
	//lcd_command(0x06);	//
	//lcd_command(0x0f);	//
	HAL_Delay(100);
 80010e0:	2064      	movs	r0, #100	; 0x64
 80010e2:	f000 fe8f 	bl	8001e04 <HAL_Delay>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:
void lcd_print(char *str)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str)	lcd_data(*str++);
 80010f2:	e006      	b.n	8001102 <lcd_print+0x18>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ffb3 	bl	8001068 <lcd_data>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f4      	bne.n	80010f4 <lcd_print+0xa>
}
 800110a:	bf00      	nop
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printEx>:
void lcd_printEx(char *str, int ln)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
	if(ln == 0) lcd_command (0x80);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d102      	bne.n	800112a <lcd_printEx+0x16>
 8001124:	2080      	movs	r0, #128	; 0x80
 8001126:	f7ff ff6b 	bl	8001000 <lcd_command>
	if(ln == 1) lcd_command (0xc0);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d102      	bne.n	8001136 <lcd_printEx+0x22>
 8001130:	20c0      	movs	r0, #192	; 0xc0
 8001132:	f7ff ff65 	bl	8001000 <lcd_command>
	lcd_print(str);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffd7 	bl	80010ea <lcd_print>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <i2c_init>:

int i2c_init(I2C_HandleTypeDef *p)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	hi2c = p;
 800114c:	4a04      	ldr	r2, [pc, #16]	; (8001160 <i2c_init+0x1c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
}
 8001152:	bf00      	nop
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	200001f0 	.word	0x200001f0

08001164 <i2c_scan>:
int i2c_scan()
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
	if(hi2c == NULL)	return;
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <i2c_scan+0x6c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d029      	beq.n	80011c6 <i2c_scan+0x62>
	for(int addr=0; addr<128; addr++)
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	e022      	b.n	80011be <i2c_scan+0x5a>
	{
		if(HAL_I2C_IsDeviceReady(hi2c, addr, 1, 10 /* ms*/) == HAL_OK)
 8001178:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <i2c_scan+0x6c>)
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	b299      	uxth	r1, r3
 8001180:	230a      	movs	r3, #10
 8001182:	2201      	movs	r2, #1
 8001184:	f002 fb02 	bl	800378c <HAL_I2C_IsDeviceReady>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d104      	bne.n	8001198 <i2c_scan+0x34>
		{
			printf("  %02x ", addr);
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4810      	ldr	r0, [pc, #64]	; (80011d4 <i2c_scan+0x70>)
 8001192:	f005 fa9d 	bl	80066d0 <iprintf>
 8001196:	e002      	b.n	800119e <i2c_scan+0x3a>
		}
		else
		{
			printf("  .  ");
 8001198:	480f      	ldr	r0, [pc, #60]	; (80011d8 <i2c_scan+0x74>)
 800119a:	f005 fa99 	bl	80066d0 <iprintf>
		}
		if((addr % 16) == 15)	printf("\r\n");
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	425a      	negs	r2, r3
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	f002 020f 	and.w	r2, r2, #15
 80011aa:	bf58      	it	pl
 80011ac:	4253      	negpl	r3, r2
 80011ae:	2b0f      	cmp	r3, #15
 80011b0:	d102      	bne.n	80011b8 <i2c_scan+0x54>
 80011b2:	480a      	ldr	r0, [pc, #40]	; (80011dc <i2c_scan+0x78>)
 80011b4:	f005 faf2 	bl	800679c <puts>
	for(int addr=0; addr<128; addr++)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3301      	adds	r3, #1
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b7f      	cmp	r3, #127	; 0x7f
 80011c2:	ddd9      	ble.n	8001178 <i2c_scan+0x14>
 80011c4:	e000      	b.n	80011c8 <i2c_scan+0x64>
	if(hi2c == NULL)	return;
 80011c6:	bf00      	nop
	}
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200001f0 	.word	0x200001f0
 80011d4:	0800a100 	.word	0x0800a100
 80011d8:	0800a108 	.word	0x0800a108
 80011dc:	0800a110 	.word	0x0800a110

080011e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08c      	sub	sp, #48	; 0x30
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e6:	f000 fd9b 	bl	8001d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ea:	f000 f877 	bl	80012dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ee:	f000 fa09 	bl	8001604 <MX_GPIO_Init>
  MX_DMA_Init();
 80011f2:	f000 f9e7 	bl	80015c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011f6:	f000 f9bb 	bl	8001570 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80011fa:	f000 f8d9 	bl	80013b0 <MX_ADC1_Init>
  MX_I2C2_Init();
 80011fe:	f000 f93b 	bl	8001478 <MX_I2C2_Init>
  MX_TIM3_Init();
 8001202:	f000 f967 	bl	80014d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  unsigned char ch_val0[16];
  unsigned char ch_val1[16];

  HAL_ADC_Start_DMA(&hadc1, val, 2);
 8001206:	2202      	movs	r2, #2
 8001208:	492a      	ldr	r1, [pc, #168]	; (80012b4 <main+0xd4>)
 800120a:	482b      	ldr	r0, [pc, #172]	; (80012b8 <main+0xd8>)
 800120c:	f000 fe62 	bl	8001ed4 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8001210:	482a      	ldr	r0, [pc, #168]	; (80012bc <main+0xdc>)
 8001212:	f003 fb2d 	bl	8004870 <HAL_TIM_Base_Start>

  ProgramStart("LCD (1602)");
 8001216:	482a      	ldr	r0, [pc, #168]	; (80012c0 <main+0xe0>)
 8001218:	f000 fab4 	bl	8001784 <ProgramStart>
    i2c_init(&hi2c2);
 800121c:	4829      	ldr	r0, [pc, #164]	; (80012c4 <main+0xe4>)
 800121e:	f7ff ff91 	bl	8001144 <i2c_init>
    i2c_scan();
 8001222:	f7ff ff9f 	bl	8001164 <i2c_scan>

    lcd_init();
 8001226:	f7ff ff53 	bl	80010d0 <lcd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  double tm = ((240.0 / 4096.0) * val[0]) - 40;  // float 연산을 위해 .0을 붙임. 없으면 정수로 인식
 800122a:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <main+0xd4>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f980 	bl	8000534 <__aeabi_i2d>
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <main+0xe8>)
 800123a:	f7ff f9e5 	bl	8000608 <__aeabi_dmul>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4610      	mov	r0, r2
 8001244:	4619      	mov	r1, r3
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <main+0xec>)
 800124c:	f7ff f824 	bl	8000298 <__aeabi_dsub>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	  double hm = (100.0 / 4096.0) * val[1];
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <main+0xd4>)
 800125a:	885b      	ldrh	r3, [r3, #2]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f969 	bl	8000534 <__aeabi_i2d>
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <main+0xf0>)
 8001268:	f7ff f9ce 	bl	8000608 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	e9c7 2308 	strd	r2, r3, [r7, #32]

	  sprintf(ch_val0,"Temp : %-6.1f",tm); // 왼쪽 정렬은 %-04d 로 작성
 8001274:	f107 0010 	add.w	r0, r7, #16
 8001278:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800127c:	4915      	ldr	r1, [pc, #84]	; (80012d4 <main+0xf4>)
 800127e:	f005 fa95 	bl	80067ac <siprintf>
	  sprintf(ch_val1,"humi : %-4.1f",hm);
 8001282:	4638      	mov	r0, r7
 8001284:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001288:	4913      	ldr	r1, [pc, #76]	; (80012d8 <main+0xf8>)
 800128a:	f005 fa8f 	bl	80067ac <siprintf>
	  lcd_printEx(ch_val0,0);
 800128e:	f107 0310 	add.w	r3, r7, #16
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff3d 	bl	8001114 <lcd_printEx>
	  HAL_Delay(100);
 800129a:	2064      	movs	r0, #100	; 0x64
 800129c:	f000 fdb2 	bl	8001e04 <HAL_Delay>
	  lcd_printEx(ch_val1,1);
 80012a0:	463b      	mov	r3, r7
 80012a2:	2101      	movs	r1, #1
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff35 	bl	8001114 <lcd_printEx>
	  HAL_Delay(100);
 80012aa:	2064      	movs	r0, #100	; 0x64
 80012ac:	f000 fdaa 	bl	8001e04 <HAL_Delay>
  {
 80012b0:	e7bb      	b.n	800122a <main+0x4a>
 80012b2:	bf00      	nop
 80012b4:	20000380 	.word	0x20000380
 80012b8:	200001f4 	.word	0x200001f4
 80012bc:	200002f0 	.word	0x200002f0
 80012c0:	0800a114 	.word	0x0800a114
 80012c4:	2000029c 	.word	0x2000029c
 80012c8:	3fae0000 	.word	0x3fae0000
 80012cc:	40440000 	.word	0x40440000
 80012d0:	3f990000 	.word	0x3f990000
 80012d4:	0800a120 	.word	0x0800a120
 80012d8:	0800a130 	.word	0x0800a130

080012dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b094      	sub	sp, #80	; 0x50
 80012e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e2:	f107 0320 	add.w	r3, r7, #32
 80012e6:	2230      	movs	r2, #48	; 0x30
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f005 fb56 	bl	800699c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f0:	f107 030c 	add.w	r3, r7, #12
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001300:	2300      	movs	r3, #0
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	4b28      	ldr	r3, [pc, #160]	; (80013a8 <SystemClock_Config+0xcc>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	4a27      	ldr	r2, [pc, #156]	; (80013a8 <SystemClock_Config+0xcc>)
 800130a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130e:	6413      	str	r3, [r2, #64]	; 0x40
 8001310:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <SystemClock_Config+0xcc>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	4b22      	ldr	r3, [pc, #136]	; (80013ac <SystemClock_Config+0xd0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a21      	ldr	r2, [pc, #132]	; (80013ac <SystemClock_Config+0xd0>)
 8001326:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <SystemClock_Config+0xd0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001338:	2302      	movs	r3, #2
 800133a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133c:	2301      	movs	r3, #1
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001340:	2310      	movs	r3, #16
 8001342:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001344:	2302      	movs	r3, #2
 8001346:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001348:	2300      	movs	r3, #0
 800134a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800134c:	2310      	movs	r3, #16
 800134e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001350:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001354:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001356:	2304      	movs	r3, #4
 8001358:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800135a:	2304      	movs	r3, #4
 800135c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135e:	f107 0320 	add.w	r3, r7, #32
 8001362:	4618      	mov	r0, r3
 8001364:	f002 fd9c 	bl	8003ea0 <HAL_RCC_OscConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800136e:	f000 f9bf 	bl	80016f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001372:	230f      	movs	r3, #15
 8001374:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001376:	2302      	movs	r3, #2
 8001378:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800137e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001382:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	2102      	movs	r1, #2
 800138e:	4618      	mov	r0, r3
 8001390:	f002 fffe 	bl	8004390 <HAL_RCC_ClockConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800139a:	f000 f9a9 	bl	80016f0 <Error_Handler>
  }
}
 800139e:	bf00      	nop
 80013a0:	3750      	adds	r7, #80	; 0x50
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40007000 	.word	0x40007000

080013b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013b6:	463b      	mov	r3, r7
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013c2:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <MX_ADC1_Init+0xc0>)
 80013c4:	4a2b      	ldr	r2, [pc, #172]	; (8001474 <MX_ADC1_Init+0xc4>)
 80013c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013c8:	4b29      	ldr	r3, [pc, #164]	; (8001470 <MX_ADC1_Init+0xc0>)
 80013ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013d0:	4b27      	ldr	r3, [pc, #156]	; (8001470 <MX_ADC1_Init+0xc0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <MX_ADC1_Init+0xc0>)
 80013d8:	2201      	movs	r2, #1
 80013da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013dc:	4b24      	ldr	r3, [pc, #144]	; (8001470 <MX_ADC1_Init+0xc0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80013e2:	4b23      	ldr	r3, [pc, #140]	; (8001470 <MX_ADC1_Init+0xc0>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80013ea:	4b21      	ldr	r3, [pc, #132]	; (8001470 <MX_ADC1_Init+0xc0>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013f0:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <MX_ADC1_Init+0xc0>)
 80013f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80013f8:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <MX_ADC1_Init+0xc0>)
 80013fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <MX_ADC1_Init+0xc0>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001406:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <MX_ADC1_Init+0xc0>)
 8001408:	2202      	movs	r2, #2
 800140a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <MX_ADC1_Init+0xc0>)
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001414:	4b16      	ldr	r3, [pc, #88]	; (8001470 <MX_ADC1_Init+0xc0>)
 8001416:	2200      	movs	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800141a:	4815      	ldr	r0, [pc, #84]	; (8001470 <MX_ADC1_Init+0xc0>)
 800141c:	f000 fd16 	bl	8001e4c <HAL_ADC_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_ADC1_Init+0x7a>
  {
    Error_Handler();
 8001426:	f000 f963 	bl	80016f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800142a:	2300      	movs	r3, #0
 800142c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800142e:	2301      	movs	r3, #1
 8001430:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001436:	463b      	mov	r3, r7
 8001438:	4619      	mov	r1, r3
 800143a:	480d      	ldr	r0, [pc, #52]	; (8001470 <MX_ADC1_Init+0xc0>)
 800143c:	f000 fe58 	bl	80020f0 <HAL_ADC_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8001446:	f000 f953 	bl	80016f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800144a:	2301      	movs	r3, #1
 800144c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800144e:	2302      	movs	r3, #2
 8001450:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001452:	463b      	mov	r3, r7
 8001454:	4619      	mov	r1, r3
 8001456:	4806      	ldr	r0, [pc, #24]	; (8001470 <MX_ADC1_Init+0xc0>)
 8001458:	f000 fe4a 	bl	80020f0 <HAL_ADC_ConfigChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001462:	f000 f945 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200001f4 	.word	0x200001f4
 8001474:	40012000 	.word	0x40012000

08001478 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <MX_I2C2_Init+0x50>)
 800147e:	4a13      	ldr	r2, [pc, #76]	; (80014cc <MX_I2C2_Init+0x54>)
 8001480:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_I2C2_Init+0x50>)
 8001484:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <MX_I2C2_Init+0x58>)
 8001486:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <MX_I2C2_Init+0x50>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_I2C2_Init+0x50>)
 8001490:	2200      	movs	r2, #0
 8001492:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_I2C2_Init+0x50>)
 8001496:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800149a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <MX_I2C2_Init+0x50>)
 800149e:	2200      	movs	r2, #0
 80014a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_I2C2_Init+0x50>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <MX_I2C2_Init+0x50>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_I2C2_Init+0x50>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014b4:	4804      	ldr	r0, [pc, #16]	; (80014c8 <MX_I2C2_Init+0x50>)
 80014b6:	f001 ff27 	bl	8003308 <HAL_I2C_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014c0:	f000 f916 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	2000029c 	.word	0x2000029c
 80014cc:	40005800 	.word	0x40005800
 80014d0:	000186a0 	.word	0x000186a0

080014d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e8:	463b      	mov	r3, r7
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014f0:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <MX_TIM3_Init+0x94>)
 80014f2:	4a1e      	ldr	r2, [pc, #120]	; (800156c <MX_TIM3_Init+0x98>)
 80014f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <MX_TIM3_Init+0x94>)
 80014f8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80014fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <MX_TIM3_Init+0x94>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <MX_TIM3_Init+0x94>)
 8001506:	f240 32e7 	movw	r2, #999	; 0x3e7
 800150a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <MX_TIM3_Init+0x94>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <MX_TIM3_Init+0x94>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001518:	4813      	ldr	r0, [pc, #76]	; (8001568 <MX_TIM3_Init+0x94>)
 800151a:	f003 f959 	bl	80047d0 <HAL_TIM_Base_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001524:	f000 f8e4 	bl	80016f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800152e:	f107 0308 	add.w	r3, r7, #8
 8001532:	4619      	mov	r1, r3
 8001534:	480c      	ldr	r0, [pc, #48]	; (8001568 <MX_TIM3_Init+0x94>)
 8001536:	f003 fae5 	bl	8004b04 <HAL_TIM_ConfigClockSource>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001540:	f000 f8d6 	bl	80016f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001544:	2320      	movs	r3, #32
 8001546:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800154c:	463b      	mov	r3, r7
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_TIM3_Init+0x94>)
 8001552:	f003 fcf7 	bl	8004f44 <HAL_TIMEx_MasterConfigSynchronization>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800155c:	f000 f8c8 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200002f0 	.word	0x200002f0
 800156c:	40000400 	.word	0x40000400

08001570 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_USART2_UART_Init+0x4c>)
 8001576:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <MX_USART2_UART_Init+0x50>)
 8001578:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <MX_USART2_UART_Init+0x4c>)
 800157c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001580:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <MX_USART2_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_USART2_UART_Init+0x4c>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <MX_USART2_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_USART2_UART_Init+0x4c>)
 8001596:	220c      	movs	r2, #12
 8001598:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <MX_USART2_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <MX_USART2_UART_Init+0x4c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_USART2_UART_Init+0x4c>)
 80015a8:	f003 fd4e 	bl	8005048 <HAL_UART_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015b2:	f000 f89d 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000338 	.word	0x20000338
 80015c0:	40004400 	.word	0x40004400

080015c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <MX_DMA_Init+0x3c>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <MX_DMA_Init+0x3c>)
 80015d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <MX_DMA_Init+0x3c>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	2038      	movs	r0, #56	; 0x38
 80015ec:	f001 f90b 	bl	8002806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015f0:	2038      	movs	r0, #56	; 0x38
 80015f2:	f001 f924 	bl	800283e <HAL_NVIC_EnableIRQ>

}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800

08001604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	4b31      	ldr	r3, [pc, #196]	; (80016e4 <MX_GPIO_Init+0xe0>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a30      	ldr	r2, [pc, #192]	; (80016e4 <MX_GPIO_Init+0xe0>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b2e      	ldr	r3, [pc, #184]	; (80016e4 <MX_GPIO_Init+0xe0>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b2a      	ldr	r3, [pc, #168]	; (80016e4 <MX_GPIO_Init+0xe0>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a29      	ldr	r2, [pc, #164]	; (80016e4 <MX_GPIO_Init+0xe0>)
 8001640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b27      	ldr	r3, [pc, #156]	; (80016e4 <MX_GPIO_Init+0xe0>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <MX_GPIO_Init+0xe0>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a22      	ldr	r2, [pc, #136]	; (80016e4 <MX_GPIO_Init+0xe0>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <MX_GPIO_Init+0xe0>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <MX_GPIO_Init+0xe0>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a1b      	ldr	r2, [pc, #108]	; (80016e4 <MX_GPIO_Init+0xe0>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <MX_GPIO_Init+0xe0>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	2120      	movs	r1, #32
 800168e:	4816      	ldr	r0, [pc, #88]	; (80016e8 <MX_GPIO_Init+0xe4>)
 8001690:	f001 fdfc 	bl	800328c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800169a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800169e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	4810      	ldr	r0, [pc, #64]	; (80016ec <MX_GPIO_Init+0xe8>)
 80016ac:	f001 fc52 	bl	8002f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016b0:	2320      	movs	r3, #32
 80016b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	4808      	ldr	r0, [pc, #32]	; (80016e8 <MX_GPIO_Init+0xe4>)
 80016c8:	f001 fc44 	bl	8002f54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2100      	movs	r1, #0
 80016d0:	2028      	movs	r0, #40	; 0x28
 80016d2:	f001 f898 	bl	8002806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016d6:	2028      	movs	r0, #40	; 0x28
 80016d8:	f001 f8b1 	bl	800283e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016dc:	bf00      	nop
 80016de:	3728      	adds	r7, #40	; 0x28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020000 	.word	0x40020000
 80016ec:	40020800 	.word	0x40020800

080016f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f4:	b672      	cpsid	i
}
 80016f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <Error_Handler+0x8>
	...

080016fc <__io_putchar>:
 */
#include "main.h"

extern UART_HandleTypeDef huart2;

int __io_putchar(int ch) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 10/*ms*/);
 8001704:	1d39      	adds	r1, r7, #4
 8001706:	230a      	movs	r3, #10
 8001708:	2201      	movs	r2, #1
 800170a:	4804      	ldr	r0, [pc, #16]	; (800171c <__io_putchar+0x20>)
 800170c:	f003 fcec 	bl	80050e8 <HAL_UART_Transmit>
	return ch;
 8001710:	687b      	ldr	r3, [r7, #4]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000338 	.word	0x20000338

08001720 <standby>:
void standby() {
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8001724:	bf00      	nop
 8001726:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800172a:	4804      	ldr	r0, [pc, #16]	; (800173c <standby+0x1c>)
 800172c:	f001 fd96 	bl	800325c <HAL_GPIO_ReadPin>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f7      	bne.n	8001726 <standby+0x6>
		;
}
 8001736:	bf00      	nop
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40020800 	.word	0x40020800

08001740 <cls>:
void cls()				   // 화면 clear
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	printf("\033[2J");
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <cls+0x10>)
 8001746:	f004 ffc3 	bl	80066d0 <iprintf>
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	0800a140 	.word	0x0800a140

08001754 <cursor>:
void cursor(int x, int y)  // 해당 위치로 커서 이동
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
	char buf[20];
	sprintf(buf, "\033[%d;%dH", y, x);
 800175e:	f107 000c 	add.w	r0, r7, #12
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	4906      	ldr	r1, [pc, #24]	; (8001780 <cursor+0x2c>)
 8001768:	f005 f820 	bl	80067ac <siprintf>
	puts(buf);
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	4618      	mov	r0, r3
 8001772:	f005 f813 	bl	800679c <puts>
}
 8001776:	bf00      	nop
 8001778:	3720      	adds	r7, #32
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	0800a148 	.word	0x0800a148

08001784 <ProgramStart>:
void ProgramStart(char *str)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
//	printf("\033[2J\033[0;0H");
	cls();
 800178c:	f7ff ffd8 	bl	8001740 <cls>
	cursor(0,0);
 8001790:	2100      	movs	r1, #0
 8001792:	2000      	movs	r0, #0
 8001794:	f7ff ffde 	bl	8001754 <cursor>
	printf("program Name - %s\r\n", str);
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	4806      	ldr	r0, [pc, #24]	; (80017b4 <ProgramStart+0x30>)
 800179c:	f004 ff98 	bl	80066d0 <iprintf>
	printf("Press Blue-button(B1) to Start...\r\n");
 80017a0:	4805      	ldr	r0, [pc, #20]	; (80017b8 <ProgramStart+0x34>)
 80017a2:	f004 fffb 	bl	800679c <puts>
	standby();
 80017a6:	f7ff ffbb 	bl	8001720 <standby>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	0800a154 	.word	0x0800a154
 80017b8:	0800a168 	.word	0x0800a168

080017bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <HAL_MspInit+0x4c>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	4a0f      	ldr	r2, [pc, #60]	; (8001808 <HAL_MspInit+0x4c>)
 80017cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d0:	6453      	str	r3, [r2, #68]	; 0x44
 80017d2:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <HAL_MspInit+0x4c>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	603b      	str	r3, [r7, #0]
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_MspInit+0x4c>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	4a08      	ldr	r2, [pc, #32]	; (8001808 <HAL_MspInit+0x4c>)
 80017e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ec:	6413      	str	r3, [r2, #64]	; 0x40
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_MspInit+0x4c>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017fa:	2007      	movs	r0, #7
 80017fc:	f000 fff8 	bl	80027f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40023800 	.word	0x40023800

0800180c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	; 0x28
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a2f      	ldr	r2, [pc, #188]	; (80018e8 <HAL_ADC_MspInit+0xdc>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d157      	bne.n	80018de <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	4b2e      	ldr	r3, [pc, #184]	; (80018ec <HAL_ADC_MspInit+0xe0>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	4a2d      	ldr	r2, [pc, #180]	; (80018ec <HAL_ADC_MspInit+0xe0>)
 8001838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183c:	6453      	str	r3, [r2, #68]	; 0x44
 800183e:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <HAL_ADC_MspInit+0xe0>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b27      	ldr	r3, [pc, #156]	; (80018ec <HAL_ADC_MspInit+0xe0>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a26      	ldr	r2, [pc, #152]	; (80018ec <HAL_ADC_MspInit+0xe0>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b24      	ldr	r3, [pc, #144]	; (80018ec <HAL_ADC_MspInit+0xe0>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001866:	2303      	movs	r3, #3
 8001868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800186a:	2303      	movs	r3, #3
 800186c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	481d      	ldr	r0, [pc, #116]	; (80018f0 <HAL_ADC_MspInit+0xe4>)
 800187a:	f001 fb6b 	bl	8002f54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800187e:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <HAL_ADC_MspInit+0xe8>)
 8001880:	4a1d      	ldr	r2, [pc, #116]	; (80018f8 <HAL_ADC_MspInit+0xec>)
 8001882:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001884:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <HAL_ADC_MspInit+0xe8>)
 8001886:	2200      	movs	r2, #0
 8001888:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800188a:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <HAL_ADC_MspInit+0xe8>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001890:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <HAL_ADC_MspInit+0xe8>)
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <HAL_ADC_MspInit+0xe8>)
 8001898:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800189c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800189e:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <HAL_ADC_MspInit+0xe8>)
 80018a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018a4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018a6:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <HAL_ADC_MspInit+0xe8>)
 80018a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <HAL_ADC_MspInit+0xe8>)
 80018b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018b4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018b6:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <HAL_ADC_MspInit+0xe8>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018bc:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <HAL_ADC_MspInit+0xe8>)
 80018be:	2200      	movs	r2, #0
 80018c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018c2:	480c      	ldr	r0, [pc, #48]	; (80018f4 <HAL_ADC_MspInit+0xe8>)
 80018c4:	f000 ffd6 	bl	8002874 <HAL_DMA_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80018ce:	f7ff ff0f 	bl	80016f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <HAL_ADC_MspInit+0xe8>)
 80018d6:	639a      	str	r2, [r3, #56]	; 0x38
 80018d8:	4a06      	ldr	r2, [pc, #24]	; (80018f4 <HAL_ADC_MspInit+0xe8>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018de:	bf00      	nop
 80018e0:	3728      	adds	r7, #40	; 0x28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40012000 	.word	0x40012000
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40020000 	.word	0x40020000
 80018f4:	2000023c 	.word	0x2000023c
 80018f8:	40026410 	.word	0x40026410

080018fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a22      	ldr	r2, [pc, #136]	; (80019a4 <HAL_I2C_MspInit+0xa8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d13d      	bne.n	800199a <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <HAL_I2C_MspInit+0xac>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a20      	ldr	r2, [pc, #128]	; (80019a8 <HAL_I2C_MspInit+0xac>)
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <HAL_I2C_MspInit+0xac>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800193a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800193e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001940:	2312      	movs	r3, #18
 8001942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800194c:	2304      	movs	r3, #4
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4619      	mov	r1, r3
 8001956:	4815      	ldr	r0, [pc, #84]	; (80019ac <HAL_I2C_MspInit+0xb0>)
 8001958:	f001 fafc 	bl	8002f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800195c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001962:	2312      	movs	r3, #18
 8001964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196a:	2303      	movs	r3, #3
 800196c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800196e:	2309      	movs	r3, #9
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	480c      	ldr	r0, [pc, #48]	; (80019ac <HAL_I2C_MspInit+0xb0>)
 800197a:	f001 faeb 	bl	8002f54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_I2C_MspInit+0xac>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	4a08      	ldr	r2, [pc, #32]	; (80019a8 <HAL_I2C_MspInit+0xac>)
 8001988:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800198c:	6413      	str	r3, [r2, #64]	; 0x40
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_I2C_MspInit+0xac>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800199a:	bf00      	nop
 800199c:	3728      	adds	r7, #40	; 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40005800 	.word	0x40005800
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020400 	.word	0x40020400

080019b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0e      	ldr	r2, [pc, #56]	; (80019f8 <HAL_TIM_Base_MspInit+0x48>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d115      	bne.n	80019ee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <HAL_TIM_Base_MspInit+0x4c>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <HAL_TIM_Base_MspInit+0x4c>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	6413      	str	r3, [r2, #64]	; 0x40
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_TIM_Base_MspInit+0x4c>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	201d      	movs	r0, #29
 80019e4:	f000 ff0f 	bl	8002806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019e8:	201d      	movs	r0, #29
 80019ea:	f000 ff28 	bl	800283e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40000400 	.word	0x40000400
 80019fc:	40023800 	.word	0x40023800

08001a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	; 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a19      	ldr	r2, [pc, #100]	; (8001a84 <HAL_UART_MspInit+0x84>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d12b      	bne.n	8001a7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <HAL_UART_MspInit+0x88>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	4a17      	ldr	r2, [pc, #92]	; (8001a88 <HAL_UART_MspInit+0x88>)
 8001a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a30:	6413      	str	r3, [r2, #64]	; 0x40
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <HAL_UART_MspInit+0x88>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <HAL_UART_MspInit+0x88>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a10      	ldr	r2, [pc, #64]	; (8001a88 <HAL_UART_MspInit+0x88>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <HAL_UART_MspInit+0x88>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a5a:	230c      	movs	r3, #12
 8001a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a66:	2303      	movs	r3, #3
 8001a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a6a:	2307      	movs	r3, #7
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	4619      	mov	r1, r3
 8001a74:	4805      	ldr	r0, [pc, #20]	; (8001a8c <HAL_UART_MspInit+0x8c>)
 8001a76:	f001 fa6d 	bl	8002f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a7a:	bf00      	nop
 8001a7c:	3728      	adds	r7, #40	; 0x28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40004400 	.word	0x40004400
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020000 	.word	0x40020000

08001a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a94:	e7fe      	b.n	8001a94 <NMI_Handler+0x4>

08001a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9a:	e7fe      	b.n	8001a9a <HardFault_Handler+0x4>

08001a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <MemManage_Handler+0x4>

08001aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa6:	e7fe      	b.n	8001aa6 <BusFault_Handler+0x4>

08001aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <UsageFault_Handler+0x4>

08001aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001adc:	f000 f972 	bl	8001dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <TIM3_IRQHandler+0x10>)
 8001aea:	f002 ff1b 	bl	8004924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200002f0 	.word	0x200002f0

08001af8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001afc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b00:	f001 fbde 	bl	80032c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <DMA2_Stream0_IRQHandler+0x10>)
 8001b0e:	f000 ffb7 	bl	8002a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	2000023c 	.word	0x2000023c

08001b1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return 1;
 8001b20:	2301      	movs	r3, #1
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <_kill>:

int _kill(int pid, int sig)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b36:	f004 ff83 	bl	8006a40 <__errno>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2216      	movs	r2, #22
 8001b3e:	601a      	str	r2, [r3, #0]
  return -1;
 8001b40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <_exit>:

void _exit (int status)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b54:	f04f 31ff 	mov.w	r1, #4294967295
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ffe7 	bl	8001b2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b5e:	e7fe      	b.n	8001b5e <_exit+0x12>

08001b60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	e00a      	b.n	8001b88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b72:	f3af 8000 	nop.w
 8001b76:	4601      	mov	r1, r0
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	60ba      	str	r2, [r7, #8]
 8001b7e:	b2ca      	uxtb	r2, r1
 8001b80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	3301      	adds	r3, #1
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	dbf0      	blt.n	8001b72 <_read+0x12>
  }

  return len;
 8001b90:	687b      	ldr	r3, [r7, #4]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	e009      	b.n	8001bc0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	60ba      	str	r2, [r7, #8]
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fda1 	bl	80016fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	dbf1      	blt.n	8001bac <_write+0x12>
  }
  return len;
 8001bc8:	687b      	ldr	r3, [r7, #4]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <_close>:

int _close(int file)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bfa:	605a      	str	r2, [r3, #4]
  return 0;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <_isatty>:

int _isatty(int file)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c12:	2301      	movs	r3, #1
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c44:	4a14      	ldr	r2, [pc, #80]	; (8001c98 <_sbrk+0x5c>)
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <_sbrk+0x60>)
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <_sbrk+0x64>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d102      	bne.n	8001c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <_sbrk+0x64>)
 8001c5a:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <_sbrk+0x68>)
 8001c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <_sbrk+0x64>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d207      	bcs.n	8001c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c6c:	f004 fee8 	bl	8006a40 <__errno>
 8001c70:	4603      	mov	r3, r0
 8001c72:	220c      	movs	r2, #12
 8001c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7a:	e009      	b.n	8001c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <_sbrk+0x64>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	4a05      	ldr	r2, [pc, #20]	; (8001ca0 <_sbrk+0x64>)
 8001c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20020000 	.word	0x20020000
 8001c9c:	00000400 	.word	0x00000400
 8001ca0:	20000384 	.word	0x20000384
 8001ca4:	200004d8 	.word	0x200004d8

08001ca8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <SystemInit+0x20>)
 8001cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb2:	4a05      	ldr	r2, [pc, #20]	; (8001cc8 <SystemInit+0x20>)
 8001cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cd0:	f7ff ffea 	bl	8001ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cd4:	480c      	ldr	r0, [pc, #48]	; (8001d08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cd6:	490d      	ldr	r1, [pc, #52]	; (8001d0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	; (8001d10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cdc:	e002      	b.n	8001ce4 <LoopCopyDataInit>

08001cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce2:	3304      	adds	r3, #4

08001ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce8:	d3f9      	bcc.n	8001cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cea:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cec:	4c0a      	ldr	r4, [pc, #40]	; (8001d18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf0:	e001      	b.n	8001cf6 <LoopFillZerobss>

08001cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf4:	3204      	adds	r2, #4

08001cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf8:	d3fb      	bcc.n	8001cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cfa:	f004 fea7 	bl	8006a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cfe:	f7ff fa6f 	bl	80011e0 <main>
  bx  lr    
 8001d02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d0c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001d10:	0800a5e8 	.word	0x0800a5e8
  ldr r2, =_sbss
 8001d14:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001d18:	200004d8 	.word	0x200004d8

08001d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d1c:	e7fe      	b.n	8001d1c <ADC_IRQHandler>
	...

08001d20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d24:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <HAL_Init+0x40>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0d      	ldr	r2, [pc, #52]	; (8001d60 <HAL_Init+0x40>)
 8001d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_Init+0x40>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <HAL_Init+0x40>)
 8001d36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <HAL_Init+0x40>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a07      	ldr	r2, [pc, #28]	; (8001d60 <HAL_Init+0x40>)
 8001d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d48:	2003      	movs	r0, #3
 8001d4a:	f000 fd51 	bl	80027f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f000 f808 	bl	8001d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d54:	f7ff fd32 	bl	80017bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40023c00 	.word	0x40023c00

08001d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_InitTick+0x54>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <HAL_InitTick+0x58>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	4619      	mov	r1, r3
 8001d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 fd69 	bl	800285a <HAL_SYSTICK_Config>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e00e      	b.n	8001db0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b0f      	cmp	r3, #15
 8001d96:	d80a      	bhi.n	8001dae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001da0:	f000 fd31 	bl	8002806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001da4:	4a06      	ldr	r2, [pc, #24]	; (8001dc0 <HAL_InitTick+0x5c>)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	e000      	b.n	8001db0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	20000008 	.word	0x20000008
 8001dc0:	20000004 	.word	0x20000004

08001dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_IncTick+0x20>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_IncTick+0x24>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <HAL_IncTick+0x24>)
 8001dd6:	6013      	str	r3, [r2, #0]
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	20000008 	.word	0x20000008
 8001de8:	20000388 	.word	0x20000388

08001dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return uwTick;
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <HAL_GetTick+0x14>)
 8001df2:	681b      	ldr	r3, [r3, #0]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	20000388 	.word	0x20000388

08001e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e0c:	f7ff ffee 	bl	8001dec <HAL_GetTick>
 8001e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1c:	d005      	beq.n	8001e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <HAL_Delay+0x44>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	461a      	mov	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4413      	add	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e2a:	bf00      	nop
 8001e2c:	f7ff ffde 	bl	8001dec <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d8f7      	bhi.n	8001e2c <HAL_Delay+0x28>
  {
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000008 	.word	0x20000008

08001e4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e033      	b.n	8001eca <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d109      	bne.n	8001e7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff fcce 	bl	800180c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f003 0310 	and.w	r3, r3, #16
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d118      	bne.n	8001ebc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e92:	f023 0302 	bic.w	r3, r3, #2
 8001e96:	f043 0202 	orr.w	r2, r3, #2
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 fa58 	bl	8002354 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f023 0303 	bic.w	r3, r3, #3
 8001eb2:	f043 0201 	orr.w	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	641a      	str	r2, [r3, #64]	; 0x40
 8001eba:	e001      	b.n	8001ec0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d101      	bne.n	8001ef2 <HAL_ADC_Start_DMA+0x1e>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e0ce      	b.n	8002090 <HAL_ADC_Start_DMA+0x1bc>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d018      	beq.n	8001f3a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0201 	orr.w	r2, r2, #1
 8001f16:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f18:	4b5f      	ldr	r3, [pc, #380]	; (8002098 <HAL_ADC_Start_DMA+0x1c4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a5f      	ldr	r2, [pc, #380]	; (800209c <HAL_ADC_Start_DMA+0x1c8>)
 8001f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f22:	0c9a      	lsrs	r2, r3, #18
 8001f24:	4613      	mov	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4413      	add	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001f2c:	e002      	b.n	8001f34 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f9      	bne.n	8001f2e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f48:	d107      	bne.n	8001f5a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f58:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	f040 8086 	bne.w	8002076 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f72:	f023 0301 	bic.w	r3, r3, #1
 8001f76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d007      	beq.n	8001f9c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fa8:	d106      	bne.n	8001fb8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	f023 0206 	bic.w	r2, r3, #6
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	645a      	str	r2, [r3, #68]	; 0x44
 8001fb6:	e002      	b.n	8001fbe <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fc6:	4b36      	ldr	r3, [pc, #216]	; (80020a0 <HAL_ADC_Start_DMA+0x1cc>)
 8001fc8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fce:	4a35      	ldr	r2, [pc, #212]	; (80020a4 <HAL_ADC_Start_DMA+0x1d0>)
 8001fd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd6:	4a34      	ldr	r2, [pc, #208]	; (80020a8 <HAL_ADC_Start_DMA+0x1d4>)
 8001fd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fde:	4a33      	ldr	r2, [pc, #204]	; (80020ac <HAL_ADC_Start_DMA+0x1d8>)
 8001fe0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001fea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001ffa:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800200a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	334c      	adds	r3, #76	; 0x4c
 8002016:	4619      	mov	r1, r3
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f000 fcd8 	bl	80029d0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 031f 	and.w	r3, r3, #31
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10f      	bne.n	800204c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d129      	bne.n	800208e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002048:	609a      	str	r2, [r3, #8]
 800204a:	e020      	b.n	800208e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a17      	ldr	r2, [pc, #92]	; (80020b0 <HAL_ADC_Start_DMA+0x1dc>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d11b      	bne.n	800208e <HAL_ADC_Start_DMA+0x1ba>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d114      	bne.n	800208e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	e00b      	b.n	800208e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f043 0210 	orr.w	r2, r3, #16
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	f043 0201 	orr.w	r2, r3, #1
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000000 	.word	0x20000000
 800209c:	431bde83 	.word	0x431bde83
 80020a0:	40012300 	.word	0x40012300
 80020a4:	0800254d 	.word	0x0800254d
 80020a8:	08002607 	.word	0x08002607
 80020ac:	08002623 	.word	0x08002623
 80020b0:	40012000 	.word	0x40012000

080020b4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_ADC_ConfigChannel+0x1c>
 8002108:	2302      	movs	r3, #2
 800210a:	e113      	b.n	8002334 <HAL_ADC_ConfigChannel+0x244>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b09      	cmp	r3, #9
 800211a:	d925      	bls.n	8002168 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68d9      	ldr	r1, [r3, #12]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	b29b      	uxth	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	4613      	mov	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	3b1e      	subs	r3, #30
 8002132:	2207      	movs	r2, #7
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43da      	mvns	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	400a      	ands	r2, r1
 8002140:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68d9      	ldr	r1, [r3, #12]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	b29b      	uxth	r3, r3
 8002152:	4618      	mov	r0, r3
 8002154:	4603      	mov	r3, r0
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	4403      	add	r3, r0
 800215a:	3b1e      	subs	r3, #30
 800215c:	409a      	lsls	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	e022      	b.n	80021ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6919      	ldr	r1, [r3, #16]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	4613      	mov	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	4413      	add	r3, r2
 800217c:	2207      	movs	r2, #7
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43da      	mvns	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	400a      	ands	r2, r1
 800218a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6919      	ldr	r1, [r3, #16]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	b29b      	uxth	r3, r3
 800219c:	4618      	mov	r0, r3
 800219e:	4603      	mov	r3, r0
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4403      	add	r3, r0
 80021a4:	409a      	lsls	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d824      	bhi.n	8002200 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	3b05      	subs	r3, #5
 80021c8:	221f      	movs	r2, #31
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	400a      	ands	r2, r1
 80021d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	4618      	mov	r0, r3
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3b05      	subs	r3, #5
 80021f2:	fa00 f203 	lsl.w	r2, r0, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	635a      	str	r2, [r3, #52]	; 0x34
 80021fe:	e04c      	b.n	800229a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b0c      	cmp	r3, #12
 8002206:	d824      	bhi.n	8002252 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	3b23      	subs	r3, #35	; 0x23
 800221a:	221f      	movs	r2, #31
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43da      	mvns	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	400a      	ands	r2, r1
 8002228:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	b29b      	uxth	r3, r3
 8002236:	4618      	mov	r0, r3
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	3b23      	subs	r3, #35	; 0x23
 8002244:	fa00 f203 	lsl.w	r2, r0, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	631a      	str	r2, [r3, #48]	; 0x30
 8002250:	e023      	b.n	800229a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	3b41      	subs	r3, #65	; 0x41
 8002264:	221f      	movs	r2, #31
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43da      	mvns	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	400a      	ands	r2, r1
 8002272:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	b29b      	uxth	r3, r3
 8002280:	4618      	mov	r0, r3
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	3b41      	subs	r3, #65	; 0x41
 800228e:	fa00 f203 	lsl.w	r2, r0, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800229a:	4b29      	ldr	r3, [pc, #164]	; (8002340 <HAL_ADC_ConfigChannel+0x250>)
 800229c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a28      	ldr	r2, [pc, #160]	; (8002344 <HAL_ADC_ConfigChannel+0x254>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d10f      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x1d8>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b12      	cmp	r3, #18
 80022ae:	d10b      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a1d      	ldr	r2, [pc, #116]	; (8002344 <HAL_ADC_ConfigChannel+0x254>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d12b      	bne.n	800232a <HAL_ADC_ConfigChannel+0x23a>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a1c      	ldr	r2, [pc, #112]	; (8002348 <HAL_ADC_ConfigChannel+0x258>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d003      	beq.n	80022e4 <HAL_ADC_ConfigChannel+0x1f4>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b11      	cmp	r3, #17
 80022e2:	d122      	bne.n	800232a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a11      	ldr	r2, [pc, #68]	; (8002348 <HAL_ADC_ConfigChannel+0x258>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d111      	bne.n	800232a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <HAL_ADC_ConfigChannel+0x25c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a11      	ldr	r2, [pc, #68]	; (8002350 <HAL_ADC_ConfigChannel+0x260>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	0c9a      	lsrs	r2, r3, #18
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800231c:	e002      	b.n	8002324 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	3b01      	subs	r3, #1
 8002322:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f9      	bne.n	800231e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	40012300 	.word	0x40012300
 8002344:	40012000 	.word	0x40012000
 8002348:	10000012 	.word	0x10000012
 800234c:	20000000 	.word	0x20000000
 8002350:	431bde83 	.word	0x431bde83

08002354 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800235c:	4b79      	ldr	r3, [pc, #484]	; (8002544 <ADC_Init+0x1f0>)
 800235e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	431a      	orrs	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002388:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6859      	ldr	r1, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	021a      	lsls	r2, r3, #8
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6859      	ldr	r1, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6899      	ldr	r1, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e6:	4a58      	ldr	r2, [pc, #352]	; (8002548 <ADC_Init+0x1f4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d022      	beq.n	8002432 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6899      	ldr	r1, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800241c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6899      	ldr	r1, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	e00f      	b.n	8002452 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002440:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002450:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0202 	bic.w	r2, r2, #2
 8002460:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6899      	ldr	r1, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	7e1b      	ldrb	r3, [r3, #24]
 800246c:	005a      	lsls	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3020 	ldrb.w	r3, [r3, #32]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d01b      	beq.n	80024b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800248e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800249e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6859      	ldr	r1, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	3b01      	subs	r3, #1
 80024ac:	035a      	lsls	r2, r3, #13
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	e007      	b.n	80024c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024c6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	051a      	lsls	r2, r3, #20
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6899      	ldr	r1, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800250a:	025a      	lsls	r2, r3, #9
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002522:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6899      	ldr	r1, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	029a      	lsls	r2, r3, #10
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	609a      	str	r2, [r3, #8]
}
 8002538:	bf00      	nop
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	40012300 	.word	0x40012300
 8002548:	0f000001 	.word	0x0f000001

0800254c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002558:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002562:	2b00      	cmp	r3, #0
 8002564:	d13c      	bne.n	80025e0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d12b      	bne.n	80025d8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002584:	2b00      	cmp	r3, #0
 8002586:	d127      	bne.n	80025d8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002592:	2b00      	cmp	r3, #0
 8002594:	d006      	beq.n	80025a4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d119      	bne.n	80025d8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0220 	bic.w	r2, r2, #32
 80025b2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d105      	bne.n	80025d8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	f043 0201 	orr.w	r2, r3, #1
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f7ff fd6b 	bl	80020b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80025de:	e00e      	b.n	80025fe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f7ff fd75 	bl	80020dc <HAL_ADC_ErrorCallback>
}
 80025f2:	e004      	b.n	80025fe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	4798      	blx	r3
}
 80025fe:	bf00      	nop
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b084      	sub	sp, #16
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002612:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f7ff fd57 	bl	80020c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b084      	sub	sp, #16
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2240      	movs	r2, #64	; 0x40
 8002634:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	f043 0204 	orr.w	r2, r3, #4
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f7ff fd4a 	bl	80020dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002648:	bf00      	nop
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <__NVIC_SetPriorityGrouping+0x44>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800266c:	4013      	ands	r3, r2
 800266e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800267c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002682:	4a04      	ldr	r2, [pc, #16]	; (8002694 <__NVIC_SetPriorityGrouping+0x44>)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	60d3      	str	r3, [r2, #12]
}
 8002688:	bf00      	nop
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800269c:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <__NVIC_GetPriorityGrouping+0x18>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	0a1b      	lsrs	r3, r3, #8
 80026a2:	f003 0307 	and.w	r3, r3, #7
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	db0b      	blt.n	80026de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	f003 021f 	and.w	r2, r3, #31
 80026cc:	4907      	ldr	r1, [pc, #28]	; (80026ec <__NVIC_EnableIRQ+0x38>)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	2001      	movs	r0, #1
 80026d6:	fa00 f202 	lsl.w	r2, r0, r2
 80026da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	e000e100 	.word	0xe000e100

080026f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	6039      	str	r1, [r7, #0]
 80026fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002700:	2b00      	cmp	r3, #0
 8002702:	db0a      	blt.n	800271a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	b2da      	uxtb	r2, r3
 8002708:	490c      	ldr	r1, [pc, #48]	; (800273c <__NVIC_SetPriority+0x4c>)
 800270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270e:	0112      	lsls	r2, r2, #4
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	440b      	add	r3, r1
 8002714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002718:	e00a      	b.n	8002730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	b2da      	uxtb	r2, r3
 800271e:	4908      	ldr	r1, [pc, #32]	; (8002740 <__NVIC_SetPriority+0x50>)
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	3b04      	subs	r3, #4
 8002728:	0112      	lsls	r2, r2, #4
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	440b      	add	r3, r1
 800272e:	761a      	strb	r2, [r3, #24]
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	e000e100 	.word	0xe000e100
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002744:	b480      	push	{r7}
 8002746:	b089      	sub	sp, #36	; 0x24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f1c3 0307 	rsb	r3, r3, #7
 800275e:	2b04      	cmp	r3, #4
 8002760:	bf28      	it	cs
 8002762:	2304      	movcs	r3, #4
 8002764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3304      	adds	r3, #4
 800276a:	2b06      	cmp	r3, #6
 800276c:	d902      	bls.n	8002774 <NVIC_EncodePriority+0x30>
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	3b03      	subs	r3, #3
 8002772:	e000      	b.n	8002776 <NVIC_EncodePriority+0x32>
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002778:	f04f 32ff 	mov.w	r2, #4294967295
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43da      	mvns	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	401a      	ands	r2, r3
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800278c:	f04f 31ff 	mov.w	r1, #4294967295
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	fa01 f303 	lsl.w	r3, r1, r3
 8002796:	43d9      	mvns	r1, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800279c:	4313      	orrs	r3, r2
         );
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3724      	adds	r7, #36	; 0x24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
	...

080027ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027bc:	d301      	bcc.n	80027c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027be:	2301      	movs	r3, #1
 80027c0:	e00f      	b.n	80027e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027c2:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <SysTick_Config+0x40>)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ca:	210f      	movs	r1, #15
 80027cc:	f04f 30ff 	mov.w	r0, #4294967295
 80027d0:	f7ff ff8e 	bl	80026f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <SysTick_Config+0x40>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027da:	4b04      	ldr	r3, [pc, #16]	; (80027ec <SysTick_Config+0x40>)
 80027dc:	2207      	movs	r2, #7
 80027de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	e000e010 	.word	0xe000e010

080027f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff ff29 	bl	8002650 <__NVIC_SetPriorityGrouping>
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002806:	b580      	push	{r7, lr}
 8002808:	b086      	sub	sp, #24
 800280a:	af00      	add	r7, sp, #0
 800280c:	4603      	mov	r3, r0
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
 8002812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002818:	f7ff ff3e 	bl	8002698 <__NVIC_GetPriorityGrouping>
 800281c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	6978      	ldr	r0, [r7, #20]
 8002824:	f7ff ff8e 	bl	8002744 <NVIC_EncodePriority>
 8002828:	4602      	mov	r2, r0
 800282a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800282e:	4611      	mov	r1, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff5d 	bl	80026f0 <__NVIC_SetPriority>
}
 8002836:	bf00      	nop
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	4603      	mov	r3, r0
 8002846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff31 	bl	80026b4 <__NVIC_EnableIRQ>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff ffa2 	bl	80027ac <SysTick_Config>
 8002868:	4603      	mov	r3, r0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002880:	f7ff fab4 	bl	8001dec <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e099      	b.n	80029c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0201 	bic.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028b0:	e00f      	b.n	80028d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028b2:	f7ff fa9b 	bl	8001dec <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b05      	cmp	r3, #5
 80028be:	d908      	bls.n	80028d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2220      	movs	r2, #32
 80028c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2203      	movs	r2, #3
 80028ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e078      	b.n	80029c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1e8      	bne.n	80028b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	4b38      	ldr	r3, [pc, #224]	; (80029cc <HAL_DMA_Init+0x158>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800290a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002916:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	4313      	orrs	r3, r2
 8002922:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	2b04      	cmp	r3, #4
 800292a:	d107      	bne.n	800293c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	4313      	orrs	r3, r2
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4313      	orrs	r3, r2
 800293a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f023 0307 	bic.w	r3, r3, #7
 8002952:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	4313      	orrs	r3, r2
 800295c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	2b04      	cmp	r3, #4
 8002964:	d117      	bne.n	8002996 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	4313      	orrs	r3, r2
 800296e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00e      	beq.n	8002996 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 fa6f 	bl	8002e5c <DMA_CheckFifoParam>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2240      	movs	r2, #64	; 0x40
 8002988:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002992:	2301      	movs	r3, #1
 8002994:	e016      	b.n	80029c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 fa26 	bl	8002df0 <DMA_CalcBaseAndBitshift>
 80029a4:	4603      	mov	r3, r0
 80029a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ac:	223f      	movs	r2, #63	; 0x3f
 80029ae:	409a      	lsls	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	f010803f 	.word	0xf010803f

080029d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_DMA_Start_IT+0x26>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e040      	b.n	8002a78 <HAL_DMA_Start_IT+0xa8>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d12f      	bne.n	8002a6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f9b8 	bl	8002d94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a28:	223f      	movs	r2, #63	; 0x3f
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0216 	orr.w	r2, r2, #22
 8002a3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d007      	beq.n	8002a58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0208 	orr.w	r2, r2, #8
 8002a56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	e005      	b.n	8002a76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a72:	2302      	movs	r3, #2
 8002a74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a8c:	4b8e      	ldr	r3, [pc, #568]	; (8002cc8 <HAL_DMA_IRQHandler+0x248>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a8e      	ldr	r2, [pc, #568]	; (8002ccc <HAL_DMA_IRQHandler+0x24c>)
 8002a92:	fba2 2303 	umull	r2, r3, r2, r3
 8002a96:	0a9b      	lsrs	r3, r3, #10
 8002a98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aaa:	2208      	movs	r2, #8
 8002aac:	409a      	lsls	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d01a      	beq.n	8002aec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d013      	beq.n	8002aec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0204 	bic.w	r2, r2, #4
 8002ad2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad8:	2208      	movs	r2, #8
 8002ada:	409a      	lsls	r2, r3
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae4:	f043 0201 	orr.w	r2, r3, #1
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af0:	2201      	movs	r2, #1
 8002af2:	409a      	lsls	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d012      	beq.n	8002b22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00b      	beq.n	8002b22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0e:	2201      	movs	r2, #1
 8002b10:	409a      	lsls	r2, r3
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1a:	f043 0202 	orr.w	r2, r3, #2
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b26:	2204      	movs	r2, #4
 8002b28:	409a      	lsls	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d012      	beq.n	8002b58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00b      	beq.n	8002b58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b44:	2204      	movs	r2, #4
 8002b46:	409a      	lsls	r2, r3
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b50:	f043 0204 	orr.w	r2, r3, #4
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5c:	2210      	movs	r2, #16
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4013      	ands	r3, r2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d043      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d03c      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7a:	2210      	movs	r2, #16
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d018      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d108      	bne.n	8002bb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d024      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	4798      	blx	r3
 8002bae:	e01f      	b.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d01b      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	4798      	blx	r3
 8002bc0:	e016      	b.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d107      	bne.n	8002be0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0208 	bic.w	r2, r2, #8
 8002bde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 808f 	beq.w	8002d20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 8087 	beq.w	8002d20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c16:	2220      	movs	r2, #32
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b05      	cmp	r3, #5
 8002c28:	d136      	bne.n	8002c98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0216 	bic.w	r2, r2, #22
 8002c38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695a      	ldr	r2, [r3, #20]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d103      	bne.n	8002c5a <HAL_DMA_IRQHandler+0x1da>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d007      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0208 	bic.w	r2, r2, #8
 8002c68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6e:	223f      	movs	r2, #63	; 0x3f
 8002c70:	409a      	lsls	r2, r3
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d07e      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	4798      	blx	r3
        }
        return;
 8002c96:	e079      	b.n	8002d8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d01d      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10d      	bne.n	8002cd0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d031      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	4798      	blx	r3
 8002cc4:	e02c      	b.n	8002d20 <HAL_DMA_IRQHandler+0x2a0>
 8002cc6:	bf00      	nop
 8002cc8:	20000000 	.word	0x20000000
 8002ccc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d023      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	4798      	blx	r3
 8002ce0:	e01e      	b.n	8002d20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10f      	bne.n	8002d10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0210 	bic.w	r2, r2, #16
 8002cfe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d032      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d022      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2205      	movs	r2, #5
 8002d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0201 	bic.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d307      	bcc.n	8002d68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f2      	bne.n	8002d4c <HAL_DMA_IRQHandler+0x2cc>
 8002d66:	e000      	b.n	8002d6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	4798      	blx	r3
 8002d8a:	e000      	b.n	8002d8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d8c:	bf00      	nop
    }
  }
}
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002db0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2b40      	cmp	r3, #64	; 0x40
 8002dc0:	d108      	bne.n	8002dd4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dd2:	e007      	b.n	8002de4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	60da      	str	r2, [r3, #12]
}
 8002de4:	bf00      	nop
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	3b10      	subs	r3, #16
 8002e00:	4a14      	ldr	r2, [pc, #80]	; (8002e54 <DMA_CalcBaseAndBitshift+0x64>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	091b      	lsrs	r3, r3, #4
 8002e08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e0a:	4a13      	ldr	r2, [pc, #76]	; (8002e58 <DMA_CalcBaseAndBitshift+0x68>)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4413      	add	r3, r2
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d909      	bls.n	8002e32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e26:	f023 0303 	bic.w	r3, r3, #3
 8002e2a:	1d1a      	adds	r2, r3, #4
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	659a      	str	r2, [r3, #88]	; 0x58
 8002e30:	e007      	b.n	8002e42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e3a:	f023 0303 	bic.w	r3, r3, #3
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	aaaaaaab 	.word	0xaaaaaaab
 8002e58:	0800a1a4 	.word	0x0800a1a4

08002e5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d11f      	bne.n	8002eb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d856      	bhi.n	8002f2a <DMA_CheckFifoParam+0xce>
 8002e7c:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <DMA_CheckFifoParam+0x28>)
 8002e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e82:	bf00      	nop
 8002e84:	08002e95 	.word	0x08002e95
 8002e88:	08002ea7 	.word	0x08002ea7
 8002e8c:	08002e95 	.word	0x08002e95
 8002e90:	08002f2b 	.word	0x08002f2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d046      	beq.n	8002f2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea4:	e043      	b.n	8002f2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002eae:	d140      	bne.n	8002f32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb4:	e03d      	b.n	8002f32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ebe:	d121      	bne.n	8002f04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d837      	bhi.n	8002f36 <DMA_CheckFifoParam+0xda>
 8002ec6:	a201      	add	r2, pc, #4	; (adr r2, 8002ecc <DMA_CheckFifoParam+0x70>)
 8002ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ecc:	08002edd 	.word	0x08002edd
 8002ed0:	08002ee3 	.word	0x08002ee3
 8002ed4:	08002edd 	.word	0x08002edd
 8002ed8:	08002ef5 	.word	0x08002ef5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
      break;
 8002ee0:	e030      	b.n	8002f44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d025      	beq.n	8002f3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef2:	e022      	b.n	8002f3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002efc:	d11f      	bne.n	8002f3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f02:	e01c      	b.n	8002f3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d903      	bls.n	8002f12 <DMA_CheckFifoParam+0xb6>
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d003      	beq.n	8002f18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f10:	e018      	b.n	8002f44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
      break;
 8002f16:	e015      	b.n	8002f44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00e      	beq.n	8002f42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
      break;
 8002f28:	e00b      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
      break;
 8002f2a:	bf00      	nop
 8002f2c:	e00a      	b.n	8002f44 <DMA_CheckFifoParam+0xe8>
      break;
 8002f2e:	bf00      	nop
 8002f30:	e008      	b.n	8002f44 <DMA_CheckFifoParam+0xe8>
      break;
 8002f32:	bf00      	nop
 8002f34:	e006      	b.n	8002f44 <DMA_CheckFifoParam+0xe8>
      break;
 8002f36:	bf00      	nop
 8002f38:	e004      	b.n	8002f44 <DMA_CheckFifoParam+0xe8>
      break;
 8002f3a:	bf00      	nop
 8002f3c:	e002      	b.n	8002f44 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f3e:	bf00      	nop
 8002f40:	e000      	b.n	8002f44 <DMA_CheckFifoParam+0xe8>
      break;
 8002f42:	bf00      	nop
    }
  } 
  
  return status; 
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop

08002f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b089      	sub	sp, #36	; 0x24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61fb      	str	r3, [r7, #28]
 8002f6e:	e159      	b.n	8003224 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f70:	2201      	movs	r2, #1
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4013      	ands	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	f040 8148 	bne.w	800321e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d005      	beq.n	8002fa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d130      	bne.n	8003008 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fdc:	2201      	movs	r2, #1
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	f003 0201 	and.w	r2, r3, #1
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	2b03      	cmp	r3, #3
 8003012:	d017      	beq.n	8003044 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	2203      	movs	r2, #3
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d123      	bne.n	8003098 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	08da      	lsrs	r2, r3, #3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3208      	adds	r2, #8
 8003058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800305c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	220f      	movs	r2, #15
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	08da      	lsrs	r2, r3, #3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3208      	adds	r2, #8
 8003092:	69b9      	ldr	r1, [r7, #24]
 8003094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	2203      	movs	r2, #3
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 0203 	and.w	r2, r3, #3
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80a2 	beq.w	800321e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	4b57      	ldr	r3, [pc, #348]	; (800323c <HAL_GPIO_Init+0x2e8>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	4a56      	ldr	r2, [pc, #344]	; (800323c <HAL_GPIO_Init+0x2e8>)
 80030e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e8:	6453      	str	r3, [r2, #68]	; 0x44
 80030ea:	4b54      	ldr	r3, [pc, #336]	; (800323c <HAL_GPIO_Init+0x2e8>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030f6:	4a52      	ldr	r2, [pc, #328]	; (8003240 <HAL_GPIO_Init+0x2ec>)
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	089b      	lsrs	r3, r3, #2
 80030fc:	3302      	adds	r3, #2
 80030fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	220f      	movs	r2, #15
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43db      	mvns	r3, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4013      	ands	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a49      	ldr	r2, [pc, #292]	; (8003244 <HAL_GPIO_Init+0x2f0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d019      	beq.n	8003156 <HAL_GPIO_Init+0x202>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a48      	ldr	r2, [pc, #288]	; (8003248 <HAL_GPIO_Init+0x2f4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d013      	beq.n	8003152 <HAL_GPIO_Init+0x1fe>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a47      	ldr	r2, [pc, #284]	; (800324c <HAL_GPIO_Init+0x2f8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00d      	beq.n	800314e <HAL_GPIO_Init+0x1fa>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a46      	ldr	r2, [pc, #280]	; (8003250 <HAL_GPIO_Init+0x2fc>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d007      	beq.n	800314a <HAL_GPIO_Init+0x1f6>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a45      	ldr	r2, [pc, #276]	; (8003254 <HAL_GPIO_Init+0x300>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d101      	bne.n	8003146 <HAL_GPIO_Init+0x1f2>
 8003142:	2304      	movs	r3, #4
 8003144:	e008      	b.n	8003158 <HAL_GPIO_Init+0x204>
 8003146:	2307      	movs	r3, #7
 8003148:	e006      	b.n	8003158 <HAL_GPIO_Init+0x204>
 800314a:	2303      	movs	r3, #3
 800314c:	e004      	b.n	8003158 <HAL_GPIO_Init+0x204>
 800314e:	2302      	movs	r3, #2
 8003150:	e002      	b.n	8003158 <HAL_GPIO_Init+0x204>
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <HAL_GPIO_Init+0x204>
 8003156:	2300      	movs	r3, #0
 8003158:	69fa      	ldr	r2, [r7, #28]
 800315a:	f002 0203 	and.w	r2, r2, #3
 800315e:	0092      	lsls	r2, r2, #2
 8003160:	4093      	lsls	r3, r2
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003168:	4935      	ldr	r1, [pc, #212]	; (8003240 <HAL_GPIO_Init+0x2ec>)
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	089b      	lsrs	r3, r3, #2
 800316e:	3302      	adds	r3, #2
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003176:	4b38      	ldr	r3, [pc, #224]	; (8003258 <HAL_GPIO_Init+0x304>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	43db      	mvns	r3, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4013      	ands	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800319a:	4a2f      	ldr	r2, [pc, #188]	; (8003258 <HAL_GPIO_Init+0x304>)
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031a0:	4b2d      	ldr	r3, [pc, #180]	; (8003258 <HAL_GPIO_Init+0x304>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031c4:	4a24      	ldr	r2, [pc, #144]	; (8003258 <HAL_GPIO_Init+0x304>)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031ca:	4b23      	ldr	r3, [pc, #140]	; (8003258 <HAL_GPIO_Init+0x304>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031ee:	4a1a      	ldr	r2, [pc, #104]	; (8003258 <HAL_GPIO_Init+0x304>)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031f4:	4b18      	ldr	r3, [pc, #96]	; (8003258 <HAL_GPIO_Init+0x304>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003218:	4a0f      	ldr	r2, [pc, #60]	; (8003258 <HAL_GPIO_Init+0x304>)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3301      	adds	r3, #1
 8003222:	61fb      	str	r3, [r7, #28]
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	2b0f      	cmp	r3, #15
 8003228:	f67f aea2 	bls.w	8002f70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800322c:	bf00      	nop
 800322e:	bf00      	nop
 8003230:	3724      	adds	r7, #36	; 0x24
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40023800 	.word	0x40023800
 8003240:	40013800 	.word	0x40013800
 8003244:	40020000 	.word	0x40020000
 8003248:	40020400 	.word	0x40020400
 800324c:	40020800 	.word	0x40020800
 8003250:	40020c00 	.word	0x40020c00
 8003254:	40021000 	.word	0x40021000
 8003258:	40013c00 	.word	0x40013c00

0800325c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	887b      	ldrh	r3, [r7, #2]
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003274:	2301      	movs	r3, #1
 8003276:	73fb      	strb	r3, [r7, #15]
 8003278:	e001      	b.n	800327e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800327a:	2300      	movs	r3, #0
 800327c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800327e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	807b      	strh	r3, [r7, #2]
 8003298:	4613      	mov	r3, r2
 800329a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800329c:	787b      	ldrb	r3, [r7, #1]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032a2:	887a      	ldrh	r2, [r7, #2]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032a8:	e003      	b.n	80032b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032aa:	887b      	ldrh	r3, [r7, #2]
 80032ac:	041a      	lsls	r2, r3, #16
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	619a      	str	r2, [r3, #24]
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032ca:	4b08      	ldr	r3, [pc, #32]	; (80032ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032cc:	695a      	ldr	r2, [r3, #20]
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	4013      	ands	r3, r2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d006      	beq.n	80032e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032d6:	4a05      	ldr	r2, [pc, #20]	; (80032ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032d8:	88fb      	ldrh	r3, [r7, #6]
 80032da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 f806 	bl	80032f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80032e4:	bf00      	nop
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40013c00 	.word	0x40013c00

080032f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e12b      	b.n	8003572 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fe fae4 	bl	80018fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2224      	movs	r2, #36	; 0x24
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800335a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800336a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800336c:	f001 fa08 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 8003370:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4a81      	ldr	r2, [pc, #516]	; (800357c <HAL_I2C_Init+0x274>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d807      	bhi.n	800338c <HAL_I2C_Init+0x84>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4a80      	ldr	r2, [pc, #512]	; (8003580 <HAL_I2C_Init+0x278>)
 8003380:	4293      	cmp	r3, r2
 8003382:	bf94      	ite	ls
 8003384:	2301      	movls	r3, #1
 8003386:	2300      	movhi	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	e006      	b.n	800339a <HAL_I2C_Init+0x92>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4a7d      	ldr	r2, [pc, #500]	; (8003584 <HAL_I2C_Init+0x27c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	bf94      	ite	ls
 8003394:	2301      	movls	r3, #1
 8003396:	2300      	movhi	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e0e7      	b.n	8003572 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4a78      	ldr	r2, [pc, #480]	; (8003588 <HAL_I2C_Init+0x280>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	0c9b      	lsrs	r3, r3, #18
 80033ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	4a6a      	ldr	r2, [pc, #424]	; (800357c <HAL_I2C_Init+0x274>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d802      	bhi.n	80033dc <HAL_I2C_Init+0xd4>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	3301      	adds	r3, #1
 80033da:	e009      	b.n	80033f0 <HAL_I2C_Init+0xe8>
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033e2:	fb02 f303 	mul.w	r3, r2, r3
 80033e6:	4a69      	ldr	r2, [pc, #420]	; (800358c <HAL_I2C_Init+0x284>)
 80033e8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ec:	099b      	lsrs	r3, r3, #6
 80033ee:	3301      	adds	r3, #1
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	430b      	orrs	r3, r1
 80033f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003402:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	495c      	ldr	r1, [pc, #368]	; (800357c <HAL_I2C_Init+0x274>)
 800340c:	428b      	cmp	r3, r1
 800340e:	d819      	bhi.n	8003444 <HAL_I2C_Init+0x13c>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1e59      	subs	r1, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	fbb1 f3f3 	udiv	r3, r1, r3
 800341e:	1c59      	adds	r1, r3, #1
 8003420:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003424:	400b      	ands	r3, r1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <HAL_I2C_Init+0x138>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1e59      	subs	r1, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	fbb1 f3f3 	udiv	r3, r1, r3
 8003438:	3301      	adds	r3, #1
 800343a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800343e:	e051      	b.n	80034e4 <HAL_I2C_Init+0x1dc>
 8003440:	2304      	movs	r3, #4
 8003442:	e04f      	b.n	80034e4 <HAL_I2C_Init+0x1dc>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d111      	bne.n	8003470 <HAL_I2C_Init+0x168>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	1e58      	subs	r0, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6859      	ldr	r1, [r3, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	440b      	add	r3, r1
 800345a:	fbb0 f3f3 	udiv	r3, r0, r3
 800345e:	3301      	adds	r3, #1
 8003460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	e012      	b.n	8003496 <HAL_I2C_Init+0x18e>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	1e58      	subs	r0, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6859      	ldr	r1, [r3, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	0099      	lsls	r1, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	fbb0 f3f3 	udiv	r3, r0, r3
 8003486:	3301      	adds	r3, #1
 8003488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348c:	2b00      	cmp	r3, #0
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_I2C_Init+0x196>
 800349a:	2301      	movs	r3, #1
 800349c:	e022      	b.n	80034e4 <HAL_I2C_Init+0x1dc>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10e      	bne.n	80034c4 <HAL_I2C_Init+0x1bc>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1e58      	subs	r0, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6859      	ldr	r1, [r3, #4]
 80034ae:	460b      	mov	r3, r1
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	440b      	add	r3, r1
 80034b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80034b8:	3301      	adds	r3, #1
 80034ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034c2:	e00f      	b.n	80034e4 <HAL_I2C_Init+0x1dc>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	1e58      	subs	r0, r3, #1
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6859      	ldr	r1, [r3, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	0099      	lsls	r1, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034da:	3301      	adds	r3, #1
 80034dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	6809      	ldr	r1, [r1, #0]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69da      	ldr	r2, [r3, #28]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003512:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6911      	ldr	r1, [r2, #16]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68d2      	ldr	r2, [r2, #12]
 800351e:	4311      	orrs	r1, r2
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6812      	ldr	r2, [r2, #0]
 8003524:	430b      	orrs	r3, r1
 8003526:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0201 	orr.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	000186a0 	.word	0x000186a0
 8003580:	001e847f 	.word	0x001e847f
 8003584:	003d08ff 	.word	0x003d08ff
 8003588:	431bde83 	.word	0x431bde83
 800358c:	10624dd3 	.word	0x10624dd3

08003590 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af02      	add	r7, sp, #8
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	607a      	str	r2, [r7, #4]
 800359a:	461a      	mov	r2, r3
 800359c:	460b      	mov	r3, r1
 800359e:	817b      	strh	r3, [r7, #10]
 80035a0:	4613      	mov	r3, r2
 80035a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035a4:	f7fe fc22 	bl	8001dec <HAL_GetTick>
 80035a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b20      	cmp	r3, #32
 80035b4:	f040 80e0 	bne.w	8003778 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	2319      	movs	r3, #25
 80035be:	2201      	movs	r2, #1
 80035c0:	4970      	ldr	r1, [pc, #448]	; (8003784 <HAL_I2C_Master_Transmit+0x1f4>)
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 fa92 	bl	8003aec <I2C_WaitOnFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80035ce:	2302      	movs	r3, #2
 80035d0:	e0d3      	b.n	800377a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_I2C_Master_Transmit+0x50>
 80035dc:	2302      	movs	r3, #2
 80035de:	e0cc      	b.n	800377a <HAL_I2C_Master_Transmit+0x1ea>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d007      	beq.n	8003606 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 0201 	orr.w	r2, r2, #1
 8003604:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003614:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2221      	movs	r2, #33	; 0x21
 800361a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2210      	movs	r2, #16
 8003622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	893a      	ldrh	r2, [r7, #8]
 8003636:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4a50      	ldr	r2, [pc, #320]	; (8003788 <HAL_I2C_Master_Transmit+0x1f8>)
 8003646:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003648:	8979      	ldrh	r1, [r7, #10]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	6a3a      	ldr	r2, [r7, #32]
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 f9ca 	bl	80039e8 <I2C_MasterRequestWrite>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e08d      	b.n	800377a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800365e:	2300      	movs	r3, #0
 8003660:	613b      	str	r3, [r7, #16]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003674:	e066      	b.n	8003744 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	6a39      	ldr	r1, [r7, #32]
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 fb50 	bl	8003d20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00d      	beq.n	80036a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	2b04      	cmp	r3, #4
 800368c:	d107      	bne.n	800369e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800369c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e06b      	b.n	800377a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	781a      	ldrb	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036bc:	b29b      	uxth	r3, r3
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d11b      	bne.n	8003718 <HAL_I2C_Master_Transmit+0x188>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d017      	beq.n	8003718 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	781a      	ldrb	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003702:	b29b      	uxth	r3, r3
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003710:	3b01      	subs	r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	6a39      	ldr	r1, [r7, #32]
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 fb47 	bl	8003db0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00d      	beq.n	8003744 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	2b04      	cmp	r3, #4
 800372e:	d107      	bne.n	8003740 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800373e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e01a      	b.n	800377a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003748:	2b00      	cmp	r3, #0
 800374a:	d194      	bne.n	8003676 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003774:	2300      	movs	r3, #0
 8003776:	e000      	b.n	800377a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003778:	2302      	movs	r3, #2
  }
}
 800377a:	4618      	mov	r0, r3
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	00100002 	.word	0x00100002
 8003788:	ffff0000 	.word	0xffff0000

0800378c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08a      	sub	sp, #40	; 0x28
 8003790:	af02      	add	r7, sp, #8
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	607a      	str	r2, [r7, #4]
 8003796:	603b      	str	r3, [r7, #0]
 8003798:	460b      	mov	r3, r1
 800379a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800379c:	f7fe fb26 	bl	8001dec <HAL_GetTick>
 80037a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	f040 8111 	bne.w	80039d6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	2319      	movs	r3, #25
 80037ba:	2201      	movs	r2, #1
 80037bc:	4988      	ldr	r1, [pc, #544]	; (80039e0 <HAL_I2C_IsDeviceReady+0x254>)
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 f994 	bl	8003aec <I2C_WaitOnFlagUntilTimeout>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80037ca:	2302      	movs	r3, #2
 80037cc:	e104      	b.n	80039d8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d101      	bne.n	80037dc <HAL_I2C_IsDeviceReady+0x50>
 80037d8:	2302      	movs	r3, #2
 80037da:	e0fd      	b.n	80039d8 <HAL_I2C_IsDeviceReady+0x24c>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d007      	beq.n	8003802 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f042 0201 	orr.w	r2, r2, #1
 8003800:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003810:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2224      	movs	r2, #36	; 0x24
 8003816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4a70      	ldr	r2, [pc, #448]	; (80039e4 <HAL_I2C_IsDeviceReady+0x258>)
 8003824:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003834:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2200      	movs	r2, #0
 800383e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f952 	bl	8003aec <I2C_WaitOnFlagUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00d      	beq.n	800386a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800385c:	d103      	bne.n	8003866 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003864:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e0b6      	b.n	80039d8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800386a:	897b      	ldrh	r3, [r7, #10]
 800386c:	b2db      	uxtb	r3, r3
 800386e:	461a      	mov	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003878:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800387a:	f7fe fab7 	bl	8001dec <HAL_GetTick>
 800387e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b02      	cmp	r3, #2
 800388c:	bf0c      	ite	eq
 800388e:	2301      	moveq	r3, #1
 8003890:	2300      	movne	r3, #0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a4:	bf0c      	ite	eq
 80038a6:	2301      	moveq	r3, #1
 80038a8:	2300      	movne	r3, #0
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038ae:	e025      	b.n	80038fc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038b0:	f7fe fa9c 	bl	8001dec <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d302      	bcc.n	80038c6 <HAL_I2C_IsDeviceReady+0x13a>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d103      	bne.n	80038ce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	22a0      	movs	r2, #160	; 0xa0
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b02      	cmp	r3, #2
 80038da:	bf0c      	ite	eq
 80038dc:	2301      	moveq	r3, #1
 80038de:	2300      	movne	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f2:	bf0c      	ite	eq
 80038f4:	2301      	moveq	r3, #1
 80038f6:	2300      	movne	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2ba0      	cmp	r3, #160	; 0xa0
 8003906:	d005      	beq.n	8003914 <HAL_I2C_IsDeviceReady+0x188>
 8003908:	7dfb      	ldrb	r3, [r7, #23]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d102      	bne.n	8003914 <HAL_I2C_IsDeviceReady+0x188>
 800390e:	7dbb      	ldrb	r3, [r7, #22]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0cd      	beq.n	80038b0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b02      	cmp	r3, #2
 8003928:	d129      	bne.n	800397e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003938:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	613b      	str	r3, [r7, #16]
 800394e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	2319      	movs	r3, #25
 8003956:	2201      	movs	r2, #1
 8003958:	4921      	ldr	r1, [pc, #132]	; (80039e0 <HAL_I2C_IsDeviceReady+0x254>)
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 f8c6 	bl	8003aec <I2C_WaitOnFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e036      	b.n	80039d8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	e02c      	b.n	80039d8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003996:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	2319      	movs	r3, #25
 800399e:	2201      	movs	r2, #1
 80039a0:	490f      	ldr	r1, [pc, #60]	; (80039e0 <HAL_I2C_IsDeviceReady+0x254>)
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f8a2 	bl	8003aec <I2C_WaitOnFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e012      	b.n	80039d8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	3301      	adds	r3, #1
 80039b6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	429a      	cmp	r2, r3
 80039be:	f4ff af32 	bcc.w	8003826 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80039d6:	2302      	movs	r3, #2
  }
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3720      	adds	r7, #32
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	00100002 	.word	0x00100002
 80039e4:	ffff0000 	.word	0xffff0000

080039e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	460b      	mov	r3, r1
 80039f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d006      	beq.n	8003a12 <I2C_MasterRequestWrite+0x2a>
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d003      	beq.n	8003a12 <I2C_MasterRequestWrite+0x2a>
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a10:	d108      	bne.n	8003a24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	e00b      	b.n	8003a3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	2b12      	cmp	r3, #18
 8003a2a:	d107      	bne.n	8003a3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f84f 	bl	8003aec <I2C_WaitOnFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00d      	beq.n	8003a70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a62:	d103      	bne.n	8003a6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e035      	b.n	8003adc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a78:	d108      	bne.n	8003a8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a7a:	897b      	ldrh	r3, [r7, #10]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	461a      	mov	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a88:	611a      	str	r2, [r3, #16]
 8003a8a:	e01b      	b.n	8003ac4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a8c:	897b      	ldrh	r3, [r7, #10]
 8003a8e:	11db      	asrs	r3, r3, #7
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	f003 0306 	and.w	r3, r3, #6
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	f063 030f 	orn	r3, r3, #15
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	490e      	ldr	r1, [pc, #56]	; (8003ae4 <I2C_MasterRequestWrite+0xfc>)
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 f898 	bl	8003be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e010      	b.n	8003adc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003aba:	897b      	ldrh	r3, [r7, #10]
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	4907      	ldr	r1, [pc, #28]	; (8003ae8 <I2C_MasterRequestWrite+0x100>)
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f888 	bl	8003be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	00010008 	.word	0x00010008
 8003ae8:	00010002 	.word	0x00010002

08003aec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	603b      	str	r3, [r7, #0]
 8003af8:	4613      	mov	r3, r2
 8003afa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003afc:	e048      	b.n	8003b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b04:	d044      	beq.n	8003b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b06:	f7fe f971 	bl	8001dec <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d302      	bcc.n	8003b1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d139      	bne.n	8003b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	0c1b      	lsrs	r3, r3, #16
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d10d      	bne.n	8003b42 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	43da      	mvns	r2, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	4013      	ands	r3, r2
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	bf0c      	ite	eq
 8003b38:	2301      	moveq	r3, #1
 8003b3a:	2300      	movne	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	461a      	mov	r2, r3
 8003b40:	e00c      	b.n	8003b5c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	43da      	mvns	r2, r3
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bf0c      	ite	eq
 8003b54:	2301      	moveq	r3, #1
 8003b56:	2300      	movne	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	79fb      	ldrb	r3, [r7, #7]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d116      	bne.n	8003b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	f043 0220 	orr.w	r2, r3, #32
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e023      	b.n	8003bd8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	0c1b      	lsrs	r3, r3, #16
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d10d      	bne.n	8003bb6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	43da      	mvns	r2, r3
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	bf0c      	ite	eq
 8003bac:	2301      	moveq	r3, #1
 8003bae:	2300      	movne	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	e00c      	b.n	8003bd0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	43da      	mvns	r2, r3
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	bf0c      	ite	eq
 8003bc8:	2301      	moveq	r3, #1
 8003bca:	2300      	movne	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	461a      	mov	r2, r3
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d093      	beq.n	8003afe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bee:	e071      	b.n	8003cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bfe:	d123      	bne.n	8003c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c0e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	f043 0204 	orr.w	r2, r3, #4
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e067      	b.n	8003d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4e:	d041      	beq.n	8003cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c50:	f7fe f8cc 	bl	8001dec <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d302      	bcc.n	8003c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d136      	bne.n	8003cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	0c1b      	lsrs	r3, r3, #16
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d10c      	bne.n	8003c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	43da      	mvns	r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	bf14      	ite	ne
 8003c82:	2301      	movne	r3, #1
 8003c84:	2300      	moveq	r3, #0
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	e00b      	b.n	8003ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	43da      	mvns	r2, r3
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	4013      	ands	r3, r2
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	bf14      	ite	ne
 8003c9c:	2301      	movne	r3, #1
 8003c9e:	2300      	moveq	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d016      	beq.n	8003cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	f043 0220 	orr.w	r2, r3, #32
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e021      	b.n	8003d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	0c1b      	lsrs	r3, r3, #16
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d10c      	bne.n	8003cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	43da      	mvns	r2, r3
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	bf14      	ite	ne
 8003cf0:	2301      	movne	r3, #1
 8003cf2:	2300      	moveq	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	e00b      	b.n	8003d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	43da      	mvns	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	4013      	ands	r3, r2
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	bf14      	ite	ne
 8003d0a:	2301      	movne	r3, #1
 8003d0c:	2300      	moveq	r3, #0
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f47f af6d 	bne.w	8003bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d2c:	e034      	b.n	8003d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f886 	bl	8003e40 <I2C_IsAcknowledgeFailed>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e034      	b.n	8003da8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d44:	d028      	beq.n	8003d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d46:	f7fe f851 	bl	8001dec <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d302      	bcc.n	8003d5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d11d      	bne.n	8003d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d66:	2b80      	cmp	r3, #128	; 0x80
 8003d68:	d016      	beq.n	8003d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	f043 0220 	orr.w	r2, r3, #32
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e007      	b.n	8003da8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da2:	2b80      	cmp	r3, #128	; 0x80
 8003da4:	d1c3      	bne.n	8003d2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dbc:	e034      	b.n	8003e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 f83e 	bl	8003e40 <I2C_IsAcknowledgeFailed>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e034      	b.n	8003e38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd4:	d028      	beq.n	8003e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd6:	f7fe f809 	bl	8001dec <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d302      	bcc.n	8003dec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d11d      	bne.n	8003e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d016      	beq.n	8003e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	f043 0220 	orr.w	r2, r3, #32
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e007      	b.n	8003e38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d1c3      	bne.n	8003dbe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e56:	d11b      	bne.n	8003e90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	f043 0204 	orr.w	r2, r3, #4
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e000      	b.n	8003e92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
	...

08003ea0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e267      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d075      	beq.n	8003faa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ebe:	4b88      	ldr	r3, [pc, #544]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d00c      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eca:	4b85      	ldr	r3, [pc, #532]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ed2:	2b08      	cmp	r3, #8
 8003ed4:	d112      	bne.n	8003efc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ed6:	4b82      	ldr	r3, [pc, #520]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ee2:	d10b      	bne.n	8003efc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee4:	4b7e      	ldr	r3, [pc, #504]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d05b      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x108>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d157      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e242      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f04:	d106      	bne.n	8003f14 <HAL_RCC_OscConfig+0x74>
 8003f06:	4b76      	ldr	r3, [pc, #472]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a75      	ldr	r2, [pc, #468]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	e01d      	b.n	8003f50 <HAL_RCC_OscConfig+0xb0>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f1c:	d10c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x98>
 8003f1e:	4b70      	ldr	r3, [pc, #448]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a6f      	ldr	r2, [pc, #444]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	4b6d      	ldr	r3, [pc, #436]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a6c      	ldr	r2, [pc, #432]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	e00b      	b.n	8003f50 <HAL_RCC_OscConfig+0xb0>
 8003f38:	4b69      	ldr	r3, [pc, #420]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a68      	ldr	r2, [pc, #416]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	4b66      	ldr	r3, [pc, #408]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a65      	ldr	r2, [pc, #404]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d013      	beq.n	8003f80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f58:	f7fd ff48 	bl	8001dec <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f60:	f7fd ff44 	bl	8001dec <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b64      	cmp	r3, #100	; 0x64
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e207      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f72:	4b5b      	ldr	r3, [pc, #364]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0f0      	beq.n	8003f60 <HAL_RCC_OscConfig+0xc0>
 8003f7e:	e014      	b.n	8003faa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f80:	f7fd ff34 	bl	8001dec <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f88:	f7fd ff30 	bl	8001dec <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b64      	cmp	r3, #100	; 0x64
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e1f3      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f9a:	4b51      	ldr	r3, [pc, #324]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0xe8>
 8003fa6:	e000      	b.n	8003faa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d063      	beq.n	800407e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003fb6:	4b4a      	ldr	r3, [pc, #296]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 030c 	and.w	r3, r3, #12
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fc2:	4b47      	ldr	r3, [pc, #284]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d11c      	bne.n	8004008 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fce:	4b44      	ldr	r3, [pc, #272]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d116      	bne.n	8004008 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fda:	4b41      	ldr	r3, [pc, #260]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d005      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x152>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d001      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e1c7      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff2:	4b3b      	ldr	r3, [pc, #236]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	4937      	ldr	r1, [pc, #220]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 8004002:	4313      	orrs	r3, r2
 8004004:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004006:	e03a      	b.n	800407e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d020      	beq.n	8004052 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004010:	4b34      	ldr	r3, [pc, #208]	; (80040e4 <HAL_RCC_OscConfig+0x244>)
 8004012:	2201      	movs	r2, #1
 8004014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004016:	f7fd fee9 	bl	8001dec <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800401e:	f7fd fee5 	bl	8001dec <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e1a8      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004030:	4b2b      	ldr	r3, [pc, #172]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0f0      	beq.n	800401e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800403c:	4b28      	ldr	r3, [pc, #160]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	4925      	ldr	r1, [pc, #148]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 800404c:	4313      	orrs	r3, r2
 800404e:	600b      	str	r3, [r1, #0]
 8004050:	e015      	b.n	800407e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004052:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <HAL_RCC_OscConfig+0x244>)
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004058:	f7fd fec8 	bl	8001dec <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004060:	f7fd fec4 	bl	8001dec <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e187      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004072:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f0      	bne.n	8004060 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b00      	cmp	r3, #0
 8004088:	d036      	beq.n	80040f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d016      	beq.n	80040c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004092:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <HAL_RCC_OscConfig+0x248>)
 8004094:	2201      	movs	r2, #1
 8004096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004098:	f7fd fea8 	bl	8001dec <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040a0:	f7fd fea4 	bl	8001dec <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e167      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040b2:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <HAL_RCC_OscConfig+0x240>)
 80040b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0f0      	beq.n	80040a0 <HAL_RCC_OscConfig+0x200>
 80040be:	e01b      	b.n	80040f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040c0:	4b09      	ldr	r3, [pc, #36]	; (80040e8 <HAL_RCC_OscConfig+0x248>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040c6:	f7fd fe91 	bl	8001dec <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040cc:	e00e      	b.n	80040ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ce:	f7fd fe8d 	bl	8001dec <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d907      	bls.n	80040ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e150      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
 80040e0:	40023800 	.word	0x40023800
 80040e4:	42470000 	.word	0x42470000
 80040e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040ec:	4b88      	ldr	r3, [pc, #544]	; (8004310 <HAL_RCC_OscConfig+0x470>)
 80040ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1ea      	bne.n	80040ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 8097 	beq.w	8004234 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004106:	2300      	movs	r3, #0
 8004108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800410a:	4b81      	ldr	r3, [pc, #516]	; (8004310 <HAL_RCC_OscConfig+0x470>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10f      	bne.n	8004136 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004116:	2300      	movs	r3, #0
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	4b7d      	ldr	r3, [pc, #500]	; (8004310 <HAL_RCC_OscConfig+0x470>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	4a7c      	ldr	r2, [pc, #496]	; (8004310 <HAL_RCC_OscConfig+0x470>)
 8004120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004124:	6413      	str	r3, [r2, #64]	; 0x40
 8004126:	4b7a      	ldr	r3, [pc, #488]	; (8004310 <HAL_RCC_OscConfig+0x470>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412e:	60bb      	str	r3, [r7, #8]
 8004130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004132:	2301      	movs	r3, #1
 8004134:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004136:	4b77      	ldr	r3, [pc, #476]	; (8004314 <HAL_RCC_OscConfig+0x474>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413e:	2b00      	cmp	r3, #0
 8004140:	d118      	bne.n	8004174 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004142:	4b74      	ldr	r3, [pc, #464]	; (8004314 <HAL_RCC_OscConfig+0x474>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a73      	ldr	r2, [pc, #460]	; (8004314 <HAL_RCC_OscConfig+0x474>)
 8004148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800414e:	f7fd fe4d 	bl	8001dec <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004156:	f7fd fe49 	bl	8001dec <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e10c      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004168:	4b6a      	ldr	r3, [pc, #424]	; (8004314 <HAL_RCC_OscConfig+0x474>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0f0      	beq.n	8004156 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d106      	bne.n	800418a <HAL_RCC_OscConfig+0x2ea>
 800417c:	4b64      	ldr	r3, [pc, #400]	; (8004310 <HAL_RCC_OscConfig+0x470>)
 800417e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004180:	4a63      	ldr	r2, [pc, #396]	; (8004310 <HAL_RCC_OscConfig+0x470>)
 8004182:	f043 0301 	orr.w	r3, r3, #1
 8004186:	6713      	str	r3, [r2, #112]	; 0x70
 8004188:	e01c      	b.n	80041c4 <HAL_RCC_OscConfig+0x324>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2b05      	cmp	r3, #5
 8004190:	d10c      	bne.n	80041ac <HAL_RCC_OscConfig+0x30c>
 8004192:	4b5f      	ldr	r3, [pc, #380]	; (8004310 <HAL_RCC_OscConfig+0x470>)
 8004194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004196:	4a5e      	ldr	r2, [pc, #376]	; (8004310 <HAL_RCC_OscConfig+0x470>)
 8004198:	f043 0304 	orr.w	r3, r3, #4
 800419c:	6713      	str	r3, [r2, #112]	; 0x70
 800419e:	4b5c      	ldr	r3, [pc, #368]	; (8004310 <HAL_RCC_OscConfig+0x470>)
 80041a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a2:	4a5b      	ldr	r2, [pc, #364]	; (8004310 <HAL_RCC_OscConfig+0x470>)
 80041a4:	f043 0301 	orr.w	r3, r3, #1
 80041a8:	6713      	str	r3, [r2, #112]	; 0x70
 80041aa:	e00b      	b.n	80041c4 <HAL_RCC_OscConfig+0x324>
 80041ac:	4b58      	ldr	r3, [pc, #352]	; (8004310 <HAL_RCC_OscConfig+0x470>)
 80041ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b0:	4a57      	ldr	r2, [pc, #348]	; (8004310 <HAL_RCC_OscConfig+0x470>)
 80041b2:	f023 0301 	bic.w	r3, r3, #1
 80041b6:	6713      	str	r3, [r2, #112]	; 0x70
 80041b8:	4b55      	ldr	r3, [pc, #340]	; (8004310 <HAL_RCC_OscConfig+0x470>)
 80041ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041bc:	4a54      	ldr	r2, [pc, #336]	; (8004310 <HAL_RCC_OscConfig+0x470>)
 80041be:	f023 0304 	bic.w	r3, r3, #4
 80041c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d015      	beq.n	80041f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041cc:	f7fd fe0e 	bl	8001dec <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d2:	e00a      	b.n	80041ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d4:	f7fd fe0a 	bl	8001dec <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e0cb      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ea:	4b49      	ldr	r3, [pc, #292]	; (8004310 <HAL_RCC_OscConfig+0x470>)
 80041ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0ee      	beq.n	80041d4 <HAL_RCC_OscConfig+0x334>
 80041f6:	e014      	b.n	8004222 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f8:	f7fd fdf8 	bl	8001dec <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041fe:	e00a      	b.n	8004216 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004200:	f7fd fdf4 	bl	8001dec <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	f241 3288 	movw	r2, #5000	; 0x1388
 800420e:	4293      	cmp	r3, r2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e0b5      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004216:	4b3e      	ldr	r3, [pc, #248]	; (8004310 <HAL_RCC_OscConfig+0x470>)
 8004218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1ee      	bne.n	8004200 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004222:	7dfb      	ldrb	r3, [r7, #23]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d105      	bne.n	8004234 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004228:	4b39      	ldr	r3, [pc, #228]	; (8004310 <HAL_RCC_OscConfig+0x470>)
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	4a38      	ldr	r2, [pc, #224]	; (8004310 <HAL_RCC_OscConfig+0x470>)
 800422e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004232:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 80a1 	beq.w	8004380 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800423e:	4b34      	ldr	r3, [pc, #208]	; (8004310 <HAL_RCC_OscConfig+0x470>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 030c 	and.w	r3, r3, #12
 8004246:	2b08      	cmp	r3, #8
 8004248:	d05c      	beq.n	8004304 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	2b02      	cmp	r3, #2
 8004250:	d141      	bne.n	80042d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004252:	4b31      	ldr	r3, [pc, #196]	; (8004318 <HAL_RCC_OscConfig+0x478>)
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004258:	f7fd fdc8 	bl	8001dec <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004260:	f7fd fdc4 	bl	8001dec <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e087      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004272:	4b27      	ldr	r3, [pc, #156]	; (8004310 <HAL_RCC_OscConfig+0x470>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69da      	ldr	r2, [r3, #28]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	019b      	lsls	r3, r3, #6
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004294:	085b      	lsrs	r3, r3, #1
 8004296:	3b01      	subs	r3, #1
 8004298:	041b      	lsls	r3, r3, #16
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	061b      	lsls	r3, r3, #24
 80042a2:	491b      	ldr	r1, [pc, #108]	; (8004310 <HAL_RCC_OscConfig+0x470>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042a8:	4b1b      	ldr	r3, [pc, #108]	; (8004318 <HAL_RCC_OscConfig+0x478>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ae:	f7fd fd9d 	bl	8001dec <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b6:	f7fd fd99 	bl	8001dec <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e05c      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c8:	4b11      	ldr	r3, [pc, #68]	; (8004310 <HAL_RCC_OscConfig+0x470>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0f0      	beq.n	80042b6 <HAL_RCC_OscConfig+0x416>
 80042d4:	e054      	b.n	8004380 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d6:	4b10      	ldr	r3, [pc, #64]	; (8004318 <HAL_RCC_OscConfig+0x478>)
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042dc:	f7fd fd86 	bl	8001dec <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e4:	f7fd fd82 	bl	8001dec <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e045      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f6:	4b06      	ldr	r3, [pc, #24]	; (8004310 <HAL_RCC_OscConfig+0x470>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0x444>
 8004302:	e03d      	b.n	8004380 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d107      	bne.n	800431c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e038      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
 8004310:	40023800 	.word	0x40023800
 8004314:	40007000 	.word	0x40007000
 8004318:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800431c:	4b1b      	ldr	r3, [pc, #108]	; (800438c <HAL_RCC_OscConfig+0x4ec>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d028      	beq.n	800437c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004334:	429a      	cmp	r2, r3
 8004336:	d121      	bne.n	800437c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004342:	429a      	cmp	r2, r3
 8004344:	d11a      	bne.n	800437c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800434c:	4013      	ands	r3, r2
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004352:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004354:	4293      	cmp	r3, r2
 8004356:	d111      	bne.n	800437c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004362:	085b      	lsrs	r3, r3, #1
 8004364:	3b01      	subs	r3, #1
 8004366:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004368:	429a      	cmp	r2, r3
 800436a:	d107      	bne.n	800437c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004376:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004378:	429a      	cmp	r2, r3
 800437a:	d001      	beq.n	8004380 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e000      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3718      	adds	r7, #24
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	40023800 	.word	0x40023800

08004390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e0cc      	b.n	800453e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043a4:	4b68      	ldr	r3, [pc, #416]	; (8004548 <HAL_RCC_ClockConfig+0x1b8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d90c      	bls.n	80043cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b2:	4b65      	ldr	r3, [pc, #404]	; (8004548 <HAL_RCC_ClockConfig+0x1b8>)
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ba:	4b63      	ldr	r3, [pc, #396]	; (8004548 <HAL_RCC_ClockConfig+0x1b8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d001      	beq.n	80043cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0b8      	b.n	800453e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d020      	beq.n	800441a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043e4:	4b59      	ldr	r3, [pc, #356]	; (800454c <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	4a58      	ldr	r2, [pc, #352]	; (800454c <HAL_RCC_ClockConfig+0x1bc>)
 80043ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043fc:	4b53      	ldr	r3, [pc, #332]	; (800454c <HAL_RCC_ClockConfig+0x1bc>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	4a52      	ldr	r2, [pc, #328]	; (800454c <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004406:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004408:	4b50      	ldr	r3, [pc, #320]	; (800454c <HAL_RCC_ClockConfig+0x1bc>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	494d      	ldr	r1, [pc, #308]	; (800454c <HAL_RCC_ClockConfig+0x1bc>)
 8004416:	4313      	orrs	r3, r2
 8004418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d044      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d107      	bne.n	800443e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442e:	4b47      	ldr	r3, [pc, #284]	; (800454c <HAL_RCC_ClockConfig+0x1bc>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d119      	bne.n	800446e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e07f      	b.n	800453e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b02      	cmp	r3, #2
 8004444:	d003      	beq.n	800444e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800444a:	2b03      	cmp	r3, #3
 800444c:	d107      	bne.n	800445e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800444e:	4b3f      	ldr	r3, [pc, #252]	; (800454c <HAL_RCC_ClockConfig+0x1bc>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d109      	bne.n	800446e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e06f      	b.n	800453e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800445e:	4b3b      	ldr	r3, [pc, #236]	; (800454c <HAL_RCC_ClockConfig+0x1bc>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e067      	b.n	800453e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800446e:	4b37      	ldr	r3, [pc, #220]	; (800454c <HAL_RCC_ClockConfig+0x1bc>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f023 0203 	bic.w	r2, r3, #3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	4934      	ldr	r1, [pc, #208]	; (800454c <HAL_RCC_ClockConfig+0x1bc>)
 800447c:	4313      	orrs	r3, r2
 800447e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004480:	f7fd fcb4 	bl	8001dec <HAL_GetTick>
 8004484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004486:	e00a      	b.n	800449e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004488:	f7fd fcb0 	bl	8001dec <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	f241 3288 	movw	r2, #5000	; 0x1388
 8004496:	4293      	cmp	r3, r2
 8004498:	d901      	bls.n	800449e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e04f      	b.n	800453e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449e:	4b2b      	ldr	r3, [pc, #172]	; (800454c <HAL_RCC_ClockConfig+0x1bc>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 020c 	and.w	r2, r3, #12
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d1eb      	bne.n	8004488 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044b0:	4b25      	ldr	r3, [pc, #148]	; (8004548 <HAL_RCC_ClockConfig+0x1b8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d20c      	bcs.n	80044d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044be:	4b22      	ldr	r3, [pc, #136]	; (8004548 <HAL_RCC_ClockConfig+0x1b8>)
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c6:	4b20      	ldr	r3, [pc, #128]	; (8004548 <HAL_RCC_ClockConfig+0x1b8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d001      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e032      	b.n	800453e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d008      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044e4:	4b19      	ldr	r3, [pc, #100]	; (800454c <HAL_RCC_ClockConfig+0x1bc>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	4916      	ldr	r1, [pc, #88]	; (800454c <HAL_RCC_ClockConfig+0x1bc>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d009      	beq.n	8004516 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004502:	4b12      	ldr	r3, [pc, #72]	; (800454c <HAL_RCC_ClockConfig+0x1bc>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	490e      	ldr	r1, [pc, #56]	; (800454c <HAL_RCC_ClockConfig+0x1bc>)
 8004512:	4313      	orrs	r3, r2
 8004514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004516:	f000 f821 	bl	800455c <HAL_RCC_GetSysClockFreq>
 800451a:	4602      	mov	r2, r0
 800451c:	4b0b      	ldr	r3, [pc, #44]	; (800454c <HAL_RCC_ClockConfig+0x1bc>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	091b      	lsrs	r3, r3, #4
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	490a      	ldr	r1, [pc, #40]	; (8004550 <HAL_RCC_ClockConfig+0x1c0>)
 8004528:	5ccb      	ldrb	r3, [r1, r3]
 800452a:	fa22 f303 	lsr.w	r3, r2, r3
 800452e:	4a09      	ldr	r2, [pc, #36]	; (8004554 <HAL_RCC_ClockConfig+0x1c4>)
 8004530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004532:	4b09      	ldr	r3, [pc, #36]	; (8004558 <HAL_RCC_ClockConfig+0x1c8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7fd fc14 	bl	8001d64 <HAL_InitTick>

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40023c00 	.word	0x40023c00
 800454c:	40023800 	.word	0x40023800
 8004550:	0800a18c 	.word	0x0800a18c
 8004554:	20000000 	.word	0x20000000
 8004558:	20000004 	.word	0x20000004

0800455c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800455c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004560:	b094      	sub	sp, #80	; 0x50
 8004562:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004574:	4b79      	ldr	r3, [pc, #484]	; (800475c <HAL_RCC_GetSysClockFreq+0x200>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 030c 	and.w	r3, r3, #12
 800457c:	2b08      	cmp	r3, #8
 800457e:	d00d      	beq.n	800459c <HAL_RCC_GetSysClockFreq+0x40>
 8004580:	2b08      	cmp	r3, #8
 8004582:	f200 80e1 	bhi.w	8004748 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_RCC_GetSysClockFreq+0x34>
 800458a:	2b04      	cmp	r3, #4
 800458c:	d003      	beq.n	8004596 <HAL_RCC_GetSysClockFreq+0x3a>
 800458e:	e0db      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004590:	4b73      	ldr	r3, [pc, #460]	; (8004760 <HAL_RCC_GetSysClockFreq+0x204>)
 8004592:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004594:	e0db      	b.n	800474e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004596:	4b73      	ldr	r3, [pc, #460]	; (8004764 <HAL_RCC_GetSysClockFreq+0x208>)
 8004598:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800459a:	e0d8      	b.n	800474e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800459c:	4b6f      	ldr	r3, [pc, #444]	; (800475c <HAL_RCC_GetSysClockFreq+0x200>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045a4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045a6:	4b6d      	ldr	r3, [pc, #436]	; (800475c <HAL_RCC_GetSysClockFreq+0x200>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d063      	beq.n	800467a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045b2:	4b6a      	ldr	r3, [pc, #424]	; (800475c <HAL_RCC_GetSysClockFreq+0x200>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	099b      	lsrs	r3, r3, #6
 80045b8:	2200      	movs	r2, #0
 80045ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80045bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80045be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c4:	633b      	str	r3, [r7, #48]	; 0x30
 80045c6:	2300      	movs	r3, #0
 80045c8:	637b      	str	r3, [r7, #52]	; 0x34
 80045ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80045ce:	4622      	mov	r2, r4
 80045d0:	462b      	mov	r3, r5
 80045d2:	f04f 0000 	mov.w	r0, #0
 80045d6:	f04f 0100 	mov.w	r1, #0
 80045da:	0159      	lsls	r1, r3, #5
 80045dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045e0:	0150      	lsls	r0, r2, #5
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4621      	mov	r1, r4
 80045e8:	1a51      	subs	r1, r2, r1
 80045ea:	6139      	str	r1, [r7, #16]
 80045ec:	4629      	mov	r1, r5
 80045ee:	eb63 0301 	sbc.w	r3, r3, r1
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004600:	4659      	mov	r1, fp
 8004602:	018b      	lsls	r3, r1, #6
 8004604:	4651      	mov	r1, sl
 8004606:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800460a:	4651      	mov	r1, sl
 800460c:	018a      	lsls	r2, r1, #6
 800460e:	4651      	mov	r1, sl
 8004610:	ebb2 0801 	subs.w	r8, r2, r1
 8004614:	4659      	mov	r1, fp
 8004616:	eb63 0901 	sbc.w	r9, r3, r1
 800461a:	f04f 0200 	mov.w	r2, #0
 800461e:	f04f 0300 	mov.w	r3, #0
 8004622:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004626:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800462a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800462e:	4690      	mov	r8, r2
 8004630:	4699      	mov	r9, r3
 8004632:	4623      	mov	r3, r4
 8004634:	eb18 0303 	adds.w	r3, r8, r3
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	462b      	mov	r3, r5
 800463c:	eb49 0303 	adc.w	r3, r9, r3
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	f04f 0200 	mov.w	r2, #0
 8004646:	f04f 0300 	mov.w	r3, #0
 800464a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800464e:	4629      	mov	r1, r5
 8004650:	024b      	lsls	r3, r1, #9
 8004652:	4621      	mov	r1, r4
 8004654:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004658:	4621      	mov	r1, r4
 800465a:	024a      	lsls	r2, r1, #9
 800465c:	4610      	mov	r0, r2
 800465e:	4619      	mov	r1, r3
 8004660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004662:	2200      	movs	r2, #0
 8004664:	62bb      	str	r3, [r7, #40]	; 0x28
 8004666:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004668:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800466c:	f7fc fb14 	bl	8000c98 <__aeabi_uldivmod>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	4613      	mov	r3, r2
 8004676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004678:	e058      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800467a:	4b38      	ldr	r3, [pc, #224]	; (800475c <HAL_RCC_GetSysClockFreq+0x200>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	099b      	lsrs	r3, r3, #6
 8004680:	2200      	movs	r2, #0
 8004682:	4618      	mov	r0, r3
 8004684:	4611      	mov	r1, r2
 8004686:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800468a:	623b      	str	r3, [r7, #32]
 800468c:	2300      	movs	r3, #0
 800468e:	627b      	str	r3, [r7, #36]	; 0x24
 8004690:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004694:	4642      	mov	r2, r8
 8004696:	464b      	mov	r3, r9
 8004698:	f04f 0000 	mov.w	r0, #0
 800469c:	f04f 0100 	mov.w	r1, #0
 80046a0:	0159      	lsls	r1, r3, #5
 80046a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046a6:	0150      	lsls	r0, r2, #5
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4641      	mov	r1, r8
 80046ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80046b2:	4649      	mov	r1, r9
 80046b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046cc:	ebb2 040a 	subs.w	r4, r2, sl
 80046d0:	eb63 050b 	sbc.w	r5, r3, fp
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	00eb      	lsls	r3, r5, #3
 80046de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046e2:	00e2      	lsls	r2, r4, #3
 80046e4:	4614      	mov	r4, r2
 80046e6:	461d      	mov	r5, r3
 80046e8:	4643      	mov	r3, r8
 80046ea:	18e3      	adds	r3, r4, r3
 80046ec:	603b      	str	r3, [r7, #0]
 80046ee:	464b      	mov	r3, r9
 80046f0:	eb45 0303 	adc.w	r3, r5, r3
 80046f4:	607b      	str	r3, [r7, #4]
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004702:	4629      	mov	r1, r5
 8004704:	028b      	lsls	r3, r1, #10
 8004706:	4621      	mov	r1, r4
 8004708:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800470c:	4621      	mov	r1, r4
 800470e:	028a      	lsls	r2, r1, #10
 8004710:	4610      	mov	r0, r2
 8004712:	4619      	mov	r1, r3
 8004714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004716:	2200      	movs	r2, #0
 8004718:	61bb      	str	r3, [r7, #24]
 800471a:	61fa      	str	r2, [r7, #28]
 800471c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004720:	f7fc faba 	bl	8000c98 <__aeabi_uldivmod>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4613      	mov	r3, r2
 800472a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800472c:	4b0b      	ldr	r3, [pc, #44]	; (800475c <HAL_RCC_GetSysClockFreq+0x200>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	0c1b      	lsrs	r3, r3, #16
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	3301      	adds	r3, #1
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800473c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800473e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004740:	fbb2 f3f3 	udiv	r3, r2, r3
 8004744:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004746:	e002      	b.n	800474e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <HAL_RCC_GetSysClockFreq+0x204>)
 800474a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800474c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800474e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004750:	4618      	mov	r0, r3
 8004752:	3750      	adds	r7, #80	; 0x50
 8004754:	46bd      	mov	sp, r7
 8004756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800475a:	bf00      	nop
 800475c:	40023800 	.word	0x40023800
 8004760:	00f42400 	.word	0x00f42400
 8004764:	007a1200 	.word	0x007a1200

08004768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800476c:	4b03      	ldr	r3, [pc, #12]	; (800477c <HAL_RCC_GetHCLKFreq+0x14>)
 800476e:	681b      	ldr	r3, [r3, #0]
}
 8004770:	4618      	mov	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	20000000 	.word	0x20000000

08004780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004784:	f7ff fff0 	bl	8004768 <HAL_RCC_GetHCLKFreq>
 8004788:	4602      	mov	r2, r0
 800478a:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	0a9b      	lsrs	r3, r3, #10
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	4903      	ldr	r1, [pc, #12]	; (80047a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004796:	5ccb      	ldrb	r3, [r1, r3]
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800479c:	4618      	mov	r0, r3
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40023800 	.word	0x40023800
 80047a4:	0800a19c 	.word	0x0800a19c

080047a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047ac:	f7ff ffdc 	bl	8004768 <HAL_RCC_GetHCLKFreq>
 80047b0:	4602      	mov	r2, r0
 80047b2:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	0b5b      	lsrs	r3, r3, #13
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	4903      	ldr	r1, [pc, #12]	; (80047cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80047be:	5ccb      	ldrb	r3, [r1, r3]
 80047c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40023800 	.word	0x40023800
 80047cc:	0800a19c 	.word	0x0800a19c

080047d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e041      	b.n	8004866 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7fd f8da 	bl	80019b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3304      	adds	r3, #4
 800480c:	4619      	mov	r1, r3
 800480e:	4610      	mov	r0, r2
 8004810:	f000 fa72 	bl	8004cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b01      	cmp	r3, #1
 8004882:	d001      	beq.n	8004888 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e03c      	b.n	8004902 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a1e      	ldr	r2, [pc, #120]	; (8004910 <HAL_TIM_Base_Start+0xa0>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d018      	beq.n	80048cc <HAL_TIM_Base_Start+0x5c>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a2:	d013      	beq.n	80048cc <HAL_TIM_Base_Start+0x5c>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a1a      	ldr	r2, [pc, #104]	; (8004914 <HAL_TIM_Base_Start+0xa4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00e      	beq.n	80048cc <HAL_TIM_Base_Start+0x5c>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a19      	ldr	r2, [pc, #100]	; (8004918 <HAL_TIM_Base_Start+0xa8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d009      	beq.n	80048cc <HAL_TIM_Base_Start+0x5c>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a17      	ldr	r2, [pc, #92]	; (800491c <HAL_TIM_Base_Start+0xac>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d004      	beq.n	80048cc <HAL_TIM_Base_Start+0x5c>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a16      	ldr	r2, [pc, #88]	; (8004920 <HAL_TIM_Base_Start+0xb0>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d111      	bne.n	80048f0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2b06      	cmp	r3, #6
 80048dc:	d010      	beq.n	8004900 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f042 0201 	orr.w	r2, r2, #1
 80048ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ee:	e007      	b.n	8004900 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0201 	orr.w	r2, r2, #1
 80048fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	40010000 	.word	0x40010000
 8004914:	40000400 	.word	0x40000400
 8004918:	40000800 	.word	0x40000800
 800491c:	40000c00 	.word	0x40000c00
 8004920:	40014000 	.word	0x40014000

08004924 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d020      	beq.n	8004988 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d01b      	beq.n	8004988 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0202 	mvn.w	r2, #2
 8004958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f9a3 	bl	8004cba <HAL_TIM_IC_CaptureCallback>
 8004974:	e005      	b.n	8004982 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f995 	bl	8004ca6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f9a6 	bl	8004cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	2b00      	cmp	r3, #0
 8004990:	d020      	beq.n	80049d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01b      	beq.n	80049d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f06f 0204 	mvn.w	r2, #4
 80049a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2202      	movs	r2, #2
 80049aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f97d 	bl	8004cba <HAL_TIM_IC_CaptureCallback>
 80049c0:	e005      	b.n	80049ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f96f 	bl	8004ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f980 	bl	8004cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d020      	beq.n	8004a20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01b      	beq.n	8004a20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0208 	mvn.w	r2, #8
 80049f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2204      	movs	r2, #4
 80049f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	f003 0303 	and.w	r3, r3, #3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f957 	bl	8004cba <HAL_TIM_IC_CaptureCallback>
 8004a0c:	e005      	b.n	8004a1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f949 	bl	8004ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f95a 	bl	8004cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d020      	beq.n	8004a6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f003 0310 	and.w	r3, r3, #16
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01b      	beq.n	8004a6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0210 	mvn.w	r2, #16
 8004a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2208      	movs	r2, #8
 8004a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f931 	bl	8004cba <HAL_TIM_IC_CaptureCallback>
 8004a58:	e005      	b.n	8004a66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f923 	bl	8004ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f934 	bl	8004cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00c      	beq.n	8004a90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d007      	beq.n	8004a90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0201 	mvn.w	r2, #1
 8004a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f901 	bl	8004c92 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00c      	beq.n	8004ab4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d007      	beq.n	8004ab4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fac0 	bl	8005034 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00c      	beq.n	8004ad8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d007      	beq.n	8004ad8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f905 	bl	8004ce2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00c      	beq.n	8004afc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f003 0320 	and.w	r3, r3, #32
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d007      	beq.n	8004afc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0220 	mvn.w	r2, #32
 8004af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fa92 	bl	8005020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004afc:	bf00      	nop
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d101      	bne.n	8004b20 <HAL_TIM_ConfigClockSource+0x1c>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	e0b4      	b.n	8004c8a <HAL_TIM_ConfigClockSource+0x186>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b58:	d03e      	beq.n	8004bd8 <HAL_TIM_ConfigClockSource+0xd4>
 8004b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b5e:	f200 8087 	bhi.w	8004c70 <HAL_TIM_ConfigClockSource+0x16c>
 8004b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b66:	f000 8086 	beq.w	8004c76 <HAL_TIM_ConfigClockSource+0x172>
 8004b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b6e:	d87f      	bhi.n	8004c70 <HAL_TIM_ConfigClockSource+0x16c>
 8004b70:	2b70      	cmp	r3, #112	; 0x70
 8004b72:	d01a      	beq.n	8004baa <HAL_TIM_ConfigClockSource+0xa6>
 8004b74:	2b70      	cmp	r3, #112	; 0x70
 8004b76:	d87b      	bhi.n	8004c70 <HAL_TIM_ConfigClockSource+0x16c>
 8004b78:	2b60      	cmp	r3, #96	; 0x60
 8004b7a:	d050      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x11a>
 8004b7c:	2b60      	cmp	r3, #96	; 0x60
 8004b7e:	d877      	bhi.n	8004c70 <HAL_TIM_ConfigClockSource+0x16c>
 8004b80:	2b50      	cmp	r3, #80	; 0x50
 8004b82:	d03c      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0xfa>
 8004b84:	2b50      	cmp	r3, #80	; 0x50
 8004b86:	d873      	bhi.n	8004c70 <HAL_TIM_ConfigClockSource+0x16c>
 8004b88:	2b40      	cmp	r3, #64	; 0x40
 8004b8a:	d058      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0x13a>
 8004b8c:	2b40      	cmp	r3, #64	; 0x40
 8004b8e:	d86f      	bhi.n	8004c70 <HAL_TIM_ConfigClockSource+0x16c>
 8004b90:	2b30      	cmp	r3, #48	; 0x30
 8004b92:	d064      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0x15a>
 8004b94:	2b30      	cmp	r3, #48	; 0x30
 8004b96:	d86b      	bhi.n	8004c70 <HAL_TIM_ConfigClockSource+0x16c>
 8004b98:	2b20      	cmp	r3, #32
 8004b9a:	d060      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0x15a>
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	d867      	bhi.n	8004c70 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d05c      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0x15a>
 8004ba4:	2b10      	cmp	r3, #16
 8004ba6:	d05a      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0x15a>
 8004ba8:	e062      	b.n	8004c70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bba:	f000 f9a3 	bl	8004f04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	609a      	str	r2, [r3, #8]
      break;
 8004bd6:	e04f      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004be8:	f000 f98c 	bl	8004f04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689a      	ldr	r2, [r3, #8]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bfa:	609a      	str	r2, [r3, #8]
      break;
 8004bfc:	e03c      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f000 f900 	bl	8004e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2150      	movs	r1, #80	; 0x50
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 f959 	bl	8004ece <TIM_ITRx_SetConfig>
      break;
 8004c1c:	e02c      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f000 f91f 	bl	8004e6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2160      	movs	r1, #96	; 0x60
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 f949 	bl	8004ece <TIM_ITRx_SetConfig>
      break;
 8004c3c:	e01c      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f000 f8e0 	bl	8004e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2140      	movs	r1, #64	; 0x40
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 f939 	bl	8004ece <TIM_ITRx_SetConfig>
      break;
 8004c5c:	e00c      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4619      	mov	r1, r3
 8004c68:	4610      	mov	r0, r2
 8004c6a:	f000 f930 	bl	8004ece <TIM_ITRx_SetConfig>
      break;
 8004c6e:	e003      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	73fb      	strb	r3, [r7, #15]
      break;
 8004c74:	e000      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
	...

08004cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a3a      	ldr	r2, [pc, #232]	; (8004df4 <TIM_Base_SetConfig+0xfc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00f      	beq.n	8004d30 <TIM_Base_SetConfig+0x38>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d16:	d00b      	beq.n	8004d30 <TIM_Base_SetConfig+0x38>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a37      	ldr	r2, [pc, #220]	; (8004df8 <TIM_Base_SetConfig+0x100>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d007      	beq.n	8004d30 <TIM_Base_SetConfig+0x38>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a36      	ldr	r2, [pc, #216]	; (8004dfc <TIM_Base_SetConfig+0x104>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d003      	beq.n	8004d30 <TIM_Base_SetConfig+0x38>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a35      	ldr	r2, [pc, #212]	; (8004e00 <TIM_Base_SetConfig+0x108>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d108      	bne.n	8004d42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a2b      	ldr	r2, [pc, #172]	; (8004df4 <TIM_Base_SetConfig+0xfc>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d01b      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d50:	d017      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a28      	ldr	r2, [pc, #160]	; (8004df8 <TIM_Base_SetConfig+0x100>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d013      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a27      	ldr	r2, [pc, #156]	; (8004dfc <TIM_Base_SetConfig+0x104>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00f      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a26      	ldr	r2, [pc, #152]	; (8004e00 <TIM_Base_SetConfig+0x108>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00b      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a25      	ldr	r2, [pc, #148]	; (8004e04 <TIM_Base_SetConfig+0x10c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d007      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a24      	ldr	r2, [pc, #144]	; (8004e08 <TIM_Base_SetConfig+0x110>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d003      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a23      	ldr	r2, [pc, #140]	; (8004e0c <TIM_Base_SetConfig+0x114>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d108      	bne.n	8004d94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a0e      	ldr	r2, [pc, #56]	; (8004df4 <TIM_Base_SetConfig+0xfc>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d103      	bne.n	8004dc8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d105      	bne.n	8004de6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	f023 0201 	bic.w	r2, r3, #1
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	611a      	str	r2, [r3, #16]
  }
}
 8004de6:	bf00      	nop
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	40010000 	.word	0x40010000
 8004df8:	40000400 	.word	0x40000400
 8004dfc:	40000800 	.word	0x40000800
 8004e00:	40000c00 	.word	0x40000c00
 8004e04:	40014000 	.word	0x40014000
 8004e08:	40014400 	.word	0x40014400
 8004e0c:	40014800 	.word	0x40014800

08004e10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	f023 0201 	bic.w	r2, r3, #1
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	011b      	lsls	r3, r3, #4
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f023 030a 	bic.w	r3, r3, #10
 8004e4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	621a      	str	r2, [r3, #32]
}
 8004e62:	bf00      	nop
 8004e64:	371c      	adds	r7, #28
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b087      	sub	sp, #28
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	60f8      	str	r0, [r7, #12]
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	f023 0210 	bic.w	r2, r3, #16
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	031b      	lsls	r3, r3, #12
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004eaa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	621a      	str	r2, [r3, #32]
}
 8004ec2:	bf00      	nop
 8004ec4:	371c      	adds	r7, #28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b085      	sub	sp, #20
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
 8004ed6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	f043 0307 	orr.w	r3, r3, #7
 8004ef0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	609a      	str	r2, [r3, #8]
}
 8004ef8:	bf00      	nop
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b087      	sub	sp, #28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	021a      	lsls	r2, r3, #8
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	609a      	str	r2, [r3, #8]
}
 8004f38:	bf00      	nop
 8004f3a:	371c      	adds	r7, #28
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e050      	b.n	8004ffe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1c      	ldr	r2, [pc, #112]	; (800500c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d018      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa8:	d013      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a18      	ldr	r2, [pc, #96]	; (8005010 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00e      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a16      	ldr	r2, [pc, #88]	; (8005014 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d009      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a15      	ldr	r2, [pc, #84]	; (8005018 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d004      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a13      	ldr	r2, [pc, #76]	; (800501c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d10c      	bne.n	8004fec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40010000 	.word	0x40010000
 8005010:	40000400 	.word	0x40000400
 8005014:	40000800 	.word	0x40000800
 8005018:	40000c00 	.word	0x40000c00
 800501c:	40014000 	.word	0x40014000

08005020 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e042      	b.n	80050e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d106      	bne.n	8005074 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fc fcc6 	bl	8001a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2224      	movs	r2, #36	; 0x24
 8005078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800508a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f973 	bl	8005378 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	691a      	ldr	r2, [r3, #16]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695a      	ldr	r2, [r3, #20]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68da      	ldr	r2, [r3, #12]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08a      	sub	sp, #40	; 0x28
 80050ec:	af02      	add	r7, sp, #8
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	603b      	str	r3, [r7, #0]
 80050f4:	4613      	mov	r3, r2
 80050f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b20      	cmp	r3, #32
 8005106:	d175      	bne.n	80051f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <HAL_UART_Transmit+0x2c>
 800510e:	88fb      	ldrh	r3, [r7, #6]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e06e      	b.n	80051f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2221      	movs	r2, #33	; 0x21
 8005122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005126:	f7fc fe61 	bl	8001dec <HAL_GetTick>
 800512a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	88fa      	ldrh	r2, [r7, #6]
 8005130:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	88fa      	ldrh	r2, [r7, #6]
 8005136:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005140:	d108      	bne.n	8005154 <HAL_UART_Transmit+0x6c>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d104      	bne.n	8005154 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800514a:	2300      	movs	r3, #0
 800514c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	61bb      	str	r3, [r7, #24]
 8005152:	e003      	b.n	800515c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005158:	2300      	movs	r3, #0
 800515a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800515c:	e02e      	b.n	80051bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2200      	movs	r2, #0
 8005166:	2180      	movs	r1, #128	; 0x80
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 f848 	bl	80051fe <UART_WaitOnFlagUntilTimeout>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d005      	beq.n	8005180 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e03a      	b.n	80051f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10b      	bne.n	800519e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	881b      	ldrh	r3, [r3, #0]
 800518a:	461a      	mov	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005194:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	3302      	adds	r3, #2
 800519a:	61bb      	str	r3, [r7, #24]
 800519c:	e007      	b.n	80051ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	781a      	ldrb	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	3301      	adds	r3, #1
 80051ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	3b01      	subs	r3, #1
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1cb      	bne.n	800515e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2200      	movs	r2, #0
 80051ce:	2140      	movs	r1, #64	; 0x40
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 f814 	bl	80051fe <UART_WaitOnFlagUntilTimeout>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d005      	beq.n	80051e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2220      	movs	r2, #32
 80051e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e006      	b.n	80051f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80051f0:	2300      	movs	r3, #0
 80051f2:	e000      	b.n	80051f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80051f4:	2302      	movs	r3, #2
  }
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3720      	adds	r7, #32
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b086      	sub	sp, #24
 8005202:	af00      	add	r7, sp, #0
 8005204:	60f8      	str	r0, [r7, #12]
 8005206:	60b9      	str	r1, [r7, #8]
 8005208:	603b      	str	r3, [r7, #0]
 800520a:	4613      	mov	r3, r2
 800520c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800520e:	e03b      	b.n	8005288 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005216:	d037      	beq.n	8005288 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005218:	f7fc fde8 	bl	8001dec <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	6a3a      	ldr	r2, [r7, #32]
 8005224:	429a      	cmp	r2, r3
 8005226:	d302      	bcc.n	800522e <UART_WaitOnFlagUntilTimeout+0x30>
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e03a      	b.n	80052a8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b00      	cmp	r3, #0
 800523e:	d023      	beq.n	8005288 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b80      	cmp	r3, #128	; 0x80
 8005244:	d020      	beq.n	8005288 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b40      	cmp	r3, #64	; 0x40
 800524a:	d01d      	beq.n	8005288 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0308 	and.w	r3, r3, #8
 8005256:	2b08      	cmp	r3, #8
 8005258:	d116      	bne.n	8005288 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800525a:	2300      	movs	r3, #0
 800525c:	617b      	str	r3, [r7, #20]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	617b      	str	r3, [r7, #20]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	617b      	str	r3, [r7, #20]
 800526e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 f81d 	bl	80052b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2208      	movs	r2, #8
 800527a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e00f      	b.n	80052a8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	4013      	ands	r3, r2
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	429a      	cmp	r2, r3
 8005296:	bf0c      	ite	eq
 8005298:	2301      	moveq	r3, #1
 800529a:	2300      	movne	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	461a      	mov	r2, r3
 80052a0:	79fb      	ldrb	r3, [r7, #7]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d0b4      	beq.n	8005210 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b095      	sub	sp, #84	; 0x54
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	330c      	adds	r3, #12
 80052be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c2:	e853 3f00 	ldrex	r3, [r3]
 80052c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	330c      	adds	r3, #12
 80052d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052d8:	643a      	str	r2, [r7, #64]	; 0x40
 80052da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052e0:	e841 2300 	strex	r3, r2, [r1]
 80052e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1e5      	bne.n	80052b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3314      	adds	r3, #20
 80052f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	e853 3f00 	ldrex	r3, [r3]
 80052fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	f023 0301 	bic.w	r3, r3, #1
 8005302:	64bb      	str	r3, [r7, #72]	; 0x48
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3314      	adds	r3, #20
 800530a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800530c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800530e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005314:	e841 2300 	strex	r3, r2, [r1]
 8005318:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1e5      	bne.n	80052ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005324:	2b01      	cmp	r3, #1
 8005326:	d119      	bne.n	800535c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	330c      	adds	r3, #12
 800532e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	e853 3f00 	ldrex	r3, [r3]
 8005336:	60bb      	str	r3, [r7, #8]
   return(result);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f023 0310 	bic.w	r3, r3, #16
 800533e:	647b      	str	r3, [r7, #68]	; 0x44
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	330c      	adds	r3, #12
 8005346:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005348:	61ba      	str	r2, [r7, #24]
 800534a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534c:	6979      	ldr	r1, [r7, #20]
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	e841 2300 	strex	r3, r2, [r1]
 8005354:	613b      	str	r3, [r7, #16]
   return(result);
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1e5      	bne.n	8005328 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2220      	movs	r2, #32
 8005360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	631a      	str	r2, [r3, #48]	; 0x30
}
 800536a:	bf00      	nop
 800536c:	3754      	adds	r7, #84	; 0x54
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
	...

08005378 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800537c:	b0c0      	sub	sp, #256	; 0x100
 800537e:	af00      	add	r7, sp, #0
 8005380:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005394:	68d9      	ldr	r1, [r3, #12]
 8005396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	ea40 0301 	orr.w	r3, r0, r1
 80053a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	431a      	orrs	r2, r3
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	431a      	orrs	r2, r3
 80053b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053d0:	f021 010c 	bic.w	r1, r1, #12
 80053d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053de:	430b      	orrs	r3, r1
 80053e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f2:	6999      	ldr	r1, [r3, #24]
 80053f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	ea40 0301 	orr.w	r3, r0, r1
 80053fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	4b8f      	ldr	r3, [pc, #572]	; (8005644 <UART_SetConfig+0x2cc>)
 8005408:	429a      	cmp	r2, r3
 800540a:	d005      	beq.n	8005418 <UART_SetConfig+0xa0>
 800540c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	4b8d      	ldr	r3, [pc, #564]	; (8005648 <UART_SetConfig+0x2d0>)
 8005414:	429a      	cmp	r2, r3
 8005416:	d104      	bne.n	8005422 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005418:	f7ff f9c6 	bl	80047a8 <HAL_RCC_GetPCLK2Freq>
 800541c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005420:	e003      	b.n	800542a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005422:	f7ff f9ad 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 8005426:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800542a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800542e:	69db      	ldr	r3, [r3, #28]
 8005430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005434:	f040 810c 	bne.w	8005650 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800543c:	2200      	movs	r2, #0
 800543e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005442:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005446:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800544a:	4622      	mov	r2, r4
 800544c:	462b      	mov	r3, r5
 800544e:	1891      	adds	r1, r2, r2
 8005450:	65b9      	str	r1, [r7, #88]	; 0x58
 8005452:	415b      	adcs	r3, r3
 8005454:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005456:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800545a:	4621      	mov	r1, r4
 800545c:	eb12 0801 	adds.w	r8, r2, r1
 8005460:	4629      	mov	r1, r5
 8005462:	eb43 0901 	adc.w	r9, r3, r1
 8005466:	f04f 0200 	mov.w	r2, #0
 800546a:	f04f 0300 	mov.w	r3, #0
 800546e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005472:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005476:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800547a:	4690      	mov	r8, r2
 800547c:	4699      	mov	r9, r3
 800547e:	4623      	mov	r3, r4
 8005480:	eb18 0303 	adds.w	r3, r8, r3
 8005484:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005488:	462b      	mov	r3, r5
 800548a:	eb49 0303 	adc.w	r3, r9, r3
 800548e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800549e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80054a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80054a6:	460b      	mov	r3, r1
 80054a8:	18db      	adds	r3, r3, r3
 80054aa:	653b      	str	r3, [r7, #80]	; 0x50
 80054ac:	4613      	mov	r3, r2
 80054ae:	eb42 0303 	adc.w	r3, r2, r3
 80054b2:	657b      	str	r3, [r7, #84]	; 0x54
 80054b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80054b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80054bc:	f7fb fbec 	bl	8000c98 <__aeabi_uldivmod>
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	4b61      	ldr	r3, [pc, #388]	; (800564c <UART_SetConfig+0x2d4>)
 80054c6:	fba3 2302 	umull	r2, r3, r3, r2
 80054ca:	095b      	lsrs	r3, r3, #5
 80054cc:	011c      	lsls	r4, r3, #4
 80054ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054d2:	2200      	movs	r2, #0
 80054d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80054dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80054e0:	4642      	mov	r2, r8
 80054e2:	464b      	mov	r3, r9
 80054e4:	1891      	adds	r1, r2, r2
 80054e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80054e8:	415b      	adcs	r3, r3
 80054ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80054f0:	4641      	mov	r1, r8
 80054f2:	eb12 0a01 	adds.w	sl, r2, r1
 80054f6:	4649      	mov	r1, r9
 80054f8:	eb43 0b01 	adc.w	fp, r3, r1
 80054fc:	f04f 0200 	mov.w	r2, #0
 8005500:	f04f 0300 	mov.w	r3, #0
 8005504:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005508:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800550c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005510:	4692      	mov	sl, r2
 8005512:	469b      	mov	fp, r3
 8005514:	4643      	mov	r3, r8
 8005516:	eb1a 0303 	adds.w	r3, sl, r3
 800551a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800551e:	464b      	mov	r3, r9
 8005520:	eb4b 0303 	adc.w	r3, fp, r3
 8005524:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005534:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005538:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800553c:	460b      	mov	r3, r1
 800553e:	18db      	adds	r3, r3, r3
 8005540:	643b      	str	r3, [r7, #64]	; 0x40
 8005542:	4613      	mov	r3, r2
 8005544:	eb42 0303 	adc.w	r3, r2, r3
 8005548:	647b      	str	r3, [r7, #68]	; 0x44
 800554a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800554e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005552:	f7fb fba1 	bl	8000c98 <__aeabi_uldivmod>
 8005556:	4602      	mov	r2, r0
 8005558:	460b      	mov	r3, r1
 800555a:	4611      	mov	r1, r2
 800555c:	4b3b      	ldr	r3, [pc, #236]	; (800564c <UART_SetConfig+0x2d4>)
 800555e:	fba3 2301 	umull	r2, r3, r3, r1
 8005562:	095b      	lsrs	r3, r3, #5
 8005564:	2264      	movs	r2, #100	; 0x64
 8005566:	fb02 f303 	mul.w	r3, r2, r3
 800556a:	1acb      	subs	r3, r1, r3
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005572:	4b36      	ldr	r3, [pc, #216]	; (800564c <UART_SetConfig+0x2d4>)
 8005574:	fba3 2302 	umull	r2, r3, r3, r2
 8005578:	095b      	lsrs	r3, r3, #5
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005580:	441c      	add	r4, r3
 8005582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005586:	2200      	movs	r2, #0
 8005588:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800558c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005590:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005594:	4642      	mov	r2, r8
 8005596:	464b      	mov	r3, r9
 8005598:	1891      	adds	r1, r2, r2
 800559a:	63b9      	str	r1, [r7, #56]	; 0x38
 800559c:	415b      	adcs	r3, r3
 800559e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80055a4:	4641      	mov	r1, r8
 80055a6:	1851      	adds	r1, r2, r1
 80055a8:	6339      	str	r1, [r7, #48]	; 0x30
 80055aa:	4649      	mov	r1, r9
 80055ac:	414b      	adcs	r3, r1
 80055ae:	637b      	str	r3, [r7, #52]	; 0x34
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	f04f 0300 	mov.w	r3, #0
 80055b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80055bc:	4659      	mov	r1, fp
 80055be:	00cb      	lsls	r3, r1, #3
 80055c0:	4651      	mov	r1, sl
 80055c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055c6:	4651      	mov	r1, sl
 80055c8:	00ca      	lsls	r2, r1, #3
 80055ca:	4610      	mov	r0, r2
 80055cc:	4619      	mov	r1, r3
 80055ce:	4603      	mov	r3, r0
 80055d0:	4642      	mov	r2, r8
 80055d2:	189b      	adds	r3, r3, r2
 80055d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055d8:	464b      	mov	r3, r9
 80055da:	460a      	mov	r2, r1
 80055dc:	eb42 0303 	adc.w	r3, r2, r3
 80055e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80055f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80055f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80055f8:	460b      	mov	r3, r1
 80055fa:	18db      	adds	r3, r3, r3
 80055fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80055fe:	4613      	mov	r3, r2
 8005600:	eb42 0303 	adc.w	r3, r2, r3
 8005604:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005606:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800560a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800560e:	f7fb fb43 	bl	8000c98 <__aeabi_uldivmod>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4b0d      	ldr	r3, [pc, #52]	; (800564c <UART_SetConfig+0x2d4>)
 8005618:	fba3 1302 	umull	r1, r3, r3, r2
 800561c:	095b      	lsrs	r3, r3, #5
 800561e:	2164      	movs	r1, #100	; 0x64
 8005620:	fb01 f303 	mul.w	r3, r1, r3
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	3332      	adds	r3, #50	; 0x32
 800562a:	4a08      	ldr	r2, [pc, #32]	; (800564c <UART_SetConfig+0x2d4>)
 800562c:	fba2 2303 	umull	r2, r3, r2, r3
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	f003 0207 	and.w	r2, r3, #7
 8005636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4422      	add	r2, r4
 800563e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005640:	e106      	b.n	8005850 <UART_SetConfig+0x4d8>
 8005642:	bf00      	nop
 8005644:	40011000 	.word	0x40011000
 8005648:	40011400 	.word	0x40011400
 800564c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005654:	2200      	movs	r2, #0
 8005656:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800565a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800565e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005662:	4642      	mov	r2, r8
 8005664:	464b      	mov	r3, r9
 8005666:	1891      	adds	r1, r2, r2
 8005668:	6239      	str	r1, [r7, #32]
 800566a:	415b      	adcs	r3, r3
 800566c:	627b      	str	r3, [r7, #36]	; 0x24
 800566e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005672:	4641      	mov	r1, r8
 8005674:	1854      	adds	r4, r2, r1
 8005676:	4649      	mov	r1, r9
 8005678:	eb43 0501 	adc.w	r5, r3, r1
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	00eb      	lsls	r3, r5, #3
 8005686:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800568a:	00e2      	lsls	r2, r4, #3
 800568c:	4614      	mov	r4, r2
 800568e:	461d      	mov	r5, r3
 8005690:	4643      	mov	r3, r8
 8005692:	18e3      	adds	r3, r4, r3
 8005694:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005698:	464b      	mov	r3, r9
 800569a:	eb45 0303 	adc.w	r3, r5, r3
 800569e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80056b2:	f04f 0200 	mov.w	r2, #0
 80056b6:	f04f 0300 	mov.w	r3, #0
 80056ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80056be:	4629      	mov	r1, r5
 80056c0:	008b      	lsls	r3, r1, #2
 80056c2:	4621      	mov	r1, r4
 80056c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056c8:	4621      	mov	r1, r4
 80056ca:	008a      	lsls	r2, r1, #2
 80056cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80056d0:	f7fb fae2 	bl	8000c98 <__aeabi_uldivmod>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4b60      	ldr	r3, [pc, #384]	; (800585c <UART_SetConfig+0x4e4>)
 80056da:	fba3 2302 	umull	r2, r3, r3, r2
 80056de:	095b      	lsrs	r3, r3, #5
 80056e0:	011c      	lsls	r4, r3, #4
 80056e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056e6:	2200      	movs	r2, #0
 80056e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80056ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80056f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80056f4:	4642      	mov	r2, r8
 80056f6:	464b      	mov	r3, r9
 80056f8:	1891      	adds	r1, r2, r2
 80056fa:	61b9      	str	r1, [r7, #24]
 80056fc:	415b      	adcs	r3, r3
 80056fe:	61fb      	str	r3, [r7, #28]
 8005700:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005704:	4641      	mov	r1, r8
 8005706:	1851      	adds	r1, r2, r1
 8005708:	6139      	str	r1, [r7, #16]
 800570a:	4649      	mov	r1, r9
 800570c:	414b      	adcs	r3, r1
 800570e:	617b      	str	r3, [r7, #20]
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800571c:	4659      	mov	r1, fp
 800571e:	00cb      	lsls	r3, r1, #3
 8005720:	4651      	mov	r1, sl
 8005722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005726:	4651      	mov	r1, sl
 8005728:	00ca      	lsls	r2, r1, #3
 800572a:	4610      	mov	r0, r2
 800572c:	4619      	mov	r1, r3
 800572e:	4603      	mov	r3, r0
 8005730:	4642      	mov	r2, r8
 8005732:	189b      	adds	r3, r3, r2
 8005734:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005738:	464b      	mov	r3, r9
 800573a:	460a      	mov	r2, r1
 800573c:	eb42 0303 	adc.w	r3, r2, r3
 8005740:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	67bb      	str	r3, [r7, #120]	; 0x78
 800574e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005750:	f04f 0200 	mov.w	r2, #0
 8005754:	f04f 0300 	mov.w	r3, #0
 8005758:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800575c:	4649      	mov	r1, r9
 800575e:	008b      	lsls	r3, r1, #2
 8005760:	4641      	mov	r1, r8
 8005762:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005766:	4641      	mov	r1, r8
 8005768:	008a      	lsls	r2, r1, #2
 800576a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800576e:	f7fb fa93 	bl	8000c98 <__aeabi_uldivmod>
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	4611      	mov	r1, r2
 8005778:	4b38      	ldr	r3, [pc, #224]	; (800585c <UART_SetConfig+0x4e4>)
 800577a:	fba3 2301 	umull	r2, r3, r3, r1
 800577e:	095b      	lsrs	r3, r3, #5
 8005780:	2264      	movs	r2, #100	; 0x64
 8005782:	fb02 f303 	mul.w	r3, r2, r3
 8005786:	1acb      	subs	r3, r1, r3
 8005788:	011b      	lsls	r3, r3, #4
 800578a:	3332      	adds	r3, #50	; 0x32
 800578c:	4a33      	ldr	r2, [pc, #204]	; (800585c <UART_SetConfig+0x4e4>)
 800578e:	fba2 2303 	umull	r2, r3, r2, r3
 8005792:	095b      	lsrs	r3, r3, #5
 8005794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005798:	441c      	add	r4, r3
 800579a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800579e:	2200      	movs	r2, #0
 80057a0:	673b      	str	r3, [r7, #112]	; 0x70
 80057a2:	677a      	str	r2, [r7, #116]	; 0x74
 80057a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80057a8:	4642      	mov	r2, r8
 80057aa:	464b      	mov	r3, r9
 80057ac:	1891      	adds	r1, r2, r2
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	415b      	adcs	r3, r3
 80057b2:	60fb      	str	r3, [r7, #12]
 80057b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057b8:	4641      	mov	r1, r8
 80057ba:	1851      	adds	r1, r2, r1
 80057bc:	6039      	str	r1, [r7, #0]
 80057be:	4649      	mov	r1, r9
 80057c0:	414b      	adcs	r3, r1
 80057c2:	607b      	str	r3, [r7, #4]
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	f04f 0300 	mov.w	r3, #0
 80057cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057d0:	4659      	mov	r1, fp
 80057d2:	00cb      	lsls	r3, r1, #3
 80057d4:	4651      	mov	r1, sl
 80057d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057da:	4651      	mov	r1, sl
 80057dc:	00ca      	lsls	r2, r1, #3
 80057de:	4610      	mov	r0, r2
 80057e0:	4619      	mov	r1, r3
 80057e2:	4603      	mov	r3, r0
 80057e4:	4642      	mov	r2, r8
 80057e6:	189b      	adds	r3, r3, r2
 80057e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80057ea:	464b      	mov	r3, r9
 80057ec:	460a      	mov	r2, r1
 80057ee:	eb42 0303 	adc.w	r3, r2, r3
 80057f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	663b      	str	r3, [r7, #96]	; 0x60
 80057fe:	667a      	str	r2, [r7, #100]	; 0x64
 8005800:	f04f 0200 	mov.w	r2, #0
 8005804:	f04f 0300 	mov.w	r3, #0
 8005808:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800580c:	4649      	mov	r1, r9
 800580e:	008b      	lsls	r3, r1, #2
 8005810:	4641      	mov	r1, r8
 8005812:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005816:	4641      	mov	r1, r8
 8005818:	008a      	lsls	r2, r1, #2
 800581a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800581e:	f7fb fa3b 	bl	8000c98 <__aeabi_uldivmod>
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	4b0d      	ldr	r3, [pc, #52]	; (800585c <UART_SetConfig+0x4e4>)
 8005828:	fba3 1302 	umull	r1, r3, r3, r2
 800582c:	095b      	lsrs	r3, r3, #5
 800582e:	2164      	movs	r1, #100	; 0x64
 8005830:	fb01 f303 	mul.w	r3, r1, r3
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	3332      	adds	r3, #50	; 0x32
 800583a:	4a08      	ldr	r2, [pc, #32]	; (800585c <UART_SetConfig+0x4e4>)
 800583c:	fba2 2303 	umull	r2, r3, r2, r3
 8005840:	095b      	lsrs	r3, r3, #5
 8005842:	f003 020f 	and.w	r2, r3, #15
 8005846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4422      	add	r2, r4
 800584e:	609a      	str	r2, [r3, #8]
}
 8005850:	bf00      	nop
 8005852:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005856:	46bd      	mov	sp, r7
 8005858:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800585c:	51eb851f 	.word	0x51eb851f

08005860 <__cvt>:
 8005860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005864:	ec55 4b10 	vmov	r4, r5, d0
 8005868:	2d00      	cmp	r5, #0
 800586a:	460e      	mov	r6, r1
 800586c:	4619      	mov	r1, r3
 800586e:	462b      	mov	r3, r5
 8005870:	bfbb      	ittet	lt
 8005872:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005876:	461d      	movlt	r5, r3
 8005878:	2300      	movge	r3, #0
 800587a:	232d      	movlt	r3, #45	; 0x2d
 800587c:	700b      	strb	r3, [r1, #0]
 800587e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005880:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005884:	4691      	mov	r9, r2
 8005886:	f023 0820 	bic.w	r8, r3, #32
 800588a:	bfbc      	itt	lt
 800588c:	4622      	movlt	r2, r4
 800588e:	4614      	movlt	r4, r2
 8005890:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005894:	d005      	beq.n	80058a2 <__cvt+0x42>
 8005896:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800589a:	d100      	bne.n	800589e <__cvt+0x3e>
 800589c:	3601      	adds	r6, #1
 800589e:	2102      	movs	r1, #2
 80058a0:	e000      	b.n	80058a4 <__cvt+0x44>
 80058a2:	2103      	movs	r1, #3
 80058a4:	ab03      	add	r3, sp, #12
 80058a6:	9301      	str	r3, [sp, #4]
 80058a8:	ab02      	add	r3, sp, #8
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	ec45 4b10 	vmov	d0, r4, r5
 80058b0:	4653      	mov	r3, sl
 80058b2:	4632      	mov	r2, r6
 80058b4:	f001 f980 	bl	8006bb8 <_dtoa_r>
 80058b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80058bc:	4607      	mov	r7, r0
 80058be:	d102      	bne.n	80058c6 <__cvt+0x66>
 80058c0:	f019 0f01 	tst.w	r9, #1
 80058c4:	d022      	beq.n	800590c <__cvt+0xac>
 80058c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058ca:	eb07 0906 	add.w	r9, r7, r6
 80058ce:	d110      	bne.n	80058f2 <__cvt+0x92>
 80058d0:	783b      	ldrb	r3, [r7, #0]
 80058d2:	2b30      	cmp	r3, #48	; 0x30
 80058d4:	d10a      	bne.n	80058ec <__cvt+0x8c>
 80058d6:	2200      	movs	r2, #0
 80058d8:	2300      	movs	r3, #0
 80058da:	4620      	mov	r0, r4
 80058dc:	4629      	mov	r1, r5
 80058de:	f7fb f8fb 	bl	8000ad8 <__aeabi_dcmpeq>
 80058e2:	b918      	cbnz	r0, 80058ec <__cvt+0x8c>
 80058e4:	f1c6 0601 	rsb	r6, r6, #1
 80058e8:	f8ca 6000 	str.w	r6, [sl]
 80058ec:	f8da 3000 	ldr.w	r3, [sl]
 80058f0:	4499      	add	r9, r3
 80058f2:	2200      	movs	r2, #0
 80058f4:	2300      	movs	r3, #0
 80058f6:	4620      	mov	r0, r4
 80058f8:	4629      	mov	r1, r5
 80058fa:	f7fb f8ed 	bl	8000ad8 <__aeabi_dcmpeq>
 80058fe:	b108      	cbz	r0, 8005904 <__cvt+0xa4>
 8005900:	f8cd 900c 	str.w	r9, [sp, #12]
 8005904:	2230      	movs	r2, #48	; 0x30
 8005906:	9b03      	ldr	r3, [sp, #12]
 8005908:	454b      	cmp	r3, r9
 800590a:	d307      	bcc.n	800591c <__cvt+0xbc>
 800590c:	9b03      	ldr	r3, [sp, #12]
 800590e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005910:	1bdb      	subs	r3, r3, r7
 8005912:	4638      	mov	r0, r7
 8005914:	6013      	str	r3, [r2, #0]
 8005916:	b004      	add	sp, #16
 8005918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800591c:	1c59      	adds	r1, r3, #1
 800591e:	9103      	str	r1, [sp, #12]
 8005920:	701a      	strb	r2, [r3, #0]
 8005922:	e7f0      	b.n	8005906 <__cvt+0xa6>

08005924 <__exponent>:
 8005924:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005926:	4603      	mov	r3, r0
 8005928:	2900      	cmp	r1, #0
 800592a:	bfb8      	it	lt
 800592c:	4249      	neglt	r1, r1
 800592e:	f803 2b02 	strb.w	r2, [r3], #2
 8005932:	bfb4      	ite	lt
 8005934:	222d      	movlt	r2, #45	; 0x2d
 8005936:	222b      	movge	r2, #43	; 0x2b
 8005938:	2909      	cmp	r1, #9
 800593a:	7042      	strb	r2, [r0, #1]
 800593c:	dd2a      	ble.n	8005994 <__exponent+0x70>
 800593e:	f10d 0207 	add.w	r2, sp, #7
 8005942:	4617      	mov	r7, r2
 8005944:	260a      	movs	r6, #10
 8005946:	4694      	mov	ip, r2
 8005948:	fb91 f5f6 	sdiv	r5, r1, r6
 800594c:	fb06 1415 	mls	r4, r6, r5, r1
 8005950:	3430      	adds	r4, #48	; 0x30
 8005952:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005956:	460c      	mov	r4, r1
 8005958:	2c63      	cmp	r4, #99	; 0x63
 800595a:	f102 32ff 	add.w	r2, r2, #4294967295
 800595e:	4629      	mov	r1, r5
 8005960:	dcf1      	bgt.n	8005946 <__exponent+0x22>
 8005962:	3130      	adds	r1, #48	; 0x30
 8005964:	f1ac 0402 	sub.w	r4, ip, #2
 8005968:	f802 1c01 	strb.w	r1, [r2, #-1]
 800596c:	1c41      	adds	r1, r0, #1
 800596e:	4622      	mov	r2, r4
 8005970:	42ba      	cmp	r2, r7
 8005972:	d30a      	bcc.n	800598a <__exponent+0x66>
 8005974:	f10d 0209 	add.w	r2, sp, #9
 8005978:	eba2 020c 	sub.w	r2, r2, ip
 800597c:	42bc      	cmp	r4, r7
 800597e:	bf88      	it	hi
 8005980:	2200      	movhi	r2, #0
 8005982:	4413      	add	r3, r2
 8005984:	1a18      	subs	r0, r3, r0
 8005986:	b003      	add	sp, #12
 8005988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800598a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800598e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005992:	e7ed      	b.n	8005970 <__exponent+0x4c>
 8005994:	2330      	movs	r3, #48	; 0x30
 8005996:	3130      	adds	r1, #48	; 0x30
 8005998:	7083      	strb	r3, [r0, #2]
 800599a:	70c1      	strb	r1, [r0, #3]
 800599c:	1d03      	adds	r3, r0, #4
 800599e:	e7f1      	b.n	8005984 <__exponent+0x60>

080059a0 <_printf_float>:
 80059a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a4:	ed2d 8b02 	vpush	{d8}
 80059a8:	b08d      	sub	sp, #52	; 0x34
 80059aa:	460c      	mov	r4, r1
 80059ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80059b0:	4616      	mov	r6, r2
 80059b2:	461f      	mov	r7, r3
 80059b4:	4605      	mov	r5, r0
 80059b6:	f000 fff9 	bl	80069ac <_localeconv_r>
 80059ba:	f8d0 a000 	ldr.w	sl, [r0]
 80059be:	4650      	mov	r0, sl
 80059c0:	f7fa fc5e 	bl	8000280 <strlen>
 80059c4:	2300      	movs	r3, #0
 80059c6:	930a      	str	r3, [sp, #40]	; 0x28
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	9305      	str	r3, [sp, #20]
 80059cc:	f8d8 3000 	ldr.w	r3, [r8]
 80059d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80059d4:	3307      	adds	r3, #7
 80059d6:	f023 0307 	bic.w	r3, r3, #7
 80059da:	f103 0208 	add.w	r2, r3, #8
 80059de:	f8c8 2000 	str.w	r2, [r8]
 80059e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80059ea:	9307      	str	r3, [sp, #28]
 80059ec:	f8cd 8018 	str.w	r8, [sp, #24]
 80059f0:	ee08 0a10 	vmov	s16, r0
 80059f4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80059f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059fc:	4b9e      	ldr	r3, [pc, #632]	; (8005c78 <_printf_float+0x2d8>)
 80059fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005a02:	f7fb f89b 	bl	8000b3c <__aeabi_dcmpun>
 8005a06:	bb88      	cbnz	r0, 8005a6c <_printf_float+0xcc>
 8005a08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a0c:	4b9a      	ldr	r3, [pc, #616]	; (8005c78 <_printf_float+0x2d8>)
 8005a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a12:	f7fb f875 	bl	8000b00 <__aeabi_dcmple>
 8005a16:	bb48      	cbnz	r0, 8005a6c <_printf_float+0xcc>
 8005a18:	2200      	movs	r2, #0
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	4640      	mov	r0, r8
 8005a1e:	4649      	mov	r1, r9
 8005a20:	f7fb f864 	bl	8000aec <__aeabi_dcmplt>
 8005a24:	b110      	cbz	r0, 8005a2c <_printf_float+0x8c>
 8005a26:	232d      	movs	r3, #45	; 0x2d
 8005a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a2c:	4a93      	ldr	r2, [pc, #588]	; (8005c7c <_printf_float+0x2dc>)
 8005a2e:	4b94      	ldr	r3, [pc, #592]	; (8005c80 <_printf_float+0x2e0>)
 8005a30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005a34:	bf94      	ite	ls
 8005a36:	4690      	movls	r8, r2
 8005a38:	4698      	movhi	r8, r3
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	6123      	str	r3, [r4, #16]
 8005a3e:	9b05      	ldr	r3, [sp, #20]
 8005a40:	f023 0304 	bic.w	r3, r3, #4
 8005a44:	6023      	str	r3, [r4, #0]
 8005a46:	f04f 0900 	mov.w	r9, #0
 8005a4a:	9700      	str	r7, [sp, #0]
 8005a4c:	4633      	mov	r3, r6
 8005a4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005a50:	4621      	mov	r1, r4
 8005a52:	4628      	mov	r0, r5
 8005a54:	f000 f9da 	bl	8005e0c <_printf_common>
 8005a58:	3001      	adds	r0, #1
 8005a5a:	f040 8090 	bne.w	8005b7e <_printf_float+0x1de>
 8005a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a62:	b00d      	add	sp, #52	; 0x34
 8005a64:	ecbd 8b02 	vpop	{d8}
 8005a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a6c:	4642      	mov	r2, r8
 8005a6e:	464b      	mov	r3, r9
 8005a70:	4640      	mov	r0, r8
 8005a72:	4649      	mov	r1, r9
 8005a74:	f7fb f862 	bl	8000b3c <__aeabi_dcmpun>
 8005a78:	b140      	cbz	r0, 8005a8c <_printf_float+0xec>
 8005a7a:	464b      	mov	r3, r9
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	bfbc      	itt	lt
 8005a80:	232d      	movlt	r3, #45	; 0x2d
 8005a82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a86:	4a7f      	ldr	r2, [pc, #508]	; (8005c84 <_printf_float+0x2e4>)
 8005a88:	4b7f      	ldr	r3, [pc, #508]	; (8005c88 <_printf_float+0x2e8>)
 8005a8a:	e7d1      	b.n	8005a30 <_printf_float+0x90>
 8005a8c:	6863      	ldr	r3, [r4, #4]
 8005a8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a92:	9206      	str	r2, [sp, #24]
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	d13f      	bne.n	8005b18 <_printf_float+0x178>
 8005a98:	2306      	movs	r3, #6
 8005a9a:	6063      	str	r3, [r4, #4]
 8005a9c:	9b05      	ldr	r3, [sp, #20]
 8005a9e:	6861      	ldr	r1, [r4, #4]
 8005aa0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	9303      	str	r3, [sp, #12]
 8005aa8:	ab0a      	add	r3, sp, #40	; 0x28
 8005aaa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005aae:	ab09      	add	r3, sp, #36	; 0x24
 8005ab0:	ec49 8b10 	vmov	d0, r8, r9
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	6022      	str	r2, [r4, #0]
 8005ab8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005abc:	4628      	mov	r0, r5
 8005abe:	f7ff fecf 	bl	8005860 <__cvt>
 8005ac2:	9b06      	ldr	r3, [sp, #24]
 8005ac4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ac6:	2b47      	cmp	r3, #71	; 0x47
 8005ac8:	4680      	mov	r8, r0
 8005aca:	d108      	bne.n	8005ade <_printf_float+0x13e>
 8005acc:	1cc8      	adds	r0, r1, #3
 8005ace:	db02      	blt.n	8005ad6 <_printf_float+0x136>
 8005ad0:	6863      	ldr	r3, [r4, #4]
 8005ad2:	4299      	cmp	r1, r3
 8005ad4:	dd41      	ble.n	8005b5a <_printf_float+0x1ba>
 8005ad6:	f1ab 0302 	sub.w	r3, fp, #2
 8005ada:	fa5f fb83 	uxtb.w	fp, r3
 8005ade:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ae2:	d820      	bhi.n	8005b26 <_printf_float+0x186>
 8005ae4:	3901      	subs	r1, #1
 8005ae6:	465a      	mov	r2, fp
 8005ae8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005aec:	9109      	str	r1, [sp, #36]	; 0x24
 8005aee:	f7ff ff19 	bl	8005924 <__exponent>
 8005af2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005af4:	1813      	adds	r3, r2, r0
 8005af6:	2a01      	cmp	r2, #1
 8005af8:	4681      	mov	r9, r0
 8005afa:	6123      	str	r3, [r4, #16]
 8005afc:	dc02      	bgt.n	8005b04 <_printf_float+0x164>
 8005afe:	6822      	ldr	r2, [r4, #0]
 8005b00:	07d2      	lsls	r2, r2, #31
 8005b02:	d501      	bpl.n	8005b08 <_printf_float+0x168>
 8005b04:	3301      	adds	r3, #1
 8005b06:	6123      	str	r3, [r4, #16]
 8005b08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d09c      	beq.n	8005a4a <_printf_float+0xaa>
 8005b10:	232d      	movs	r3, #45	; 0x2d
 8005b12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b16:	e798      	b.n	8005a4a <_printf_float+0xaa>
 8005b18:	9a06      	ldr	r2, [sp, #24]
 8005b1a:	2a47      	cmp	r2, #71	; 0x47
 8005b1c:	d1be      	bne.n	8005a9c <_printf_float+0xfc>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1bc      	bne.n	8005a9c <_printf_float+0xfc>
 8005b22:	2301      	movs	r3, #1
 8005b24:	e7b9      	b.n	8005a9a <_printf_float+0xfa>
 8005b26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005b2a:	d118      	bne.n	8005b5e <_printf_float+0x1be>
 8005b2c:	2900      	cmp	r1, #0
 8005b2e:	6863      	ldr	r3, [r4, #4]
 8005b30:	dd0b      	ble.n	8005b4a <_printf_float+0x1aa>
 8005b32:	6121      	str	r1, [r4, #16]
 8005b34:	b913      	cbnz	r3, 8005b3c <_printf_float+0x19c>
 8005b36:	6822      	ldr	r2, [r4, #0]
 8005b38:	07d0      	lsls	r0, r2, #31
 8005b3a:	d502      	bpl.n	8005b42 <_printf_float+0x1a2>
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	440b      	add	r3, r1
 8005b40:	6123      	str	r3, [r4, #16]
 8005b42:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b44:	f04f 0900 	mov.w	r9, #0
 8005b48:	e7de      	b.n	8005b08 <_printf_float+0x168>
 8005b4a:	b913      	cbnz	r3, 8005b52 <_printf_float+0x1b2>
 8005b4c:	6822      	ldr	r2, [r4, #0]
 8005b4e:	07d2      	lsls	r2, r2, #31
 8005b50:	d501      	bpl.n	8005b56 <_printf_float+0x1b6>
 8005b52:	3302      	adds	r3, #2
 8005b54:	e7f4      	b.n	8005b40 <_printf_float+0x1a0>
 8005b56:	2301      	movs	r3, #1
 8005b58:	e7f2      	b.n	8005b40 <_printf_float+0x1a0>
 8005b5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b60:	4299      	cmp	r1, r3
 8005b62:	db05      	blt.n	8005b70 <_printf_float+0x1d0>
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	6121      	str	r1, [r4, #16]
 8005b68:	07d8      	lsls	r0, r3, #31
 8005b6a:	d5ea      	bpl.n	8005b42 <_printf_float+0x1a2>
 8005b6c:	1c4b      	adds	r3, r1, #1
 8005b6e:	e7e7      	b.n	8005b40 <_printf_float+0x1a0>
 8005b70:	2900      	cmp	r1, #0
 8005b72:	bfd4      	ite	le
 8005b74:	f1c1 0202 	rsble	r2, r1, #2
 8005b78:	2201      	movgt	r2, #1
 8005b7a:	4413      	add	r3, r2
 8005b7c:	e7e0      	b.n	8005b40 <_printf_float+0x1a0>
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	055a      	lsls	r2, r3, #21
 8005b82:	d407      	bmi.n	8005b94 <_printf_float+0x1f4>
 8005b84:	6923      	ldr	r3, [r4, #16]
 8005b86:	4642      	mov	r2, r8
 8005b88:	4631      	mov	r1, r6
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	47b8      	blx	r7
 8005b8e:	3001      	adds	r0, #1
 8005b90:	d12c      	bne.n	8005bec <_printf_float+0x24c>
 8005b92:	e764      	b.n	8005a5e <_printf_float+0xbe>
 8005b94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b98:	f240 80e0 	bls.w	8005d5c <_printf_float+0x3bc>
 8005b9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	f7fa ff98 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	d034      	beq.n	8005c16 <_printf_float+0x276>
 8005bac:	4a37      	ldr	r2, [pc, #220]	; (8005c8c <_printf_float+0x2ec>)
 8005bae:	2301      	movs	r3, #1
 8005bb0:	4631      	mov	r1, r6
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	47b8      	blx	r7
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	f43f af51 	beq.w	8005a5e <_printf_float+0xbe>
 8005bbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	db02      	blt.n	8005bca <_printf_float+0x22a>
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	07d8      	lsls	r0, r3, #31
 8005bc8:	d510      	bpl.n	8005bec <_printf_float+0x24c>
 8005bca:	ee18 3a10 	vmov	r3, s16
 8005bce:	4652      	mov	r2, sl
 8005bd0:	4631      	mov	r1, r6
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	47b8      	blx	r7
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	f43f af41 	beq.w	8005a5e <_printf_float+0xbe>
 8005bdc:	f04f 0800 	mov.w	r8, #0
 8005be0:	f104 091a 	add.w	r9, r4, #26
 8005be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005be6:	3b01      	subs	r3, #1
 8005be8:	4543      	cmp	r3, r8
 8005bea:	dc09      	bgt.n	8005c00 <_printf_float+0x260>
 8005bec:	6823      	ldr	r3, [r4, #0]
 8005bee:	079b      	lsls	r3, r3, #30
 8005bf0:	f100 8107 	bmi.w	8005e02 <_printf_float+0x462>
 8005bf4:	68e0      	ldr	r0, [r4, #12]
 8005bf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bf8:	4298      	cmp	r0, r3
 8005bfa:	bfb8      	it	lt
 8005bfc:	4618      	movlt	r0, r3
 8005bfe:	e730      	b.n	8005a62 <_printf_float+0xc2>
 8005c00:	2301      	movs	r3, #1
 8005c02:	464a      	mov	r2, r9
 8005c04:	4631      	mov	r1, r6
 8005c06:	4628      	mov	r0, r5
 8005c08:	47b8      	blx	r7
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	f43f af27 	beq.w	8005a5e <_printf_float+0xbe>
 8005c10:	f108 0801 	add.w	r8, r8, #1
 8005c14:	e7e6      	b.n	8005be4 <_printf_float+0x244>
 8005c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	dc39      	bgt.n	8005c90 <_printf_float+0x2f0>
 8005c1c:	4a1b      	ldr	r2, [pc, #108]	; (8005c8c <_printf_float+0x2ec>)
 8005c1e:	2301      	movs	r3, #1
 8005c20:	4631      	mov	r1, r6
 8005c22:	4628      	mov	r0, r5
 8005c24:	47b8      	blx	r7
 8005c26:	3001      	adds	r0, #1
 8005c28:	f43f af19 	beq.w	8005a5e <_printf_float+0xbe>
 8005c2c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005c30:	4313      	orrs	r3, r2
 8005c32:	d102      	bne.n	8005c3a <_printf_float+0x29a>
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	07d9      	lsls	r1, r3, #31
 8005c38:	d5d8      	bpl.n	8005bec <_printf_float+0x24c>
 8005c3a:	ee18 3a10 	vmov	r3, s16
 8005c3e:	4652      	mov	r2, sl
 8005c40:	4631      	mov	r1, r6
 8005c42:	4628      	mov	r0, r5
 8005c44:	47b8      	blx	r7
 8005c46:	3001      	adds	r0, #1
 8005c48:	f43f af09 	beq.w	8005a5e <_printf_float+0xbe>
 8005c4c:	f04f 0900 	mov.w	r9, #0
 8005c50:	f104 0a1a 	add.w	sl, r4, #26
 8005c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c56:	425b      	negs	r3, r3
 8005c58:	454b      	cmp	r3, r9
 8005c5a:	dc01      	bgt.n	8005c60 <_printf_float+0x2c0>
 8005c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c5e:	e792      	b.n	8005b86 <_printf_float+0x1e6>
 8005c60:	2301      	movs	r3, #1
 8005c62:	4652      	mov	r2, sl
 8005c64:	4631      	mov	r1, r6
 8005c66:	4628      	mov	r0, r5
 8005c68:	47b8      	blx	r7
 8005c6a:	3001      	adds	r0, #1
 8005c6c:	f43f aef7 	beq.w	8005a5e <_printf_float+0xbe>
 8005c70:	f109 0901 	add.w	r9, r9, #1
 8005c74:	e7ee      	b.n	8005c54 <_printf_float+0x2b4>
 8005c76:	bf00      	nop
 8005c78:	7fefffff 	.word	0x7fefffff
 8005c7c:	0800a1ac 	.word	0x0800a1ac
 8005c80:	0800a1b0 	.word	0x0800a1b0
 8005c84:	0800a1b4 	.word	0x0800a1b4
 8005c88:	0800a1b8 	.word	0x0800a1b8
 8005c8c:	0800a1bc 	.word	0x0800a1bc
 8005c90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c94:	429a      	cmp	r2, r3
 8005c96:	bfa8      	it	ge
 8005c98:	461a      	movge	r2, r3
 8005c9a:	2a00      	cmp	r2, #0
 8005c9c:	4691      	mov	r9, r2
 8005c9e:	dc37      	bgt.n	8005d10 <_printf_float+0x370>
 8005ca0:	f04f 0b00 	mov.w	fp, #0
 8005ca4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ca8:	f104 021a 	add.w	r2, r4, #26
 8005cac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cae:	9305      	str	r3, [sp, #20]
 8005cb0:	eba3 0309 	sub.w	r3, r3, r9
 8005cb4:	455b      	cmp	r3, fp
 8005cb6:	dc33      	bgt.n	8005d20 <_printf_float+0x380>
 8005cb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	db3b      	blt.n	8005d38 <_printf_float+0x398>
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	07da      	lsls	r2, r3, #31
 8005cc4:	d438      	bmi.n	8005d38 <_printf_float+0x398>
 8005cc6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005cca:	eba2 0903 	sub.w	r9, r2, r3
 8005cce:	9b05      	ldr	r3, [sp, #20]
 8005cd0:	1ad2      	subs	r2, r2, r3
 8005cd2:	4591      	cmp	r9, r2
 8005cd4:	bfa8      	it	ge
 8005cd6:	4691      	movge	r9, r2
 8005cd8:	f1b9 0f00 	cmp.w	r9, #0
 8005cdc:	dc35      	bgt.n	8005d4a <_printf_float+0x3aa>
 8005cde:	f04f 0800 	mov.w	r8, #0
 8005ce2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ce6:	f104 0a1a 	add.w	sl, r4, #26
 8005cea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cee:	1a9b      	subs	r3, r3, r2
 8005cf0:	eba3 0309 	sub.w	r3, r3, r9
 8005cf4:	4543      	cmp	r3, r8
 8005cf6:	f77f af79 	ble.w	8005bec <_printf_float+0x24c>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	4652      	mov	r2, sl
 8005cfe:	4631      	mov	r1, r6
 8005d00:	4628      	mov	r0, r5
 8005d02:	47b8      	blx	r7
 8005d04:	3001      	adds	r0, #1
 8005d06:	f43f aeaa 	beq.w	8005a5e <_printf_float+0xbe>
 8005d0a:	f108 0801 	add.w	r8, r8, #1
 8005d0e:	e7ec      	b.n	8005cea <_printf_float+0x34a>
 8005d10:	4613      	mov	r3, r2
 8005d12:	4631      	mov	r1, r6
 8005d14:	4642      	mov	r2, r8
 8005d16:	4628      	mov	r0, r5
 8005d18:	47b8      	blx	r7
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	d1c0      	bne.n	8005ca0 <_printf_float+0x300>
 8005d1e:	e69e      	b.n	8005a5e <_printf_float+0xbe>
 8005d20:	2301      	movs	r3, #1
 8005d22:	4631      	mov	r1, r6
 8005d24:	4628      	mov	r0, r5
 8005d26:	9205      	str	r2, [sp, #20]
 8005d28:	47b8      	blx	r7
 8005d2a:	3001      	adds	r0, #1
 8005d2c:	f43f ae97 	beq.w	8005a5e <_printf_float+0xbe>
 8005d30:	9a05      	ldr	r2, [sp, #20]
 8005d32:	f10b 0b01 	add.w	fp, fp, #1
 8005d36:	e7b9      	b.n	8005cac <_printf_float+0x30c>
 8005d38:	ee18 3a10 	vmov	r3, s16
 8005d3c:	4652      	mov	r2, sl
 8005d3e:	4631      	mov	r1, r6
 8005d40:	4628      	mov	r0, r5
 8005d42:	47b8      	blx	r7
 8005d44:	3001      	adds	r0, #1
 8005d46:	d1be      	bne.n	8005cc6 <_printf_float+0x326>
 8005d48:	e689      	b.n	8005a5e <_printf_float+0xbe>
 8005d4a:	9a05      	ldr	r2, [sp, #20]
 8005d4c:	464b      	mov	r3, r9
 8005d4e:	4442      	add	r2, r8
 8005d50:	4631      	mov	r1, r6
 8005d52:	4628      	mov	r0, r5
 8005d54:	47b8      	blx	r7
 8005d56:	3001      	adds	r0, #1
 8005d58:	d1c1      	bne.n	8005cde <_printf_float+0x33e>
 8005d5a:	e680      	b.n	8005a5e <_printf_float+0xbe>
 8005d5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d5e:	2a01      	cmp	r2, #1
 8005d60:	dc01      	bgt.n	8005d66 <_printf_float+0x3c6>
 8005d62:	07db      	lsls	r3, r3, #31
 8005d64:	d53a      	bpl.n	8005ddc <_printf_float+0x43c>
 8005d66:	2301      	movs	r3, #1
 8005d68:	4642      	mov	r2, r8
 8005d6a:	4631      	mov	r1, r6
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	47b8      	blx	r7
 8005d70:	3001      	adds	r0, #1
 8005d72:	f43f ae74 	beq.w	8005a5e <_printf_float+0xbe>
 8005d76:	ee18 3a10 	vmov	r3, s16
 8005d7a:	4652      	mov	r2, sl
 8005d7c:	4631      	mov	r1, r6
 8005d7e:	4628      	mov	r0, r5
 8005d80:	47b8      	blx	r7
 8005d82:	3001      	adds	r0, #1
 8005d84:	f43f ae6b 	beq.w	8005a5e <_printf_float+0xbe>
 8005d88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	2300      	movs	r3, #0
 8005d90:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005d94:	f7fa fea0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d98:	b9d8      	cbnz	r0, 8005dd2 <_printf_float+0x432>
 8005d9a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005d9e:	f108 0201 	add.w	r2, r8, #1
 8005da2:	4631      	mov	r1, r6
 8005da4:	4628      	mov	r0, r5
 8005da6:	47b8      	blx	r7
 8005da8:	3001      	adds	r0, #1
 8005daa:	d10e      	bne.n	8005dca <_printf_float+0x42a>
 8005dac:	e657      	b.n	8005a5e <_printf_float+0xbe>
 8005dae:	2301      	movs	r3, #1
 8005db0:	4652      	mov	r2, sl
 8005db2:	4631      	mov	r1, r6
 8005db4:	4628      	mov	r0, r5
 8005db6:	47b8      	blx	r7
 8005db8:	3001      	adds	r0, #1
 8005dba:	f43f ae50 	beq.w	8005a5e <_printf_float+0xbe>
 8005dbe:	f108 0801 	add.w	r8, r8, #1
 8005dc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	4543      	cmp	r3, r8
 8005dc8:	dcf1      	bgt.n	8005dae <_printf_float+0x40e>
 8005dca:	464b      	mov	r3, r9
 8005dcc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005dd0:	e6da      	b.n	8005b88 <_printf_float+0x1e8>
 8005dd2:	f04f 0800 	mov.w	r8, #0
 8005dd6:	f104 0a1a 	add.w	sl, r4, #26
 8005dda:	e7f2      	b.n	8005dc2 <_printf_float+0x422>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	4642      	mov	r2, r8
 8005de0:	e7df      	b.n	8005da2 <_printf_float+0x402>
 8005de2:	2301      	movs	r3, #1
 8005de4:	464a      	mov	r2, r9
 8005de6:	4631      	mov	r1, r6
 8005de8:	4628      	mov	r0, r5
 8005dea:	47b8      	blx	r7
 8005dec:	3001      	adds	r0, #1
 8005dee:	f43f ae36 	beq.w	8005a5e <_printf_float+0xbe>
 8005df2:	f108 0801 	add.w	r8, r8, #1
 8005df6:	68e3      	ldr	r3, [r4, #12]
 8005df8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dfa:	1a5b      	subs	r3, r3, r1
 8005dfc:	4543      	cmp	r3, r8
 8005dfe:	dcf0      	bgt.n	8005de2 <_printf_float+0x442>
 8005e00:	e6f8      	b.n	8005bf4 <_printf_float+0x254>
 8005e02:	f04f 0800 	mov.w	r8, #0
 8005e06:	f104 0919 	add.w	r9, r4, #25
 8005e0a:	e7f4      	b.n	8005df6 <_printf_float+0x456>

08005e0c <_printf_common>:
 8005e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e10:	4616      	mov	r6, r2
 8005e12:	4699      	mov	r9, r3
 8005e14:	688a      	ldr	r2, [r1, #8]
 8005e16:	690b      	ldr	r3, [r1, #16]
 8005e18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	bfb8      	it	lt
 8005e20:	4613      	movlt	r3, r2
 8005e22:	6033      	str	r3, [r6, #0]
 8005e24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e28:	4607      	mov	r7, r0
 8005e2a:	460c      	mov	r4, r1
 8005e2c:	b10a      	cbz	r2, 8005e32 <_printf_common+0x26>
 8005e2e:	3301      	adds	r3, #1
 8005e30:	6033      	str	r3, [r6, #0]
 8005e32:	6823      	ldr	r3, [r4, #0]
 8005e34:	0699      	lsls	r1, r3, #26
 8005e36:	bf42      	ittt	mi
 8005e38:	6833      	ldrmi	r3, [r6, #0]
 8005e3a:	3302      	addmi	r3, #2
 8005e3c:	6033      	strmi	r3, [r6, #0]
 8005e3e:	6825      	ldr	r5, [r4, #0]
 8005e40:	f015 0506 	ands.w	r5, r5, #6
 8005e44:	d106      	bne.n	8005e54 <_printf_common+0x48>
 8005e46:	f104 0a19 	add.w	sl, r4, #25
 8005e4a:	68e3      	ldr	r3, [r4, #12]
 8005e4c:	6832      	ldr	r2, [r6, #0]
 8005e4e:	1a9b      	subs	r3, r3, r2
 8005e50:	42ab      	cmp	r3, r5
 8005e52:	dc26      	bgt.n	8005ea2 <_printf_common+0x96>
 8005e54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e58:	1e13      	subs	r3, r2, #0
 8005e5a:	6822      	ldr	r2, [r4, #0]
 8005e5c:	bf18      	it	ne
 8005e5e:	2301      	movne	r3, #1
 8005e60:	0692      	lsls	r2, r2, #26
 8005e62:	d42b      	bmi.n	8005ebc <_printf_common+0xb0>
 8005e64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e68:	4649      	mov	r1, r9
 8005e6a:	4638      	mov	r0, r7
 8005e6c:	47c0      	blx	r8
 8005e6e:	3001      	adds	r0, #1
 8005e70:	d01e      	beq.n	8005eb0 <_printf_common+0xa4>
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	6922      	ldr	r2, [r4, #16]
 8005e76:	f003 0306 	and.w	r3, r3, #6
 8005e7a:	2b04      	cmp	r3, #4
 8005e7c:	bf02      	ittt	eq
 8005e7e:	68e5      	ldreq	r5, [r4, #12]
 8005e80:	6833      	ldreq	r3, [r6, #0]
 8005e82:	1aed      	subeq	r5, r5, r3
 8005e84:	68a3      	ldr	r3, [r4, #8]
 8005e86:	bf0c      	ite	eq
 8005e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e8c:	2500      	movne	r5, #0
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	bfc4      	itt	gt
 8005e92:	1a9b      	subgt	r3, r3, r2
 8005e94:	18ed      	addgt	r5, r5, r3
 8005e96:	2600      	movs	r6, #0
 8005e98:	341a      	adds	r4, #26
 8005e9a:	42b5      	cmp	r5, r6
 8005e9c:	d11a      	bne.n	8005ed4 <_printf_common+0xc8>
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	e008      	b.n	8005eb4 <_printf_common+0xa8>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	4652      	mov	r2, sl
 8005ea6:	4649      	mov	r1, r9
 8005ea8:	4638      	mov	r0, r7
 8005eaa:	47c0      	blx	r8
 8005eac:	3001      	adds	r0, #1
 8005eae:	d103      	bne.n	8005eb8 <_printf_common+0xac>
 8005eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb8:	3501      	adds	r5, #1
 8005eba:	e7c6      	b.n	8005e4a <_printf_common+0x3e>
 8005ebc:	18e1      	adds	r1, r4, r3
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	2030      	movs	r0, #48	; 0x30
 8005ec2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ec6:	4422      	add	r2, r4
 8005ec8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ecc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ed0:	3302      	adds	r3, #2
 8005ed2:	e7c7      	b.n	8005e64 <_printf_common+0x58>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	4622      	mov	r2, r4
 8005ed8:	4649      	mov	r1, r9
 8005eda:	4638      	mov	r0, r7
 8005edc:	47c0      	blx	r8
 8005ede:	3001      	adds	r0, #1
 8005ee0:	d0e6      	beq.n	8005eb0 <_printf_common+0xa4>
 8005ee2:	3601      	adds	r6, #1
 8005ee4:	e7d9      	b.n	8005e9a <_printf_common+0x8e>
	...

08005ee8 <_printf_i>:
 8005ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005eec:	7e0f      	ldrb	r7, [r1, #24]
 8005eee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ef0:	2f78      	cmp	r7, #120	; 0x78
 8005ef2:	4691      	mov	r9, r2
 8005ef4:	4680      	mov	r8, r0
 8005ef6:	460c      	mov	r4, r1
 8005ef8:	469a      	mov	sl, r3
 8005efa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005efe:	d807      	bhi.n	8005f10 <_printf_i+0x28>
 8005f00:	2f62      	cmp	r7, #98	; 0x62
 8005f02:	d80a      	bhi.n	8005f1a <_printf_i+0x32>
 8005f04:	2f00      	cmp	r7, #0
 8005f06:	f000 80d4 	beq.w	80060b2 <_printf_i+0x1ca>
 8005f0a:	2f58      	cmp	r7, #88	; 0x58
 8005f0c:	f000 80c0 	beq.w	8006090 <_printf_i+0x1a8>
 8005f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f18:	e03a      	b.n	8005f90 <_printf_i+0xa8>
 8005f1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f1e:	2b15      	cmp	r3, #21
 8005f20:	d8f6      	bhi.n	8005f10 <_printf_i+0x28>
 8005f22:	a101      	add	r1, pc, #4	; (adr r1, 8005f28 <_printf_i+0x40>)
 8005f24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f28:	08005f81 	.word	0x08005f81
 8005f2c:	08005f95 	.word	0x08005f95
 8005f30:	08005f11 	.word	0x08005f11
 8005f34:	08005f11 	.word	0x08005f11
 8005f38:	08005f11 	.word	0x08005f11
 8005f3c:	08005f11 	.word	0x08005f11
 8005f40:	08005f95 	.word	0x08005f95
 8005f44:	08005f11 	.word	0x08005f11
 8005f48:	08005f11 	.word	0x08005f11
 8005f4c:	08005f11 	.word	0x08005f11
 8005f50:	08005f11 	.word	0x08005f11
 8005f54:	08006099 	.word	0x08006099
 8005f58:	08005fc1 	.word	0x08005fc1
 8005f5c:	08006053 	.word	0x08006053
 8005f60:	08005f11 	.word	0x08005f11
 8005f64:	08005f11 	.word	0x08005f11
 8005f68:	080060bb 	.word	0x080060bb
 8005f6c:	08005f11 	.word	0x08005f11
 8005f70:	08005fc1 	.word	0x08005fc1
 8005f74:	08005f11 	.word	0x08005f11
 8005f78:	08005f11 	.word	0x08005f11
 8005f7c:	0800605b 	.word	0x0800605b
 8005f80:	682b      	ldr	r3, [r5, #0]
 8005f82:	1d1a      	adds	r2, r3, #4
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	602a      	str	r2, [r5, #0]
 8005f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f90:	2301      	movs	r3, #1
 8005f92:	e09f      	b.n	80060d4 <_printf_i+0x1ec>
 8005f94:	6820      	ldr	r0, [r4, #0]
 8005f96:	682b      	ldr	r3, [r5, #0]
 8005f98:	0607      	lsls	r7, r0, #24
 8005f9a:	f103 0104 	add.w	r1, r3, #4
 8005f9e:	6029      	str	r1, [r5, #0]
 8005fa0:	d501      	bpl.n	8005fa6 <_printf_i+0xbe>
 8005fa2:	681e      	ldr	r6, [r3, #0]
 8005fa4:	e003      	b.n	8005fae <_printf_i+0xc6>
 8005fa6:	0646      	lsls	r6, r0, #25
 8005fa8:	d5fb      	bpl.n	8005fa2 <_printf_i+0xba>
 8005faa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005fae:	2e00      	cmp	r6, #0
 8005fb0:	da03      	bge.n	8005fba <_printf_i+0xd2>
 8005fb2:	232d      	movs	r3, #45	; 0x2d
 8005fb4:	4276      	negs	r6, r6
 8005fb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fba:	485a      	ldr	r0, [pc, #360]	; (8006124 <_printf_i+0x23c>)
 8005fbc:	230a      	movs	r3, #10
 8005fbe:	e012      	b.n	8005fe6 <_printf_i+0xfe>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	6820      	ldr	r0, [r4, #0]
 8005fc4:	1d19      	adds	r1, r3, #4
 8005fc6:	6029      	str	r1, [r5, #0]
 8005fc8:	0605      	lsls	r5, r0, #24
 8005fca:	d501      	bpl.n	8005fd0 <_printf_i+0xe8>
 8005fcc:	681e      	ldr	r6, [r3, #0]
 8005fce:	e002      	b.n	8005fd6 <_printf_i+0xee>
 8005fd0:	0641      	lsls	r1, r0, #25
 8005fd2:	d5fb      	bpl.n	8005fcc <_printf_i+0xe4>
 8005fd4:	881e      	ldrh	r6, [r3, #0]
 8005fd6:	4853      	ldr	r0, [pc, #332]	; (8006124 <_printf_i+0x23c>)
 8005fd8:	2f6f      	cmp	r7, #111	; 0x6f
 8005fda:	bf0c      	ite	eq
 8005fdc:	2308      	moveq	r3, #8
 8005fde:	230a      	movne	r3, #10
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fe6:	6865      	ldr	r5, [r4, #4]
 8005fe8:	60a5      	str	r5, [r4, #8]
 8005fea:	2d00      	cmp	r5, #0
 8005fec:	bfa2      	ittt	ge
 8005fee:	6821      	ldrge	r1, [r4, #0]
 8005ff0:	f021 0104 	bicge.w	r1, r1, #4
 8005ff4:	6021      	strge	r1, [r4, #0]
 8005ff6:	b90e      	cbnz	r6, 8005ffc <_printf_i+0x114>
 8005ff8:	2d00      	cmp	r5, #0
 8005ffa:	d04b      	beq.n	8006094 <_printf_i+0x1ac>
 8005ffc:	4615      	mov	r5, r2
 8005ffe:	fbb6 f1f3 	udiv	r1, r6, r3
 8006002:	fb03 6711 	mls	r7, r3, r1, r6
 8006006:	5dc7      	ldrb	r7, [r0, r7]
 8006008:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800600c:	4637      	mov	r7, r6
 800600e:	42bb      	cmp	r3, r7
 8006010:	460e      	mov	r6, r1
 8006012:	d9f4      	bls.n	8005ffe <_printf_i+0x116>
 8006014:	2b08      	cmp	r3, #8
 8006016:	d10b      	bne.n	8006030 <_printf_i+0x148>
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	07de      	lsls	r6, r3, #31
 800601c:	d508      	bpl.n	8006030 <_printf_i+0x148>
 800601e:	6923      	ldr	r3, [r4, #16]
 8006020:	6861      	ldr	r1, [r4, #4]
 8006022:	4299      	cmp	r1, r3
 8006024:	bfde      	ittt	le
 8006026:	2330      	movle	r3, #48	; 0x30
 8006028:	f805 3c01 	strble.w	r3, [r5, #-1]
 800602c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006030:	1b52      	subs	r2, r2, r5
 8006032:	6122      	str	r2, [r4, #16]
 8006034:	f8cd a000 	str.w	sl, [sp]
 8006038:	464b      	mov	r3, r9
 800603a:	aa03      	add	r2, sp, #12
 800603c:	4621      	mov	r1, r4
 800603e:	4640      	mov	r0, r8
 8006040:	f7ff fee4 	bl	8005e0c <_printf_common>
 8006044:	3001      	adds	r0, #1
 8006046:	d14a      	bne.n	80060de <_printf_i+0x1f6>
 8006048:	f04f 30ff 	mov.w	r0, #4294967295
 800604c:	b004      	add	sp, #16
 800604e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	f043 0320 	orr.w	r3, r3, #32
 8006058:	6023      	str	r3, [r4, #0]
 800605a:	4833      	ldr	r0, [pc, #204]	; (8006128 <_printf_i+0x240>)
 800605c:	2778      	movs	r7, #120	; 0x78
 800605e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	6829      	ldr	r1, [r5, #0]
 8006066:	061f      	lsls	r7, r3, #24
 8006068:	f851 6b04 	ldr.w	r6, [r1], #4
 800606c:	d402      	bmi.n	8006074 <_printf_i+0x18c>
 800606e:	065f      	lsls	r7, r3, #25
 8006070:	bf48      	it	mi
 8006072:	b2b6      	uxthmi	r6, r6
 8006074:	07df      	lsls	r7, r3, #31
 8006076:	bf48      	it	mi
 8006078:	f043 0320 	orrmi.w	r3, r3, #32
 800607c:	6029      	str	r1, [r5, #0]
 800607e:	bf48      	it	mi
 8006080:	6023      	strmi	r3, [r4, #0]
 8006082:	b91e      	cbnz	r6, 800608c <_printf_i+0x1a4>
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	f023 0320 	bic.w	r3, r3, #32
 800608a:	6023      	str	r3, [r4, #0]
 800608c:	2310      	movs	r3, #16
 800608e:	e7a7      	b.n	8005fe0 <_printf_i+0xf8>
 8006090:	4824      	ldr	r0, [pc, #144]	; (8006124 <_printf_i+0x23c>)
 8006092:	e7e4      	b.n	800605e <_printf_i+0x176>
 8006094:	4615      	mov	r5, r2
 8006096:	e7bd      	b.n	8006014 <_printf_i+0x12c>
 8006098:	682b      	ldr	r3, [r5, #0]
 800609a:	6826      	ldr	r6, [r4, #0]
 800609c:	6961      	ldr	r1, [r4, #20]
 800609e:	1d18      	adds	r0, r3, #4
 80060a0:	6028      	str	r0, [r5, #0]
 80060a2:	0635      	lsls	r5, r6, #24
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	d501      	bpl.n	80060ac <_printf_i+0x1c4>
 80060a8:	6019      	str	r1, [r3, #0]
 80060aa:	e002      	b.n	80060b2 <_printf_i+0x1ca>
 80060ac:	0670      	lsls	r0, r6, #25
 80060ae:	d5fb      	bpl.n	80060a8 <_printf_i+0x1c0>
 80060b0:	8019      	strh	r1, [r3, #0]
 80060b2:	2300      	movs	r3, #0
 80060b4:	6123      	str	r3, [r4, #16]
 80060b6:	4615      	mov	r5, r2
 80060b8:	e7bc      	b.n	8006034 <_printf_i+0x14c>
 80060ba:	682b      	ldr	r3, [r5, #0]
 80060bc:	1d1a      	adds	r2, r3, #4
 80060be:	602a      	str	r2, [r5, #0]
 80060c0:	681d      	ldr	r5, [r3, #0]
 80060c2:	6862      	ldr	r2, [r4, #4]
 80060c4:	2100      	movs	r1, #0
 80060c6:	4628      	mov	r0, r5
 80060c8:	f7fa f88a 	bl	80001e0 <memchr>
 80060cc:	b108      	cbz	r0, 80060d2 <_printf_i+0x1ea>
 80060ce:	1b40      	subs	r0, r0, r5
 80060d0:	6060      	str	r0, [r4, #4]
 80060d2:	6863      	ldr	r3, [r4, #4]
 80060d4:	6123      	str	r3, [r4, #16]
 80060d6:	2300      	movs	r3, #0
 80060d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060dc:	e7aa      	b.n	8006034 <_printf_i+0x14c>
 80060de:	6923      	ldr	r3, [r4, #16]
 80060e0:	462a      	mov	r2, r5
 80060e2:	4649      	mov	r1, r9
 80060e4:	4640      	mov	r0, r8
 80060e6:	47d0      	blx	sl
 80060e8:	3001      	adds	r0, #1
 80060ea:	d0ad      	beq.n	8006048 <_printf_i+0x160>
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	079b      	lsls	r3, r3, #30
 80060f0:	d413      	bmi.n	800611a <_printf_i+0x232>
 80060f2:	68e0      	ldr	r0, [r4, #12]
 80060f4:	9b03      	ldr	r3, [sp, #12]
 80060f6:	4298      	cmp	r0, r3
 80060f8:	bfb8      	it	lt
 80060fa:	4618      	movlt	r0, r3
 80060fc:	e7a6      	b.n	800604c <_printf_i+0x164>
 80060fe:	2301      	movs	r3, #1
 8006100:	4632      	mov	r2, r6
 8006102:	4649      	mov	r1, r9
 8006104:	4640      	mov	r0, r8
 8006106:	47d0      	blx	sl
 8006108:	3001      	adds	r0, #1
 800610a:	d09d      	beq.n	8006048 <_printf_i+0x160>
 800610c:	3501      	adds	r5, #1
 800610e:	68e3      	ldr	r3, [r4, #12]
 8006110:	9903      	ldr	r1, [sp, #12]
 8006112:	1a5b      	subs	r3, r3, r1
 8006114:	42ab      	cmp	r3, r5
 8006116:	dcf2      	bgt.n	80060fe <_printf_i+0x216>
 8006118:	e7eb      	b.n	80060f2 <_printf_i+0x20a>
 800611a:	2500      	movs	r5, #0
 800611c:	f104 0619 	add.w	r6, r4, #25
 8006120:	e7f5      	b.n	800610e <_printf_i+0x226>
 8006122:	bf00      	nop
 8006124:	0800a1be 	.word	0x0800a1be
 8006128:	0800a1cf 	.word	0x0800a1cf

0800612c <_scanf_float>:
 800612c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006130:	b087      	sub	sp, #28
 8006132:	4617      	mov	r7, r2
 8006134:	9303      	str	r3, [sp, #12]
 8006136:	688b      	ldr	r3, [r1, #8]
 8006138:	1e5a      	subs	r2, r3, #1
 800613a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800613e:	bf83      	ittte	hi
 8006140:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006144:	195b      	addhi	r3, r3, r5
 8006146:	9302      	strhi	r3, [sp, #8]
 8006148:	2300      	movls	r3, #0
 800614a:	bf86      	itte	hi
 800614c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006150:	608b      	strhi	r3, [r1, #8]
 8006152:	9302      	strls	r3, [sp, #8]
 8006154:	680b      	ldr	r3, [r1, #0]
 8006156:	468b      	mov	fp, r1
 8006158:	2500      	movs	r5, #0
 800615a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800615e:	f84b 3b1c 	str.w	r3, [fp], #28
 8006162:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006166:	4680      	mov	r8, r0
 8006168:	460c      	mov	r4, r1
 800616a:	465e      	mov	r6, fp
 800616c:	46aa      	mov	sl, r5
 800616e:	46a9      	mov	r9, r5
 8006170:	9501      	str	r5, [sp, #4]
 8006172:	68a2      	ldr	r2, [r4, #8]
 8006174:	b152      	cbz	r2, 800618c <_scanf_float+0x60>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	2b4e      	cmp	r3, #78	; 0x4e
 800617c:	d864      	bhi.n	8006248 <_scanf_float+0x11c>
 800617e:	2b40      	cmp	r3, #64	; 0x40
 8006180:	d83c      	bhi.n	80061fc <_scanf_float+0xd0>
 8006182:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006186:	b2c8      	uxtb	r0, r1
 8006188:	280e      	cmp	r0, #14
 800618a:	d93a      	bls.n	8006202 <_scanf_float+0xd6>
 800618c:	f1b9 0f00 	cmp.w	r9, #0
 8006190:	d003      	beq.n	800619a <_scanf_float+0x6e>
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006198:	6023      	str	r3, [r4, #0]
 800619a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800619e:	f1ba 0f01 	cmp.w	sl, #1
 80061a2:	f200 8113 	bhi.w	80063cc <_scanf_float+0x2a0>
 80061a6:	455e      	cmp	r6, fp
 80061a8:	f200 8105 	bhi.w	80063b6 <_scanf_float+0x28a>
 80061ac:	2501      	movs	r5, #1
 80061ae:	4628      	mov	r0, r5
 80061b0:	b007      	add	sp, #28
 80061b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80061ba:	2a0d      	cmp	r2, #13
 80061bc:	d8e6      	bhi.n	800618c <_scanf_float+0x60>
 80061be:	a101      	add	r1, pc, #4	; (adr r1, 80061c4 <_scanf_float+0x98>)
 80061c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80061c4:	08006303 	.word	0x08006303
 80061c8:	0800618d 	.word	0x0800618d
 80061cc:	0800618d 	.word	0x0800618d
 80061d0:	0800618d 	.word	0x0800618d
 80061d4:	08006363 	.word	0x08006363
 80061d8:	0800633b 	.word	0x0800633b
 80061dc:	0800618d 	.word	0x0800618d
 80061e0:	0800618d 	.word	0x0800618d
 80061e4:	08006311 	.word	0x08006311
 80061e8:	0800618d 	.word	0x0800618d
 80061ec:	0800618d 	.word	0x0800618d
 80061f0:	0800618d 	.word	0x0800618d
 80061f4:	0800618d 	.word	0x0800618d
 80061f8:	080062c9 	.word	0x080062c9
 80061fc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006200:	e7db      	b.n	80061ba <_scanf_float+0x8e>
 8006202:	290e      	cmp	r1, #14
 8006204:	d8c2      	bhi.n	800618c <_scanf_float+0x60>
 8006206:	a001      	add	r0, pc, #4	; (adr r0, 800620c <_scanf_float+0xe0>)
 8006208:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800620c:	080062bb 	.word	0x080062bb
 8006210:	0800618d 	.word	0x0800618d
 8006214:	080062bb 	.word	0x080062bb
 8006218:	0800634f 	.word	0x0800634f
 800621c:	0800618d 	.word	0x0800618d
 8006220:	08006269 	.word	0x08006269
 8006224:	080062a5 	.word	0x080062a5
 8006228:	080062a5 	.word	0x080062a5
 800622c:	080062a5 	.word	0x080062a5
 8006230:	080062a5 	.word	0x080062a5
 8006234:	080062a5 	.word	0x080062a5
 8006238:	080062a5 	.word	0x080062a5
 800623c:	080062a5 	.word	0x080062a5
 8006240:	080062a5 	.word	0x080062a5
 8006244:	080062a5 	.word	0x080062a5
 8006248:	2b6e      	cmp	r3, #110	; 0x6e
 800624a:	d809      	bhi.n	8006260 <_scanf_float+0x134>
 800624c:	2b60      	cmp	r3, #96	; 0x60
 800624e:	d8b2      	bhi.n	80061b6 <_scanf_float+0x8a>
 8006250:	2b54      	cmp	r3, #84	; 0x54
 8006252:	d077      	beq.n	8006344 <_scanf_float+0x218>
 8006254:	2b59      	cmp	r3, #89	; 0x59
 8006256:	d199      	bne.n	800618c <_scanf_float+0x60>
 8006258:	2d07      	cmp	r5, #7
 800625a:	d197      	bne.n	800618c <_scanf_float+0x60>
 800625c:	2508      	movs	r5, #8
 800625e:	e029      	b.n	80062b4 <_scanf_float+0x188>
 8006260:	2b74      	cmp	r3, #116	; 0x74
 8006262:	d06f      	beq.n	8006344 <_scanf_float+0x218>
 8006264:	2b79      	cmp	r3, #121	; 0x79
 8006266:	e7f6      	b.n	8006256 <_scanf_float+0x12a>
 8006268:	6821      	ldr	r1, [r4, #0]
 800626a:	05c8      	lsls	r0, r1, #23
 800626c:	d51a      	bpl.n	80062a4 <_scanf_float+0x178>
 800626e:	9b02      	ldr	r3, [sp, #8]
 8006270:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006274:	6021      	str	r1, [r4, #0]
 8006276:	f109 0901 	add.w	r9, r9, #1
 800627a:	b11b      	cbz	r3, 8006284 <_scanf_float+0x158>
 800627c:	3b01      	subs	r3, #1
 800627e:	3201      	adds	r2, #1
 8006280:	9302      	str	r3, [sp, #8]
 8006282:	60a2      	str	r2, [r4, #8]
 8006284:	68a3      	ldr	r3, [r4, #8]
 8006286:	3b01      	subs	r3, #1
 8006288:	60a3      	str	r3, [r4, #8]
 800628a:	6923      	ldr	r3, [r4, #16]
 800628c:	3301      	adds	r3, #1
 800628e:	6123      	str	r3, [r4, #16]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	3b01      	subs	r3, #1
 8006294:	2b00      	cmp	r3, #0
 8006296:	607b      	str	r3, [r7, #4]
 8006298:	f340 8084 	ble.w	80063a4 <_scanf_float+0x278>
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	3301      	adds	r3, #1
 80062a0:	603b      	str	r3, [r7, #0]
 80062a2:	e766      	b.n	8006172 <_scanf_float+0x46>
 80062a4:	eb1a 0f05 	cmn.w	sl, r5
 80062a8:	f47f af70 	bne.w	800618c <_scanf_float+0x60>
 80062ac:	6822      	ldr	r2, [r4, #0]
 80062ae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80062b2:	6022      	str	r2, [r4, #0]
 80062b4:	f806 3b01 	strb.w	r3, [r6], #1
 80062b8:	e7e4      	b.n	8006284 <_scanf_float+0x158>
 80062ba:	6822      	ldr	r2, [r4, #0]
 80062bc:	0610      	lsls	r0, r2, #24
 80062be:	f57f af65 	bpl.w	800618c <_scanf_float+0x60>
 80062c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062c6:	e7f4      	b.n	80062b2 <_scanf_float+0x186>
 80062c8:	f1ba 0f00 	cmp.w	sl, #0
 80062cc:	d10e      	bne.n	80062ec <_scanf_float+0x1c0>
 80062ce:	f1b9 0f00 	cmp.w	r9, #0
 80062d2:	d10e      	bne.n	80062f2 <_scanf_float+0x1c6>
 80062d4:	6822      	ldr	r2, [r4, #0]
 80062d6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80062da:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80062de:	d108      	bne.n	80062f2 <_scanf_float+0x1c6>
 80062e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80062e4:	6022      	str	r2, [r4, #0]
 80062e6:	f04f 0a01 	mov.w	sl, #1
 80062ea:	e7e3      	b.n	80062b4 <_scanf_float+0x188>
 80062ec:	f1ba 0f02 	cmp.w	sl, #2
 80062f0:	d055      	beq.n	800639e <_scanf_float+0x272>
 80062f2:	2d01      	cmp	r5, #1
 80062f4:	d002      	beq.n	80062fc <_scanf_float+0x1d0>
 80062f6:	2d04      	cmp	r5, #4
 80062f8:	f47f af48 	bne.w	800618c <_scanf_float+0x60>
 80062fc:	3501      	adds	r5, #1
 80062fe:	b2ed      	uxtb	r5, r5
 8006300:	e7d8      	b.n	80062b4 <_scanf_float+0x188>
 8006302:	f1ba 0f01 	cmp.w	sl, #1
 8006306:	f47f af41 	bne.w	800618c <_scanf_float+0x60>
 800630a:	f04f 0a02 	mov.w	sl, #2
 800630e:	e7d1      	b.n	80062b4 <_scanf_float+0x188>
 8006310:	b97d      	cbnz	r5, 8006332 <_scanf_float+0x206>
 8006312:	f1b9 0f00 	cmp.w	r9, #0
 8006316:	f47f af3c 	bne.w	8006192 <_scanf_float+0x66>
 800631a:	6822      	ldr	r2, [r4, #0]
 800631c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006320:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006324:	f47f af39 	bne.w	800619a <_scanf_float+0x6e>
 8006328:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800632c:	6022      	str	r2, [r4, #0]
 800632e:	2501      	movs	r5, #1
 8006330:	e7c0      	b.n	80062b4 <_scanf_float+0x188>
 8006332:	2d03      	cmp	r5, #3
 8006334:	d0e2      	beq.n	80062fc <_scanf_float+0x1d0>
 8006336:	2d05      	cmp	r5, #5
 8006338:	e7de      	b.n	80062f8 <_scanf_float+0x1cc>
 800633a:	2d02      	cmp	r5, #2
 800633c:	f47f af26 	bne.w	800618c <_scanf_float+0x60>
 8006340:	2503      	movs	r5, #3
 8006342:	e7b7      	b.n	80062b4 <_scanf_float+0x188>
 8006344:	2d06      	cmp	r5, #6
 8006346:	f47f af21 	bne.w	800618c <_scanf_float+0x60>
 800634a:	2507      	movs	r5, #7
 800634c:	e7b2      	b.n	80062b4 <_scanf_float+0x188>
 800634e:	6822      	ldr	r2, [r4, #0]
 8006350:	0591      	lsls	r1, r2, #22
 8006352:	f57f af1b 	bpl.w	800618c <_scanf_float+0x60>
 8006356:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800635a:	6022      	str	r2, [r4, #0]
 800635c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006360:	e7a8      	b.n	80062b4 <_scanf_float+0x188>
 8006362:	6822      	ldr	r2, [r4, #0]
 8006364:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006368:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800636c:	d006      	beq.n	800637c <_scanf_float+0x250>
 800636e:	0550      	lsls	r0, r2, #21
 8006370:	f57f af0c 	bpl.w	800618c <_scanf_float+0x60>
 8006374:	f1b9 0f00 	cmp.w	r9, #0
 8006378:	f43f af0f 	beq.w	800619a <_scanf_float+0x6e>
 800637c:	0591      	lsls	r1, r2, #22
 800637e:	bf58      	it	pl
 8006380:	9901      	ldrpl	r1, [sp, #4]
 8006382:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006386:	bf58      	it	pl
 8006388:	eba9 0101 	subpl.w	r1, r9, r1
 800638c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006390:	bf58      	it	pl
 8006392:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006396:	6022      	str	r2, [r4, #0]
 8006398:	f04f 0900 	mov.w	r9, #0
 800639c:	e78a      	b.n	80062b4 <_scanf_float+0x188>
 800639e:	f04f 0a03 	mov.w	sl, #3
 80063a2:	e787      	b.n	80062b4 <_scanf_float+0x188>
 80063a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80063a8:	4639      	mov	r1, r7
 80063aa:	4640      	mov	r0, r8
 80063ac:	4798      	blx	r3
 80063ae:	2800      	cmp	r0, #0
 80063b0:	f43f aedf 	beq.w	8006172 <_scanf_float+0x46>
 80063b4:	e6ea      	b.n	800618c <_scanf_float+0x60>
 80063b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063be:	463a      	mov	r2, r7
 80063c0:	4640      	mov	r0, r8
 80063c2:	4798      	blx	r3
 80063c4:	6923      	ldr	r3, [r4, #16]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	6123      	str	r3, [r4, #16]
 80063ca:	e6ec      	b.n	80061a6 <_scanf_float+0x7a>
 80063cc:	1e6b      	subs	r3, r5, #1
 80063ce:	2b06      	cmp	r3, #6
 80063d0:	d825      	bhi.n	800641e <_scanf_float+0x2f2>
 80063d2:	2d02      	cmp	r5, #2
 80063d4:	d836      	bhi.n	8006444 <_scanf_float+0x318>
 80063d6:	455e      	cmp	r6, fp
 80063d8:	f67f aee8 	bls.w	80061ac <_scanf_float+0x80>
 80063dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063e4:	463a      	mov	r2, r7
 80063e6:	4640      	mov	r0, r8
 80063e8:	4798      	blx	r3
 80063ea:	6923      	ldr	r3, [r4, #16]
 80063ec:	3b01      	subs	r3, #1
 80063ee:	6123      	str	r3, [r4, #16]
 80063f0:	e7f1      	b.n	80063d6 <_scanf_float+0x2aa>
 80063f2:	9802      	ldr	r0, [sp, #8]
 80063f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063f8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80063fc:	9002      	str	r0, [sp, #8]
 80063fe:	463a      	mov	r2, r7
 8006400:	4640      	mov	r0, r8
 8006402:	4798      	blx	r3
 8006404:	6923      	ldr	r3, [r4, #16]
 8006406:	3b01      	subs	r3, #1
 8006408:	6123      	str	r3, [r4, #16]
 800640a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800640e:	fa5f fa8a 	uxtb.w	sl, sl
 8006412:	f1ba 0f02 	cmp.w	sl, #2
 8006416:	d1ec      	bne.n	80063f2 <_scanf_float+0x2c6>
 8006418:	3d03      	subs	r5, #3
 800641a:	b2ed      	uxtb	r5, r5
 800641c:	1b76      	subs	r6, r6, r5
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	05da      	lsls	r2, r3, #23
 8006422:	d52f      	bpl.n	8006484 <_scanf_float+0x358>
 8006424:	055b      	lsls	r3, r3, #21
 8006426:	d510      	bpl.n	800644a <_scanf_float+0x31e>
 8006428:	455e      	cmp	r6, fp
 800642a:	f67f aebf 	bls.w	80061ac <_scanf_float+0x80>
 800642e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006432:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006436:	463a      	mov	r2, r7
 8006438:	4640      	mov	r0, r8
 800643a:	4798      	blx	r3
 800643c:	6923      	ldr	r3, [r4, #16]
 800643e:	3b01      	subs	r3, #1
 8006440:	6123      	str	r3, [r4, #16]
 8006442:	e7f1      	b.n	8006428 <_scanf_float+0x2fc>
 8006444:	46aa      	mov	sl, r5
 8006446:	9602      	str	r6, [sp, #8]
 8006448:	e7df      	b.n	800640a <_scanf_float+0x2de>
 800644a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800644e:	6923      	ldr	r3, [r4, #16]
 8006450:	2965      	cmp	r1, #101	; 0x65
 8006452:	f103 33ff 	add.w	r3, r3, #4294967295
 8006456:	f106 35ff 	add.w	r5, r6, #4294967295
 800645a:	6123      	str	r3, [r4, #16]
 800645c:	d00c      	beq.n	8006478 <_scanf_float+0x34c>
 800645e:	2945      	cmp	r1, #69	; 0x45
 8006460:	d00a      	beq.n	8006478 <_scanf_float+0x34c>
 8006462:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006466:	463a      	mov	r2, r7
 8006468:	4640      	mov	r0, r8
 800646a:	4798      	blx	r3
 800646c:	6923      	ldr	r3, [r4, #16]
 800646e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006472:	3b01      	subs	r3, #1
 8006474:	1eb5      	subs	r5, r6, #2
 8006476:	6123      	str	r3, [r4, #16]
 8006478:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800647c:	463a      	mov	r2, r7
 800647e:	4640      	mov	r0, r8
 8006480:	4798      	blx	r3
 8006482:	462e      	mov	r6, r5
 8006484:	6825      	ldr	r5, [r4, #0]
 8006486:	f015 0510 	ands.w	r5, r5, #16
 800648a:	d158      	bne.n	800653e <_scanf_float+0x412>
 800648c:	7035      	strb	r5, [r6, #0]
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006498:	d11c      	bne.n	80064d4 <_scanf_float+0x3a8>
 800649a:	9b01      	ldr	r3, [sp, #4]
 800649c:	454b      	cmp	r3, r9
 800649e:	eba3 0209 	sub.w	r2, r3, r9
 80064a2:	d124      	bne.n	80064ee <_scanf_float+0x3c2>
 80064a4:	2200      	movs	r2, #0
 80064a6:	4659      	mov	r1, fp
 80064a8:	4640      	mov	r0, r8
 80064aa:	f002 fd31 	bl	8008f10 <_strtod_r>
 80064ae:	9b03      	ldr	r3, [sp, #12]
 80064b0:	6821      	ldr	r1, [r4, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f011 0f02 	tst.w	r1, #2
 80064b8:	ec57 6b10 	vmov	r6, r7, d0
 80064bc:	f103 0204 	add.w	r2, r3, #4
 80064c0:	d020      	beq.n	8006504 <_scanf_float+0x3d8>
 80064c2:	9903      	ldr	r1, [sp, #12]
 80064c4:	600a      	str	r2, [r1, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	e9c3 6700 	strd	r6, r7, [r3]
 80064cc:	68e3      	ldr	r3, [r4, #12]
 80064ce:	3301      	adds	r3, #1
 80064d0:	60e3      	str	r3, [r4, #12]
 80064d2:	e66c      	b.n	80061ae <_scanf_float+0x82>
 80064d4:	9b04      	ldr	r3, [sp, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d0e4      	beq.n	80064a4 <_scanf_float+0x378>
 80064da:	9905      	ldr	r1, [sp, #20]
 80064dc:	230a      	movs	r3, #10
 80064de:	462a      	mov	r2, r5
 80064e0:	3101      	adds	r1, #1
 80064e2:	4640      	mov	r0, r8
 80064e4:	f002 fd9c 	bl	8009020 <_strtol_r>
 80064e8:	9b04      	ldr	r3, [sp, #16]
 80064ea:	9e05      	ldr	r6, [sp, #20]
 80064ec:	1ac2      	subs	r2, r0, r3
 80064ee:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80064f2:	429e      	cmp	r6, r3
 80064f4:	bf28      	it	cs
 80064f6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80064fa:	4912      	ldr	r1, [pc, #72]	; (8006544 <_scanf_float+0x418>)
 80064fc:	4630      	mov	r0, r6
 80064fe:	f000 f955 	bl	80067ac <siprintf>
 8006502:	e7cf      	b.n	80064a4 <_scanf_float+0x378>
 8006504:	f011 0f04 	tst.w	r1, #4
 8006508:	9903      	ldr	r1, [sp, #12]
 800650a:	600a      	str	r2, [r1, #0]
 800650c:	d1db      	bne.n	80064c6 <_scanf_float+0x39a>
 800650e:	f8d3 8000 	ldr.w	r8, [r3]
 8006512:	ee10 2a10 	vmov	r2, s0
 8006516:	ee10 0a10 	vmov	r0, s0
 800651a:	463b      	mov	r3, r7
 800651c:	4639      	mov	r1, r7
 800651e:	f7fa fb0d 	bl	8000b3c <__aeabi_dcmpun>
 8006522:	b128      	cbz	r0, 8006530 <_scanf_float+0x404>
 8006524:	4808      	ldr	r0, [pc, #32]	; (8006548 <_scanf_float+0x41c>)
 8006526:	f000 fab9 	bl	8006a9c <nanf>
 800652a:	ed88 0a00 	vstr	s0, [r8]
 800652e:	e7cd      	b.n	80064cc <_scanf_float+0x3a0>
 8006530:	4630      	mov	r0, r6
 8006532:	4639      	mov	r1, r7
 8006534:	f7fa fb60 	bl	8000bf8 <__aeabi_d2f>
 8006538:	f8c8 0000 	str.w	r0, [r8]
 800653c:	e7c6      	b.n	80064cc <_scanf_float+0x3a0>
 800653e:	2500      	movs	r5, #0
 8006540:	e635      	b.n	80061ae <_scanf_float+0x82>
 8006542:	bf00      	nop
 8006544:	0800a1e0 	.word	0x0800a1e0
 8006548:	0800a575 	.word	0x0800a575

0800654c <std>:
 800654c:	2300      	movs	r3, #0
 800654e:	b510      	push	{r4, lr}
 8006550:	4604      	mov	r4, r0
 8006552:	e9c0 3300 	strd	r3, r3, [r0]
 8006556:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800655a:	6083      	str	r3, [r0, #8]
 800655c:	8181      	strh	r1, [r0, #12]
 800655e:	6643      	str	r3, [r0, #100]	; 0x64
 8006560:	81c2      	strh	r2, [r0, #14]
 8006562:	6183      	str	r3, [r0, #24]
 8006564:	4619      	mov	r1, r3
 8006566:	2208      	movs	r2, #8
 8006568:	305c      	adds	r0, #92	; 0x5c
 800656a:	f000 fa17 	bl	800699c <memset>
 800656e:	4b0d      	ldr	r3, [pc, #52]	; (80065a4 <std+0x58>)
 8006570:	6263      	str	r3, [r4, #36]	; 0x24
 8006572:	4b0d      	ldr	r3, [pc, #52]	; (80065a8 <std+0x5c>)
 8006574:	62a3      	str	r3, [r4, #40]	; 0x28
 8006576:	4b0d      	ldr	r3, [pc, #52]	; (80065ac <std+0x60>)
 8006578:	62e3      	str	r3, [r4, #44]	; 0x2c
 800657a:	4b0d      	ldr	r3, [pc, #52]	; (80065b0 <std+0x64>)
 800657c:	6323      	str	r3, [r4, #48]	; 0x30
 800657e:	4b0d      	ldr	r3, [pc, #52]	; (80065b4 <std+0x68>)
 8006580:	6224      	str	r4, [r4, #32]
 8006582:	429c      	cmp	r4, r3
 8006584:	d006      	beq.n	8006594 <std+0x48>
 8006586:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800658a:	4294      	cmp	r4, r2
 800658c:	d002      	beq.n	8006594 <std+0x48>
 800658e:	33d0      	adds	r3, #208	; 0xd0
 8006590:	429c      	cmp	r4, r3
 8006592:	d105      	bne.n	80065a0 <std+0x54>
 8006594:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800659c:	f000 ba7a 	b.w	8006a94 <__retarget_lock_init_recursive>
 80065a0:	bd10      	pop	{r4, pc}
 80065a2:	bf00      	nop
 80065a4:	080067ed 	.word	0x080067ed
 80065a8:	0800680f 	.word	0x0800680f
 80065ac:	08006847 	.word	0x08006847
 80065b0:	0800686b 	.word	0x0800686b
 80065b4:	2000038c 	.word	0x2000038c

080065b8 <stdio_exit_handler>:
 80065b8:	4a02      	ldr	r2, [pc, #8]	; (80065c4 <stdio_exit_handler+0xc>)
 80065ba:	4903      	ldr	r1, [pc, #12]	; (80065c8 <stdio_exit_handler+0x10>)
 80065bc:	4803      	ldr	r0, [pc, #12]	; (80065cc <stdio_exit_handler+0x14>)
 80065be:	f000 b869 	b.w	8006694 <_fwalk_sglue>
 80065c2:	bf00      	nop
 80065c4:	2000000c 	.word	0x2000000c
 80065c8:	08009669 	.word	0x08009669
 80065cc:	20000018 	.word	0x20000018

080065d0 <cleanup_stdio>:
 80065d0:	6841      	ldr	r1, [r0, #4]
 80065d2:	4b0c      	ldr	r3, [pc, #48]	; (8006604 <cleanup_stdio+0x34>)
 80065d4:	4299      	cmp	r1, r3
 80065d6:	b510      	push	{r4, lr}
 80065d8:	4604      	mov	r4, r0
 80065da:	d001      	beq.n	80065e0 <cleanup_stdio+0x10>
 80065dc:	f003 f844 	bl	8009668 <_fflush_r>
 80065e0:	68a1      	ldr	r1, [r4, #8]
 80065e2:	4b09      	ldr	r3, [pc, #36]	; (8006608 <cleanup_stdio+0x38>)
 80065e4:	4299      	cmp	r1, r3
 80065e6:	d002      	beq.n	80065ee <cleanup_stdio+0x1e>
 80065e8:	4620      	mov	r0, r4
 80065ea:	f003 f83d 	bl	8009668 <_fflush_r>
 80065ee:	68e1      	ldr	r1, [r4, #12]
 80065f0:	4b06      	ldr	r3, [pc, #24]	; (800660c <cleanup_stdio+0x3c>)
 80065f2:	4299      	cmp	r1, r3
 80065f4:	d004      	beq.n	8006600 <cleanup_stdio+0x30>
 80065f6:	4620      	mov	r0, r4
 80065f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065fc:	f003 b834 	b.w	8009668 <_fflush_r>
 8006600:	bd10      	pop	{r4, pc}
 8006602:	bf00      	nop
 8006604:	2000038c 	.word	0x2000038c
 8006608:	200003f4 	.word	0x200003f4
 800660c:	2000045c 	.word	0x2000045c

08006610 <global_stdio_init.part.0>:
 8006610:	b510      	push	{r4, lr}
 8006612:	4b0b      	ldr	r3, [pc, #44]	; (8006640 <global_stdio_init.part.0+0x30>)
 8006614:	4c0b      	ldr	r4, [pc, #44]	; (8006644 <global_stdio_init.part.0+0x34>)
 8006616:	4a0c      	ldr	r2, [pc, #48]	; (8006648 <global_stdio_init.part.0+0x38>)
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	4620      	mov	r0, r4
 800661c:	2200      	movs	r2, #0
 800661e:	2104      	movs	r1, #4
 8006620:	f7ff ff94 	bl	800654c <std>
 8006624:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006628:	2201      	movs	r2, #1
 800662a:	2109      	movs	r1, #9
 800662c:	f7ff ff8e 	bl	800654c <std>
 8006630:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006634:	2202      	movs	r2, #2
 8006636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800663a:	2112      	movs	r1, #18
 800663c:	f7ff bf86 	b.w	800654c <std>
 8006640:	200004c4 	.word	0x200004c4
 8006644:	2000038c 	.word	0x2000038c
 8006648:	080065b9 	.word	0x080065b9

0800664c <__sfp_lock_acquire>:
 800664c:	4801      	ldr	r0, [pc, #4]	; (8006654 <__sfp_lock_acquire+0x8>)
 800664e:	f000 ba22 	b.w	8006a96 <__retarget_lock_acquire_recursive>
 8006652:	bf00      	nop
 8006654:	200004cd 	.word	0x200004cd

08006658 <__sfp_lock_release>:
 8006658:	4801      	ldr	r0, [pc, #4]	; (8006660 <__sfp_lock_release+0x8>)
 800665a:	f000 ba1d 	b.w	8006a98 <__retarget_lock_release_recursive>
 800665e:	bf00      	nop
 8006660:	200004cd 	.word	0x200004cd

08006664 <__sinit>:
 8006664:	b510      	push	{r4, lr}
 8006666:	4604      	mov	r4, r0
 8006668:	f7ff fff0 	bl	800664c <__sfp_lock_acquire>
 800666c:	6a23      	ldr	r3, [r4, #32]
 800666e:	b11b      	cbz	r3, 8006678 <__sinit+0x14>
 8006670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006674:	f7ff bff0 	b.w	8006658 <__sfp_lock_release>
 8006678:	4b04      	ldr	r3, [pc, #16]	; (800668c <__sinit+0x28>)
 800667a:	6223      	str	r3, [r4, #32]
 800667c:	4b04      	ldr	r3, [pc, #16]	; (8006690 <__sinit+0x2c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1f5      	bne.n	8006670 <__sinit+0xc>
 8006684:	f7ff ffc4 	bl	8006610 <global_stdio_init.part.0>
 8006688:	e7f2      	b.n	8006670 <__sinit+0xc>
 800668a:	bf00      	nop
 800668c:	080065d1 	.word	0x080065d1
 8006690:	200004c4 	.word	0x200004c4

08006694 <_fwalk_sglue>:
 8006694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006698:	4607      	mov	r7, r0
 800669a:	4688      	mov	r8, r1
 800669c:	4614      	mov	r4, r2
 800669e:	2600      	movs	r6, #0
 80066a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066a4:	f1b9 0901 	subs.w	r9, r9, #1
 80066a8:	d505      	bpl.n	80066b6 <_fwalk_sglue+0x22>
 80066aa:	6824      	ldr	r4, [r4, #0]
 80066ac:	2c00      	cmp	r4, #0
 80066ae:	d1f7      	bne.n	80066a0 <_fwalk_sglue+0xc>
 80066b0:	4630      	mov	r0, r6
 80066b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066b6:	89ab      	ldrh	r3, [r5, #12]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d907      	bls.n	80066cc <_fwalk_sglue+0x38>
 80066bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066c0:	3301      	adds	r3, #1
 80066c2:	d003      	beq.n	80066cc <_fwalk_sglue+0x38>
 80066c4:	4629      	mov	r1, r5
 80066c6:	4638      	mov	r0, r7
 80066c8:	47c0      	blx	r8
 80066ca:	4306      	orrs	r6, r0
 80066cc:	3568      	adds	r5, #104	; 0x68
 80066ce:	e7e9      	b.n	80066a4 <_fwalk_sglue+0x10>

080066d0 <iprintf>:
 80066d0:	b40f      	push	{r0, r1, r2, r3}
 80066d2:	b507      	push	{r0, r1, r2, lr}
 80066d4:	4906      	ldr	r1, [pc, #24]	; (80066f0 <iprintf+0x20>)
 80066d6:	ab04      	add	r3, sp, #16
 80066d8:	6808      	ldr	r0, [r1, #0]
 80066da:	f853 2b04 	ldr.w	r2, [r3], #4
 80066de:	6881      	ldr	r1, [r0, #8]
 80066e0:	9301      	str	r3, [sp, #4]
 80066e2:	f002 fe21 	bl	8009328 <_vfiprintf_r>
 80066e6:	b003      	add	sp, #12
 80066e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80066ec:	b004      	add	sp, #16
 80066ee:	4770      	bx	lr
 80066f0:	20000064 	.word	0x20000064

080066f4 <_puts_r>:
 80066f4:	6a03      	ldr	r3, [r0, #32]
 80066f6:	b570      	push	{r4, r5, r6, lr}
 80066f8:	6884      	ldr	r4, [r0, #8]
 80066fa:	4605      	mov	r5, r0
 80066fc:	460e      	mov	r6, r1
 80066fe:	b90b      	cbnz	r3, 8006704 <_puts_r+0x10>
 8006700:	f7ff ffb0 	bl	8006664 <__sinit>
 8006704:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006706:	07db      	lsls	r3, r3, #31
 8006708:	d405      	bmi.n	8006716 <_puts_r+0x22>
 800670a:	89a3      	ldrh	r3, [r4, #12]
 800670c:	0598      	lsls	r0, r3, #22
 800670e:	d402      	bmi.n	8006716 <_puts_r+0x22>
 8006710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006712:	f000 f9c0 	bl	8006a96 <__retarget_lock_acquire_recursive>
 8006716:	89a3      	ldrh	r3, [r4, #12]
 8006718:	0719      	lsls	r1, r3, #28
 800671a:	d513      	bpl.n	8006744 <_puts_r+0x50>
 800671c:	6923      	ldr	r3, [r4, #16]
 800671e:	b18b      	cbz	r3, 8006744 <_puts_r+0x50>
 8006720:	3e01      	subs	r6, #1
 8006722:	68a3      	ldr	r3, [r4, #8]
 8006724:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006728:	3b01      	subs	r3, #1
 800672a:	60a3      	str	r3, [r4, #8]
 800672c:	b9e9      	cbnz	r1, 800676a <_puts_r+0x76>
 800672e:	2b00      	cmp	r3, #0
 8006730:	da2e      	bge.n	8006790 <_puts_r+0x9c>
 8006732:	4622      	mov	r2, r4
 8006734:	210a      	movs	r1, #10
 8006736:	4628      	mov	r0, r5
 8006738:	f000 f89b 	bl	8006872 <__swbuf_r>
 800673c:	3001      	adds	r0, #1
 800673e:	d007      	beq.n	8006750 <_puts_r+0x5c>
 8006740:	250a      	movs	r5, #10
 8006742:	e007      	b.n	8006754 <_puts_r+0x60>
 8006744:	4621      	mov	r1, r4
 8006746:	4628      	mov	r0, r5
 8006748:	f000 f8d0 	bl	80068ec <__swsetup_r>
 800674c:	2800      	cmp	r0, #0
 800674e:	d0e7      	beq.n	8006720 <_puts_r+0x2c>
 8006750:	f04f 35ff 	mov.w	r5, #4294967295
 8006754:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006756:	07da      	lsls	r2, r3, #31
 8006758:	d405      	bmi.n	8006766 <_puts_r+0x72>
 800675a:	89a3      	ldrh	r3, [r4, #12]
 800675c:	059b      	lsls	r3, r3, #22
 800675e:	d402      	bmi.n	8006766 <_puts_r+0x72>
 8006760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006762:	f000 f999 	bl	8006a98 <__retarget_lock_release_recursive>
 8006766:	4628      	mov	r0, r5
 8006768:	bd70      	pop	{r4, r5, r6, pc}
 800676a:	2b00      	cmp	r3, #0
 800676c:	da04      	bge.n	8006778 <_puts_r+0x84>
 800676e:	69a2      	ldr	r2, [r4, #24]
 8006770:	429a      	cmp	r2, r3
 8006772:	dc06      	bgt.n	8006782 <_puts_r+0x8e>
 8006774:	290a      	cmp	r1, #10
 8006776:	d004      	beq.n	8006782 <_puts_r+0x8e>
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	6022      	str	r2, [r4, #0]
 800677e:	7019      	strb	r1, [r3, #0]
 8006780:	e7cf      	b.n	8006722 <_puts_r+0x2e>
 8006782:	4622      	mov	r2, r4
 8006784:	4628      	mov	r0, r5
 8006786:	f000 f874 	bl	8006872 <__swbuf_r>
 800678a:	3001      	adds	r0, #1
 800678c:	d1c9      	bne.n	8006722 <_puts_r+0x2e>
 800678e:	e7df      	b.n	8006750 <_puts_r+0x5c>
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	250a      	movs	r5, #10
 8006794:	1c5a      	adds	r2, r3, #1
 8006796:	6022      	str	r2, [r4, #0]
 8006798:	701d      	strb	r5, [r3, #0]
 800679a:	e7db      	b.n	8006754 <_puts_r+0x60>

0800679c <puts>:
 800679c:	4b02      	ldr	r3, [pc, #8]	; (80067a8 <puts+0xc>)
 800679e:	4601      	mov	r1, r0
 80067a0:	6818      	ldr	r0, [r3, #0]
 80067a2:	f7ff bfa7 	b.w	80066f4 <_puts_r>
 80067a6:	bf00      	nop
 80067a8:	20000064 	.word	0x20000064

080067ac <siprintf>:
 80067ac:	b40e      	push	{r1, r2, r3}
 80067ae:	b500      	push	{lr}
 80067b0:	b09c      	sub	sp, #112	; 0x70
 80067b2:	ab1d      	add	r3, sp, #116	; 0x74
 80067b4:	9002      	str	r0, [sp, #8]
 80067b6:	9006      	str	r0, [sp, #24]
 80067b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067bc:	4809      	ldr	r0, [pc, #36]	; (80067e4 <siprintf+0x38>)
 80067be:	9107      	str	r1, [sp, #28]
 80067c0:	9104      	str	r1, [sp, #16]
 80067c2:	4909      	ldr	r1, [pc, #36]	; (80067e8 <siprintf+0x3c>)
 80067c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80067c8:	9105      	str	r1, [sp, #20]
 80067ca:	6800      	ldr	r0, [r0, #0]
 80067cc:	9301      	str	r3, [sp, #4]
 80067ce:	a902      	add	r1, sp, #8
 80067d0:	f002 fc82 	bl	80090d8 <_svfiprintf_r>
 80067d4:	9b02      	ldr	r3, [sp, #8]
 80067d6:	2200      	movs	r2, #0
 80067d8:	701a      	strb	r2, [r3, #0]
 80067da:	b01c      	add	sp, #112	; 0x70
 80067dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80067e0:	b003      	add	sp, #12
 80067e2:	4770      	bx	lr
 80067e4:	20000064 	.word	0x20000064
 80067e8:	ffff0208 	.word	0xffff0208

080067ec <__sread>:
 80067ec:	b510      	push	{r4, lr}
 80067ee:	460c      	mov	r4, r1
 80067f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067f4:	f000 f900 	bl	80069f8 <_read_r>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	bfab      	itete	ge
 80067fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80067fe:	89a3      	ldrhlt	r3, [r4, #12]
 8006800:	181b      	addge	r3, r3, r0
 8006802:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006806:	bfac      	ite	ge
 8006808:	6563      	strge	r3, [r4, #84]	; 0x54
 800680a:	81a3      	strhlt	r3, [r4, #12]
 800680c:	bd10      	pop	{r4, pc}

0800680e <__swrite>:
 800680e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006812:	461f      	mov	r7, r3
 8006814:	898b      	ldrh	r3, [r1, #12]
 8006816:	05db      	lsls	r3, r3, #23
 8006818:	4605      	mov	r5, r0
 800681a:	460c      	mov	r4, r1
 800681c:	4616      	mov	r6, r2
 800681e:	d505      	bpl.n	800682c <__swrite+0x1e>
 8006820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006824:	2302      	movs	r3, #2
 8006826:	2200      	movs	r2, #0
 8006828:	f000 f8d4 	bl	80069d4 <_lseek_r>
 800682c:	89a3      	ldrh	r3, [r4, #12]
 800682e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006836:	81a3      	strh	r3, [r4, #12]
 8006838:	4632      	mov	r2, r6
 800683a:	463b      	mov	r3, r7
 800683c:	4628      	mov	r0, r5
 800683e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006842:	f000 b8eb 	b.w	8006a1c <_write_r>

08006846 <__sseek>:
 8006846:	b510      	push	{r4, lr}
 8006848:	460c      	mov	r4, r1
 800684a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800684e:	f000 f8c1 	bl	80069d4 <_lseek_r>
 8006852:	1c43      	adds	r3, r0, #1
 8006854:	89a3      	ldrh	r3, [r4, #12]
 8006856:	bf15      	itete	ne
 8006858:	6560      	strne	r0, [r4, #84]	; 0x54
 800685a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800685e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006862:	81a3      	strheq	r3, [r4, #12]
 8006864:	bf18      	it	ne
 8006866:	81a3      	strhne	r3, [r4, #12]
 8006868:	bd10      	pop	{r4, pc}

0800686a <__sclose>:
 800686a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800686e:	f000 b8a1 	b.w	80069b4 <_close_r>

08006872 <__swbuf_r>:
 8006872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006874:	460e      	mov	r6, r1
 8006876:	4614      	mov	r4, r2
 8006878:	4605      	mov	r5, r0
 800687a:	b118      	cbz	r0, 8006884 <__swbuf_r+0x12>
 800687c:	6a03      	ldr	r3, [r0, #32]
 800687e:	b90b      	cbnz	r3, 8006884 <__swbuf_r+0x12>
 8006880:	f7ff fef0 	bl	8006664 <__sinit>
 8006884:	69a3      	ldr	r3, [r4, #24]
 8006886:	60a3      	str	r3, [r4, #8]
 8006888:	89a3      	ldrh	r3, [r4, #12]
 800688a:	071a      	lsls	r2, r3, #28
 800688c:	d525      	bpl.n	80068da <__swbuf_r+0x68>
 800688e:	6923      	ldr	r3, [r4, #16]
 8006890:	b31b      	cbz	r3, 80068da <__swbuf_r+0x68>
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	6922      	ldr	r2, [r4, #16]
 8006896:	1a98      	subs	r0, r3, r2
 8006898:	6963      	ldr	r3, [r4, #20]
 800689a:	b2f6      	uxtb	r6, r6
 800689c:	4283      	cmp	r3, r0
 800689e:	4637      	mov	r7, r6
 80068a0:	dc04      	bgt.n	80068ac <__swbuf_r+0x3a>
 80068a2:	4621      	mov	r1, r4
 80068a4:	4628      	mov	r0, r5
 80068a6:	f002 fedf 	bl	8009668 <_fflush_r>
 80068aa:	b9e0      	cbnz	r0, 80068e6 <__swbuf_r+0x74>
 80068ac:	68a3      	ldr	r3, [r4, #8]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	60a3      	str	r3, [r4, #8]
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	1c5a      	adds	r2, r3, #1
 80068b6:	6022      	str	r2, [r4, #0]
 80068b8:	701e      	strb	r6, [r3, #0]
 80068ba:	6962      	ldr	r2, [r4, #20]
 80068bc:	1c43      	adds	r3, r0, #1
 80068be:	429a      	cmp	r2, r3
 80068c0:	d004      	beq.n	80068cc <__swbuf_r+0x5a>
 80068c2:	89a3      	ldrh	r3, [r4, #12]
 80068c4:	07db      	lsls	r3, r3, #31
 80068c6:	d506      	bpl.n	80068d6 <__swbuf_r+0x64>
 80068c8:	2e0a      	cmp	r6, #10
 80068ca:	d104      	bne.n	80068d6 <__swbuf_r+0x64>
 80068cc:	4621      	mov	r1, r4
 80068ce:	4628      	mov	r0, r5
 80068d0:	f002 feca 	bl	8009668 <_fflush_r>
 80068d4:	b938      	cbnz	r0, 80068e6 <__swbuf_r+0x74>
 80068d6:	4638      	mov	r0, r7
 80068d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068da:	4621      	mov	r1, r4
 80068dc:	4628      	mov	r0, r5
 80068de:	f000 f805 	bl	80068ec <__swsetup_r>
 80068e2:	2800      	cmp	r0, #0
 80068e4:	d0d5      	beq.n	8006892 <__swbuf_r+0x20>
 80068e6:	f04f 37ff 	mov.w	r7, #4294967295
 80068ea:	e7f4      	b.n	80068d6 <__swbuf_r+0x64>

080068ec <__swsetup_r>:
 80068ec:	b538      	push	{r3, r4, r5, lr}
 80068ee:	4b2a      	ldr	r3, [pc, #168]	; (8006998 <__swsetup_r+0xac>)
 80068f0:	4605      	mov	r5, r0
 80068f2:	6818      	ldr	r0, [r3, #0]
 80068f4:	460c      	mov	r4, r1
 80068f6:	b118      	cbz	r0, 8006900 <__swsetup_r+0x14>
 80068f8:	6a03      	ldr	r3, [r0, #32]
 80068fa:	b90b      	cbnz	r3, 8006900 <__swsetup_r+0x14>
 80068fc:	f7ff feb2 	bl	8006664 <__sinit>
 8006900:	89a3      	ldrh	r3, [r4, #12]
 8006902:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006906:	0718      	lsls	r0, r3, #28
 8006908:	d422      	bmi.n	8006950 <__swsetup_r+0x64>
 800690a:	06d9      	lsls	r1, r3, #27
 800690c:	d407      	bmi.n	800691e <__swsetup_r+0x32>
 800690e:	2309      	movs	r3, #9
 8006910:	602b      	str	r3, [r5, #0]
 8006912:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006916:	81a3      	strh	r3, [r4, #12]
 8006918:	f04f 30ff 	mov.w	r0, #4294967295
 800691c:	e034      	b.n	8006988 <__swsetup_r+0x9c>
 800691e:	0758      	lsls	r0, r3, #29
 8006920:	d512      	bpl.n	8006948 <__swsetup_r+0x5c>
 8006922:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006924:	b141      	cbz	r1, 8006938 <__swsetup_r+0x4c>
 8006926:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800692a:	4299      	cmp	r1, r3
 800692c:	d002      	beq.n	8006934 <__swsetup_r+0x48>
 800692e:	4628      	mov	r0, r5
 8006930:	f000 ff34 	bl	800779c <_free_r>
 8006934:	2300      	movs	r3, #0
 8006936:	6363      	str	r3, [r4, #52]	; 0x34
 8006938:	89a3      	ldrh	r3, [r4, #12]
 800693a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800693e:	81a3      	strh	r3, [r4, #12]
 8006940:	2300      	movs	r3, #0
 8006942:	6063      	str	r3, [r4, #4]
 8006944:	6923      	ldr	r3, [r4, #16]
 8006946:	6023      	str	r3, [r4, #0]
 8006948:	89a3      	ldrh	r3, [r4, #12]
 800694a:	f043 0308 	orr.w	r3, r3, #8
 800694e:	81a3      	strh	r3, [r4, #12]
 8006950:	6923      	ldr	r3, [r4, #16]
 8006952:	b94b      	cbnz	r3, 8006968 <__swsetup_r+0x7c>
 8006954:	89a3      	ldrh	r3, [r4, #12]
 8006956:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800695a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800695e:	d003      	beq.n	8006968 <__swsetup_r+0x7c>
 8006960:	4621      	mov	r1, r4
 8006962:	4628      	mov	r0, r5
 8006964:	f002 fece 	bl	8009704 <__smakebuf_r>
 8006968:	89a0      	ldrh	r0, [r4, #12]
 800696a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800696e:	f010 0301 	ands.w	r3, r0, #1
 8006972:	d00a      	beq.n	800698a <__swsetup_r+0x9e>
 8006974:	2300      	movs	r3, #0
 8006976:	60a3      	str	r3, [r4, #8]
 8006978:	6963      	ldr	r3, [r4, #20]
 800697a:	425b      	negs	r3, r3
 800697c:	61a3      	str	r3, [r4, #24]
 800697e:	6923      	ldr	r3, [r4, #16]
 8006980:	b943      	cbnz	r3, 8006994 <__swsetup_r+0xa8>
 8006982:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006986:	d1c4      	bne.n	8006912 <__swsetup_r+0x26>
 8006988:	bd38      	pop	{r3, r4, r5, pc}
 800698a:	0781      	lsls	r1, r0, #30
 800698c:	bf58      	it	pl
 800698e:	6963      	ldrpl	r3, [r4, #20]
 8006990:	60a3      	str	r3, [r4, #8]
 8006992:	e7f4      	b.n	800697e <__swsetup_r+0x92>
 8006994:	2000      	movs	r0, #0
 8006996:	e7f7      	b.n	8006988 <__swsetup_r+0x9c>
 8006998:	20000064 	.word	0x20000064

0800699c <memset>:
 800699c:	4402      	add	r2, r0
 800699e:	4603      	mov	r3, r0
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d100      	bne.n	80069a6 <memset+0xa>
 80069a4:	4770      	bx	lr
 80069a6:	f803 1b01 	strb.w	r1, [r3], #1
 80069aa:	e7f9      	b.n	80069a0 <memset+0x4>

080069ac <_localeconv_r>:
 80069ac:	4800      	ldr	r0, [pc, #0]	; (80069b0 <_localeconv_r+0x4>)
 80069ae:	4770      	bx	lr
 80069b0:	20000158 	.word	0x20000158

080069b4 <_close_r>:
 80069b4:	b538      	push	{r3, r4, r5, lr}
 80069b6:	4d06      	ldr	r5, [pc, #24]	; (80069d0 <_close_r+0x1c>)
 80069b8:	2300      	movs	r3, #0
 80069ba:	4604      	mov	r4, r0
 80069bc:	4608      	mov	r0, r1
 80069be:	602b      	str	r3, [r5, #0]
 80069c0:	f7fb f907 	bl	8001bd2 <_close>
 80069c4:	1c43      	adds	r3, r0, #1
 80069c6:	d102      	bne.n	80069ce <_close_r+0x1a>
 80069c8:	682b      	ldr	r3, [r5, #0]
 80069ca:	b103      	cbz	r3, 80069ce <_close_r+0x1a>
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	bd38      	pop	{r3, r4, r5, pc}
 80069d0:	200004c8 	.word	0x200004c8

080069d4 <_lseek_r>:
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	4d07      	ldr	r5, [pc, #28]	; (80069f4 <_lseek_r+0x20>)
 80069d8:	4604      	mov	r4, r0
 80069da:	4608      	mov	r0, r1
 80069dc:	4611      	mov	r1, r2
 80069de:	2200      	movs	r2, #0
 80069e0:	602a      	str	r2, [r5, #0]
 80069e2:	461a      	mov	r2, r3
 80069e4:	f7fb f91c 	bl	8001c20 <_lseek>
 80069e8:	1c43      	adds	r3, r0, #1
 80069ea:	d102      	bne.n	80069f2 <_lseek_r+0x1e>
 80069ec:	682b      	ldr	r3, [r5, #0]
 80069ee:	b103      	cbz	r3, 80069f2 <_lseek_r+0x1e>
 80069f0:	6023      	str	r3, [r4, #0]
 80069f2:	bd38      	pop	{r3, r4, r5, pc}
 80069f4:	200004c8 	.word	0x200004c8

080069f8 <_read_r>:
 80069f8:	b538      	push	{r3, r4, r5, lr}
 80069fa:	4d07      	ldr	r5, [pc, #28]	; (8006a18 <_read_r+0x20>)
 80069fc:	4604      	mov	r4, r0
 80069fe:	4608      	mov	r0, r1
 8006a00:	4611      	mov	r1, r2
 8006a02:	2200      	movs	r2, #0
 8006a04:	602a      	str	r2, [r5, #0]
 8006a06:	461a      	mov	r2, r3
 8006a08:	f7fb f8aa 	bl	8001b60 <_read>
 8006a0c:	1c43      	adds	r3, r0, #1
 8006a0e:	d102      	bne.n	8006a16 <_read_r+0x1e>
 8006a10:	682b      	ldr	r3, [r5, #0]
 8006a12:	b103      	cbz	r3, 8006a16 <_read_r+0x1e>
 8006a14:	6023      	str	r3, [r4, #0]
 8006a16:	bd38      	pop	{r3, r4, r5, pc}
 8006a18:	200004c8 	.word	0x200004c8

08006a1c <_write_r>:
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	4d07      	ldr	r5, [pc, #28]	; (8006a3c <_write_r+0x20>)
 8006a20:	4604      	mov	r4, r0
 8006a22:	4608      	mov	r0, r1
 8006a24:	4611      	mov	r1, r2
 8006a26:	2200      	movs	r2, #0
 8006a28:	602a      	str	r2, [r5, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	f7fb f8b5 	bl	8001b9a <_write>
 8006a30:	1c43      	adds	r3, r0, #1
 8006a32:	d102      	bne.n	8006a3a <_write_r+0x1e>
 8006a34:	682b      	ldr	r3, [r5, #0]
 8006a36:	b103      	cbz	r3, 8006a3a <_write_r+0x1e>
 8006a38:	6023      	str	r3, [r4, #0]
 8006a3a:	bd38      	pop	{r3, r4, r5, pc}
 8006a3c:	200004c8 	.word	0x200004c8

08006a40 <__errno>:
 8006a40:	4b01      	ldr	r3, [pc, #4]	; (8006a48 <__errno+0x8>)
 8006a42:	6818      	ldr	r0, [r3, #0]
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	20000064 	.word	0x20000064

08006a4c <__libc_init_array>:
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	4d0d      	ldr	r5, [pc, #52]	; (8006a84 <__libc_init_array+0x38>)
 8006a50:	4c0d      	ldr	r4, [pc, #52]	; (8006a88 <__libc_init_array+0x3c>)
 8006a52:	1b64      	subs	r4, r4, r5
 8006a54:	10a4      	asrs	r4, r4, #2
 8006a56:	2600      	movs	r6, #0
 8006a58:	42a6      	cmp	r6, r4
 8006a5a:	d109      	bne.n	8006a70 <__libc_init_array+0x24>
 8006a5c:	4d0b      	ldr	r5, [pc, #44]	; (8006a8c <__libc_init_array+0x40>)
 8006a5e:	4c0c      	ldr	r4, [pc, #48]	; (8006a90 <__libc_init_array+0x44>)
 8006a60:	f003 fb42 	bl	800a0e8 <_init>
 8006a64:	1b64      	subs	r4, r4, r5
 8006a66:	10a4      	asrs	r4, r4, #2
 8006a68:	2600      	movs	r6, #0
 8006a6a:	42a6      	cmp	r6, r4
 8006a6c:	d105      	bne.n	8006a7a <__libc_init_array+0x2e>
 8006a6e:	bd70      	pop	{r4, r5, r6, pc}
 8006a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a74:	4798      	blx	r3
 8006a76:	3601      	adds	r6, #1
 8006a78:	e7ee      	b.n	8006a58 <__libc_init_array+0xc>
 8006a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a7e:	4798      	blx	r3
 8006a80:	3601      	adds	r6, #1
 8006a82:	e7f2      	b.n	8006a6a <__libc_init_array+0x1e>
 8006a84:	0800a5e0 	.word	0x0800a5e0
 8006a88:	0800a5e0 	.word	0x0800a5e0
 8006a8c:	0800a5e0 	.word	0x0800a5e0
 8006a90:	0800a5e4 	.word	0x0800a5e4

08006a94 <__retarget_lock_init_recursive>:
 8006a94:	4770      	bx	lr

08006a96 <__retarget_lock_acquire_recursive>:
 8006a96:	4770      	bx	lr

08006a98 <__retarget_lock_release_recursive>:
 8006a98:	4770      	bx	lr
	...

08006a9c <nanf>:
 8006a9c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006aa4 <nanf+0x8>
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	7fc00000 	.word	0x7fc00000

08006aa8 <quorem>:
 8006aa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aac:	6903      	ldr	r3, [r0, #16]
 8006aae:	690c      	ldr	r4, [r1, #16]
 8006ab0:	42a3      	cmp	r3, r4
 8006ab2:	4607      	mov	r7, r0
 8006ab4:	db7e      	blt.n	8006bb4 <quorem+0x10c>
 8006ab6:	3c01      	subs	r4, #1
 8006ab8:	f101 0814 	add.w	r8, r1, #20
 8006abc:	f100 0514 	add.w	r5, r0, #20
 8006ac0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ac4:	9301      	str	r3, [sp, #4]
 8006ac6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006aca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ad6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ada:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ade:	d331      	bcc.n	8006b44 <quorem+0x9c>
 8006ae0:	f04f 0e00 	mov.w	lr, #0
 8006ae4:	4640      	mov	r0, r8
 8006ae6:	46ac      	mov	ip, r5
 8006ae8:	46f2      	mov	sl, lr
 8006aea:	f850 2b04 	ldr.w	r2, [r0], #4
 8006aee:	b293      	uxth	r3, r2
 8006af0:	fb06 e303 	mla	r3, r6, r3, lr
 8006af4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006af8:	0c1a      	lsrs	r2, r3, #16
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	ebaa 0303 	sub.w	r3, sl, r3
 8006b00:	f8dc a000 	ldr.w	sl, [ip]
 8006b04:	fa13 f38a 	uxtah	r3, r3, sl
 8006b08:	fb06 220e 	mla	r2, r6, lr, r2
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	9b00      	ldr	r3, [sp, #0]
 8006b10:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b14:	b292      	uxth	r2, r2
 8006b16:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006b1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b1e:	f8bd 3000 	ldrh.w	r3, [sp]
 8006b22:	4581      	cmp	r9, r0
 8006b24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b28:	f84c 3b04 	str.w	r3, [ip], #4
 8006b2c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006b30:	d2db      	bcs.n	8006aea <quorem+0x42>
 8006b32:	f855 300b 	ldr.w	r3, [r5, fp]
 8006b36:	b92b      	cbnz	r3, 8006b44 <quorem+0x9c>
 8006b38:	9b01      	ldr	r3, [sp, #4]
 8006b3a:	3b04      	subs	r3, #4
 8006b3c:	429d      	cmp	r5, r3
 8006b3e:	461a      	mov	r2, r3
 8006b40:	d32c      	bcc.n	8006b9c <quorem+0xf4>
 8006b42:	613c      	str	r4, [r7, #16]
 8006b44:	4638      	mov	r0, r7
 8006b46:	f001 f9ef 	bl	8007f28 <__mcmp>
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	db22      	blt.n	8006b94 <quorem+0xec>
 8006b4e:	3601      	adds	r6, #1
 8006b50:	4629      	mov	r1, r5
 8006b52:	2000      	movs	r0, #0
 8006b54:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b58:	f8d1 c000 	ldr.w	ip, [r1]
 8006b5c:	b293      	uxth	r3, r2
 8006b5e:	1ac3      	subs	r3, r0, r3
 8006b60:	0c12      	lsrs	r2, r2, #16
 8006b62:	fa13 f38c 	uxtah	r3, r3, ip
 8006b66:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006b6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b74:	45c1      	cmp	r9, r8
 8006b76:	f841 3b04 	str.w	r3, [r1], #4
 8006b7a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006b7e:	d2e9      	bcs.n	8006b54 <quorem+0xac>
 8006b80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b88:	b922      	cbnz	r2, 8006b94 <quorem+0xec>
 8006b8a:	3b04      	subs	r3, #4
 8006b8c:	429d      	cmp	r5, r3
 8006b8e:	461a      	mov	r2, r3
 8006b90:	d30a      	bcc.n	8006ba8 <quorem+0x100>
 8006b92:	613c      	str	r4, [r7, #16]
 8006b94:	4630      	mov	r0, r6
 8006b96:	b003      	add	sp, #12
 8006b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b9c:	6812      	ldr	r2, [r2, #0]
 8006b9e:	3b04      	subs	r3, #4
 8006ba0:	2a00      	cmp	r2, #0
 8006ba2:	d1ce      	bne.n	8006b42 <quorem+0x9a>
 8006ba4:	3c01      	subs	r4, #1
 8006ba6:	e7c9      	b.n	8006b3c <quorem+0x94>
 8006ba8:	6812      	ldr	r2, [r2, #0]
 8006baa:	3b04      	subs	r3, #4
 8006bac:	2a00      	cmp	r2, #0
 8006bae:	d1f0      	bne.n	8006b92 <quorem+0xea>
 8006bb0:	3c01      	subs	r4, #1
 8006bb2:	e7eb      	b.n	8006b8c <quorem+0xe4>
 8006bb4:	2000      	movs	r0, #0
 8006bb6:	e7ee      	b.n	8006b96 <quorem+0xee>

08006bb8 <_dtoa_r>:
 8006bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bbc:	ed2d 8b04 	vpush	{d8-d9}
 8006bc0:	69c5      	ldr	r5, [r0, #28]
 8006bc2:	b093      	sub	sp, #76	; 0x4c
 8006bc4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006bc8:	ec57 6b10 	vmov	r6, r7, d0
 8006bcc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006bd0:	9107      	str	r1, [sp, #28]
 8006bd2:	4604      	mov	r4, r0
 8006bd4:	920a      	str	r2, [sp, #40]	; 0x28
 8006bd6:	930d      	str	r3, [sp, #52]	; 0x34
 8006bd8:	b975      	cbnz	r5, 8006bf8 <_dtoa_r+0x40>
 8006bda:	2010      	movs	r0, #16
 8006bdc:	f000 fe2a 	bl	8007834 <malloc>
 8006be0:	4602      	mov	r2, r0
 8006be2:	61e0      	str	r0, [r4, #28]
 8006be4:	b920      	cbnz	r0, 8006bf0 <_dtoa_r+0x38>
 8006be6:	4bae      	ldr	r3, [pc, #696]	; (8006ea0 <_dtoa_r+0x2e8>)
 8006be8:	21ef      	movs	r1, #239	; 0xef
 8006bea:	48ae      	ldr	r0, [pc, #696]	; (8006ea4 <_dtoa_r+0x2ec>)
 8006bec:	f002 fe3c 	bl	8009868 <__assert_func>
 8006bf0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006bf4:	6005      	str	r5, [r0, #0]
 8006bf6:	60c5      	str	r5, [r0, #12]
 8006bf8:	69e3      	ldr	r3, [r4, #28]
 8006bfa:	6819      	ldr	r1, [r3, #0]
 8006bfc:	b151      	cbz	r1, 8006c14 <_dtoa_r+0x5c>
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	604a      	str	r2, [r1, #4]
 8006c02:	2301      	movs	r3, #1
 8006c04:	4093      	lsls	r3, r2
 8006c06:	608b      	str	r3, [r1, #8]
 8006c08:	4620      	mov	r0, r4
 8006c0a:	f000 ff07 	bl	8007a1c <_Bfree>
 8006c0e:	69e3      	ldr	r3, [r4, #28]
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	1e3b      	subs	r3, r7, #0
 8006c16:	bfbb      	ittet	lt
 8006c18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006c1c:	9303      	strlt	r3, [sp, #12]
 8006c1e:	2300      	movge	r3, #0
 8006c20:	2201      	movlt	r2, #1
 8006c22:	bfac      	ite	ge
 8006c24:	f8c8 3000 	strge.w	r3, [r8]
 8006c28:	f8c8 2000 	strlt.w	r2, [r8]
 8006c2c:	4b9e      	ldr	r3, [pc, #632]	; (8006ea8 <_dtoa_r+0x2f0>)
 8006c2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006c32:	ea33 0308 	bics.w	r3, r3, r8
 8006c36:	d11b      	bne.n	8006c70 <_dtoa_r+0xb8>
 8006c38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c3e:	6013      	str	r3, [r2, #0]
 8006c40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006c44:	4333      	orrs	r3, r6
 8006c46:	f000 8593 	beq.w	8007770 <_dtoa_r+0xbb8>
 8006c4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c4c:	b963      	cbnz	r3, 8006c68 <_dtoa_r+0xb0>
 8006c4e:	4b97      	ldr	r3, [pc, #604]	; (8006eac <_dtoa_r+0x2f4>)
 8006c50:	e027      	b.n	8006ca2 <_dtoa_r+0xea>
 8006c52:	4b97      	ldr	r3, [pc, #604]	; (8006eb0 <_dtoa_r+0x2f8>)
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	3308      	adds	r3, #8
 8006c58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c5a:	6013      	str	r3, [r2, #0]
 8006c5c:	9800      	ldr	r0, [sp, #0]
 8006c5e:	b013      	add	sp, #76	; 0x4c
 8006c60:	ecbd 8b04 	vpop	{d8-d9}
 8006c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c68:	4b90      	ldr	r3, [pc, #576]	; (8006eac <_dtoa_r+0x2f4>)
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	3303      	adds	r3, #3
 8006c6e:	e7f3      	b.n	8006c58 <_dtoa_r+0xa0>
 8006c70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c74:	2200      	movs	r2, #0
 8006c76:	ec51 0b17 	vmov	r0, r1, d7
 8006c7a:	eeb0 8a47 	vmov.f32	s16, s14
 8006c7e:	eef0 8a67 	vmov.f32	s17, s15
 8006c82:	2300      	movs	r3, #0
 8006c84:	f7f9 ff28 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c88:	4681      	mov	r9, r0
 8006c8a:	b160      	cbz	r0, 8006ca6 <_dtoa_r+0xee>
 8006c8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c8e:	2301      	movs	r3, #1
 8006c90:	6013      	str	r3, [r2, #0]
 8006c92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 8568 	beq.w	800776a <_dtoa_r+0xbb2>
 8006c9a:	4b86      	ldr	r3, [pc, #536]	; (8006eb4 <_dtoa_r+0x2fc>)
 8006c9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c9e:	6013      	str	r3, [r2, #0]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	e7da      	b.n	8006c5c <_dtoa_r+0xa4>
 8006ca6:	aa10      	add	r2, sp, #64	; 0x40
 8006ca8:	a911      	add	r1, sp, #68	; 0x44
 8006caa:	4620      	mov	r0, r4
 8006cac:	eeb0 0a48 	vmov.f32	s0, s16
 8006cb0:	eef0 0a68 	vmov.f32	s1, s17
 8006cb4:	f001 fa4e 	bl	8008154 <__d2b>
 8006cb8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006cbc:	4682      	mov	sl, r0
 8006cbe:	2d00      	cmp	r5, #0
 8006cc0:	d07f      	beq.n	8006dc2 <_dtoa_r+0x20a>
 8006cc2:	ee18 3a90 	vmov	r3, s17
 8006cc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006cce:	ec51 0b18 	vmov	r0, r1, d8
 8006cd2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006cd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006cda:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006cde:	4619      	mov	r1, r3
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	4b75      	ldr	r3, [pc, #468]	; (8006eb8 <_dtoa_r+0x300>)
 8006ce4:	f7f9 fad8 	bl	8000298 <__aeabi_dsub>
 8006ce8:	a367      	add	r3, pc, #412	; (adr r3, 8006e88 <_dtoa_r+0x2d0>)
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	f7f9 fc8b 	bl	8000608 <__aeabi_dmul>
 8006cf2:	a367      	add	r3, pc, #412	; (adr r3, 8006e90 <_dtoa_r+0x2d8>)
 8006cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf8:	f7f9 fad0 	bl	800029c <__adddf3>
 8006cfc:	4606      	mov	r6, r0
 8006cfe:	4628      	mov	r0, r5
 8006d00:	460f      	mov	r7, r1
 8006d02:	f7f9 fc17 	bl	8000534 <__aeabi_i2d>
 8006d06:	a364      	add	r3, pc, #400	; (adr r3, 8006e98 <_dtoa_r+0x2e0>)
 8006d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0c:	f7f9 fc7c 	bl	8000608 <__aeabi_dmul>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4630      	mov	r0, r6
 8006d16:	4639      	mov	r1, r7
 8006d18:	f7f9 fac0 	bl	800029c <__adddf3>
 8006d1c:	4606      	mov	r6, r0
 8006d1e:	460f      	mov	r7, r1
 8006d20:	f7f9 ff22 	bl	8000b68 <__aeabi_d2iz>
 8006d24:	2200      	movs	r2, #0
 8006d26:	4683      	mov	fp, r0
 8006d28:	2300      	movs	r3, #0
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	4639      	mov	r1, r7
 8006d2e:	f7f9 fedd 	bl	8000aec <__aeabi_dcmplt>
 8006d32:	b148      	cbz	r0, 8006d48 <_dtoa_r+0x190>
 8006d34:	4658      	mov	r0, fp
 8006d36:	f7f9 fbfd 	bl	8000534 <__aeabi_i2d>
 8006d3a:	4632      	mov	r2, r6
 8006d3c:	463b      	mov	r3, r7
 8006d3e:	f7f9 fecb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d42:	b908      	cbnz	r0, 8006d48 <_dtoa_r+0x190>
 8006d44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d48:	f1bb 0f16 	cmp.w	fp, #22
 8006d4c:	d857      	bhi.n	8006dfe <_dtoa_r+0x246>
 8006d4e:	4b5b      	ldr	r3, [pc, #364]	; (8006ebc <_dtoa_r+0x304>)
 8006d50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d58:	ec51 0b18 	vmov	r0, r1, d8
 8006d5c:	f7f9 fec6 	bl	8000aec <__aeabi_dcmplt>
 8006d60:	2800      	cmp	r0, #0
 8006d62:	d04e      	beq.n	8006e02 <_dtoa_r+0x24a>
 8006d64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d68:	2300      	movs	r3, #0
 8006d6a:	930c      	str	r3, [sp, #48]	; 0x30
 8006d6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d6e:	1b5b      	subs	r3, r3, r5
 8006d70:	1e5a      	subs	r2, r3, #1
 8006d72:	bf45      	ittet	mi
 8006d74:	f1c3 0301 	rsbmi	r3, r3, #1
 8006d78:	9305      	strmi	r3, [sp, #20]
 8006d7a:	2300      	movpl	r3, #0
 8006d7c:	2300      	movmi	r3, #0
 8006d7e:	9206      	str	r2, [sp, #24]
 8006d80:	bf54      	ite	pl
 8006d82:	9305      	strpl	r3, [sp, #20]
 8006d84:	9306      	strmi	r3, [sp, #24]
 8006d86:	f1bb 0f00 	cmp.w	fp, #0
 8006d8a:	db3c      	blt.n	8006e06 <_dtoa_r+0x24e>
 8006d8c:	9b06      	ldr	r3, [sp, #24]
 8006d8e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006d92:	445b      	add	r3, fp
 8006d94:	9306      	str	r3, [sp, #24]
 8006d96:	2300      	movs	r3, #0
 8006d98:	9308      	str	r3, [sp, #32]
 8006d9a:	9b07      	ldr	r3, [sp, #28]
 8006d9c:	2b09      	cmp	r3, #9
 8006d9e:	d868      	bhi.n	8006e72 <_dtoa_r+0x2ba>
 8006da0:	2b05      	cmp	r3, #5
 8006da2:	bfc4      	itt	gt
 8006da4:	3b04      	subgt	r3, #4
 8006da6:	9307      	strgt	r3, [sp, #28]
 8006da8:	9b07      	ldr	r3, [sp, #28]
 8006daa:	f1a3 0302 	sub.w	r3, r3, #2
 8006dae:	bfcc      	ite	gt
 8006db0:	2500      	movgt	r5, #0
 8006db2:	2501      	movle	r5, #1
 8006db4:	2b03      	cmp	r3, #3
 8006db6:	f200 8085 	bhi.w	8006ec4 <_dtoa_r+0x30c>
 8006dba:	e8df f003 	tbb	[pc, r3]
 8006dbe:	3b2e      	.short	0x3b2e
 8006dc0:	5839      	.short	0x5839
 8006dc2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006dc6:	441d      	add	r5, r3
 8006dc8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006dcc:	2b20      	cmp	r3, #32
 8006dce:	bfc1      	itttt	gt
 8006dd0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006dd4:	fa08 f803 	lslgt.w	r8, r8, r3
 8006dd8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006ddc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006de0:	bfd6      	itet	le
 8006de2:	f1c3 0320 	rsble	r3, r3, #32
 8006de6:	ea48 0003 	orrgt.w	r0, r8, r3
 8006dea:	fa06 f003 	lslle.w	r0, r6, r3
 8006dee:	f7f9 fb91 	bl	8000514 <__aeabi_ui2d>
 8006df2:	2201      	movs	r2, #1
 8006df4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006df8:	3d01      	subs	r5, #1
 8006dfa:	920e      	str	r2, [sp, #56]	; 0x38
 8006dfc:	e76f      	b.n	8006cde <_dtoa_r+0x126>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e7b3      	b.n	8006d6a <_dtoa_r+0x1b2>
 8006e02:	900c      	str	r0, [sp, #48]	; 0x30
 8006e04:	e7b2      	b.n	8006d6c <_dtoa_r+0x1b4>
 8006e06:	9b05      	ldr	r3, [sp, #20]
 8006e08:	eba3 030b 	sub.w	r3, r3, fp
 8006e0c:	9305      	str	r3, [sp, #20]
 8006e0e:	f1cb 0300 	rsb	r3, fp, #0
 8006e12:	9308      	str	r3, [sp, #32]
 8006e14:	2300      	movs	r3, #0
 8006e16:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e18:	e7bf      	b.n	8006d9a <_dtoa_r+0x1e2>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	dc52      	bgt.n	8006eca <_dtoa_r+0x312>
 8006e24:	2301      	movs	r3, #1
 8006e26:	9301      	str	r3, [sp, #4]
 8006e28:	9304      	str	r3, [sp, #16]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	920a      	str	r2, [sp, #40]	; 0x28
 8006e2e:	e00b      	b.n	8006e48 <_dtoa_r+0x290>
 8006e30:	2301      	movs	r3, #1
 8006e32:	e7f3      	b.n	8006e1c <_dtoa_r+0x264>
 8006e34:	2300      	movs	r3, #0
 8006e36:	9309      	str	r3, [sp, #36]	; 0x24
 8006e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e3a:	445b      	add	r3, fp
 8006e3c:	9301      	str	r3, [sp, #4]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	9304      	str	r3, [sp, #16]
 8006e44:	bfb8      	it	lt
 8006e46:	2301      	movlt	r3, #1
 8006e48:	69e0      	ldr	r0, [r4, #28]
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	2204      	movs	r2, #4
 8006e4e:	f102 0614 	add.w	r6, r2, #20
 8006e52:	429e      	cmp	r6, r3
 8006e54:	d93d      	bls.n	8006ed2 <_dtoa_r+0x31a>
 8006e56:	6041      	str	r1, [r0, #4]
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f000 fd9f 	bl	800799c <_Balloc>
 8006e5e:	9000      	str	r0, [sp, #0]
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d139      	bne.n	8006ed8 <_dtoa_r+0x320>
 8006e64:	4b16      	ldr	r3, [pc, #88]	; (8006ec0 <_dtoa_r+0x308>)
 8006e66:	4602      	mov	r2, r0
 8006e68:	f240 11af 	movw	r1, #431	; 0x1af
 8006e6c:	e6bd      	b.n	8006bea <_dtoa_r+0x32>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e7e1      	b.n	8006e36 <_dtoa_r+0x27e>
 8006e72:	2501      	movs	r5, #1
 8006e74:	2300      	movs	r3, #0
 8006e76:	9307      	str	r3, [sp, #28]
 8006e78:	9509      	str	r5, [sp, #36]	; 0x24
 8006e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e7e:	9301      	str	r3, [sp, #4]
 8006e80:	9304      	str	r3, [sp, #16]
 8006e82:	2200      	movs	r2, #0
 8006e84:	2312      	movs	r3, #18
 8006e86:	e7d1      	b.n	8006e2c <_dtoa_r+0x274>
 8006e88:	636f4361 	.word	0x636f4361
 8006e8c:	3fd287a7 	.word	0x3fd287a7
 8006e90:	8b60c8b3 	.word	0x8b60c8b3
 8006e94:	3fc68a28 	.word	0x3fc68a28
 8006e98:	509f79fb 	.word	0x509f79fb
 8006e9c:	3fd34413 	.word	0x3fd34413
 8006ea0:	0800a1f2 	.word	0x0800a1f2
 8006ea4:	0800a209 	.word	0x0800a209
 8006ea8:	7ff00000 	.word	0x7ff00000
 8006eac:	0800a1ee 	.word	0x0800a1ee
 8006eb0:	0800a1e5 	.word	0x0800a1e5
 8006eb4:	0800a1bd 	.word	0x0800a1bd
 8006eb8:	3ff80000 	.word	0x3ff80000
 8006ebc:	0800a2f8 	.word	0x0800a2f8
 8006ec0:	0800a261 	.word	0x0800a261
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ec8:	e7d7      	b.n	8006e7a <_dtoa_r+0x2c2>
 8006eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ecc:	9301      	str	r3, [sp, #4]
 8006ece:	9304      	str	r3, [sp, #16]
 8006ed0:	e7ba      	b.n	8006e48 <_dtoa_r+0x290>
 8006ed2:	3101      	adds	r1, #1
 8006ed4:	0052      	lsls	r2, r2, #1
 8006ed6:	e7ba      	b.n	8006e4e <_dtoa_r+0x296>
 8006ed8:	69e3      	ldr	r3, [r4, #28]
 8006eda:	9a00      	ldr	r2, [sp, #0]
 8006edc:	601a      	str	r2, [r3, #0]
 8006ede:	9b04      	ldr	r3, [sp, #16]
 8006ee0:	2b0e      	cmp	r3, #14
 8006ee2:	f200 80a8 	bhi.w	8007036 <_dtoa_r+0x47e>
 8006ee6:	2d00      	cmp	r5, #0
 8006ee8:	f000 80a5 	beq.w	8007036 <_dtoa_r+0x47e>
 8006eec:	f1bb 0f00 	cmp.w	fp, #0
 8006ef0:	dd38      	ble.n	8006f64 <_dtoa_r+0x3ac>
 8006ef2:	4bc0      	ldr	r3, [pc, #768]	; (80071f4 <_dtoa_r+0x63c>)
 8006ef4:	f00b 020f 	and.w	r2, fp, #15
 8006ef8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006efc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006f00:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006f04:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006f08:	d019      	beq.n	8006f3e <_dtoa_r+0x386>
 8006f0a:	4bbb      	ldr	r3, [pc, #748]	; (80071f8 <_dtoa_r+0x640>)
 8006f0c:	ec51 0b18 	vmov	r0, r1, d8
 8006f10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f14:	f7f9 fca2 	bl	800085c <__aeabi_ddiv>
 8006f18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f1c:	f008 080f 	and.w	r8, r8, #15
 8006f20:	2503      	movs	r5, #3
 8006f22:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80071f8 <_dtoa_r+0x640>
 8006f26:	f1b8 0f00 	cmp.w	r8, #0
 8006f2a:	d10a      	bne.n	8006f42 <_dtoa_r+0x38a>
 8006f2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f30:	4632      	mov	r2, r6
 8006f32:	463b      	mov	r3, r7
 8006f34:	f7f9 fc92 	bl	800085c <__aeabi_ddiv>
 8006f38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f3c:	e02b      	b.n	8006f96 <_dtoa_r+0x3de>
 8006f3e:	2502      	movs	r5, #2
 8006f40:	e7ef      	b.n	8006f22 <_dtoa_r+0x36a>
 8006f42:	f018 0f01 	tst.w	r8, #1
 8006f46:	d008      	beq.n	8006f5a <_dtoa_r+0x3a2>
 8006f48:	4630      	mov	r0, r6
 8006f4a:	4639      	mov	r1, r7
 8006f4c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006f50:	f7f9 fb5a 	bl	8000608 <__aeabi_dmul>
 8006f54:	3501      	adds	r5, #1
 8006f56:	4606      	mov	r6, r0
 8006f58:	460f      	mov	r7, r1
 8006f5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006f5e:	f109 0908 	add.w	r9, r9, #8
 8006f62:	e7e0      	b.n	8006f26 <_dtoa_r+0x36e>
 8006f64:	f000 809f 	beq.w	80070a6 <_dtoa_r+0x4ee>
 8006f68:	f1cb 0600 	rsb	r6, fp, #0
 8006f6c:	4ba1      	ldr	r3, [pc, #644]	; (80071f4 <_dtoa_r+0x63c>)
 8006f6e:	4fa2      	ldr	r7, [pc, #648]	; (80071f8 <_dtoa_r+0x640>)
 8006f70:	f006 020f 	and.w	r2, r6, #15
 8006f74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7c:	ec51 0b18 	vmov	r0, r1, d8
 8006f80:	f7f9 fb42 	bl	8000608 <__aeabi_dmul>
 8006f84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f88:	1136      	asrs	r6, r6, #4
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	2502      	movs	r5, #2
 8006f8e:	2e00      	cmp	r6, #0
 8006f90:	d17e      	bne.n	8007090 <_dtoa_r+0x4d8>
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1d0      	bne.n	8006f38 <_dtoa_r+0x380>
 8006f96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f000 8084 	beq.w	80070aa <_dtoa_r+0x4f2>
 8006fa2:	4b96      	ldr	r3, [pc, #600]	; (80071fc <_dtoa_r+0x644>)
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	4640      	mov	r0, r8
 8006fa8:	4649      	mov	r1, r9
 8006faa:	f7f9 fd9f 	bl	8000aec <__aeabi_dcmplt>
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	d07b      	beq.n	80070aa <_dtoa_r+0x4f2>
 8006fb2:	9b04      	ldr	r3, [sp, #16]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d078      	beq.n	80070aa <_dtoa_r+0x4f2>
 8006fb8:	9b01      	ldr	r3, [sp, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	dd39      	ble.n	8007032 <_dtoa_r+0x47a>
 8006fbe:	4b90      	ldr	r3, [pc, #576]	; (8007200 <_dtoa_r+0x648>)
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	4640      	mov	r0, r8
 8006fc4:	4649      	mov	r1, r9
 8006fc6:	f7f9 fb1f 	bl	8000608 <__aeabi_dmul>
 8006fca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fce:	9e01      	ldr	r6, [sp, #4]
 8006fd0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006fd4:	3501      	adds	r5, #1
 8006fd6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006fda:	4628      	mov	r0, r5
 8006fdc:	f7f9 faaa 	bl	8000534 <__aeabi_i2d>
 8006fe0:	4642      	mov	r2, r8
 8006fe2:	464b      	mov	r3, r9
 8006fe4:	f7f9 fb10 	bl	8000608 <__aeabi_dmul>
 8006fe8:	4b86      	ldr	r3, [pc, #536]	; (8007204 <_dtoa_r+0x64c>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	f7f9 f956 	bl	800029c <__adddf3>
 8006ff0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006ff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ff8:	9303      	str	r3, [sp, #12]
 8006ffa:	2e00      	cmp	r6, #0
 8006ffc:	d158      	bne.n	80070b0 <_dtoa_r+0x4f8>
 8006ffe:	4b82      	ldr	r3, [pc, #520]	; (8007208 <_dtoa_r+0x650>)
 8007000:	2200      	movs	r2, #0
 8007002:	4640      	mov	r0, r8
 8007004:	4649      	mov	r1, r9
 8007006:	f7f9 f947 	bl	8000298 <__aeabi_dsub>
 800700a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800700e:	4680      	mov	r8, r0
 8007010:	4689      	mov	r9, r1
 8007012:	f7f9 fd89 	bl	8000b28 <__aeabi_dcmpgt>
 8007016:	2800      	cmp	r0, #0
 8007018:	f040 8296 	bne.w	8007548 <_dtoa_r+0x990>
 800701c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007020:	4640      	mov	r0, r8
 8007022:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007026:	4649      	mov	r1, r9
 8007028:	f7f9 fd60 	bl	8000aec <__aeabi_dcmplt>
 800702c:	2800      	cmp	r0, #0
 800702e:	f040 8289 	bne.w	8007544 <_dtoa_r+0x98c>
 8007032:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007036:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007038:	2b00      	cmp	r3, #0
 800703a:	f2c0 814e 	blt.w	80072da <_dtoa_r+0x722>
 800703e:	f1bb 0f0e 	cmp.w	fp, #14
 8007042:	f300 814a 	bgt.w	80072da <_dtoa_r+0x722>
 8007046:	4b6b      	ldr	r3, [pc, #428]	; (80071f4 <_dtoa_r+0x63c>)
 8007048:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800704c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007052:	2b00      	cmp	r3, #0
 8007054:	f280 80dc 	bge.w	8007210 <_dtoa_r+0x658>
 8007058:	9b04      	ldr	r3, [sp, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	f300 80d8 	bgt.w	8007210 <_dtoa_r+0x658>
 8007060:	f040 826f 	bne.w	8007542 <_dtoa_r+0x98a>
 8007064:	4b68      	ldr	r3, [pc, #416]	; (8007208 <_dtoa_r+0x650>)
 8007066:	2200      	movs	r2, #0
 8007068:	4640      	mov	r0, r8
 800706a:	4649      	mov	r1, r9
 800706c:	f7f9 facc 	bl	8000608 <__aeabi_dmul>
 8007070:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007074:	f7f9 fd4e 	bl	8000b14 <__aeabi_dcmpge>
 8007078:	9e04      	ldr	r6, [sp, #16]
 800707a:	4637      	mov	r7, r6
 800707c:	2800      	cmp	r0, #0
 800707e:	f040 8245 	bne.w	800750c <_dtoa_r+0x954>
 8007082:	9d00      	ldr	r5, [sp, #0]
 8007084:	2331      	movs	r3, #49	; 0x31
 8007086:	f805 3b01 	strb.w	r3, [r5], #1
 800708a:	f10b 0b01 	add.w	fp, fp, #1
 800708e:	e241      	b.n	8007514 <_dtoa_r+0x95c>
 8007090:	07f2      	lsls	r2, r6, #31
 8007092:	d505      	bpl.n	80070a0 <_dtoa_r+0x4e8>
 8007094:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007098:	f7f9 fab6 	bl	8000608 <__aeabi_dmul>
 800709c:	3501      	adds	r5, #1
 800709e:	2301      	movs	r3, #1
 80070a0:	1076      	asrs	r6, r6, #1
 80070a2:	3708      	adds	r7, #8
 80070a4:	e773      	b.n	8006f8e <_dtoa_r+0x3d6>
 80070a6:	2502      	movs	r5, #2
 80070a8:	e775      	b.n	8006f96 <_dtoa_r+0x3de>
 80070aa:	9e04      	ldr	r6, [sp, #16]
 80070ac:	465f      	mov	r7, fp
 80070ae:	e792      	b.n	8006fd6 <_dtoa_r+0x41e>
 80070b0:	9900      	ldr	r1, [sp, #0]
 80070b2:	4b50      	ldr	r3, [pc, #320]	; (80071f4 <_dtoa_r+0x63c>)
 80070b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80070b8:	4431      	add	r1, r6
 80070ba:	9102      	str	r1, [sp, #8]
 80070bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070be:	eeb0 9a47 	vmov.f32	s18, s14
 80070c2:	eef0 9a67 	vmov.f32	s19, s15
 80070c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80070ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070ce:	2900      	cmp	r1, #0
 80070d0:	d044      	beq.n	800715c <_dtoa_r+0x5a4>
 80070d2:	494e      	ldr	r1, [pc, #312]	; (800720c <_dtoa_r+0x654>)
 80070d4:	2000      	movs	r0, #0
 80070d6:	f7f9 fbc1 	bl	800085c <__aeabi_ddiv>
 80070da:	ec53 2b19 	vmov	r2, r3, d9
 80070de:	f7f9 f8db 	bl	8000298 <__aeabi_dsub>
 80070e2:	9d00      	ldr	r5, [sp, #0]
 80070e4:	ec41 0b19 	vmov	d9, r0, r1
 80070e8:	4649      	mov	r1, r9
 80070ea:	4640      	mov	r0, r8
 80070ec:	f7f9 fd3c 	bl	8000b68 <__aeabi_d2iz>
 80070f0:	4606      	mov	r6, r0
 80070f2:	f7f9 fa1f 	bl	8000534 <__aeabi_i2d>
 80070f6:	4602      	mov	r2, r0
 80070f8:	460b      	mov	r3, r1
 80070fa:	4640      	mov	r0, r8
 80070fc:	4649      	mov	r1, r9
 80070fe:	f7f9 f8cb 	bl	8000298 <__aeabi_dsub>
 8007102:	3630      	adds	r6, #48	; 0x30
 8007104:	f805 6b01 	strb.w	r6, [r5], #1
 8007108:	ec53 2b19 	vmov	r2, r3, d9
 800710c:	4680      	mov	r8, r0
 800710e:	4689      	mov	r9, r1
 8007110:	f7f9 fcec 	bl	8000aec <__aeabi_dcmplt>
 8007114:	2800      	cmp	r0, #0
 8007116:	d164      	bne.n	80071e2 <_dtoa_r+0x62a>
 8007118:	4642      	mov	r2, r8
 800711a:	464b      	mov	r3, r9
 800711c:	4937      	ldr	r1, [pc, #220]	; (80071fc <_dtoa_r+0x644>)
 800711e:	2000      	movs	r0, #0
 8007120:	f7f9 f8ba 	bl	8000298 <__aeabi_dsub>
 8007124:	ec53 2b19 	vmov	r2, r3, d9
 8007128:	f7f9 fce0 	bl	8000aec <__aeabi_dcmplt>
 800712c:	2800      	cmp	r0, #0
 800712e:	f040 80b6 	bne.w	800729e <_dtoa_r+0x6e6>
 8007132:	9b02      	ldr	r3, [sp, #8]
 8007134:	429d      	cmp	r5, r3
 8007136:	f43f af7c 	beq.w	8007032 <_dtoa_r+0x47a>
 800713a:	4b31      	ldr	r3, [pc, #196]	; (8007200 <_dtoa_r+0x648>)
 800713c:	ec51 0b19 	vmov	r0, r1, d9
 8007140:	2200      	movs	r2, #0
 8007142:	f7f9 fa61 	bl	8000608 <__aeabi_dmul>
 8007146:	4b2e      	ldr	r3, [pc, #184]	; (8007200 <_dtoa_r+0x648>)
 8007148:	ec41 0b19 	vmov	d9, r0, r1
 800714c:	2200      	movs	r2, #0
 800714e:	4640      	mov	r0, r8
 8007150:	4649      	mov	r1, r9
 8007152:	f7f9 fa59 	bl	8000608 <__aeabi_dmul>
 8007156:	4680      	mov	r8, r0
 8007158:	4689      	mov	r9, r1
 800715a:	e7c5      	b.n	80070e8 <_dtoa_r+0x530>
 800715c:	ec51 0b17 	vmov	r0, r1, d7
 8007160:	f7f9 fa52 	bl	8000608 <__aeabi_dmul>
 8007164:	9b02      	ldr	r3, [sp, #8]
 8007166:	9d00      	ldr	r5, [sp, #0]
 8007168:	930f      	str	r3, [sp, #60]	; 0x3c
 800716a:	ec41 0b19 	vmov	d9, r0, r1
 800716e:	4649      	mov	r1, r9
 8007170:	4640      	mov	r0, r8
 8007172:	f7f9 fcf9 	bl	8000b68 <__aeabi_d2iz>
 8007176:	4606      	mov	r6, r0
 8007178:	f7f9 f9dc 	bl	8000534 <__aeabi_i2d>
 800717c:	3630      	adds	r6, #48	; 0x30
 800717e:	4602      	mov	r2, r0
 8007180:	460b      	mov	r3, r1
 8007182:	4640      	mov	r0, r8
 8007184:	4649      	mov	r1, r9
 8007186:	f7f9 f887 	bl	8000298 <__aeabi_dsub>
 800718a:	f805 6b01 	strb.w	r6, [r5], #1
 800718e:	9b02      	ldr	r3, [sp, #8]
 8007190:	429d      	cmp	r5, r3
 8007192:	4680      	mov	r8, r0
 8007194:	4689      	mov	r9, r1
 8007196:	f04f 0200 	mov.w	r2, #0
 800719a:	d124      	bne.n	80071e6 <_dtoa_r+0x62e>
 800719c:	4b1b      	ldr	r3, [pc, #108]	; (800720c <_dtoa_r+0x654>)
 800719e:	ec51 0b19 	vmov	r0, r1, d9
 80071a2:	f7f9 f87b 	bl	800029c <__adddf3>
 80071a6:	4602      	mov	r2, r0
 80071a8:	460b      	mov	r3, r1
 80071aa:	4640      	mov	r0, r8
 80071ac:	4649      	mov	r1, r9
 80071ae:	f7f9 fcbb 	bl	8000b28 <__aeabi_dcmpgt>
 80071b2:	2800      	cmp	r0, #0
 80071b4:	d173      	bne.n	800729e <_dtoa_r+0x6e6>
 80071b6:	ec53 2b19 	vmov	r2, r3, d9
 80071ba:	4914      	ldr	r1, [pc, #80]	; (800720c <_dtoa_r+0x654>)
 80071bc:	2000      	movs	r0, #0
 80071be:	f7f9 f86b 	bl	8000298 <__aeabi_dsub>
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	4640      	mov	r0, r8
 80071c8:	4649      	mov	r1, r9
 80071ca:	f7f9 fc8f 	bl	8000aec <__aeabi_dcmplt>
 80071ce:	2800      	cmp	r0, #0
 80071d0:	f43f af2f 	beq.w	8007032 <_dtoa_r+0x47a>
 80071d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80071d6:	1e6b      	subs	r3, r5, #1
 80071d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80071da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80071de:	2b30      	cmp	r3, #48	; 0x30
 80071e0:	d0f8      	beq.n	80071d4 <_dtoa_r+0x61c>
 80071e2:	46bb      	mov	fp, r7
 80071e4:	e04a      	b.n	800727c <_dtoa_r+0x6c4>
 80071e6:	4b06      	ldr	r3, [pc, #24]	; (8007200 <_dtoa_r+0x648>)
 80071e8:	f7f9 fa0e 	bl	8000608 <__aeabi_dmul>
 80071ec:	4680      	mov	r8, r0
 80071ee:	4689      	mov	r9, r1
 80071f0:	e7bd      	b.n	800716e <_dtoa_r+0x5b6>
 80071f2:	bf00      	nop
 80071f4:	0800a2f8 	.word	0x0800a2f8
 80071f8:	0800a2d0 	.word	0x0800a2d0
 80071fc:	3ff00000 	.word	0x3ff00000
 8007200:	40240000 	.word	0x40240000
 8007204:	401c0000 	.word	0x401c0000
 8007208:	40140000 	.word	0x40140000
 800720c:	3fe00000 	.word	0x3fe00000
 8007210:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007214:	9d00      	ldr	r5, [sp, #0]
 8007216:	4642      	mov	r2, r8
 8007218:	464b      	mov	r3, r9
 800721a:	4630      	mov	r0, r6
 800721c:	4639      	mov	r1, r7
 800721e:	f7f9 fb1d 	bl	800085c <__aeabi_ddiv>
 8007222:	f7f9 fca1 	bl	8000b68 <__aeabi_d2iz>
 8007226:	9001      	str	r0, [sp, #4]
 8007228:	f7f9 f984 	bl	8000534 <__aeabi_i2d>
 800722c:	4642      	mov	r2, r8
 800722e:	464b      	mov	r3, r9
 8007230:	f7f9 f9ea 	bl	8000608 <__aeabi_dmul>
 8007234:	4602      	mov	r2, r0
 8007236:	460b      	mov	r3, r1
 8007238:	4630      	mov	r0, r6
 800723a:	4639      	mov	r1, r7
 800723c:	f7f9 f82c 	bl	8000298 <__aeabi_dsub>
 8007240:	9e01      	ldr	r6, [sp, #4]
 8007242:	9f04      	ldr	r7, [sp, #16]
 8007244:	3630      	adds	r6, #48	; 0x30
 8007246:	f805 6b01 	strb.w	r6, [r5], #1
 800724a:	9e00      	ldr	r6, [sp, #0]
 800724c:	1bae      	subs	r6, r5, r6
 800724e:	42b7      	cmp	r7, r6
 8007250:	4602      	mov	r2, r0
 8007252:	460b      	mov	r3, r1
 8007254:	d134      	bne.n	80072c0 <_dtoa_r+0x708>
 8007256:	f7f9 f821 	bl	800029c <__adddf3>
 800725a:	4642      	mov	r2, r8
 800725c:	464b      	mov	r3, r9
 800725e:	4606      	mov	r6, r0
 8007260:	460f      	mov	r7, r1
 8007262:	f7f9 fc61 	bl	8000b28 <__aeabi_dcmpgt>
 8007266:	b9c8      	cbnz	r0, 800729c <_dtoa_r+0x6e4>
 8007268:	4642      	mov	r2, r8
 800726a:	464b      	mov	r3, r9
 800726c:	4630      	mov	r0, r6
 800726e:	4639      	mov	r1, r7
 8007270:	f7f9 fc32 	bl	8000ad8 <__aeabi_dcmpeq>
 8007274:	b110      	cbz	r0, 800727c <_dtoa_r+0x6c4>
 8007276:	9b01      	ldr	r3, [sp, #4]
 8007278:	07db      	lsls	r3, r3, #31
 800727a:	d40f      	bmi.n	800729c <_dtoa_r+0x6e4>
 800727c:	4651      	mov	r1, sl
 800727e:	4620      	mov	r0, r4
 8007280:	f000 fbcc 	bl	8007a1c <_Bfree>
 8007284:	2300      	movs	r3, #0
 8007286:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007288:	702b      	strb	r3, [r5, #0]
 800728a:	f10b 0301 	add.w	r3, fp, #1
 800728e:	6013      	str	r3, [r2, #0]
 8007290:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007292:	2b00      	cmp	r3, #0
 8007294:	f43f ace2 	beq.w	8006c5c <_dtoa_r+0xa4>
 8007298:	601d      	str	r5, [r3, #0]
 800729a:	e4df      	b.n	8006c5c <_dtoa_r+0xa4>
 800729c:	465f      	mov	r7, fp
 800729e:	462b      	mov	r3, r5
 80072a0:	461d      	mov	r5, r3
 80072a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072a6:	2a39      	cmp	r2, #57	; 0x39
 80072a8:	d106      	bne.n	80072b8 <_dtoa_r+0x700>
 80072aa:	9a00      	ldr	r2, [sp, #0]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d1f7      	bne.n	80072a0 <_dtoa_r+0x6e8>
 80072b0:	9900      	ldr	r1, [sp, #0]
 80072b2:	2230      	movs	r2, #48	; 0x30
 80072b4:	3701      	adds	r7, #1
 80072b6:	700a      	strb	r2, [r1, #0]
 80072b8:	781a      	ldrb	r2, [r3, #0]
 80072ba:	3201      	adds	r2, #1
 80072bc:	701a      	strb	r2, [r3, #0]
 80072be:	e790      	b.n	80071e2 <_dtoa_r+0x62a>
 80072c0:	4ba3      	ldr	r3, [pc, #652]	; (8007550 <_dtoa_r+0x998>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	f7f9 f9a0 	bl	8000608 <__aeabi_dmul>
 80072c8:	2200      	movs	r2, #0
 80072ca:	2300      	movs	r3, #0
 80072cc:	4606      	mov	r6, r0
 80072ce:	460f      	mov	r7, r1
 80072d0:	f7f9 fc02 	bl	8000ad8 <__aeabi_dcmpeq>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d09e      	beq.n	8007216 <_dtoa_r+0x65e>
 80072d8:	e7d0      	b.n	800727c <_dtoa_r+0x6c4>
 80072da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072dc:	2a00      	cmp	r2, #0
 80072de:	f000 80ca 	beq.w	8007476 <_dtoa_r+0x8be>
 80072e2:	9a07      	ldr	r2, [sp, #28]
 80072e4:	2a01      	cmp	r2, #1
 80072e6:	f300 80ad 	bgt.w	8007444 <_dtoa_r+0x88c>
 80072ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072ec:	2a00      	cmp	r2, #0
 80072ee:	f000 80a5 	beq.w	800743c <_dtoa_r+0x884>
 80072f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80072f6:	9e08      	ldr	r6, [sp, #32]
 80072f8:	9d05      	ldr	r5, [sp, #20]
 80072fa:	9a05      	ldr	r2, [sp, #20]
 80072fc:	441a      	add	r2, r3
 80072fe:	9205      	str	r2, [sp, #20]
 8007300:	9a06      	ldr	r2, [sp, #24]
 8007302:	2101      	movs	r1, #1
 8007304:	441a      	add	r2, r3
 8007306:	4620      	mov	r0, r4
 8007308:	9206      	str	r2, [sp, #24]
 800730a:	f000 fc87 	bl	8007c1c <__i2b>
 800730e:	4607      	mov	r7, r0
 8007310:	b165      	cbz	r5, 800732c <_dtoa_r+0x774>
 8007312:	9b06      	ldr	r3, [sp, #24]
 8007314:	2b00      	cmp	r3, #0
 8007316:	dd09      	ble.n	800732c <_dtoa_r+0x774>
 8007318:	42ab      	cmp	r3, r5
 800731a:	9a05      	ldr	r2, [sp, #20]
 800731c:	bfa8      	it	ge
 800731e:	462b      	movge	r3, r5
 8007320:	1ad2      	subs	r2, r2, r3
 8007322:	9205      	str	r2, [sp, #20]
 8007324:	9a06      	ldr	r2, [sp, #24]
 8007326:	1aed      	subs	r5, r5, r3
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	9306      	str	r3, [sp, #24]
 800732c:	9b08      	ldr	r3, [sp, #32]
 800732e:	b1f3      	cbz	r3, 800736e <_dtoa_r+0x7b6>
 8007330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 80a3 	beq.w	800747e <_dtoa_r+0x8c6>
 8007338:	2e00      	cmp	r6, #0
 800733a:	dd10      	ble.n	800735e <_dtoa_r+0x7a6>
 800733c:	4639      	mov	r1, r7
 800733e:	4632      	mov	r2, r6
 8007340:	4620      	mov	r0, r4
 8007342:	f000 fd2b 	bl	8007d9c <__pow5mult>
 8007346:	4652      	mov	r2, sl
 8007348:	4601      	mov	r1, r0
 800734a:	4607      	mov	r7, r0
 800734c:	4620      	mov	r0, r4
 800734e:	f000 fc7b 	bl	8007c48 <__multiply>
 8007352:	4651      	mov	r1, sl
 8007354:	4680      	mov	r8, r0
 8007356:	4620      	mov	r0, r4
 8007358:	f000 fb60 	bl	8007a1c <_Bfree>
 800735c:	46c2      	mov	sl, r8
 800735e:	9b08      	ldr	r3, [sp, #32]
 8007360:	1b9a      	subs	r2, r3, r6
 8007362:	d004      	beq.n	800736e <_dtoa_r+0x7b6>
 8007364:	4651      	mov	r1, sl
 8007366:	4620      	mov	r0, r4
 8007368:	f000 fd18 	bl	8007d9c <__pow5mult>
 800736c:	4682      	mov	sl, r0
 800736e:	2101      	movs	r1, #1
 8007370:	4620      	mov	r0, r4
 8007372:	f000 fc53 	bl	8007c1c <__i2b>
 8007376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007378:	2b00      	cmp	r3, #0
 800737a:	4606      	mov	r6, r0
 800737c:	f340 8081 	ble.w	8007482 <_dtoa_r+0x8ca>
 8007380:	461a      	mov	r2, r3
 8007382:	4601      	mov	r1, r0
 8007384:	4620      	mov	r0, r4
 8007386:	f000 fd09 	bl	8007d9c <__pow5mult>
 800738a:	9b07      	ldr	r3, [sp, #28]
 800738c:	2b01      	cmp	r3, #1
 800738e:	4606      	mov	r6, r0
 8007390:	dd7a      	ble.n	8007488 <_dtoa_r+0x8d0>
 8007392:	f04f 0800 	mov.w	r8, #0
 8007396:	6933      	ldr	r3, [r6, #16]
 8007398:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800739c:	6918      	ldr	r0, [r3, #16]
 800739e:	f000 fbef 	bl	8007b80 <__hi0bits>
 80073a2:	f1c0 0020 	rsb	r0, r0, #32
 80073a6:	9b06      	ldr	r3, [sp, #24]
 80073a8:	4418      	add	r0, r3
 80073aa:	f010 001f 	ands.w	r0, r0, #31
 80073ae:	f000 8094 	beq.w	80074da <_dtoa_r+0x922>
 80073b2:	f1c0 0320 	rsb	r3, r0, #32
 80073b6:	2b04      	cmp	r3, #4
 80073b8:	f340 8085 	ble.w	80074c6 <_dtoa_r+0x90e>
 80073bc:	9b05      	ldr	r3, [sp, #20]
 80073be:	f1c0 001c 	rsb	r0, r0, #28
 80073c2:	4403      	add	r3, r0
 80073c4:	9305      	str	r3, [sp, #20]
 80073c6:	9b06      	ldr	r3, [sp, #24]
 80073c8:	4403      	add	r3, r0
 80073ca:	4405      	add	r5, r0
 80073cc:	9306      	str	r3, [sp, #24]
 80073ce:	9b05      	ldr	r3, [sp, #20]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	dd05      	ble.n	80073e0 <_dtoa_r+0x828>
 80073d4:	4651      	mov	r1, sl
 80073d6:	461a      	mov	r2, r3
 80073d8:	4620      	mov	r0, r4
 80073da:	f000 fd39 	bl	8007e50 <__lshift>
 80073de:	4682      	mov	sl, r0
 80073e0:	9b06      	ldr	r3, [sp, #24]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	dd05      	ble.n	80073f2 <_dtoa_r+0x83a>
 80073e6:	4631      	mov	r1, r6
 80073e8:	461a      	mov	r2, r3
 80073ea:	4620      	mov	r0, r4
 80073ec:	f000 fd30 	bl	8007e50 <__lshift>
 80073f0:	4606      	mov	r6, r0
 80073f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d072      	beq.n	80074de <_dtoa_r+0x926>
 80073f8:	4631      	mov	r1, r6
 80073fa:	4650      	mov	r0, sl
 80073fc:	f000 fd94 	bl	8007f28 <__mcmp>
 8007400:	2800      	cmp	r0, #0
 8007402:	da6c      	bge.n	80074de <_dtoa_r+0x926>
 8007404:	2300      	movs	r3, #0
 8007406:	4651      	mov	r1, sl
 8007408:	220a      	movs	r2, #10
 800740a:	4620      	mov	r0, r4
 800740c:	f000 fb28 	bl	8007a60 <__multadd>
 8007410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007412:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007416:	4682      	mov	sl, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 81b0 	beq.w	800777e <_dtoa_r+0xbc6>
 800741e:	2300      	movs	r3, #0
 8007420:	4639      	mov	r1, r7
 8007422:	220a      	movs	r2, #10
 8007424:	4620      	mov	r0, r4
 8007426:	f000 fb1b 	bl	8007a60 <__multadd>
 800742a:	9b01      	ldr	r3, [sp, #4]
 800742c:	2b00      	cmp	r3, #0
 800742e:	4607      	mov	r7, r0
 8007430:	f300 8096 	bgt.w	8007560 <_dtoa_r+0x9a8>
 8007434:	9b07      	ldr	r3, [sp, #28]
 8007436:	2b02      	cmp	r3, #2
 8007438:	dc59      	bgt.n	80074ee <_dtoa_r+0x936>
 800743a:	e091      	b.n	8007560 <_dtoa_r+0x9a8>
 800743c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800743e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007442:	e758      	b.n	80072f6 <_dtoa_r+0x73e>
 8007444:	9b04      	ldr	r3, [sp, #16]
 8007446:	1e5e      	subs	r6, r3, #1
 8007448:	9b08      	ldr	r3, [sp, #32]
 800744a:	42b3      	cmp	r3, r6
 800744c:	bfbf      	itttt	lt
 800744e:	9b08      	ldrlt	r3, [sp, #32]
 8007450:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007452:	9608      	strlt	r6, [sp, #32]
 8007454:	1af3      	sublt	r3, r6, r3
 8007456:	bfb4      	ite	lt
 8007458:	18d2      	addlt	r2, r2, r3
 800745a:	1b9e      	subge	r6, r3, r6
 800745c:	9b04      	ldr	r3, [sp, #16]
 800745e:	bfbc      	itt	lt
 8007460:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007462:	2600      	movlt	r6, #0
 8007464:	2b00      	cmp	r3, #0
 8007466:	bfb7      	itett	lt
 8007468:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800746c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007470:	1a9d      	sublt	r5, r3, r2
 8007472:	2300      	movlt	r3, #0
 8007474:	e741      	b.n	80072fa <_dtoa_r+0x742>
 8007476:	9e08      	ldr	r6, [sp, #32]
 8007478:	9d05      	ldr	r5, [sp, #20]
 800747a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800747c:	e748      	b.n	8007310 <_dtoa_r+0x758>
 800747e:	9a08      	ldr	r2, [sp, #32]
 8007480:	e770      	b.n	8007364 <_dtoa_r+0x7ac>
 8007482:	9b07      	ldr	r3, [sp, #28]
 8007484:	2b01      	cmp	r3, #1
 8007486:	dc19      	bgt.n	80074bc <_dtoa_r+0x904>
 8007488:	9b02      	ldr	r3, [sp, #8]
 800748a:	b9bb      	cbnz	r3, 80074bc <_dtoa_r+0x904>
 800748c:	9b03      	ldr	r3, [sp, #12]
 800748e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007492:	b99b      	cbnz	r3, 80074bc <_dtoa_r+0x904>
 8007494:	9b03      	ldr	r3, [sp, #12]
 8007496:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800749a:	0d1b      	lsrs	r3, r3, #20
 800749c:	051b      	lsls	r3, r3, #20
 800749e:	b183      	cbz	r3, 80074c2 <_dtoa_r+0x90a>
 80074a0:	9b05      	ldr	r3, [sp, #20]
 80074a2:	3301      	adds	r3, #1
 80074a4:	9305      	str	r3, [sp, #20]
 80074a6:	9b06      	ldr	r3, [sp, #24]
 80074a8:	3301      	adds	r3, #1
 80074aa:	9306      	str	r3, [sp, #24]
 80074ac:	f04f 0801 	mov.w	r8, #1
 80074b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f47f af6f 	bne.w	8007396 <_dtoa_r+0x7de>
 80074b8:	2001      	movs	r0, #1
 80074ba:	e774      	b.n	80073a6 <_dtoa_r+0x7ee>
 80074bc:	f04f 0800 	mov.w	r8, #0
 80074c0:	e7f6      	b.n	80074b0 <_dtoa_r+0x8f8>
 80074c2:	4698      	mov	r8, r3
 80074c4:	e7f4      	b.n	80074b0 <_dtoa_r+0x8f8>
 80074c6:	d082      	beq.n	80073ce <_dtoa_r+0x816>
 80074c8:	9a05      	ldr	r2, [sp, #20]
 80074ca:	331c      	adds	r3, #28
 80074cc:	441a      	add	r2, r3
 80074ce:	9205      	str	r2, [sp, #20]
 80074d0:	9a06      	ldr	r2, [sp, #24]
 80074d2:	441a      	add	r2, r3
 80074d4:	441d      	add	r5, r3
 80074d6:	9206      	str	r2, [sp, #24]
 80074d8:	e779      	b.n	80073ce <_dtoa_r+0x816>
 80074da:	4603      	mov	r3, r0
 80074dc:	e7f4      	b.n	80074c8 <_dtoa_r+0x910>
 80074de:	9b04      	ldr	r3, [sp, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	dc37      	bgt.n	8007554 <_dtoa_r+0x99c>
 80074e4:	9b07      	ldr	r3, [sp, #28]
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	dd34      	ble.n	8007554 <_dtoa_r+0x99c>
 80074ea:	9b04      	ldr	r3, [sp, #16]
 80074ec:	9301      	str	r3, [sp, #4]
 80074ee:	9b01      	ldr	r3, [sp, #4]
 80074f0:	b963      	cbnz	r3, 800750c <_dtoa_r+0x954>
 80074f2:	4631      	mov	r1, r6
 80074f4:	2205      	movs	r2, #5
 80074f6:	4620      	mov	r0, r4
 80074f8:	f000 fab2 	bl	8007a60 <__multadd>
 80074fc:	4601      	mov	r1, r0
 80074fe:	4606      	mov	r6, r0
 8007500:	4650      	mov	r0, sl
 8007502:	f000 fd11 	bl	8007f28 <__mcmp>
 8007506:	2800      	cmp	r0, #0
 8007508:	f73f adbb 	bgt.w	8007082 <_dtoa_r+0x4ca>
 800750c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800750e:	9d00      	ldr	r5, [sp, #0]
 8007510:	ea6f 0b03 	mvn.w	fp, r3
 8007514:	f04f 0800 	mov.w	r8, #0
 8007518:	4631      	mov	r1, r6
 800751a:	4620      	mov	r0, r4
 800751c:	f000 fa7e 	bl	8007a1c <_Bfree>
 8007520:	2f00      	cmp	r7, #0
 8007522:	f43f aeab 	beq.w	800727c <_dtoa_r+0x6c4>
 8007526:	f1b8 0f00 	cmp.w	r8, #0
 800752a:	d005      	beq.n	8007538 <_dtoa_r+0x980>
 800752c:	45b8      	cmp	r8, r7
 800752e:	d003      	beq.n	8007538 <_dtoa_r+0x980>
 8007530:	4641      	mov	r1, r8
 8007532:	4620      	mov	r0, r4
 8007534:	f000 fa72 	bl	8007a1c <_Bfree>
 8007538:	4639      	mov	r1, r7
 800753a:	4620      	mov	r0, r4
 800753c:	f000 fa6e 	bl	8007a1c <_Bfree>
 8007540:	e69c      	b.n	800727c <_dtoa_r+0x6c4>
 8007542:	2600      	movs	r6, #0
 8007544:	4637      	mov	r7, r6
 8007546:	e7e1      	b.n	800750c <_dtoa_r+0x954>
 8007548:	46bb      	mov	fp, r7
 800754a:	4637      	mov	r7, r6
 800754c:	e599      	b.n	8007082 <_dtoa_r+0x4ca>
 800754e:	bf00      	nop
 8007550:	40240000 	.word	0x40240000
 8007554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007556:	2b00      	cmp	r3, #0
 8007558:	f000 80c8 	beq.w	80076ec <_dtoa_r+0xb34>
 800755c:	9b04      	ldr	r3, [sp, #16]
 800755e:	9301      	str	r3, [sp, #4]
 8007560:	2d00      	cmp	r5, #0
 8007562:	dd05      	ble.n	8007570 <_dtoa_r+0x9b8>
 8007564:	4639      	mov	r1, r7
 8007566:	462a      	mov	r2, r5
 8007568:	4620      	mov	r0, r4
 800756a:	f000 fc71 	bl	8007e50 <__lshift>
 800756e:	4607      	mov	r7, r0
 8007570:	f1b8 0f00 	cmp.w	r8, #0
 8007574:	d05b      	beq.n	800762e <_dtoa_r+0xa76>
 8007576:	6879      	ldr	r1, [r7, #4]
 8007578:	4620      	mov	r0, r4
 800757a:	f000 fa0f 	bl	800799c <_Balloc>
 800757e:	4605      	mov	r5, r0
 8007580:	b928      	cbnz	r0, 800758e <_dtoa_r+0x9d6>
 8007582:	4b83      	ldr	r3, [pc, #524]	; (8007790 <_dtoa_r+0xbd8>)
 8007584:	4602      	mov	r2, r0
 8007586:	f240 21ef 	movw	r1, #751	; 0x2ef
 800758a:	f7ff bb2e 	b.w	8006bea <_dtoa_r+0x32>
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	3202      	adds	r2, #2
 8007592:	0092      	lsls	r2, r2, #2
 8007594:	f107 010c 	add.w	r1, r7, #12
 8007598:	300c      	adds	r0, #12
 800759a:	f002 f94d 	bl	8009838 <memcpy>
 800759e:	2201      	movs	r2, #1
 80075a0:	4629      	mov	r1, r5
 80075a2:	4620      	mov	r0, r4
 80075a4:	f000 fc54 	bl	8007e50 <__lshift>
 80075a8:	9b00      	ldr	r3, [sp, #0]
 80075aa:	3301      	adds	r3, #1
 80075ac:	9304      	str	r3, [sp, #16]
 80075ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075b2:	4413      	add	r3, r2
 80075b4:	9308      	str	r3, [sp, #32]
 80075b6:	9b02      	ldr	r3, [sp, #8]
 80075b8:	f003 0301 	and.w	r3, r3, #1
 80075bc:	46b8      	mov	r8, r7
 80075be:	9306      	str	r3, [sp, #24]
 80075c0:	4607      	mov	r7, r0
 80075c2:	9b04      	ldr	r3, [sp, #16]
 80075c4:	4631      	mov	r1, r6
 80075c6:	3b01      	subs	r3, #1
 80075c8:	4650      	mov	r0, sl
 80075ca:	9301      	str	r3, [sp, #4]
 80075cc:	f7ff fa6c 	bl	8006aa8 <quorem>
 80075d0:	4641      	mov	r1, r8
 80075d2:	9002      	str	r0, [sp, #8]
 80075d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80075d8:	4650      	mov	r0, sl
 80075da:	f000 fca5 	bl	8007f28 <__mcmp>
 80075de:	463a      	mov	r2, r7
 80075e0:	9005      	str	r0, [sp, #20]
 80075e2:	4631      	mov	r1, r6
 80075e4:	4620      	mov	r0, r4
 80075e6:	f000 fcbb 	bl	8007f60 <__mdiff>
 80075ea:	68c2      	ldr	r2, [r0, #12]
 80075ec:	4605      	mov	r5, r0
 80075ee:	bb02      	cbnz	r2, 8007632 <_dtoa_r+0xa7a>
 80075f0:	4601      	mov	r1, r0
 80075f2:	4650      	mov	r0, sl
 80075f4:	f000 fc98 	bl	8007f28 <__mcmp>
 80075f8:	4602      	mov	r2, r0
 80075fa:	4629      	mov	r1, r5
 80075fc:	4620      	mov	r0, r4
 80075fe:	9209      	str	r2, [sp, #36]	; 0x24
 8007600:	f000 fa0c 	bl	8007a1c <_Bfree>
 8007604:	9b07      	ldr	r3, [sp, #28]
 8007606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007608:	9d04      	ldr	r5, [sp, #16]
 800760a:	ea43 0102 	orr.w	r1, r3, r2
 800760e:	9b06      	ldr	r3, [sp, #24]
 8007610:	4319      	orrs	r1, r3
 8007612:	d110      	bne.n	8007636 <_dtoa_r+0xa7e>
 8007614:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007618:	d029      	beq.n	800766e <_dtoa_r+0xab6>
 800761a:	9b05      	ldr	r3, [sp, #20]
 800761c:	2b00      	cmp	r3, #0
 800761e:	dd02      	ble.n	8007626 <_dtoa_r+0xa6e>
 8007620:	9b02      	ldr	r3, [sp, #8]
 8007622:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007626:	9b01      	ldr	r3, [sp, #4]
 8007628:	f883 9000 	strb.w	r9, [r3]
 800762c:	e774      	b.n	8007518 <_dtoa_r+0x960>
 800762e:	4638      	mov	r0, r7
 8007630:	e7ba      	b.n	80075a8 <_dtoa_r+0x9f0>
 8007632:	2201      	movs	r2, #1
 8007634:	e7e1      	b.n	80075fa <_dtoa_r+0xa42>
 8007636:	9b05      	ldr	r3, [sp, #20]
 8007638:	2b00      	cmp	r3, #0
 800763a:	db04      	blt.n	8007646 <_dtoa_r+0xa8e>
 800763c:	9907      	ldr	r1, [sp, #28]
 800763e:	430b      	orrs	r3, r1
 8007640:	9906      	ldr	r1, [sp, #24]
 8007642:	430b      	orrs	r3, r1
 8007644:	d120      	bne.n	8007688 <_dtoa_r+0xad0>
 8007646:	2a00      	cmp	r2, #0
 8007648:	dded      	ble.n	8007626 <_dtoa_r+0xa6e>
 800764a:	4651      	mov	r1, sl
 800764c:	2201      	movs	r2, #1
 800764e:	4620      	mov	r0, r4
 8007650:	f000 fbfe 	bl	8007e50 <__lshift>
 8007654:	4631      	mov	r1, r6
 8007656:	4682      	mov	sl, r0
 8007658:	f000 fc66 	bl	8007f28 <__mcmp>
 800765c:	2800      	cmp	r0, #0
 800765e:	dc03      	bgt.n	8007668 <_dtoa_r+0xab0>
 8007660:	d1e1      	bne.n	8007626 <_dtoa_r+0xa6e>
 8007662:	f019 0f01 	tst.w	r9, #1
 8007666:	d0de      	beq.n	8007626 <_dtoa_r+0xa6e>
 8007668:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800766c:	d1d8      	bne.n	8007620 <_dtoa_r+0xa68>
 800766e:	9a01      	ldr	r2, [sp, #4]
 8007670:	2339      	movs	r3, #57	; 0x39
 8007672:	7013      	strb	r3, [r2, #0]
 8007674:	462b      	mov	r3, r5
 8007676:	461d      	mov	r5, r3
 8007678:	3b01      	subs	r3, #1
 800767a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800767e:	2a39      	cmp	r2, #57	; 0x39
 8007680:	d06c      	beq.n	800775c <_dtoa_r+0xba4>
 8007682:	3201      	adds	r2, #1
 8007684:	701a      	strb	r2, [r3, #0]
 8007686:	e747      	b.n	8007518 <_dtoa_r+0x960>
 8007688:	2a00      	cmp	r2, #0
 800768a:	dd07      	ble.n	800769c <_dtoa_r+0xae4>
 800768c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007690:	d0ed      	beq.n	800766e <_dtoa_r+0xab6>
 8007692:	9a01      	ldr	r2, [sp, #4]
 8007694:	f109 0301 	add.w	r3, r9, #1
 8007698:	7013      	strb	r3, [r2, #0]
 800769a:	e73d      	b.n	8007518 <_dtoa_r+0x960>
 800769c:	9b04      	ldr	r3, [sp, #16]
 800769e:	9a08      	ldr	r2, [sp, #32]
 80076a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d043      	beq.n	8007730 <_dtoa_r+0xb78>
 80076a8:	4651      	mov	r1, sl
 80076aa:	2300      	movs	r3, #0
 80076ac:	220a      	movs	r2, #10
 80076ae:	4620      	mov	r0, r4
 80076b0:	f000 f9d6 	bl	8007a60 <__multadd>
 80076b4:	45b8      	cmp	r8, r7
 80076b6:	4682      	mov	sl, r0
 80076b8:	f04f 0300 	mov.w	r3, #0
 80076bc:	f04f 020a 	mov.w	r2, #10
 80076c0:	4641      	mov	r1, r8
 80076c2:	4620      	mov	r0, r4
 80076c4:	d107      	bne.n	80076d6 <_dtoa_r+0xb1e>
 80076c6:	f000 f9cb 	bl	8007a60 <__multadd>
 80076ca:	4680      	mov	r8, r0
 80076cc:	4607      	mov	r7, r0
 80076ce:	9b04      	ldr	r3, [sp, #16]
 80076d0:	3301      	adds	r3, #1
 80076d2:	9304      	str	r3, [sp, #16]
 80076d4:	e775      	b.n	80075c2 <_dtoa_r+0xa0a>
 80076d6:	f000 f9c3 	bl	8007a60 <__multadd>
 80076da:	4639      	mov	r1, r7
 80076dc:	4680      	mov	r8, r0
 80076de:	2300      	movs	r3, #0
 80076e0:	220a      	movs	r2, #10
 80076e2:	4620      	mov	r0, r4
 80076e4:	f000 f9bc 	bl	8007a60 <__multadd>
 80076e8:	4607      	mov	r7, r0
 80076ea:	e7f0      	b.n	80076ce <_dtoa_r+0xb16>
 80076ec:	9b04      	ldr	r3, [sp, #16]
 80076ee:	9301      	str	r3, [sp, #4]
 80076f0:	9d00      	ldr	r5, [sp, #0]
 80076f2:	4631      	mov	r1, r6
 80076f4:	4650      	mov	r0, sl
 80076f6:	f7ff f9d7 	bl	8006aa8 <quorem>
 80076fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80076fe:	9b00      	ldr	r3, [sp, #0]
 8007700:	f805 9b01 	strb.w	r9, [r5], #1
 8007704:	1aea      	subs	r2, r5, r3
 8007706:	9b01      	ldr	r3, [sp, #4]
 8007708:	4293      	cmp	r3, r2
 800770a:	dd07      	ble.n	800771c <_dtoa_r+0xb64>
 800770c:	4651      	mov	r1, sl
 800770e:	2300      	movs	r3, #0
 8007710:	220a      	movs	r2, #10
 8007712:	4620      	mov	r0, r4
 8007714:	f000 f9a4 	bl	8007a60 <__multadd>
 8007718:	4682      	mov	sl, r0
 800771a:	e7ea      	b.n	80076f2 <_dtoa_r+0xb3a>
 800771c:	9b01      	ldr	r3, [sp, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	bfc8      	it	gt
 8007722:	461d      	movgt	r5, r3
 8007724:	9b00      	ldr	r3, [sp, #0]
 8007726:	bfd8      	it	le
 8007728:	2501      	movle	r5, #1
 800772a:	441d      	add	r5, r3
 800772c:	f04f 0800 	mov.w	r8, #0
 8007730:	4651      	mov	r1, sl
 8007732:	2201      	movs	r2, #1
 8007734:	4620      	mov	r0, r4
 8007736:	f000 fb8b 	bl	8007e50 <__lshift>
 800773a:	4631      	mov	r1, r6
 800773c:	4682      	mov	sl, r0
 800773e:	f000 fbf3 	bl	8007f28 <__mcmp>
 8007742:	2800      	cmp	r0, #0
 8007744:	dc96      	bgt.n	8007674 <_dtoa_r+0xabc>
 8007746:	d102      	bne.n	800774e <_dtoa_r+0xb96>
 8007748:	f019 0f01 	tst.w	r9, #1
 800774c:	d192      	bne.n	8007674 <_dtoa_r+0xabc>
 800774e:	462b      	mov	r3, r5
 8007750:	461d      	mov	r5, r3
 8007752:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007756:	2a30      	cmp	r2, #48	; 0x30
 8007758:	d0fa      	beq.n	8007750 <_dtoa_r+0xb98>
 800775a:	e6dd      	b.n	8007518 <_dtoa_r+0x960>
 800775c:	9a00      	ldr	r2, [sp, #0]
 800775e:	429a      	cmp	r2, r3
 8007760:	d189      	bne.n	8007676 <_dtoa_r+0xabe>
 8007762:	f10b 0b01 	add.w	fp, fp, #1
 8007766:	2331      	movs	r3, #49	; 0x31
 8007768:	e796      	b.n	8007698 <_dtoa_r+0xae0>
 800776a:	4b0a      	ldr	r3, [pc, #40]	; (8007794 <_dtoa_r+0xbdc>)
 800776c:	f7ff ba99 	b.w	8006ca2 <_dtoa_r+0xea>
 8007770:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007772:	2b00      	cmp	r3, #0
 8007774:	f47f aa6d 	bne.w	8006c52 <_dtoa_r+0x9a>
 8007778:	4b07      	ldr	r3, [pc, #28]	; (8007798 <_dtoa_r+0xbe0>)
 800777a:	f7ff ba92 	b.w	8006ca2 <_dtoa_r+0xea>
 800777e:	9b01      	ldr	r3, [sp, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	dcb5      	bgt.n	80076f0 <_dtoa_r+0xb38>
 8007784:	9b07      	ldr	r3, [sp, #28]
 8007786:	2b02      	cmp	r3, #2
 8007788:	f73f aeb1 	bgt.w	80074ee <_dtoa_r+0x936>
 800778c:	e7b0      	b.n	80076f0 <_dtoa_r+0xb38>
 800778e:	bf00      	nop
 8007790:	0800a261 	.word	0x0800a261
 8007794:	0800a1bc 	.word	0x0800a1bc
 8007798:	0800a1e5 	.word	0x0800a1e5

0800779c <_free_r>:
 800779c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800779e:	2900      	cmp	r1, #0
 80077a0:	d044      	beq.n	800782c <_free_r+0x90>
 80077a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077a6:	9001      	str	r0, [sp, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f1a1 0404 	sub.w	r4, r1, #4
 80077ae:	bfb8      	it	lt
 80077b0:	18e4      	addlt	r4, r4, r3
 80077b2:	f000 f8e7 	bl	8007984 <__malloc_lock>
 80077b6:	4a1e      	ldr	r2, [pc, #120]	; (8007830 <_free_r+0x94>)
 80077b8:	9801      	ldr	r0, [sp, #4]
 80077ba:	6813      	ldr	r3, [r2, #0]
 80077bc:	b933      	cbnz	r3, 80077cc <_free_r+0x30>
 80077be:	6063      	str	r3, [r4, #4]
 80077c0:	6014      	str	r4, [r2, #0]
 80077c2:	b003      	add	sp, #12
 80077c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077c8:	f000 b8e2 	b.w	8007990 <__malloc_unlock>
 80077cc:	42a3      	cmp	r3, r4
 80077ce:	d908      	bls.n	80077e2 <_free_r+0x46>
 80077d0:	6825      	ldr	r5, [r4, #0]
 80077d2:	1961      	adds	r1, r4, r5
 80077d4:	428b      	cmp	r3, r1
 80077d6:	bf01      	itttt	eq
 80077d8:	6819      	ldreq	r1, [r3, #0]
 80077da:	685b      	ldreq	r3, [r3, #4]
 80077dc:	1949      	addeq	r1, r1, r5
 80077de:	6021      	streq	r1, [r4, #0]
 80077e0:	e7ed      	b.n	80077be <_free_r+0x22>
 80077e2:	461a      	mov	r2, r3
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	b10b      	cbz	r3, 80077ec <_free_r+0x50>
 80077e8:	42a3      	cmp	r3, r4
 80077ea:	d9fa      	bls.n	80077e2 <_free_r+0x46>
 80077ec:	6811      	ldr	r1, [r2, #0]
 80077ee:	1855      	adds	r5, r2, r1
 80077f0:	42a5      	cmp	r5, r4
 80077f2:	d10b      	bne.n	800780c <_free_r+0x70>
 80077f4:	6824      	ldr	r4, [r4, #0]
 80077f6:	4421      	add	r1, r4
 80077f8:	1854      	adds	r4, r2, r1
 80077fa:	42a3      	cmp	r3, r4
 80077fc:	6011      	str	r1, [r2, #0]
 80077fe:	d1e0      	bne.n	80077c2 <_free_r+0x26>
 8007800:	681c      	ldr	r4, [r3, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	6053      	str	r3, [r2, #4]
 8007806:	440c      	add	r4, r1
 8007808:	6014      	str	r4, [r2, #0]
 800780a:	e7da      	b.n	80077c2 <_free_r+0x26>
 800780c:	d902      	bls.n	8007814 <_free_r+0x78>
 800780e:	230c      	movs	r3, #12
 8007810:	6003      	str	r3, [r0, #0]
 8007812:	e7d6      	b.n	80077c2 <_free_r+0x26>
 8007814:	6825      	ldr	r5, [r4, #0]
 8007816:	1961      	adds	r1, r4, r5
 8007818:	428b      	cmp	r3, r1
 800781a:	bf04      	itt	eq
 800781c:	6819      	ldreq	r1, [r3, #0]
 800781e:	685b      	ldreq	r3, [r3, #4]
 8007820:	6063      	str	r3, [r4, #4]
 8007822:	bf04      	itt	eq
 8007824:	1949      	addeq	r1, r1, r5
 8007826:	6021      	streq	r1, [r4, #0]
 8007828:	6054      	str	r4, [r2, #4]
 800782a:	e7ca      	b.n	80077c2 <_free_r+0x26>
 800782c:	b003      	add	sp, #12
 800782e:	bd30      	pop	{r4, r5, pc}
 8007830:	200004d0 	.word	0x200004d0

08007834 <malloc>:
 8007834:	4b02      	ldr	r3, [pc, #8]	; (8007840 <malloc+0xc>)
 8007836:	4601      	mov	r1, r0
 8007838:	6818      	ldr	r0, [r3, #0]
 800783a:	f000 b823 	b.w	8007884 <_malloc_r>
 800783e:	bf00      	nop
 8007840:	20000064 	.word	0x20000064

08007844 <sbrk_aligned>:
 8007844:	b570      	push	{r4, r5, r6, lr}
 8007846:	4e0e      	ldr	r6, [pc, #56]	; (8007880 <sbrk_aligned+0x3c>)
 8007848:	460c      	mov	r4, r1
 800784a:	6831      	ldr	r1, [r6, #0]
 800784c:	4605      	mov	r5, r0
 800784e:	b911      	cbnz	r1, 8007856 <sbrk_aligned+0x12>
 8007850:	f001 ffe2 	bl	8009818 <_sbrk_r>
 8007854:	6030      	str	r0, [r6, #0]
 8007856:	4621      	mov	r1, r4
 8007858:	4628      	mov	r0, r5
 800785a:	f001 ffdd 	bl	8009818 <_sbrk_r>
 800785e:	1c43      	adds	r3, r0, #1
 8007860:	d00a      	beq.n	8007878 <sbrk_aligned+0x34>
 8007862:	1cc4      	adds	r4, r0, #3
 8007864:	f024 0403 	bic.w	r4, r4, #3
 8007868:	42a0      	cmp	r0, r4
 800786a:	d007      	beq.n	800787c <sbrk_aligned+0x38>
 800786c:	1a21      	subs	r1, r4, r0
 800786e:	4628      	mov	r0, r5
 8007870:	f001 ffd2 	bl	8009818 <_sbrk_r>
 8007874:	3001      	adds	r0, #1
 8007876:	d101      	bne.n	800787c <sbrk_aligned+0x38>
 8007878:	f04f 34ff 	mov.w	r4, #4294967295
 800787c:	4620      	mov	r0, r4
 800787e:	bd70      	pop	{r4, r5, r6, pc}
 8007880:	200004d4 	.word	0x200004d4

08007884 <_malloc_r>:
 8007884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007888:	1ccd      	adds	r5, r1, #3
 800788a:	f025 0503 	bic.w	r5, r5, #3
 800788e:	3508      	adds	r5, #8
 8007890:	2d0c      	cmp	r5, #12
 8007892:	bf38      	it	cc
 8007894:	250c      	movcc	r5, #12
 8007896:	2d00      	cmp	r5, #0
 8007898:	4607      	mov	r7, r0
 800789a:	db01      	blt.n	80078a0 <_malloc_r+0x1c>
 800789c:	42a9      	cmp	r1, r5
 800789e:	d905      	bls.n	80078ac <_malloc_r+0x28>
 80078a0:	230c      	movs	r3, #12
 80078a2:	603b      	str	r3, [r7, #0]
 80078a4:	2600      	movs	r6, #0
 80078a6:	4630      	mov	r0, r6
 80078a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007980 <_malloc_r+0xfc>
 80078b0:	f000 f868 	bl	8007984 <__malloc_lock>
 80078b4:	f8d8 3000 	ldr.w	r3, [r8]
 80078b8:	461c      	mov	r4, r3
 80078ba:	bb5c      	cbnz	r4, 8007914 <_malloc_r+0x90>
 80078bc:	4629      	mov	r1, r5
 80078be:	4638      	mov	r0, r7
 80078c0:	f7ff ffc0 	bl	8007844 <sbrk_aligned>
 80078c4:	1c43      	adds	r3, r0, #1
 80078c6:	4604      	mov	r4, r0
 80078c8:	d155      	bne.n	8007976 <_malloc_r+0xf2>
 80078ca:	f8d8 4000 	ldr.w	r4, [r8]
 80078ce:	4626      	mov	r6, r4
 80078d0:	2e00      	cmp	r6, #0
 80078d2:	d145      	bne.n	8007960 <_malloc_r+0xdc>
 80078d4:	2c00      	cmp	r4, #0
 80078d6:	d048      	beq.n	800796a <_malloc_r+0xe6>
 80078d8:	6823      	ldr	r3, [r4, #0]
 80078da:	4631      	mov	r1, r6
 80078dc:	4638      	mov	r0, r7
 80078de:	eb04 0903 	add.w	r9, r4, r3
 80078e2:	f001 ff99 	bl	8009818 <_sbrk_r>
 80078e6:	4581      	cmp	r9, r0
 80078e8:	d13f      	bne.n	800796a <_malloc_r+0xe6>
 80078ea:	6821      	ldr	r1, [r4, #0]
 80078ec:	1a6d      	subs	r5, r5, r1
 80078ee:	4629      	mov	r1, r5
 80078f0:	4638      	mov	r0, r7
 80078f2:	f7ff ffa7 	bl	8007844 <sbrk_aligned>
 80078f6:	3001      	adds	r0, #1
 80078f8:	d037      	beq.n	800796a <_malloc_r+0xe6>
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	442b      	add	r3, r5
 80078fe:	6023      	str	r3, [r4, #0]
 8007900:	f8d8 3000 	ldr.w	r3, [r8]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d038      	beq.n	800797a <_malloc_r+0xf6>
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	42a2      	cmp	r2, r4
 800790c:	d12b      	bne.n	8007966 <_malloc_r+0xe2>
 800790e:	2200      	movs	r2, #0
 8007910:	605a      	str	r2, [r3, #4]
 8007912:	e00f      	b.n	8007934 <_malloc_r+0xb0>
 8007914:	6822      	ldr	r2, [r4, #0]
 8007916:	1b52      	subs	r2, r2, r5
 8007918:	d41f      	bmi.n	800795a <_malloc_r+0xd6>
 800791a:	2a0b      	cmp	r2, #11
 800791c:	d917      	bls.n	800794e <_malloc_r+0xca>
 800791e:	1961      	adds	r1, r4, r5
 8007920:	42a3      	cmp	r3, r4
 8007922:	6025      	str	r5, [r4, #0]
 8007924:	bf18      	it	ne
 8007926:	6059      	strne	r1, [r3, #4]
 8007928:	6863      	ldr	r3, [r4, #4]
 800792a:	bf08      	it	eq
 800792c:	f8c8 1000 	streq.w	r1, [r8]
 8007930:	5162      	str	r2, [r4, r5]
 8007932:	604b      	str	r3, [r1, #4]
 8007934:	4638      	mov	r0, r7
 8007936:	f104 060b 	add.w	r6, r4, #11
 800793a:	f000 f829 	bl	8007990 <__malloc_unlock>
 800793e:	f026 0607 	bic.w	r6, r6, #7
 8007942:	1d23      	adds	r3, r4, #4
 8007944:	1af2      	subs	r2, r6, r3
 8007946:	d0ae      	beq.n	80078a6 <_malloc_r+0x22>
 8007948:	1b9b      	subs	r3, r3, r6
 800794a:	50a3      	str	r3, [r4, r2]
 800794c:	e7ab      	b.n	80078a6 <_malloc_r+0x22>
 800794e:	42a3      	cmp	r3, r4
 8007950:	6862      	ldr	r2, [r4, #4]
 8007952:	d1dd      	bne.n	8007910 <_malloc_r+0x8c>
 8007954:	f8c8 2000 	str.w	r2, [r8]
 8007958:	e7ec      	b.n	8007934 <_malloc_r+0xb0>
 800795a:	4623      	mov	r3, r4
 800795c:	6864      	ldr	r4, [r4, #4]
 800795e:	e7ac      	b.n	80078ba <_malloc_r+0x36>
 8007960:	4634      	mov	r4, r6
 8007962:	6876      	ldr	r6, [r6, #4]
 8007964:	e7b4      	b.n	80078d0 <_malloc_r+0x4c>
 8007966:	4613      	mov	r3, r2
 8007968:	e7cc      	b.n	8007904 <_malloc_r+0x80>
 800796a:	230c      	movs	r3, #12
 800796c:	603b      	str	r3, [r7, #0]
 800796e:	4638      	mov	r0, r7
 8007970:	f000 f80e 	bl	8007990 <__malloc_unlock>
 8007974:	e797      	b.n	80078a6 <_malloc_r+0x22>
 8007976:	6025      	str	r5, [r4, #0]
 8007978:	e7dc      	b.n	8007934 <_malloc_r+0xb0>
 800797a:	605b      	str	r3, [r3, #4]
 800797c:	deff      	udf	#255	; 0xff
 800797e:	bf00      	nop
 8007980:	200004d0 	.word	0x200004d0

08007984 <__malloc_lock>:
 8007984:	4801      	ldr	r0, [pc, #4]	; (800798c <__malloc_lock+0x8>)
 8007986:	f7ff b886 	b.w	8006a96 <__retarget_lock_acquire_recursive>
 800798a:	bf00      	nop
 800798c:	200004cc 	.word	0x200004cc

08007990 <__malloc_unlock>:
 8007990:	4801      	ldr	r0, [pc, #4]	; (8007998 <__malloc_unlock+0x8>)
 8007992:	f7ff b881 	b.w	8006a98 <__retarget_lock_release_recursive>
 8007996:	bf00      	nop
 8007998:	200004cc 	.word	0x200004cc

0800799c <_Balloc>:
 800799c:	b570      	push	{r4, r5, r6, lr}
 800799e:	69c6      	ldr	r6, [r0, #28]
 80079a0:	4604      	mov	r4, r0
 80079a2:	460d      	mov	r5, r1
 80079a4:	b976      	cbnz	r6, 80079c4 <_Balloc+0x28>
 80079a6:	2010      	movs	r0, #16
 80079a8:	f7ff ff44 	bl	8007834 <malloc>
 80079ac:	4602      	mov	r2, r0
 80079ae:	61e0      	str	r0, [r4, #28]
 80079b0:	b920      	cbnz	r0, 80079bc <_Balloc+0x20>
 80079b2:	4b18      	ldr	r3, [pc, #96]	; (8007a14 <_Balloc+0x78>)
 80079b4:	4818      	ldr	r0, [pc, #96]	; (8007a18 <_Balloc+0x7c>)
 80079b6:	216b      	movs	r1, #107	; 0x6b
 80079b8:	f001 ff56 	bl	8009868 <__assert_func>
 80079bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079c0:	6006      	str	r6, [r0, #0]
 80079c2:	60c6      	str	r6, [r0, #12]
 80079c4:	69e6      	ldr	r6, [r4, #28]
 80079c6:	68f3      	ldr	r3, [r6, #12]
 80079c8:	b183      	cbz	r3, 80079ec <_Balloc+0x50>
 80079ca:	69e3      	ldr	r3, [r4, #28]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80079d2:	b9b8      	cbnz	r0, 8007a04 <_Balloc+0x68>
 80079d4:	2101      	movs	r1, #1
 80079d6:	fa01 f605 	lsl.w	r6, r1, r5
 80079da:	1d72      	adds	r2, r6, #5
 80079dc:	0092      	lsls	r2, r2, #2
 80079de:	4620      	mov	r0, r4
 80079e0:	f001 ff60 	bl	80098a4 <_calloc_r>
 80079e4:	b160      	cbz	r0, 8007a00 <_Balloc+0x64>
 80079e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80079ea:	e00e      	b.n	8007a0a <_Balloc+0x6e>
 80079ec:	2221      	movs	r2, #33	; 0x21
 80079ee:	2104      	movs	r1, #4
 80079f0:	4620      	mov	r0, r4
 80079f2:	f001 ff57 	bl	80098a4 <_calloc_r>
 80079f6:	69e3      	ldr	r3, [r4, #28]
 80079f8:	60f0      	str	r0, [r6, #12]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1e4      	bne.n	80079ca <_Balloc+0x2e>
 8007a00:	2000      	movs	r0, #0
 8007a02:	bd70      	pop	{r4, r5, r6, pc}
 8007a04:	6802      	ldr	r2, [r0, #0]
 8007a06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a10:	e7f7      	b.n	8007a02 <_Balloc+0x66>
 8007a12:	bf00      	nop
 8007a14:	0800a1f2 	.word	0x0800a1f2
 8007a18:	0800a272 	.word	0x0800a272

08007a1c <_Bfree>:
 8007a1c:	b570      	push	{r4, r5, r6, lr}
 8007a1e:	69c6      	ldr	r6, [r0, #28]
 8007a20:	4605      	mov	r5, r0
 8007a22:	460c      	mov	r4, r1
 8007a24:	b976      	cbnz	r6, 8007a44 <_Bfree+0x28>
 8007a26:	2010      	movs	r0, #16
 8007a28:	f7ff ff04 	bl	8007834 <malloc>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	61e8      	str	r0, [r5, #28]
 8007a30:	b920      	cbnz	r0, 8007a3c <_Bfree+0x20>
 8007a32:	4b09      	ldr	r3, [pc, #36]	; (8007a58 <_Bfree+0x3c>)
 8007a34:	4809      	ldr	r0, [pc, #36]	; (8007a5c <_Bfree+0x40>)
 8007a36:	218f      	movs	r1, #143	; 0x8f
 8007a38:	f001 ff16 	bl	8009868 <__assert_func>
 8007a3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a40:	6006      	str	r6, [r0, #0]
 8007a42:	60c6      	str	r6, [r0, #12]
 8007a44:	b13c      	cbz	r4, 8007a56 <_Bfree+0x3a>
 8007a46:	69eb      	ldr	r3, [r5, #28]
 8007a48:	6862      	ldr	r2, [r4, #4]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a50:	6021      	str	r1, [r4, #0]
 8007a52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a56:	bd70      	pop	{r4, r5, r6, pc}
 8007a58:	0800a1f2 	.word	0x0800a1f2
 8007a5c:	0800a272 	.word	0x0800a272

08007a60 <__multadd>:
 8007a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a64:	690d      	ldr	r5, [r1, #16]
 8007a66:	4607      	mov	r7, r0
 8007a68:	460c      	mov	r4, r1
 8007a6a:	461e      	mov	r6, r3
 8007a6c:	f101 0c14 	add.w	ip, r1, #20
 8007a70:	2000      	movs	r0, #0
 8007a72:	f8dc 3000 	ldr.w	r3, [ip]
 8007a76:	b299      	uxth	r1, r3
 8007a78:	fb02 6101 	mla	r1, r2, r1, r6
 8007a7c:	0c1e      	lsrs	r6, r3, #16
 8007a7e:	0c0b      	lsrs	r3, r1, #16
 8007a80:	fb02 3306 	mla	r3, r2, r6, r3
 8007a84:	b289      	uxth	r1, r1
 8007a86:	3001      	adds	r0, #1
 8007a88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a8c:	4285      	cmp	r5, r0
 8007a8e:	f84c 1b04 	str.w	r1, [ip], #4
 8007a92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a96:	dcec      	bgt.n	8007a72 <__multadd+0x12>
 8007a98:	b30e      	cbz	r6, 8007ade <__multadd+0x7e>
 8007a9a:	68a3      	ldr	r3, [r4, #8]
 8007a9c:	42ab      	cmp	r3, r5
 8007a9e:	dc19      	bgt.n	8007ad4 <__multadd+0x74>
 8007aa0:	6861      	ldr	r1, [r4, #4]
 8007aa2:	4638      	mov	r0, r7
 8007aa4:	3101      	adds	r1, #1
 8007aa6:	f7ff ff79 	bl	800799c <_Balloc>
 8007aaa:	4680      	mov	r8, r0
 8007aac:	b928      	cbnz	r0, 8007aba <__multadd+0x5a>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	4b0c      	ldr	r3, [pc, #48]	; (8007ae4 <__multadd+0x84>)
 8007ab2:	480d      	ldr	r0, [pc, #52]	; (8007ae8 <__multadd+0x88>)
 8007ab4:	21ba      	movs	r1, #186	; 0xba
 8007ab6:	f001 fed7 	bl	8009868 <__assert_func>
 8007aba:	6922      	ldr	r2, [r4, #16]
 8007abc:	3202      	adds	r2, #2
 8007abe:	f104 010c 	add.w	r1, r4, #12
 8007ac2:	0092      	lsls	r2, r2, #2
 8007ac4:	300c      	adds	r0, #12
 8007ac6:	f001 feb7 	bl	8009838 <memcpy>
 8007aca:	4621      	mov	r1, r4
 8007acc:	4638      	mov	r0, r7
 8007ace:	f7ff ffa5 	bl	8007a1c <_Bfree>
 8007ad2:	4644      	mov	r4, r8
 8007ad4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ad8:	3501      	adds	r5, #1
 8007ada:	615e      	str	r6, [r3, #20]
 8007adc:	6125      	str	r5, [r4, #16]
 8007ade:	4620      	mov	r0, r4
 8007ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ae4:	0800a261 	.word	0x0800a261
 8007ae8:	0800a272 	.word	0x0800a272

08007aec <__s2b>:
 8007aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007af0:	460c      	mov	r4, r1
 8007af2:	4615      	mov	r5, r2
 8007af4:	461f      	mov	r7, r3
 8007af6:	2209      	movs	r2, #9
 8007af8:	3308      	adds	r3, #8
 8007afa:	4606      	mov	r6, r0
 8007afc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b00:	2100      	movs	r1, #0
 8007b02:	2201      	movs	r2, #1
 8007b04:	429a      	cmp	r2, r3
 8007b06:	db09      	blt.n	8007b1c <__s2b+0x30>
 8007b08:	4630      	mov	r0, r6
 8007b0a:	f7ff ff47 	bl	800799c <_Balloc>
 8007b0e:	b940      	cbnz	r0, 8007b22 <__s2b+0x36>
 8007b10:	4602      	mov	r2, r0
 8007b12:	4b19      	ldr	r3, [pc, #100]	; (8007b78 <__s2b+0x8c>)
 8007b14:	4819      	ldr	r0, [pc, #100]	; (8007b7c <__s2b+0x90>)
 8007b16:	21d3      	movs	r1, #211	; 0xd3
 8007b18:	f001 fea6 	bl	8009868 <__assert_func>
 8007b1c:	0052      	lsls	r2, r2, #1
 8007b1e:	3101      	adds	r1, #1
 8007b20:	e7f0      	b.n	8007b04 <__s2b+0x18>
 8007b22:	9b08      	ldr	r3, [sp, #32]
 8007b24:	6143      	str	r3, [r0, #20]
 8007b26:	2d09      	cmp	r5, #9
 8007b28:	f04f 0301 	mov.w	r3, #1
 8007b2c:	6103      	str	r3, [r0, #16]
 8007b2e:	dd16      	ble.n	8007b5e <__s2b+0x72>
 8007b30:	f104 0909 	add.w	r9, r4, #9
 8007b34:	46c8      	mov	r8, r9
 8007b36:	442c      	add	r4, r5
 8007b38:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007b3c:	4601      	mov	r1, r0
 8007b3e:	3b30      	subs	r3, #48	; 0x30
 8007b40:	220a      	movs	r2, #10
 8007b42:	4630      	mov	r0, r6
 8007b44:	f7ff ff8c 	bl	8007a60 <__multadd>
 8007b48:	45a0      	cmp	r8, r4
 8007b4a:	d1f5      	bne.n	8007b38 <__s2b+0x4c>
 8007b4c:	f1a5 0408 	sub.w	r4, r5, #8
 8007b50:	444c      	add	r4, r9
 8007b52:	1b2d      	subs	r5, r5, r4
 8007b54:	1963      	adds	r3, r4, r5
 8007b56:	42bb      	cmp	r3, r7
 8007b58:	db04      	blt.n	8007b64 <__s2b+0x78>
 8007b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b5e:	340a      	adds	r4, #10
 8007b60:	2509      	movs	r5, #9
 8007b62:	e7f6      	b.n	8007b52 <__s2b+0x66>
 8007b64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b68:	4601      	mov	r1, r0
 8007b6a:	3b30      	subs	r3, #48	; 0x30
 8007b6c:	220a      	movs	r2, #10
 8007b6e:	4630      	mov	r0, r6
 8007b70:	f7ff ff76 	bl	8007a60 <__multadd>
 8007b74:	e7ee      	b.n	8007b54 <__s2b+0x68>
 8007b76:	bf00      	nop
 8007b78:	0800a261 	.word	0x0800a261
 8007b7c:	0800a272 	.word	0x0800a272

08007b80 <__hi0bits>:
 8007b80:	0c03      	lsrs	r3, r0, #16
 8007b82:	041b      	lsls	r3, r3, #16
 8007b84:	b9d3      	cbnz	r3, 8007bbc <__hi0bits+0x3c>
 8007b86:	0400      	lsls	r0, r0, #16
 8007b88:	2310      	movs	r3, #16
 8007b8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007b8e:	bf04      	itt	eq
 8007b90:	0200      	lsleq	r0, r0, #8
 8007b92:	3308      	addeq	r3, #8
 8007b94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007b98:	bf04      	itt	eq
 8007b9a:	0100      	lsleq	r0, r0, #4
 8007b9c:	3304      	addeq	r3, #4
 8007b9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007ba2:	bf04      	itt	eq
 8007ba4:	0080      	lsleq	r0, r0, #2
 8007ba6:	3302      	addeq	r3, #2
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	db05      	blt.n	8007bb8 <__hi0bits+0x38>
 8007bac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007bb0:	f103 0301 	add.w	r3, r3, #1
 8007bb4:	bf08      	it	eq
 8007bb6:	2320      	moveq	r3, #32
 8007bb8:	4618      	mov	r0, r3
 8007bba:	4770      	bx	lr
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	e7e4      	b.n	8007b8a <__hi0bits+0xa>

08007bc0 <__lo0bits>:
 8007bc0:	6803      	ldr	r3, [r0, #0]
 8007bc2:	f013 0207 	ands.w	r2, r3, #7
 8007bc6:	d00c      	beq.n	8007be2 <__lo0bits+0x22>
 8007bc8:	07d9      	lsls	r1, r3, #31
 8007bca:	d422      	bmi.n	8007c12 <__lo0bits+0x52>
 8007bcc:	079a      	lsls	r2, r3, #30
 8007bce:	bf49      	itett	mi
 8007bd0:	085b      	lsrmi	r3, r3, #1
 8007bd2:	089b      	lsrpl	r3, r3, #2
 8007bd4:	6003      	strmi	r3, [r0, #0]
 8007bd6:	2201      	movmi	r2, #1
 8007bd8:	bf5c      	itt	pl
 8007bda:	6003      	strpl	r3, [r0, #0]
 8007bdc:	2202      	movpl	r2, #2
 8007bde:	4610      	mov	r0, r2
 8007be0:	4770      	bx	lr
 8007be2:	b299      	uxth	r1, r3
 8007be4:	b909      	cbnz	r1, 8007bea <__lo0bits+0x2a>
 8007be6:	0c1b      	lsrs	r3, r3, #16
 8007be8:	2210      	movs	r2, #16
 8007bea:	b2d9      	uxtb	r1, r3
 8007bec:	b909      	cbnz	r1, 8007bf2 <__lo0bits+0x32>
 8007bee:	3208      	adds	r2, #8
 8007bf0:	0a1b      	lsrs	r3, r3, #8
 8007bf2:	0719      	lsls	r1, r3, #28
 8007bf4:	bf04      	itt	eq
 8007bf6:	091b      	lsreq	r3, r3, #4
 8007bf8:	3204      	addeq	r2, #4
 8007bfa:	0799      	lsls	r1, r3, #30
 8007bfc:	bf04      	itt	eq
 8007bfe:	089b      	lsreq	r3, r3, #2
 8007c00:	3202      	addeq	r2, #2
 8007c02:	07d9      	lsls	r1, r3, #31
 8007c04:	d403      	bmi.n	8007c0e <__lo0bits+0x4e>
 8007c06:	085b      	lsrs	r3, r3, #1
 8007c08:	f102 0201 	add.w	r2, r2, #1
 8007c0c:	d003      	beq.n	8007c16 <__lo0bits+0x56>
 8007c0e:	6003      	str	r3, [r0, #0]
 8007c10:	e7e5      	b.n	8007bde <__lo0bits+0x1e>
 8007c12:	2200      	movs	r2, #0
 8007c14:	e7e3      	b.n	8007bde <__lo0bits+0x1e>
 8007c16:	2220      	movs	r2, #32
 8007c18:	e7e1      	b.n	8007bde <__lo0bits+0x1e>
	...

08007c1c <__i2b>:
 8007c1c:	b510      	push	{r4, lr}
 8007c1e:	460c      	mov	r4, r1
 8007c20:	2101      	movs	r1, #1
 8007c22:	f7ff febb 	bl	800799c <_Balloc>
 8007c26:	4602      	mov	r2, r0
 8007c28:	b928      	cbnz	r0, 8007c36 <__i2b+0x1a>
 8007c2a:	4b05      	ldr	r3, [pc, #20]	; (8007c40 <__i2b+0x24>)
 8007c2c:	4805      	ldr	r0, [pc, #20]	; (8007c44 <__i2b+0x28>)
 8007c2e:	f240 1145 	movw	r1, #325	; 0x145
 8007c32:	f001 fe19 	bl	8009868 <__assert_func>
 8007c36:	2301      	movs	r3, #1
 8007c38:	6144      	str	r4, [r0, #20]
 8007c3a:	6103      	str	r3, [r0, #16]
 8007c3c:	bd10      	pop	{r4, pc}
 8007c3e:	bf00      	nop
 8007c40:	0800a261 	.word	0x0800a261
 8007c44:	0800a272 	.word	0x0800a272

08007c48 <__multiply>:
 8007c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c4c:	4691      	mov	r9, r2
 8007c4e:	690a      	ldr	r2, [r1, #16]
 8007c50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	bfb8      	it	lt
 8007c58:	460b      	movlt	r3, r1
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	bfbc      	itt	lt
 8007c5e:	464c      	movlt	r4, r9
 8007c60:	4699      	movlt	r9, r3
 8007c62:	6927      	ldr	r7, [r4, #16]
 8007c64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007c68:	68a3      	ldr	r3, [r4, #8]
 8007c6a:	6861      	ldr	r1, [r4, #4]
 8007c6c:	eb07 060a 	add.w	r6, r7, sl
 8007c70:	42b3      	cmp	r3, r6
 8007c72:	b085      	sub	sp, #20
 8007c74:	bfb8      	it	lt
 8007c76:	3101      	addlt	r1, #1
 8007c78:	f7ff fe90 	bl	800799c <_Balloc>
 8007c7c:	b930      	cbnz	r0, 8007c8c <__multiply+0x44>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	4b44      	ldr	r3, [pc, #272]	; (8007d94 <__multiply+0x14c>)
 8007c82:	4845      	ldr	r0, [pc, #276]	; (8007d98 <__multiply+0x150>)
 8007c84:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007c88:	f001 fdee 	bl	8009868 <__assert_func>
 8007c8c:	f100 0514 	add.w	r5, r0, #20
 8007c90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c94:	462b      	mov	r3, r5
 8007c96:	2200      	movs	r2, #0
 8007c98:	4543      	cmp	r3, r8
 8007c9a:	d321      	bcc.n	8007ce0 <__multiply+0x98>
 8007c9c:	f104 0314 	add.w	r3, r4, #20
 8007ca0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ca4:	f109 0314 	add.w	r3, r9, #20
 8007ca8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007cac:	9202      	str	r2, [sp, #8]
 8007cae:	1b3a      	subs	r2, r7, r4
 8007cb0:	3a15      	subs	r2, #21
 8007cb2:	f022 0203 	bic.w	r2, r2, #3
 8007cb6:	3204      	adds	r2, #4
 8007cb8:	f104 0115 	add.w	r1, r4, #21
 8007cbc:	428f      	cmp	r7, r1
 8007cbe:	bf38      	it	cc
 8007cc0:	2204      	movcc	r2, #4
 8007cc2:	9201      	str	r2, [sp, #4]
 8007cc4:	9a02      	ldr	r2, [sp, #8]
 8007cc6:	9303      	str	r3, [sp, #12]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d80c      	bhi.n	8007ce6 <__multiply+0x9e>
 8007ccc:	2e00      	cmp	r6, #0
 8007cce:	dd03      	ble.n	8007cd8 <__multiply+0x90>
 8007cd0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d05b      	beq.n	8007d90 <__multiply+0x148>
 8007cd8:	6106      	str	r6, [r0, #16]
 8007cda:	b005      	add	sp, #20
 8007cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce0:	f843 2b04 	str.w	r2, [r3], #4
 8007ce4:	e7d8      	b.n	8007c98 <__multiply+0x50>
 8007ce6:	f8b3 a000 	ldrh.w	sl, [r3]
 8007cea:	f1ba 0f00 	cmp.w	sl, #0
 8007cee:	d024      	beq.n	8007d3a <__multiply+0xf2>
 8007cf0:	f104 0e14 	add.w	lr, r4, #20
 8007cf4:	46a9      	mov	r9, r5
 8007cf6:	f04f 0c00 	mov.w	ip, #0
 8007cfa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007cfe:	f8d9 1000 	ldr.w	r1, [r9]
 8007d02:	fa1f fb82 	uxth.w	fp, r2
 8007d06:	b289      	uxth	r1, r1
 8007d08:	fb0a 110b 	mla	r1, sl, fp, r1
 8007d0c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007d10:	f8d9 2000 	ldr.w	r2, [r9]
 8007d14:	4461      	add	r1, ip
 8007d16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d1a:	fb0a c20b 	mla	r2, sl, fp, ip
 8007d1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d22:	b289      	uxth	r1, r1
 8007d24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d28:	4577      	cmp	r7, lr
 8007d2a:	f849 1b04 	str.w	r1, [r9], #4
 8007d2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d32:	d8e2      	bhi.n	8007cfa <__multiply+0xb2>
 8007d34:	9a01      	ldr	r2, [sp, #4]
 8007d36:	f845 c002 	str.w	ip, [r5, r2]
 8007d3a:	9a03      	ldr	r2, [sp, #12]
 8007d3c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d40:	3304      	adds	r3, #4
 8007d42:	f1b9 0f00 	cmp.w	r9, #0
 8007d46:	d021      	beq.n	8007d8c <__multiply+0x144>
 8007d48:	6829      	ldr	r1, [r5, #0]
 8007d4a:	f104 0c14 	add.w	ip, r4, #20
 8007d4e:	46ae      	mov	lr, r5
 8007d50:	f04f 0a00 	mov.w	sl, #0
 8007d54:	f8bc b000 	ldrh.w	fp, [ip]
 8007d58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007d5c:	fb09 220b 	mla	r2, r9, fp, r2
 8007d60:	4452      	add	r2, sl
 8007d62:	b289      	uxth	r1, r1
 8007d64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d68:	f84e 1b04 	str.w	r1, [lr], #4
 8007d6c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007d70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007d74:	f8be 1000 	ldrh.w	r1, [lr]
 8007d78:	fb09 110a 	mla	r1, r9, sl, r1
 8007d7c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007d80:	4567      	cmp	r7, ip
 8007d82:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007d86:	d8e5      	bhi.n	8007d54 <__multiply+0x10c>
 8007d88:	9a01      	ldr	r2, [sp, #4]
 8007d8a:	50a9      	str	r1, [r5, r2]
 8007d8c:	3504      	adds	r5, #4
 8007d8e:	e799      	b.n	8007cc4 <__multiply+0x7c>
 8007d90:	3e01      	subs	r6, #1
 8007d92:	e79b      	b.n	8007ccc <__multiply+0x84>
 8007d94:	0800a261 	.word	0x0800a261
 8007d98:	0800a272 	.word	0x0800a272

08007d9c <__pow5mult>:
 8007d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007da0:	4615      	mov	r5, r2
 8007da2:	f012 0203 	ands.w	r2, r2, #3
 8007da6:	4606      	mov	r6, r0
 8007da8:	460f      	mov	r7, r1
 8007daa:	d007      	beq.n	8007dbc <__pow5mult+0x20>
 8007dac:	4c25      	ldr	r4, [pc, #148]	; (8007e44 <__pow5mult+0xa8>)
 8007dae:	3a01      	subs	r2, #1
 8007db0:	2300      	movs	r3, #0
 8007db2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007db6:	f7ff fe53 	bl	8007a60 <__multadd>
 8007dba:	4607      	mov	r7, r0
 8007dbc:	10ad      	asrs	r5, r5, #2
 8007dbe:	d03d      	beq.n	8007e3c <__pow5mult+0xa0>
 8007dc0:	69f4      	ldr	r4, [r6, #28]
 8007dc2:	b97c      	cbnz	r4, 8007de4 <__pow5mult+0x48>
 8007dc4:	2010      	movs	r0, #16
 8007dc6:	f7ff fd35 	bl	8007834 <malloc>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	61f0      	str	r0, [r6, #28]
 8007dce:	b928      	cbnz	r0, 8007ddc <__pow5mult+0x40>
 8007dd0:	4b1d      	ldr	r3, [pc, #116]	; (8007e48 <__pow5mult+0xac>)
 8007dd2:	481e      	ldr	r0, [pc, #120]	; (8007e4c <__pow5mult+0xb0>)
 8007dd4:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007dd8:	f001 fd46 	bl	8009868 <__assert_func>
 8007ddc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007de0:	6004      	str	r4, [r0, #0]
 8007de2:	60c4      	str	r4, [r0, #12]
 8007de4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007de8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007dec:	b94c      	cbnz	r4, 8007e02 <__pow5mult+0x66>
 8007dee:	f240 2171 	movw	r1, #625	; 0x271
 8007df2:	4630      	mov	r0, r6
 8007df4:	f7ff ff12 	bl	8007c1c <__i2b>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f8c8 0008 	str.w	r0, [r8, #8]
 8007dfe:	4604      	mov	r4, r0
 8007e00:	6003      	str	r3, [r0, #0]
 8007e02:	f04f 0900 	mov.w	r9, #0
 8007e06:	07eb      	lsls	r3, r5, #31
 8007e08:	d50a      	bpl.n	8007e20 <__pow5mult+0x84>
 8007e0a:	4639      	mov	r1, r7
 8007e0c:	4622      	mov	r2, r4
 8007e0e:	4630      	mov	r0, r6
 8007e10:	f7ff ff1a 	bl	8007c48 <__multiply>
 8007e14:	4639      	mov	r1, r7
 8007e16:	4680      	mov	r8, r0
 8007e18:	4630      	mov	r0, r6
 8007e1a:	f7ff fdff 	bl	8007a1c <_Bfree>
 8007e1e:	4647      	mov	r7, r8
 8007e20:	106d      	asrs	r5, r5, #1
 8007e22:	d00b      	beq.n	8007e3c <__pow5mult+0xa0>
 8007e24:	6820      	ldr	r0, [r4, #0]
 8007e26:	b938      	cbnz	r0, 8007e38 <__pow5mult+0x9c>
 8007e28:	4622      	mov	r2, r4
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	f7ff ff0b 	bl	8007c48 <__multiply>
 8007e32:	6020      	str	r0, [r4, #0]
 8007e34:	f8c0 9000 	str.w	r9, [r0]
 8007e38:	4604      	mov	r4, r0
 8007e3a:	e7e4      	b.n	8007e06 <__pow5mult+0x6a>
 8007e3c:	4638      	mov	r0, r7
 8007e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e42:	bf00      	nop
 8007e44:	0800a3c0 	.word	0x0800a3c0
 8007e48:	0800a1f2 	.word	0x0800a1f2
 8007e4c:	0800a272 	.word	0x0800a272

08007e50 <__lshift>:
 8007e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e54:	460c      	mov	r4, r1
 8007e56:	6849      	ldr	r1, [r1, #4]
 8007e58:	6923      	ldr	r3, [r4, #16]
 8007e5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e5e:	68a3      	ldr	r3, [r4, #8]
 8007e60:	4607      	mov	r7, r0
 8007e62:	4691      	mov	r9, r2
 8007e64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e68:	f108 0601 	add.w	r6, r8, #1
 8007e6c:	42b3      	cmp	r3, r6
 8007e6e:	db0b      	blt.n	8007e88 <__lshift+0x38>
 8007e70:	4638      	mov	r0, r7
 8007e72:	f7ff fd93 	bl	800799c <_Balloc>
 8007e76:	4605      	mov	r5, r0
 8007e78:	b948      	cbnz	r0, 8007e8e <__lshift+0x3e>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	4b28      	ldr	r3, [pc, #160]	; (8007f20 <__lshift+0xd0>)
 8007e7e:	4829      	ldr	r0, [pc, #164]	; (8007f24 <__lshift+0xd4>)
 8007e80:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007e84:	f001 fcf0 	bl	8009868 <__assert_func>
 8007e88:	3101      	adds	r1, #1
 8007e8a:	005b      	lsls	r3, r3, #1
 8007e8c:	e7ee      	b.n	8007e6c <__lshift+0x1c>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	f100 0114 	add.w	r1, r0, #20
 8007e94:	f100 0210 	add.w	r2, r0, #16
 8007e98:	4618      	mov	r0, r3
 8007e9a:	4553      	cmp	r3, sl
 8007e9c:	db33      	blt.n	8007f06 <__lshift+0xb6>
 8007e9e:	6920      	ldr	r0, [r4, #16]
 8007ea0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ea4:	f104 0314 	add.w	r3, r4, #20
 8007ea8:	f019 091f 	ands.w	r9, r9, #31
 8007eac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007eb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007eb4:	d02b      	beq.n	8007f0e <__lshift+0xbe>
 8007eb6:	f1c9 0e20 	rsb	lr, r9, #32
 8007eba:	468a      	mov	sl, r1
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	6818      	ldr	r0, [r3, #0]
 8007ec0:	fa00 f009 	lsl.w	r0, r0, r9
 8007ec4:	4310      	orrs	r0, r2
 8007ec6:	f84a 0b04 	str.w	r0, [sl], #4
 8007eca:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ece:	459c      	cmp	ip, r3
 8007ed0:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ed4:	d8f3      	bhi.n	8007ebe <__lshift+0x6e>
 8007ed6:	ebac 0304 	sub.w	r3, ip, r4
 8007eda:	3b15      	subs	r3, #21
 8007edc:	f023 0303 	bic.w	r3, r3, #3
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	f104 0015 	add.w	r0, r4, #21
 8007ee6:	4584      	cmp	ip, r0
 8007ee8:	bf38      	it	cc
 8007eea:	2304      	movcc	r3, #4
 8007eec:	50ca      	str	r2, [r1, r3]
 8007eee:	b10a      	cbz	r2, 8007ef4 <__lshift+0xa4>
 8007ef0:	f108 0602 	add.w	r6, r8, #2
 8007ef4:	3e01      	subs	r6, #1
 8007ef6:	4638      	mov	r0, r7
 8007ef8:	612e      	str	r6, [r5, #16]
 8007efa:	4621      	mov	r1, r4
 8007efc:	f7ff fd8e 	bl	8007a1c <_Bfree>
 8007f00:	4628      	mov	r0, r5
 8007f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f06:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	e7c5      	b.n	8007e9a <__lshift+0x4a>
 8007f0e:	3904      	subs	r1, #4
 8007f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f14:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f18:	459c      	cmp	ip, r3
 8007f1a:	d8f9      	bhi.n	8007f10 <__lshift+0xc0>
 8007f1c:	e7ea      	b.n	8007ef4 <__lshift+0xa4>
 8007f1e:	bf00      	nop
 8007f20:	0800a261 	.word	0x0800a261
 8007f24:	0800a272 	.word	0x0800a272

08007f28 <__mcmp>:
 8007f28:	b530      	push	{r4, r5, lr}
 8007f2a:	6902      	ldr	r2, [r0, #16]
 8007f2c:	690c      	ldr	r4, [r1, #16]
 8007f2e:	1b12      	subs	r2, r2, r4
 8007f30:	d10e      	bne.n	8007f50 <__mcmp+0x28>
 8007f32:	f100 0314 	add.w	r3, r0, #20
 8007f36:	3114      	adds	r1, #20
 8007f38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007f3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007f40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007f44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007f48:	42a5      	cmp	r5, r4
 8007f4a:	d003      	beq.n	8007f54 <__mcmp+0x2c>
 8007f4c:	d305      	bcc.n	8007f5a <__mcmp+0x32>
 8007f4e:	2201      	movs	r2, #1
 8007f50:	4610      	mov	r0, r2
 8007f52:	bd30      	pop	{r4, r5, pc}
 8007f54:	4283      	cmp	r3, r0
 8007f56:	d3f3      	bcc.n	8007f40 <__mcmp+0x18>
 8007f58:	e7fa      	b.n	8007f50 <__mcmp+0x28>
 8007f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f5e:	e7f7      	b.n	8007f50 <__mcmp+0x28>

08007f60 <__mdiff>:
 8007f60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f64:	460c      	mov	r4, r1
 8007f66:	4606      	mov	r6, r0
 8007f68:	4611      	mov	r1, r2
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	4690      	mov	r8, r2
 8007f6e:	f7ff ffdb 	bl	8007f28 <__mcmp>
 8007f72:	1e05      	subs	r5, r0, #0
 8007f74:	d110      	bne.n	8007f98 <__mdiff+0x38>
 8007f76:	4629      	mov	r1, r5
 8007f78:	4630      	mov	r0, r6
 8007f7a:	f7ff fd0f 	bl	800799c <_Balloc>
 8007f7e:	b930      	cbnz	r0, 8007f8e <__mdiff+0x2e>
 8007f80:	4b3a      	ldr	r3, [pc, #232]	; (800806c <__mdiff+0x10c>)
 8007f82:	4602      	mov	r2, r0
 8007f84:	f240 2137 	movw	r1, #567	; 0x237
 8007f88:	4839      	ldr	r0, [pc, #228]	; (8008070 <__mdiff+0x110>)
 8007f8a:	f001 fc6d 	bl	8009868 <__assert_func>
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f98:	bfa4      	itt	ge
 8007f9a:	4643      	movge	r3, r8
 8007f9c:	46a0      	movge	r8, r4
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007fa4:	bfa6      	itte	ge
 8007fa6:	461c      	movge	r4, r3
 8007fa8:	2500      	movge	r5, #0
 8007faa:	2501      	movlt	r5, #1
 8007fac:	f7ff fcf6 	bl	800799c <_Balloc>
 8007fb0:	b920      	cbnz	r0, 8007fbc <__mdiff+0x5c>
 8007fb2:	4b2e      	ldr	r3, [pc, #184]	; (800806c <__mdiff+0x10c>)
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	f240 2145 	movw	r1, #581	; 0x245
 8007fba:	e7e5      	b.n	8007f88 <__mdiff+0x28>
 8007fbc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007fc0:	6926      	ldr	r6, [r4, #16]
 8007fc2:	60c5      	str	r5, [r0, #12]
 8007fc4:	f104 0914 	add.w	r9, r4, #20
 8007fc8:	f108 0514 	add.w	r5, r8, #20
 8007fcc:	f100 0e14 	add.w	lr, r0, #20
 8007fd0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007fd4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007fd8:	f108 0210 	add.w	r2, r8, #16
 8007fdc:	46f2      	mov	sl, lr
 8007fde:	2100      	movs	r1, #0
 8007fe0:	f859 3b04 	ldr.w	r3, [r9], #4
 8007fe4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007fe8:	fa11 f88b 	uxtah	r8, r1, fp
 8007fec:	b299      	uxth	r1, r3
 8007fee:	0c1b      	lsrs	r3, r3, #16
 8007ff0:	eba8 0801 	sub.w	r8, r8, r1
 8007ff4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007ff8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007ffc:	fa1f f888 	uxth.w	r8, r8
 8008000:	1419      	asrs	r1, r3, #16
 8008002:	454e      	cmp	r6, r9
 8008004:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008008:	f84a 3b04 	str.w	r3, [sl], #4
 800800c:	d8e8      	bhi.n	8007fe0 <__mdiff+0x80>
 800800e:	1b33      	subs	r3, r6, r4
 8008010:	3b15      	subs	r3, #21
 8008012:	f023 0303 	bic.w	r3, r3, #3
 8008016:	3304      	adds	r3, #4
 8008018:	3415      	adds	r4, #21
 800801a:	42a6      	cmp	r6, r4
 800801c:	bf38      	it	cc
 800801e:	2304      	movcc	r3, #4
 8008020:	441d      	add	r5, r3
 8008022:	4473      	add	r3, lr
 8008024:	469e      	mov	lr, r3
 8008026:	462e      	mov	r6, r5
 8008028:	4566      	cmp	r6, ip
 800802a:	d30e      	bcc.n	800804a <__mdiff+0xea>
 800802c:	f10c 0203 	add.w	r2, ip, #3
 8008030:	1b52      	subs	r2, r2, r5
 8008032:	f022 0203 	bic.w	r2, r2, #3
 8008036:	3d03      	subs	r5, #3
 8008038:	45ac      	cmp	ip, r5
 800803a:	bf38      	it	cc
 800803c:	2200      	movcc	r2, #0
 800803e:	4413      	add	r3, r2
 8008040:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008044:	b17a      	cbz	r2, 8008066 <__mdiff+0x106>
 8008046:	6107      	str	r7, [r0, #16]
 8008048:	e7a4      	b.n	8007f94 <__mdiff+0x34>
 800804a:	f856 8b04 	ldr.w	r8, [r6], #4
 800804e:	fa11 f288 	uxtah	r2, r1, r8
 8008052:	1414      	asrs	r4, r2, #16
 8008054:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008058:	b292      	uxth	r2, r2
 800805a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800805e:	f84e 2b04 	str.w	r2, [lr], #4
 8008062:	1421      	asrs	r1, r4, #16
 8008064:	e7e0      	b.n	8008028 <__mdiff+0xc8>
 8008066:	3f01      	subs	r7, #1
 8008068:	e7ea      	b.n	8008040 <__mdiff+0xe0>
 800806a:	bf00      	nop
 800806c:	0800a261 	.word	0x0800a261
 8008070:	0800a272 	.word	0x0800a272

08008074 <__ulp>:
 8008074:	b082      	sub	sp, #8
 8008076:	ed8d 0b00 	vstr	d0, [sp]
 800807a:	9a01      	ldr	r2, [sp, #4]
 800807c:	4b0f      	ldr	r3, [pc, #60]	; (80080bc <__ulp+0x48>)
 800807e:	4013      	ands	r3, r2
 8008080:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008084:	2b00      	cmp	r3, #0
 8008086:	dc08      	bgt.n	800809a <__ulp+0x26>
 8008088:	425b      	negs	r3, r3
 800808a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800808e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008092:	da04      	bge.n	800809e <__ulp+0x2a>
 8008094:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008098:	4113      	asrs	r3, r2
 800809a:	2200      	movs	r2, #0
 800809c:	e008      	b.n	80080b0 <__ulp+0x3c>
 800809e:	f1a2 0314 	sub.w	r3, r2, #20
 80080a2:	2b1e      	cmp	r3, #30
 80080a4:	bfda      	itte	le
 80080a6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80080aa:	40da      	lsrle	r2, r3
 80080ac:	2201      	movgt	r2, #1
 80080ae:	2300      	movs	r3, #0
 80080b0:	4619      	mov	r1, r3
 80080b2:	4610      	mov	r0, r2
 80080b4:	ec41 0b10 	vmov	d0, r0, r1
 80080b8:	b002      	add	sp, #8
 80080ba:	4770      	bx	lr
 80080bc:	7ff00000 	.word	0x7ff00000

080080c0 <__b2d>:
 80080c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080c4:	6906      	ldr	r6, [r0, #16]
 80080c6:	f100 0814 	add.w	r8, r0, #20
 80080ca:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80080ce:	1f37      	subs	r7, r6, #4
 80080d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80080d4:	4610      	mov	r0, r2
 80080d6:	f7ff fd53 	bl	8007b80 <__hi0bits>
 80080da:	f1c0 0320 	rsb	r3, r0, #32
 80080de:	280a      	cmp	r0, #10
 80080e0:	600b      	str	r3, [r1, #0]
 80080e2:	491b      	ldr	r1, [pc, #108]	; (8008150 <__b2d+0x90>)
 80080e4:	dc15      	bgt.n	8008112 <__b2d+0x52>
 80080e6:	f1c0 0c0b 	rsb	ip, r0, #11
 80080ea:	fa22 f30c 	lsr.w	r3, r2, ip
 80080ee:	45b8      	cmp	r8, r7
 80080f0:	ea43 0501 	orr.w	r5, r3, r1
 80080f4:	bf34      	ite	cc
 80080f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80080fa:	2300      	movcs	r3, #0
 80080fc:	3015      	adds	r0, #21
 80080fe:	fa02 f000 	lsl.w	r0, r2, r0
 8008102:	fa23 f30c 	lsr.w	r3, r3, ip
 8008106:	4303      	orrs	r3, r0
 8008108:	461c      	mov	r4, r3
 800810a:	ec45 4b10 	vmov	d0, r4, r5
 800810e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008112:	45b8      	cmp	r8, r7
 8008114:	bf3a      	itte	cc
 8008116:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800811a:	f1a6 0708 	subcc.w	r7, r6, #8
 800811e:	2300      	movcs	r3, #0
 8008120:	380b      	subs	r0, #11
 8008122:	d012      	beq.n	800814a <__b2d+0x8a>
 8008124:	f1c0 0120 	rsb	r1, r0, #32
 8008128:	fa23 f401 	lsr.w	r4, r3, r1
 800812c:	4082      	lsls	r2, r0
 800812e:	4322      	orrs	r2, r4
 8008130:	4547      	cmp	r7, r8
 8008132:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8008136:	bf8c      	ite	hi
 8008138:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800813c:	2200      	movls	r2, #0
 800813e:	4083      	lsls	r3, r0
 8008140:	40ca      	lsrs	r2, r1
 8008142:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008146:	4313      	orrs	r3, r2
 8008148:	e7de      	b.n	8008108 <__b2d+0x48>
 800814a:	ea42 0501 	orr.w	r5, r2, r1
 800814e:	e7db      	b.n	8008108 <__b2d+0x48>
 8008150:	3ff00000 	.word	0x3ff00000

08008154 <__d2b>:
 8008154:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008158:	460f      	mov	r7, r1
 800815a:	2101      	movs	r1, #1
 800815c:	ec59 8b10 	vmov	r8, r9, d0
 8008160:	4616      	mov	r6, r2
 8008162:	f7ff fc1b 	bl	800799c <_Balloc>
 8008166:	4604      	mov	r4, r0
 8008168:	b930      	cbnz	r0, 8008178 <__d2b+0x24>
 800816a:	4602      	mov	r2, r0
 800816c:	4b24      	ldr	r3, [pc, #144]	; (8008200 <__d2b+0xac>)
 800816e:	4825      	ldr	r0, [pc, #148]	; (8008204 <__d2b+0xb0>)
 8008170:	f240 310f 	movw	r1, #783	; 0x30f
 8008174:	f001 fb78 	bl	8009868 <__assert_func>
 8008178:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800817c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008180:	bb2d      	cbnz	r5, 80081ce <__d2b+0x7a>
 8008182:	9301      	str	r3, [sp, #4]
 8008184:	f1b8 0300 	subs.w	r3, r8, #0
 8008188:	d026      	beq.n	80081d8 <__d2b+0x84>
 800818a:	4668      	mov	r0, sp
 800818c:	9300      	str	r3, [sp, #0]
 800818e:	f7ff fd17 	bl	8007bc0 <__lo0bits>
 8008192:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008196:	b1e8      	cbz	r0, 80081d4 <__d2b+0x80>
 8008198:	f1c0 0320 	rsb	r3, r0, #32
 800819c:	fa02 f303 	lsl.w	r3, r2, r3
 80081a0:	430b      	orrs	r3, r1
 80081a2:	40c2      	lsrs	r2, r0
 80081a4:	6163      	str	r3, [r4, #20]
 80081a6:	9201      	str	r2, [sp, #4]
 80081a8:	9b01      	ldr	r3, [sp, #4]
 80081aa:	61a3      	str	r3, [r4, #24]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	bf14      	ite	ne
 80081b0:	2202      	movne	r2, #2
 80081b2:	2201      	moveq	r2, #1
 80081b4:	6122      	str	r2, [r4, #16]
 80081b6:	b1bd      	cbz	r5, 80081e8 <__d2b+0x94>
 80081b8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80081bc:	4405      	add	r5, r0
 80081be:	603d      	str	r5, [r7, #0]
 80081c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80081c4:	6030      	str	r0, [r6, #0]
 80081c6:	4620      	mov	r0, r4
 80081c8:	b003      	add	sp, #12
 80081ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081d2:	e7d6      	b.n	8008182 <__d2b+0x2e>
 80081d4:	6161      	str	r1, [r4, #20]
 80081d6:	e7e7      	b.n	80081a8 <__d2b+0x54>
 80081d8:	a801      	add	r0, sp, #4
 80081da:	f7ff fcf1 	bl	8007bc0 <__lo0bits>
 80081de:	9b01      	ldr	r3, [sp, #4]
 80081e0:	6163      	str	r3, [r4, #20]
 80081e2:	3020      	adds	r0, #32
 80081e4:	2201      	movs	r2, #1
 80081e6:	e7e5      	b.n	80081b4 <__d2b+0x60>
 80081e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80081ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80081f0:	6038      	str	r0, [r7, #0]
 80081f2:	6918      	ldr	r0, [r3, #16]
 80081f4:	f7ff fcc4 	bl	8007b80 <__hi0bits>
 80081f8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80081fc:	e7e2      	b.n	80081c4 <__d2b+0x70>
 80081fe:	bf00      	nop
 8008200:	0800a261 	.word	0x0800a261
 8008204:	0800a272 	.word	0x0800a272

08008208 <__ratio>:
 8008208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800820c:	4688      	mov	r8, r1
 800820e:	4669      	mov	r1, sp
 8008210:	4681      	mov	r9, r0
 8008212:	f7ff ff55 	bl	80080c0 <__b2d>
 8008216:	a901      	add	r1, sp, #4
 8008218:	4640      	mov	r0, r8
 800821a:	ec55 4b10 	vmov	r4, r5, d0
 800821e:	f7ff ff4f 	bl	80080c0 <__b2d>
 8008222:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008226:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800822a:	eba3 0c02 	sub.w	ip, r3, r2
 800822e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008232:	1a9b      	subs	r3, r3, r2
 8008234:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008238:	ec51 0b10 	vmov	r0, r1, d0
 800823c:	2b00      	cmp	r3, #0
 800823e:	bfd6      	itet	le
 8008240:	460a      	movle	r2, r1
 8008242:	462a      	movgt	r2, r5
 8008244:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008248:	468b      	mov	fp, r1
 800824a:	462f      	mov	r7, r5
 800824c:	bfd4      	ite	le
 800824e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008252:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008256:	4620      	mov	r0, r4
 8008258:	ee10 2a10 	vmov	r2, s0
 800825c:	465b      	mov	r3, fp
 800825e:	4639      	mov	r1, r7
 8008260:	f7f8 fafc 	bl	800085c <__aeabi_ddiv>
 8008264:	ec41 0b10 	vmov	d0, r0, r1
 8008268:	b003      	add	sp, #12
 800826a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800826e <__copybits>:
 800826e:	3901      	subs	r1, #1
 8008270:	b570      	push	{r4, r5, r6, lr}
 8008272:	1149      	asrs	r1, r1, #5
 8008274:	6914      	ldr	r4, [r2, #16]
 8008276:	3101      	adds	r1, #1
 8008278:	f102 0314 	add.w	r3, r2, #20
 800827c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008280:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008284:	1f05      	subs	r5, r0, #4
 8008286:	42a3      	cmp	r3, r4
 8008288:	d30c      	bcc.n	80082a4 <__copybits+0x36>
 800828a:	1aa3      	subs	r3, r4, r2
 800828c:	3b11      	subs	r3, #17
 800828e:	f023 0303 	bic.w	r3, r3, #3
 8008292:	3211      	adds	r2, #17
 8008294:	42a2      	cmp	r2, r4
 8008296:	bf88      	it	hi
 8008298:	2300      	movhi	r3, #0
 800829a:	4418      	add	r0, r3
 800829c:	2300      	movs	r3, #0
 800829e:	4288      	cmp	r0, r1
 80082a0:	d305      	bcc.n	80082ae <__copybits+0x40>
 80082a2:	bd70      	pop	{r4, r5, r6, pc}
 80082a4:	f853 6b04 	ldr.w	r6, [r3], #4
 80082a8:	f845 6f04 	str.w	r6, [r5, #4]!
 80082ac:	e7eb      	b.n	8008286 <__copybits+0x18>
 80082ae:	f840 3b04 	str.w	r3, [r0], #4
 80082b2:	e7f4      	b.n	800829e <__copybits+0x30>

080082b4 <__any_on>:
 80082b4:	f100 0214 	add.w	r2, r0, #20
 80082b8:	6900      	ldr	r0, [r0, #16]
 80082ba:	114b      	asrs	r3, r1, #5
 80082bc:	4298      	cmp	r0, r3
 80082be:	b510      	push	{r4, lr}
 80082c0:	db11      	blt.n	80082e6 <__any_on+0x32>
 80082c2:	dd0a      	ble.n	80082da <__any_on+0x26>
 80082c4:	f011 011f 	ands.w	r1, r1, #31
 80082c8:	d007      	beq.n	80082da <__any_on+0x26>
 80082ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80082ce:	fa24 f001 	lsr.w	r0, r4, r1
 80082d2:	fa00 f101 	lsl.w	r1, r0, r1
 80082d6:	428c      	cmp	r4, r1
 80082d8:	d10b      	bne.n	80082f2 <__any_on+0x3e>
 80082da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80082de:	4293      	cmp	r3, r2
 80082e0:	d803      	bhi.n	80082ea <__any_on+0x36>
 80082e2:	2000      	movs	r0, #0
 80082e4:	bd10      	pop	{r4, pc}
 80082e6:	4603      	mov	r3, r0
 80082e8:	e7f7      	b.n	80082da <__any_on+0x26>
 80082ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082ee:	2900      	cmp	r1, #0
 80082f0:	d0f5      	beq.n	80082de <__any_on+0x2a>
 80082f2:	2001      	movs	r0, #1
 80082f4:	e7f6      	b.n	80082e4 <__any_on+0x30>

080082f6 <sulp>:
 80082f6:	b570      	push	{r4, r5, r6, lr}
 80082f8:	4604      	mov	r4, r0
 80082fa:	460d      	mov	r5, r1
 80082fc:	ec45 4b10 	vmov	d0, r4, r5
 8008300:	4616      	mov	r6, r2
 8008302:	f7ff feb7 	bl	8008074 <__ulp>
 8008306:	ec51 0b10 	vmov	r0, r1, d0
 800830a:	b17e      	cbz	r6, 800832c <sulp+0x36>
 800830c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008310:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008314:	2b00      	cmp	r3, #0
 8008316:	dd09      	ble.n	800832c <sulp+0x36>
 8008318:	051b      	lsls	r3, r3, #20
 800831a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800831e:	2400      	movs	r4, #0
 8008320:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008324:	4622      	mov	r2, r4
 8008326:	462b      	mov	r3, r5
 8008328:	f7f8 f96e 	bl	8000608 <__aeabi_dmul>
 800832c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008330 <_strtod_l>:
 8008330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008334:	ed2d 8b02 	vpush	{d8}
 8008338:	b09b      	sub	sp, #108	; 0x6c
 800833a:	4604      	mov	r4, r0
 800833c:	9213      	str	r2, [sp, #76]	; 0x4c
 800833e:	2200      	movs	r2, #0
 8008340:	9216      	str	r2, [sp, #88]	; 0x58
 8008342:	460d      	mov	r5, r1
 8008344:	f04f 0800 	mov.w	r8, #0
 8008348:	f04f 0900 	mov.w	r9, #0
 800834c:	460a      	mov	r2, r1
 800834e:	9215      	str	r2, [sp, #84]	; 0x54
 8008350:	7811      	ldrb	r1, [r2, #0]
 8008352:	292b      	cmp	r1, #43	; 0x2b
 8008354:	d04c      	beq.n	80083f0 <_strtod_l+0xc0>
 8008356:	d83a      	bhi.n	80083ce <_strtod_l+0x9e>
 8008358:	290d      	cmp	r1, #13
 800835a:	d834      	bhi.n	80083c6 <_strtod_l+0x96>
 800835c:	2908      	cmp	r1, #8
 800835e:	d834      	bhi.n	80083ca <_strtod_l+0x9a>
 8008360:	2900      	cmp	r1, #0
 8008362:	d03d      	beq.n	80083e0 <_strtod_l+0xb0>
 8008364:	2200      	movs	r2, #0
 8008366:	920a      	str	r2, [sp, #40]	; 0x28
 8008368:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800836a:	7832      	ldrb	r2, [r6, #0]
 800836c:	2a30      	cmp	r2, #48	; 0x30
 800836e:	f040 80b4 	bne.w	80084da <_strtod_l+0x1aa>
 8008372:	7872      	ldrb	r2, [r6, #1]
 8008374:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008378:	2a58      	cmp	r2, #88	; 0x58
 800837a:	d170      	bne.n	800845e <_strtod_l+0x12e>
 800837c:	9302      	str	r3, [sp, #8]
 800837e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008380:	9301      	str	r3, [sp, #4]
 8008382:	ab16      	add	r3, sp, #88	; 0x58
 8008384:	9300      	str	r3, [sp, #0]
 8008386:	4a8e      	ldr	r2, [pc, #568]	; (80085c0 <_strtod_l+0x290>)
 8008388:	ab17      	add	r3, sp, #92	; 0x5c
 800838a:	a915      	add	r1, sp, #84	; 0x54
 800838c:	4620      	mov	r0, r4
 800838e:	f001 fb07 	bl	80099a0 <__gethex>
 8008392:	f010 070f 	ands.w	r7, r0, #15
 8008396:	4605      	mov	r5, r0
 8008398:	d005      	beq.n	80083a6 <_strtod_l+0x76>
 800839a:	2f06      	cmp	r7, #6
 800839c:	d12a      	bne.n	80083f4 <_strtod_l+0xc4>
 800839e:	3601      	adds	r6, #1
 80083a0:	2300      	movs	r3, #0
 80083a2:	9615      	str	r6, [sp, #84]	; 0x54
 80083a4:	930a      	str	r3, [sp, #40]	; 0x28
 80083a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f040 857f 	bne.w	8008eac <_strtod_l+0xb7c>
 80083ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083b0:	b1db      	cbz	r3, 80083ea <_strtod_l+0xba>
 80083b2:	4642      	mov	r2, r8
 80083b4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80083b8:	ec43 2b10 	vmov	d0, r2, r3
 80083bc:	b01b      	add	sp, #108	; 0x6c
 80083be:	ecbd 8b02 	vpop	{d8}
 80083c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c6:	2920      	cmp	r1, #32
 80083c8:	d1cc      	bne.n	8008364 <_strtod_l+0x34>
 80083ca:	3201      	adds	r2, #1
 80083cc:	e7bf      	b.n	800834e <_strtod_l+0x1e>
 80083ce:	292d      	cmp	r1, #45	; 0x2d
 80083d0:	d1c8      	bne.n	8008364 <_strtod_l+0x34>
 80083d2:	2101      	movs	r1, #1
 80083d4:	910a      	str	r1, [sp, #40]	; 0x28
 80083d6:	1c51      	adds	r1, r2, #1
 80083d8:	9115      	str	r1, [sp, #84]	; 0x54
 80083da:	7852      	ldrb	r2, [r2, #1]
 80083dc:	2a00      	cmp	r2, #0
 80083de:	d1c3      	bne.n	8008368 <_strtod_l+0x38>
 80083e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083e2:	9515      	str	r5, [sp, #84]	; 0x54
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f040 855f 	bne.w	8008ea8 <_strtod_l+0xb78>
 80083ea:	4642      	mov	r2, r8
 80083ec:	464b      	mov	r3, r9
 80083ee:	e7e3      	b.n	80083b8 <_strtod_l+0x88>
 80083f0:	2100      	movs	r1, #0
 80083f2:	e7ef      	b.n	80083d4 <_strtod_l+0xa4>
 80083f4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80083f6:	b13a      	cbz	r2, 8008408 <_strtod_l+0xd8>
 80083f8:	2135      	movs	r1, #53	; 0x35
 80083fa:	a818      	add	r0, sp, #96	; 0x60
 80083fc:	f7ff ff37 	bl	800826e <__copybits>
 8008400:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008402:	4620      	mov	r0, r4
 8008404:	f7ff fb0a 	bl	8007a1c <_Bfree>
 8008408:	3f01      	subs	r7, #1
 800840a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800840c:	2f04      	cmp	r7, #4
 800840e:	d806      	bhi.n	800841e <_strtod_l+0xee>
 8008410:	e8df f007 	tbb	[pc, r7]
 8008414:	201d0314 	.word	0x201d0314
 8008418:	14          	.byte	0x14
 8008419:	00          	.byte	0x00
 800841a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800841e:	05e9      	lsls	r1, r5, #23
 8008420:	bf48      	it	mi
 8008422:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008426:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800842a:	0d1b      	lsrs	r3, r3, #20
 800842c:	051b      	lsls	r3, r3, #20
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1b9      	bne.n	80083a6 <_strtod_l+0x76>
 8008432:	f7fe fb05 	bl	8006a40 <__errno>
 8008436:	2322      	movs	r3, #34	; 0x22
 8008438:	6003      	str	r3, [r0, #0]
 800843a:	e7b4      	b.n	80083a6 <_strtod_l+0x76>
 800843c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008440:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008444:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008448:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800844c:	e7e7      	b.n	800841e <_strtod_l+0xee>
 800844e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80085c8 <_strtod_l+0x298>
 8008452:	e7e4      	b.n	800841e <_strtod_l+0xee>
 8008454:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008458:	f04f 38ff 	mov.w	r8, #4294967295
 800845c:	e7df      	b.n	800841e <_strtod_l+0xee>
 800845e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008460:	1c5a      	adds	r2, r3, #1
 8008462:	9215      	str	r2, [sp, #84]	; 0x54
 8008464:	785b      	ldrb	r3, [r3, #1]
 8008466:	2b30      	cmp	r3, #48	; 0x30
 8008468:	d0f9      	beq.n	800845e <_strtod_l+0x12e>
 800846a:	2b00      	cmp	r3, #0
 800846c:	d09b      	beq.n	80083a6 <_strtod_l+0x76>
 800846e:	2301      	movs	r3, #1
 8008470:	f04f 0a00 	mov.w	sl, #0
 8008474:	9304      	str	r3, [sp, #16]
 8008476:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008478:	930b      	str	r3, [sp, #44]	; 0x2c
 800847a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800847e:	46d3      	mov	fp, sl
 8008480:	220a      	movs	r2, #10
 8008482:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008484:	7806      	ldrb	r6, [r0, #0]
 8008486:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800848a:	b2d9      	uxtb	r1, r3
 800848c:	2909      	cmp	r1, #9
 800848e:	d926      	bls.n	80084de <_strtod_l+0x1ae>
 8008490:	494c      	ldr	r1, [pc, #304]	; (80085c4 <_strtod_l+0x294>)
 8008492:	2201      	movs	r2, #1
 8008494:	f001 f98c 	bl	80097b0 <strncmp>
 8008498:	2800      	cmp	r0, #0
 800849a:	d030      	beq.n	80084fe <_strtod_l+0x1ce>
 800849c:	2000      	movs	r0, #0
 800849e:	4632      	mov	r2, r6
 80084a0:	9005      	str	r0, [sp, #20]
 80084a2:	465e      	mov	r6, fp
 80084a4:	4603      	mov	r3, r0
 80084a6:	2a65      	cmp	r2, #101	; 0x65
 80084a8:	d001      	beq.n	80084ae <_strtod_l+0x17e>
 80084aa:	2a45      	cmp	r2, #69	; 0x45
 80084ac:	d113      	bne.n	80084d6 <_strtod_l+0x1a6>
 80084ae:	b91e      	cbnz	r6, 80084b8 <_strtod_l+0x188>
 80084b0:	9a04      	ldr	r2, [sp, #16]
 80084b2:	4302      	orrs	r2, r0
 80084b4:	d094      	beq.n	80083e0 <_strtod_l+0xb0>
 80084b6:	2600      	movs	r6, #0
 80084b8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80084ba:	1c6a      	adds	r2, r5, #1
 80084bc:	9215      	str	r2, [sp, #84]	; 0x54
 80084be:	786a      	ldrb	r2, [r5, #1]
 80084c0:	2a2b      	cmp	r2, #43	; 0x2b
 80084c2:	d074      	beq.n	80085ae <_strtod_l+0x27e>
 80084c4:	2a2d      	cmp	r2, #45	; 0x2d
 80084c6:	d078      	beq.n	80085ba <_strtod_l+0x28a>
 80084c8:	f04f 0c00 	mov.w	ip, #0
 80084cc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80084d0:	2909      	cmp	r1, #9
 80084d2:	d97f      	bls.n	80085d4 <_strtod_l+0x2a4>
 80084d4:	9515      	str	r5, [sp, #84]	; 0x54
 80084d6:	2700      	movs	r7, #0
 80084d8:	e09e      	b.n	8008618 <_strtod_l+0x2e8>
 80084da:	2300      	movs	r3, #0
 80084dc:	e7c8      	b.n	8008470 <_strtod_l+0x140>
 80084de:	f1bb 0f08 	cmp.w	fp, #8
 80084e2:	bfd8      	it	le
 80084e4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80084e6:	f100 0001 	add.w	r0, r0, #1
 80084ea:	bfda      	itte	le
 80084ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80084f0:	9309      	strle	r3, [sp, #36]	; 0x24
 80084f2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80084f6:	f10b 0b01 	add.w	fp, fp, #1
 80084fa:	9015      	str	r0, [sp, #84]	; 0x54
 80084fc:	e7c1      	b.n	8008482 <_strtod_l+0x152>
 80084fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008500:	1c5a      	adds	r2, r3, #1
 8008502:	9215      	str	r2, [sp, #84]	; 0x54
 8008504:	785a      	ldrb	r2, [r3, #1]
 8008506:	f1bb 0f00 	cmp.w	fp, #0
 800850a:	d037      	beq.n	800857c <_strtod_l+0x24c>
 800850c:	9005      	str	r0, [sp, #20]
 800850e:	465e      	mov	r6, fp
 8008510:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008514:	2b09      	cmp	r3, #9
 8008516:	d912      	bls.n	800853e <_strtod_l+0x20e>
 8008518:	2301      	movs	r3, #1
 800851a:	e7c4      	b.n	80084a6 <_strtod_l+0x176>
 800851c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800851e:	1c5a      	adds	r2, r3, #1
 8008520:	9215      	str	r2, [sp, #84]	; 0x54
 8008522:	785a      	ldrb	r2, [r3, #1]
 8008524:	3001      	adds	r0, #1
 8008526:	2a30      	cmp	r2, #48	; 0x30
 8008528:	d0f8      	beq.n	800851c <_strtod_l+0x1ec>
 800852a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800852e:	2b08      	cmp	r3, #8
 8008530:	f200 84c1 	bhi.w	8008eb6 <_strtod_l+0xb86>
 8008534:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008536:	9005      	str	r0, [sp, #20]
 8008538:	2000      	movs	r0, #0
 800853a:	930b      	str	r3, [sp, #44]	; 0x2c
 800853c:	4606      	mov	r6, r0
 800853e:	3a30      	subs	r2, #48	; 0x30
 8008540:	f100 0301 	add.w	r3, r0, #1
 8008544:	d014      	beq.n	8008570 <_strtod_l+0x240>
 8008546:	9905      	ldr	r1, [sp, #20]
 8008548:	4419      	add	r1, r3
 800854a:	9105      	str	r1, [sp, #20]
 800854c:	4633      	mov	r3, r6
 800854e:	eb00 0c06 	add.w	ip, r0, r6
 8008552:	210a      	movs	r1, #10
 8008554:	4563      	cmp	r3, ip
 8008556:	d113      	bne.n	8008580 <_strtod_l+0x250>
 8008558:	1833      	adds	r3, r6, r0
 800855a:	2b08      	cmp	r3, #8
 800855c:	f106 0601 	add.w	r6, r6, #1
 8008560:	4406      	add	r6, r0
 8008562:	dc1a      	bgt.n	800859a <_strtod_l+0x26a>
 8008564:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008566:	230a      	movs	r3, #10
 8008568:	fb03 2301 	mla	r3, r3, r1, r2
 800856c:	9309      	str	r3, [sp, #36]	; 0x24
 800856e:	2300      	movs	r3, #0
 8008570:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008572:	1c51      	adds	r1, r2, #1
 8008574:	9115      	str	r1, [sp, #84]	; 0x54
 8008576:	7852      	ldrb	r2, [r2, #1]
 8008578:	4618      	mov	r0, r3
 800857a:	e7c9      	b.n	8008510 <_strtod_l+0x1e0>
 800857c:	4658      	mov	r0, fp
 800857e:	e7d2      	b.n	8008526 <_strtod_l+0x1f6>
 8008580:	2b08      	cmp	r3, #8
 8008582:	f103 0301 	add.w	r3, r3, #1
 8008586:	dc03      	bgt.n	8008590 <_strtod_l+0x260>
 8008588:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800858a:	434f      	muls	r7, r1
 800858c:	9709      	str	r7, [sp, #36]	; 0x24
 800858e:	e7e1      	b.n	8008554 <_strtod_l+0x224>
 8008590:	2b10      	cmp	r3, #16
 8008592:	bfd8      	it	le
 8008594:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008598:	e7dc      	b.n	8008554 <_strtod_l+0x224>
 800859a:	2e10      	cmp	r6, #16
 800859c:	bfdc      	itt	le
 800859e:	230a      	movle	r3, #10
 80085a0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80085a4:	e7e3      	b.n	800856e <_strtod_l+0x23e>
 80085a6:	2300      	movs	r3, #0
 80085a8:	9305      	str	r3, [sp, #20]
 80085aa:	2301      	movs	r3, #1
 80085ac:	e780      	b.n	80084b0 <_strtod_l+0x180>
 80085ae:	f04f 0c00 	mov.w	ip, #0
 80085b2:	1caa      	adds	r2, r5, #2
 80085b4:	9215      	str	r2, [sp, #84]	; 0x54
 80085b6:	78aa      	ldrb	r2, [r5, #2]
 80085b8:	e788      	b.n	80084cc <_strtod_l+0x19c>
 80085ba:	f04f 0c01 	mov.w	ip, #1
 80085be:	e7f8      	b.n	80085b2 <_strtod_l+0x282>
 80085c0:	0800a3d0 	.word	0x0800a3d0
 80085c4:	0800a3cc 	.word	0x0800a3cc
 80085c8:	7ff00000 	.word	0x7ff00000
 80085cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80085ce:	1c51      	adds	r1, r2, #1
 80085d0:	9115      	str	r1, [sp, #84]	; 0x54
 80085d2:	7852      	ldrb	r2, [r2, #1]
 80085d4:	2a30      	cmp	r2, #48	; 0x30
 80085d6:	d0f9      	beq.n	80085cc <_strtod_l+0x29c>
 80085d8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80085dc:	2908      	cmp	r1, #8
 80085de:	f63f af7a 	bhi.w	80084d6 <_strtod_l+0x1a6>
 80085e2:	3a30      	subs	r2, #48	; 0x30
 80085e4:	9208      	str	r2, [sp, #32]
 80085e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80085e8:	920c      	str	r2, [sp, #48]	; 0x30
 80085ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80085ec:	1c57      	adds	r7, r2, #1
 80085ee:	9715      	str	r7, [sp, #84]	; 0x54
 80085f0:	7852      	ldrb	r2, [r2, #1]
 80085f2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80085f6:	f1be 0f09 	cmp.w	lr, #9
 80085fa:	d938      	bls.n	800866e <_strtod_l+0x33e>
 80085fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80085fe:	1a7f      	subs	r7, r7, r1
 8008600:	2f08      	cmp	r7, #8
 8008602:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008606:	dc03      	bgt.n	8008610 <_strtod_l+0x2e0>
 8008608:	9908      	ldr	r1, [sp, #32]
 800860a:	428f      	cmp	r7, r1
 800860c:	bfa8      	it	ge
 800860e:	460f      	movge	r7, r1
 8008610:	f1bc 0f00 	cmp.w	ip, #0
 8008614:	d000      	beq.n	8008618 <_strtod_l+0x2e8>
 8008616:	427f      	negs	r7, r7
 8008618:	2e00      	cmp	r6, #0
 800861a:	d14f      	bne.n	80086bc <_strtod_l+0x38c>
 800861c:	9904      	ldr	r1, [sp, #16]
 800861e:	4301      	orrs	r1, r0
 8008620:	f47f aec1 	bne.w	80083a6 <_strtod_l+0x76>
 8008624:	2b00      	cmp	r3, #0
 8008626:	f47f aedb 	bne.w	80083e0 <_strtod_l+0xb0>
 800862a:	2a69      	cmp	r2, #105	; 0x69
 800862c:	d029      	beq.n	8008682 <_strtod_l+0x352>
 800862e:	dc26      	bgt.n	800867e <_strtod_l+0x34e>
 8008630:	2a49      	cmp	r2, #73	; 0x49
 8008632:	d026      	beq.n	8008682 <_strtod_l+0x352>
 8008634:	2a4e      	cmp	r2, #78	; 0x4e
 8008636:	f47f aed3 	bne.w	80083e0 <_strtod_l+0xb0>
 800863a:	499b      	ldr	r1, [pc, #620]	; (80088a8 <_strtod_l+0x578>)
 800863c:	a815      	add	r0, sp, #84	; 0x54
 800863e:	f001 fbef 	bl	8009e20 <__match>
 8008642:	2800      	cmp	r0, #0
 8008644:	f43f aecc 	beq.w	80083e0 <_strtod_l+0xb0>
 8008648:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	2b28      	cmp	r3, #40	; 0x28
 800864e:	d12f      	bne.n	80086b0 <_strtod_l+0x380>
 8008650:	4996      	ldr	r1, [pc, #600]	; (80088ac <_strtod_l+0x57c>)
 8008652:	aa18      	add	r2, sp, #96	; 0x60
 8008654:	a815      	add	r0, sp, #84	; 0x54
 8008656:	f001 fbf7 	bl	8009e48 <__hexnan>
 800865a:	2805      	cmp	r0, #5
 800865c:	d128      	bne.n	80086b0 <_strtod_l+0x380>
 800865e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008660:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008664:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008668:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800866c:	e69b      	b.n	80083a6 <_strtod_l+0x76>
 800866e:	9f08      	ldr	r7, [sp, #32]
 8008670:	210a      	movs	r1, #10
 8008672:	fb01 2107 	mla	r1, r1, r7, r2
 8008676:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800867a:	9208      	str	r2, [sp, #32]
 800867c:	e7b5      	b.n	80085ea <_strtod_l+0x2ba>
 800867e:	2a6e      	cmp	r2, #110	; 0x6e
 8008680:	e7d9      	b.n	8008636 <_strtod_l+0x306>
 8008682:	498b      	ldr	r1, [pc, #556]	; (80088b0 <_strtod_l+0x580>)
 8008684:	a815      	add	r0, sp, #84	; 0x54
 8008686:	f001 fbcb 	bl	8009e20 <__match>
 800868a:	2800      	cmp	r0, #0
 800868c:	f43f aea8 	beq.w	80083e0 <_strtod_l+0xb0>
 8008690:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008692:	4988      	ldr	r1, [pc, #544]	; (80088b4 <_strtod_l+0x584>)
 8008694:	3b01      	subs	r3, #1
 8008696:	a815      	add	r0, sp, #84	; 0x54
 8008698:	9315      	str	r3, [sp, #84]	; 0x54
 800869a:	f001 fbc1 	bl	8009e20 <__match>
 800869e:	b910      	cbnz	r0, 80086a6 <_strtod_l+0x376>
 80086a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086a2:	3301      	adds	r3, #1
 80086a4:	9315      	str	r3, [sp, #84]	; 0x54
 80086a6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80088c4 <_strtod_l+0x594>
 80086aa:	f04f 0800 	mov.w	r8, #0
 80086ae:	e67a      	b.n	80083a6 <_strtod_l+0x76>
 80086b0:	4881      	ldr	r0, [pc, #516]	; (80088b8 <_strtod_l+0x588>)
 80086b2:	f001 f8d1 	bl	8009858 <nan>
 80086b6:	ec59 8b10 	vmov	r8, r9, d0
 80086ba:	e674      	b.n	80083a6 <_strtod_l+0x76>
 80086bc:	9b05      	ldr	r3, [sp, #20]
 80086be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086c0:	1afb      	subs	r3, r7, r3
 80086c2:	f1bb 0f00 	cmp.w	fp, #0
 80086c6:	bf08      	it	eq
 80086c8:	46b3      	moveq	fp, r6
 80086ca:	2e10      	cmp	r6, #16
 80086cc:	9308      	str	r3, [sp, #32]
 80086ce:	4635      	mov	r5, r6
 80086d0:	bfa8      	it	ge
 80086d2:	2510      	movge	r5, #16
 80086d4:	f7f7 ff1e 	bl	8000514 <__aeabi_ui2d>
 80086d8:	2e09      	cmp	r6, #9
 80086da:	4680      	mov	r8, r0
 80086dc:	4689      	mov	r9, r1
 80086de:	dd13      	ble.n	8008708 <_strtod_l+0x3d8>
 80086e0:	4b76      	ldr	r3, [pc, #472]	; (80088bc <_strtod_l+0x58c>)
 80086e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80086e6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80086ea:	f7f7 ff8d 	bl	8000608 <__aeabi_dmul>
 80086ee:	4680      	mov	r8, r0
 80086f0:	4650      	mov	r0, sl
 80086f2:	4689      	mov	r9, r1
 80086f4:	f7f7 ff0e 	bl	8000514 <__aeabi_ui2d>
 80086f8:	4602      	mov	r2, r0
 80086fa:	460b      	mov	r3, r1
 80086fc:	4640      	mov	r0, r8
 80086fe:	4649      	mov	r1, r9
 8008700:	f7f7 fdcc 	bl	800029c <__adddf3>
 8008704:	4680      	mov	r8, r0
 8008706:	4689      	mov	r9, r1
 8008708:	2e0f      	cmp	r6, #15
 800870a:	dc38      	bgt.n	800877e <_strtod_l+0x44e>
 800870c:	9b08      	ldr	r3, [sp, #32]
 800870e:	2b00      	cmp	r3, #0
 8008710:	f43f ae49 	beq.w	80083a6 <_strtod_l+0x76>
 8008714:	dd24      	ble.n	8008760 <_strtod_l+0x430>
 8008716:	2b16      	cmp	r3, #22
 8008718:	dc0b      	bgt.n	8008732 <_strtod_l+0x402>
 800871a:	4968      	ldr	r1, [pc, #416]	; (80088bc <_strtod_l+0x58c>)
 800871c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008720:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008724:	4642      	mov	r2, r8
 8008726:	464b      	mov	r3, r9
 8008728:	f7f7 ff6e 	bl	8000608 <__aeabi_dmul>
 800872c:	4680      	mov	r8, r0
 800872e:	4689      	mov	r9, r1
 8008730:	e639      	b.n	80083a6 <_strtod_l+0x76>
 8008732:	9a08      	ldr	r2, [sp, #32]
 8008734:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008738:	4293      	cmp	r3, r2
 800873a:	db20      	blt.n	800877e <_strtod_l+0x44e>
 800873c:	4c5f      	ldr	r4, [pc, #380]	; (80088bc <_strtod_l+0x58c>)
 800873e:	f1c6 060f 	rsb	r6, r6, #15
 8008742:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008746:	4642      	mov	r2, r8
 8008748:	464b      	mov	r3, r9
 800874a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800874e:	f7f7 ff5b 	bl	8000608 <__aeabi_dmul>
 8008752:	9b08      	ldr	r3, [sp, #32]
 8008754:	1b9e      	subs	r6, r3, r6
 8008756:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800875a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800875e:	e7e3      	b.n	8008728 <_strtod_l+0x3f8>
 8008760:	9b08      	ldr	r3, [sp, #32]
 8008762:	3316      	adds	r3, #22
 8008764:	db0b      	blt.n	800877e <_strtod_l+0x44e>
 8008766:	9b05      	ldr	r3, [sp, #20]
 8008768:	1bdf      	subs	r7, r3, r7
 800876a:	4b54      	ldr	r3, [pc, #336]	; (80088bc <_strtod_l+0x58c>)
 800876c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008774:	4640      	mov	r0, r8
 8008776:	4649      	mov	r1, r9
 8008778:	f7f8 f870 	bl	800085c <__aeabi_ddiv>
 800877c:	e7d6      	b.n	800872c <_strtod_l+0x3fc>
 800877e:	9b08      	ldr	r3, [sp, #32]
 8008780:	1b75      	subs	r5, r6, r5
 8008782:	441d      	add	r5, r3
 8008784:	2d00      	cmp	r5, #0
 8008786:	dd70      	ble.n	800886a <_strtod_l+0x53a>
 8008788:	f015 030f 	ands.w	r3, r5, #15
 800878c:	d00a      	beq.n	80087a4 <_strtod_l+0x474>
 800878e:	494b      	ldr	r1, [pc, #300]	; (80088bc <_strtod_l+0x58c>)
 8008790:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008794:	4642      	mov	r2, r8
 8008796:	464b      	mov	r3, r9
 8008798:	e9d1 0100 	ldrd	r0, r1, [r1]
 800879c:	f7f7 ff34 	bl	8000608 <__aeabi_dmul>
 80087a0:	4680      	mov	r8, r0
 80087a2:	4689      	mov	r9, r1
 80087a4:	f035 050f 	bics.w	r5, r5, #15
 80087a8:	d04d      	beq.n	8008846 <_strtod_l+0x516>
 80087aa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80087ae:	dd22      	ble.n	80087f6 <_strtod_l+0x4c6>
 80087b0:	2500      	movs	r5, #0
 80087b2:	46ab      	mov	fp, r5
 80087b4:	9509      	str	r5, [sp, #36]	; 0x24
 80087b6:	9505      	str	r5, [sp, #20]
 80087b8:	2322      	movs	r3, #34	; 0x22
 80087ba:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80088c4 <_strtod_l+0x594>
 80087be:	6023      	str	r3, [r4, #0]
 80087c0:	f04f 0800 	mov.w	r8, #0
 80087c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f43f aded 	beq.w	80083a6 <_strtod_l+0x76>
 80087cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80087ce:	4620      	mov	r0, r4
 80087d0:	f7ff f924 	bl	8007a1c <_Bfree>
 80087d4:	9905      	ldr	r1, [sp, #20]
 80087d6:	4620      	mov	r0, r4
 80087d8:	f7ff f920 	bl	8007a1c <_Bfree>
 80087dc:	4659      	mov	r1, fp
 80087de:	4620      	mov	r0, r4
 80087e0:	f7ff f91c 	bl	8007a1c <_Bfree>
 80087e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087e6:	4620      	mov	r0, r4
 80087e8:	f7ff f918 	bl	8007a1c <_Bfree>
 80087ec:	4629      	mov	r1, r5
 80087ee:	4620      	mov	r0, r4
 80087f0:	f7ff f914 	bl	8007a1c <_Bfree>
 80087f4:	e5d7      	b.n	80083a6 <_strtod_l+0x76>
 80087f6:	4b32      	ldr	r3, [pc, #200]	; (80088c0 <_strtod_l+0x590>)
 80087f8:	9304      	str	r3, [sp, #16]
 80087fa:	2300      	movs	r3, #0
 80087fc:	112d      	asrs	r5, r5, #4
 80087fe:	4640      	mov	r0, r8
 8008800:	4649      	mov	r1, r9
 8008802:	469a      	mov	sl, r3
 8008804:	2d01      	cmp	r5, #1
 8008806:	dc21      	bgt.n	800884c <_strtod_l+0x51c>
 8008808:	b10b      	cbz	r3, 800880e <_strtod_l+0x4de>
 800880a:	4680      	mov	r8, r0
 800880c:	4689      	mov	r9, r1
 800880e:	492c      	ldr	r1, [pc, #176]	; (80088c0 <_strtod_l+0x590>)
 8008810:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008814:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008818:	4642      	mov	r2, r8
 800881a:	464b      	mov	r3, r9
 800881c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008820:	f7f7 fef2 	bl	8000608 <__aeabi_dmul>
 8008824:	4b27      	ldr	r3, [pc, #156]	; (80088c4 <_strtod_l+0x594>)
 8008826:	460a      	mov	r2, r1
 8008828:	400b      	ands	r3, r1
 800882a:	4927      	ldr	r1, [pc, #156]	; (80088c8 <_strtod_l+0x598>)
 800882c:	428b      	cmp	r3, r1
 800882e:	4680      	mov	r8, r0
 8008830:	d8be      	bhi.n	80087b0 <_strtod_l+0x480>
 8008832:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008836:	428b      	cmp	r3, r1
 8008838:	bf86      	itte	hi
 800883a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80088cc <_strtod_l+0x59c>
 800883e:	f04f 38ff 	movhi.w	r8, #4294967295
 8008842:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008846:	2300      	movs	r3, #0
 8008848:	9304      	str	r3, [sp, #16]
 800884a:	e07b      	b.n	8008944 <_strtod_l+0x614>
 800884c:	07ea      	lsls	r2, r5, #31
 800884e:	d505      	bpl.n	800885c <_strtod_l+0x52c>
 8008850:	9b04      	ldr	r3, [sp, #16]
 8008852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008856:	f7f7 fed7 	bl	8000608 <__aeabi_dmul>
 800885a:	2301      	movs	r3, #1
 800885c:	9a04      	ldr	r2, [sp, #16]
 800885e:	3208      	adds	r2, #8
 8008860:	f10a 0a01 	add.w	sl, sl, #1
 8008864:	106d      	asrs	r5, r5, #1
 8008866:	9204      	str	r2, [sp, #16]
 8008868:	e7cc      	b.n	8008804 <_strtod_l+0x4d4>
 800886a:	d0ec      	beq.n	8008846 <_strtod_l+0x516>
 800886c:	426d      	negs	r5, r5
 800886e:	f015 020f 	ands.w	r2, r5, #15
 8008872:	d00a      	beq.n	800888a <_strtod_l+0x55a>
 8008874:	4b11      	ldr	r3, [pc, #68]	; (80088bc <_strtod_l+0x58c>)
 8008876:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800887a:	4640      	mov	r0, r8
 800887c:	4649      	mov	r1, r9
 800887e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008882:	f7f7 ffeb 	bl	800085c <__aeabi_ddiv>
 8008886:	4680      	mov	r8, r0
 8008888:	4689      	mov	r9, r1
 800888a:	112d      	asrs	r5, r5, #4
 800888c:	d0db      	beq.n	8008846 <_strtod_l+0x516>
 800888e:	2d1f      	cmp	r5, #31
 8008890:	dd1e      	ble.n	80088d0 <_strtod_l+0x5a0>
 8008892:	2500      	movs	r5, #0
 8008894:	46ab      	mov	fp, r5
 8008896:	9509      	str	r5, [sp, #36]	; 0x24
 8008898:	9505      	str	r5, [sp, #20]
 800889a:	2322      	movs	r3, #34	; 0x22
 800889c:	f04f 0800 	mov.w	r8, #0
 80088a0:	f04f 0900 	mov.w	r9, #0
 80088a4:	6023      	str	r3, [r4, #0]
 80088a6:	e78d      	b.n	80087c4 <_strtod_l+0x494>
 80088a8:	0800a1b9 	.word	0x0800a1b9
 80088ac:	0800a3e4 	.word	0x0800a3e4
 80088b0:	0800a1b1 	.word	0x0800a1b1
 80088b4:	0800a1e8 	.word	0x0800a1e8
 80088b8:	0800a575 	.word	0x0800a575
 80088bc:	0800a2f8 	.word	0x0800a2f8
 80088c0:	0800a2d0 	.word	0x0800a2d0
 80088c4:	7ff00000 	.word	0x7ff00000
 80088c8:	7ca00000 	.word	0x7ca00000
 80088cc:	7fefffff 	.word	0x7fefffff
 80088d0:	f015 0310 	ands.w	r3, r5, #16
 80088d4:	bf18      	it	ne
 80088d6:	236a      	movne	r3, #106	; 0x6a
 80088d8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008c7c <_strtod_l+0x94c>
 80088dc:	9304      	str	r3, [sp, #16]
 80088de:	4640      	mov	r0, r8
 80088e0:	4649      	mov	r1, r9
 80088e2:	2300      	movs	r3, #0
 80088e4:	07ea      	lsls	r2, r5, #31
 80088e6:	d504      	bpl.n	80088f2 <_strtod_l+0x5c2>
 80088e8:	e9da 2300 	ldrd	r2, r3, [sl]
 80088ec:	f7f7 fe8c 	bl	8000608 <__aeabi_dmul>
 80088f0:	2301      	movs	r3, #1
 80088f2:	106d      	asrs	r5, r5, #1
 80088f4:	f10a 0a08 	add.w	sl, sl, #8
 80088f8:	d1f4      	bne.n	80088e4 <_strtod_l+0x5b4>
 80088fa:	b10b      	cbz	r3, 8008900 <_strtod_l+0x5d0>
 80088fc:	4680      	mov	r8, r0
 80088fe:	4689      	mov	r9, r1
 8008900:	9b04      	ldr	r3, [sp, #16]
 8008902:	b1bb      	cbz	r3, 8008934 <_strtod_l+0x604>
 8008904:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008908:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800890c:	2b00      	cmp	r3, #0
 800890e:	4649      	mov	r1, r9
 8008910:	dd10      	ble.n	8008934 <_strtod_l+0x604>
 8008912:	2b1f      	cmp	r3, #31
 8008914:	f340 811e 	ble.w	8008b54 <_strtod_l+0x824>
 8008918:	2b34      	cmp	r3, #52	; 0x34
 800891a:	bfde      	ittt	le
 800891c:	f04f 33ff 	movle.w	r3, #4294967295
 8008920:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008924:	4093      	lslle	r3, r2
 8008926:	f04f 0800 	mov.w	r8, #0
 800892a:	bfcc      	ite	gt
 800892c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008930:	ea03 0901 	andle.w	r9, r3, r1
 8008934:	2200      	movs	r2, #0
 8008936:	2300      	movs	r3, #0
 8008938:	4640      	mov	r0, r8
 800893a:	4649      	mov	r1, r9
 800893c:	f7f8 f8cc 	bl	8000ad8 <__aeabi_dcmpeq>
 8008940:	2800      	cmp	r0, #0
 8008942:	d1a6      	bne.n	8008892 <_strtod_l+0x562>
 8008944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800894a:	4633      	mov	r3, r6
 800894c:	465a      	mov	r2, fp
 800894e:	4620      	mov	r0, r4
 8008950:	f7ff f8cc 	bl	8007aec <__s2b>
 8008954:	9009      	str	r0, [sp, #36]	; 0x24
 8008956:	2800      	cmp	r0, #0
 8008958:	f43f af2a 	beq.w	80087b0 <_strtod_l+0x480>
 800895c:	9a08      	ldr	r2, [sp, #32]
 800895e:	9b05      	ldr	r3, [sp, #20]
 8008960:	2a00      	cmp	r2, #0
 8008962:	eba3 0307 	sub.w	r3, r3, r7
 8008966:	bfa8      	it	ge
 8008968:	2300      	movge	r3, #0
 800896a:	930c      	str	r3, [sp, #48]	; 0x30
 800896c:	2500      	movs	r5, #0
 800896e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008972:	9312      	str	r3, [sp, #72]	; 0x48
 8008974:	46ab      	mov	fp, r5
 8008976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008978:	4620      	mov	r0, r4
 800897a:	6859      	ldr	r1, [r3, #4]
 800897c:	f7ff f80e 	bl	800799c <_Balloc>
 8008980:	9005      	str	r0, [sp, #20]
 8008982:	2800      	cmp	r0, #0
 8008984:	f43f af18 	beq.w	80087b8 <_strtod_l+0x488>
 8008988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800898a:	691a      	ldr	r2, [r3, #16]
 800898c:	3202      	adds	r2, #2
 800898e:	f103 010c 	add.w	r1, r3, #12
 8008992:	0092      	lsls	r2, r2, #2
 8008994:	300c      	adds	r0, #12
 8008996:	f000 ff4f 	bl	8009838 <memcpy>
 800899a:	ec49 8b10 	vmov	d0, r8, r9
 800899e:	aa18      	add	r2, sp, #96	; 0x60
 80089a0:	a917      	add	r1, sp, #92	; 0x5c
 80089a2:	4620      	mov	r0, r4
 80089a4:	f7ff fbd6 	bl	8008154 <__d2b>
 80089a8:	ec49 8b18 	vmov	d8, r8, r9
 80089ac:	9016      	str	r0, [sp, #88]	; 0x58
 80089ae:	2800      	cmp	r0, #0
 80089b0:	f43f af02 	beq.w	80087b8 <_strtod_l+0x488>
 80089b4:	2101      	movs	r1, #1
 80089b6:	4620      	mov	r0, r4
 80089b8:	f7ff f930 	bl	8007c1c <__i2b>
 80089bc:	4683      	mov	fp, r0
 80089be:	2800      	cmp	r0, #0
 80089c0:	f43f aefa 	beq.w	80087b8 <_strtod_l+0x488>
 80089c4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80089c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80089c8:	2e00      	cmp	r6, #0
 80089ca:	bfab      	itete	ge
 80089cc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80089ce:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80089d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80089d2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80089d6:	bfac      	ite	ge
 80089d8:	eb06 0a03 	addge.w	sl, r6, r3
 80089dc:	1b9f      	sublt	r7, r3, r6
 80089de:	9b04      	ldr	r3, [sp, #16]
 80089e0:	1af6      	subs	r6, r6, r3
 80089e2:	4416      	add	r6, r2
 80089e4:	4ba0      	ldr	r3, [pc, #640]	; (8008c68 <_strtod_l+0x938>)
 80089e6:	3e01      	subs	r6, #1
 80089e8:	429e      	cmp	r6, r3
 80089ea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80089ee:	f280 80c4 	bge.w	8008b7a <_strtod_l+0x84a>
 80089f2:	1b9b      	subs	r3, r3, r6
 80089f4:	2b1f      	cmp	r3, #31
 80089f6:	eba2 0203 	sub.w	r2, r2, r3
 80089fa:	f04f 0101 	mov.w	r1, #1
 80089fe:	f300 80b0 	bgt.w	8008b62 <_strtod_l+0x832>
 8008a02:	fa01 f303 	lsl.w	r3, r1, r3
 8008a06:	930e      	str	r3, [sp, #56]	; 0x38
 8008a08:	2300      	movs	r3, #0
 8008a0a:	930d      	str	r3, [sp, #52]	; 0x34
 8008a0c:	eb0a 0602 	add.w	r6, sl, r2
 8008a10:	9b04      	ldr	r3, [sp, #16]
 8008a12:	45b2      	cmp	sl, r6
 8008a14:	4417      	add	r7, r2
 8008a16:	441f      	add	r7, r3
 8008a18:	4653      	mov	r3, sl
 8008a1a:	bfa8      	it	ge
 8008a1c:	4633      	movge	r3, r6
 8008a1e:	42bb      	cmp	r3, r7
 8008a20:	bfa8      	it	ge
 8008a22:	463b      	movge	r3, r7
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	bfc2      	ittt	gt
 8008a28:	1af6      	subgt	r6, r6, r3
 8008a2a:	1aff      	subgt	r7, r7, r3
 8008a2c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008a30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	dd17      	ble.n	8008a66 <_strtod_l+0x736>
 8008a36:	4659      	mov	r1, fp
 8008a38:	461a      	mov	r2, r3
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	f7ff f9ae 	bl	8007d9c <__pow5mult>
 8008a40:	4683      	mov	fp, r0
 8008a42:	2800      	cmp	r0, #0
 8008a44:	f43f aeb8 	beq.w	80087b8 <_strtod_l+0x488>
 8008a48:	4601      	mov	r1, r0
 8008a4a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f7ff f8fb 	bl	8007c48 <__multiply>
 8008a52:	900b      	str	r0, [sp, #44]	; 0x2c
 8008a54:	2800      	cmp	r0, #0
 8008a56:	f43f aeaf 	beq.w	80087b8 <_strtod_l+0x488>
 8008a5a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f7fe ffdd 	bl	8007a1c <_Bfree>
 8008a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a64:	9316      	str	r3, [sp, #88]	; 0x58
 8008a66:	2e00      	cmp	r6, #0
 8008a68:	f300 808c 	bgt.w	8008b84 <_strtod_l+0x854>
 8008a6c:	9b08      	ldr	r3, [sp, #32]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	dd08      	ble.n	8008a84 <_strtod_l+0x754>
 8008a72:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a74:	9905      	ldr	r1, [sp, #20]
 8008a76:	4620      	mov	r0, r4
 8008a78:	f7ff f990 	bl	8007d9c <__pow5mult>
 8008a7c:	9005      	str	r0, [sp, #20]
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	f43f ae9a 	beq.w	80087b8 <_strtod_l+0x488>
 8008a84:	2f00      	cmp	r7, #0
 8008a86:	dd08      	ble.n	8008a9a <_strtod_l+0x76a>
 8008a88:	9905      	ldr	r1, [sp, #20]
 8008a8a:	463a      	mov	r2, r7
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f7ff f9df 	bl	8007e50 <__lshift>
 8008a92:	9005      	str	r0, [sp, #20]
 8008a94:	2800      	cmp	r0, #0
 8008a96:	f43f ae8f 	beq.w	80087b8 <_strtod_l+0x488>
 8008a9a:	f1ba 0f00 	cmp.w	sl, #0
 8008a9e:	dd08      	ble.n	8008ab2 <_strtod_l+0x782>
 8008aa0:	4659      	mov	r1, fp
 8008aa2:	4652      	mov	r2, sl
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f7ff f9d3 	bl	8007e50 <__lshift>
 8008aaa:	4683      	mov	fp, r0
 8008aac:	2800      	cmp	r0, #0
 8008aae:	f43f ae83 	beq.w	80087b8 <_strtod_l+0x488>
 8008ab2:	9a05      	ldr	r2, [sp, #20]
 8008ab4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f7ff fa52 	bl	8007f60 <__mdiff>
 8008abc:	4605      	mov	r5, r0
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	f43f ae7a 	beq.w	80087b8 <_strtod_l+0x488>
 8008ac4:	68c3      	ldr	r3, [r0, #12]
 8008ac6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ac8:	2300      	movs	r3, #0
 8008aca:	60c3      	str	r3, [r0, #12]
 8008acc:	4659      	mov	r1, fp
 8008ace:	f7ff fa2b 	bl	8007f28 <__mcmp>
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	da60      	bge.n	8008b98 <_strtod_l+0x868>
 8008ad6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ad8:	ea53 0308 	orrs.w	r3, r3, r8
 8008adc:	f040 8084 	bne.w	8008be8 <_strtod_l+0x8b8>
 8008ae0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d17f      	bne.n	8008be8 <_strtod_l+0x8b8>
 8008ae8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008aec:	0d1b      	lsrs	r3, r3, #20
 8008aee:	051b      	lsls	r3, r3, #20
 8008af0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008af4:	d978      	bls.n	8008be8 <_strtod_l+0x8b8>
 8008af6:	696b      	ldr	r3, [r5, #20]
 8008af8:	b913      	cbnz	r3, 8008b00 <_strtod_l+0x7d0>
 8008afa:	692b      	ldr	r3, [r5, #16]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	dd73      	ble.n	8008be8 <_strtod_l+0x8b8>
 8008b00:	4629      	mov	r1, r5
 8008b02:	2201      	movs	r2, #1
 8008b04:	4620      	mov	r0, r4
 8008b06:	f7ff f9a3 	bl	8007e50 <__lshift>
 8008b0a:	4659      	mov	r1, fp
 8008b0c:	4605      	mov	r5, r0
 8008b0e:	f7ff fa0b 	bl	8007f28 <__mcmp>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	dd68      	ble.n	8008be8 <_strtod_l+0x8b8>
 8008b16:	9904      	ldr	r1, [sp, #16]
 8008b18:	4a54      	ldr	r2, [pc, #336]	; (8008c6c <_strtod_l+0x93c>)
 8008b1a:	464b      	mov	r3, r9
 8008b1c:	2900      	cmp	r1, #0
 8008b1e:	f000 8084 	beq.w	8008c2a <_strtod_l+0x8fa>
 8008b22:	ea02 0109 	and.w	r1, r2, r9
 8008b26:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008b2a:	dc7e      	bgt.n	8008c2a <_strtod_l+0x8fa>
 8008b2c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008b30:	f77f aeb3 	ble.w	800889a <_strtod_l+0x56a>
 8008b34:	4b4e      	ldr	r3, [pc, #312]	; (8008c70 <_strtod_l+0x940>)
 8008b36:	4640      	mov	r0, r8
 8008b38:	4649      	mov	r1, r9
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f7f7 fd64 	bl	8000608 <__aeabi_dmul>
 8008b40:	4b4a      	ldr	r3, [pc, #296]	; (8008c6c <_strtod_l+0x93c>)
 8008b42:	400b      	ands	r3, r1
 8008b44:	4680      	mov	r8, r0
 8008b46:	4689      	mov	r9, r1
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f47f ae3f 	bne.w	80087cc <_strtod_l+0x49c>
 8008b4e:	2322      	movs	r3, #34	; 0x22
 8008b50:	6023      	str	r3, [r4, #0]
 8008b52:	e63b      	b.n	80087cc <_strtod_l+0x49c>
 8008b54:	f04f 32ff 	mov.w	r2, #4294967295
 8008b58:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5c:	ea03 0808 	and.w	r8, r3, r8
 8008b60:	e6e8      	b.n	8008934 <_strtod_l+0x604>
 8008b62:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008b66:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008b6a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008b6e:	36e2      	adds	r6, #226	; 0xe2
 8008b70:	fa01 f306 	lsl.w	r3, r1, r6
 8008b74:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008b78:	e748      	b.n	8008a0c <_strtod_l+0x6dc>
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008b82:	e743      	b.n	8008a0c <_strtod_l+0x6dc>
 8008b84:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008b86:	4632      	mov	r2, r6
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f7ff f961 	bl	8007e50 <__lshift>
 8008b8e:	9016      	str	r0, [sp, #88]	; 0x58
 8008b90:	2800      	cmp	r0, #0
 8008b92:	f47f af6b 	bne.w	8008a6c <_strtod_l+0x73c>
 8008b96:	e60f      	b.n	80087b8 <_strtod_l+0x488>
 8008b98:	46ca      	mov	sl, r9
 8008b9a:	d171      	bne.n	8008c80 <_strtod_l+0x950>
 8008b9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b9e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ba2:	b352      	cbz	r2, 8008bfa <_strtod_l+0x8ca>
 8008ba4:	4a33      	ldr	r2, [pc, #204]	; (8008c74 <_strtod_l+0x944>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d12a      	bne.n	8008c00 <_strtod_l+0x8d0>
 8008baa:	9b04      	ldr	r3, [sp, #16]
 8008bac:	4641      	mov	r1, r8
 8008bae:	b1fb      	cbz	r3, 8008bf0 <_strtod_l+0x8c0>
 8008bb0:	4b2e      	ldr	r3, [pc, #184]	; (8008c6c <_strtod_l+0x93c>)
 8008bb2:	ea09 0303 	and.w	r3, r9, r3
 8008bb6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008bba:	f04f 32ff 	mov.w	r2, #4294967295
 8008bbe:	d81a      	bhi.n	8008bf6 <_strtod_l+0x8c6>
 8008bc0:	0d1b      	lsrs	r3, r3, #20
 8008bc2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bca:	4299      	cmp	r1, r3
 8008bcc:	d118      	bne.n	8008c00 <_strtod_l+0x8d0>
 8008bce:	4b2a      	ldr	r3, [pc, #168]	; (8008c78 <_strtod_l+0x948>)
 8008bd0:	459a      	cmp	sl, r3
 8008bd2:	d102      	bne.n	8008bda <_strtod_l+0x8aa>
 8008bd4:	3101      	adds	r1, #1
 8008bd6:	f43f adef 	beq.w	80087b8 <_strtod_l+0x488>
 8008bda:	4b24      	ldr	r3, [pc, #144]	; (8008c6c <_strtod_l+0x93c>)
 8008bdc:	ea0a 0303 	and.w	r3, sl, r3
 8008be0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008be4:	f04f 0800 	mov.w	r8, #0
 8008be8:	9b04      	ldr	r3, [sp, #16]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1a2      	bne.n	8008b34 <_strtod_l+0x804>
 8008bee:	e5ed      	b.n	80087cc <_strtod_l+0x49c>
 8008bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8008bf4:	e7e9      	b.n	8008bca <_strtod_l+0x89a>
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	e7e7      	b.n	8008bca <_strtod_l+0x89a>
 8008bfa:	ea53 0308 	orrs.w	r3, r3, r8
 8008bfe:	d08a      	beq.n	8008b16 <_strtod_l+0x7e6>
 8008c00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c02:	b1e3      	cbz	r3, 8008c3e <_strtod_l+0x90e>
 8008c04:	ea13 0f0a 	tst.w	r3, sl
 8008c08:	d0ee      	beq.n	8008be8 <_strtod_l+0x8b8>
 8008c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c0c:	9a04      	ldr	r2, [sp, #16]
 8008c0e:	4640      	mov	r0, r8
 8008c10:	4649      	mov	r1, r9
 8008c12:	b1c3      	cbz	r3, 8008c46 <_strtod_l+0x916>
 8008c14:	f7ff fb6f 	bl	80082f6 <sulp>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	ec51 0b18 	vmov	r0, r1, d8
 8008c20:	f7f7 fb3c 	bl	800029c <__adddf3>
 8008c24:	4680      	mov	r8, r0
 8008c26:	4689      	mov	r9, r1
 8008c28:	e7de      	b.n	8008be8 <_strtod_l+0x8b8>
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008c30:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008c34:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008c38:	f04f 38ff 	mov.w	r8, #4294967295
 8008c3c:	e7d4      	b.n	8008be8 <_strtod_l+0x8b8>
 8008c3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c40:	ea13 0f08 	tst.w	r3, r8
 8008c44:	e7e0      	b.n	8008c08 <_strtod_l+0x8d8>
 8008c46:	f7ff fb56 	bl	80082f6 <sulp>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	ec51 0b18 	vmov	r0, r1, d8
 8008c52:	f7f7 fb21 	bl	8000298 <__aeabi_dsub>
 8008c56:	2200      	movs	r2, #0
 8008c58:	2300      	movs	r3, #0
 8008c5a:	4680      	mov	r8, r0
 8008c5c:	4689      	mov	r9, r1
 8008c5e:	f7f7 ff3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d0c0      	beq.n	8008be8 <_strtod_l+0x8b8>
 8008c66:	e618      	b.n	800889a <_strtod_l+0x56a>
 8008c68:	fffffc02 	.word	0xfffffc02
 8008c6c:	7ff00000 	.word	0x7ff00000
 8008c70:	39500000 	.word	0x39500000
 8008c74:	000fffff 	.word	0x000fffff
 8008c78:	7fefffff 	.word	0x7fefffff
 8008c7c:	0800a3f8 	.word	0x0800a3f8
 8008c80:	4659      	mov	r1, fp
 8008c82:	4628      	mov	r0, r5
 8008c84:	f7ff fac0 	bl	8008208 <__ratio>
 8008c88:	ec57 6b10 	vmov	r6, r7, d0
 8008c8c:	ee10 0a10 	vmov	r0, s0
 8008c90:	2200      	movs	r2, #0
 8008c92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c96:	4639      	mov	r1, r7
 8008c98:	f7f7 ff32 	bl	8000b00 <__aeabi_dcmple>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	d071      	beq.n	8008d84 <_strtod_l+0xa54>
 8008ca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d17c      	bne.n	8008da0 <_strtod_l+0xa70>
 8008ca6:	f1b8 0f00 	cmp.w	r8, #0
 8008caa:	d15a      	bne.n	8008d62 <_strtod_l+0xa32>
 8008cac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d15d      	bne.n	8008d70 <_strtod_l+0xa40>
 8008cb4:	4b90      	ldr	r3, [pc, #576]	; (8008ef8 <_strtod_l+0xbc8>)
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	4630      	mov	r0, r6
 8008cba:	4639      	mov	r1, r7
 8008cbc:	f7f7 ff16 	bl	8000aec <__aeabi_dcmplt>
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	d15c      	bne.n	8008d7e <_strtod_l+0xa4e>
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	4639      	mov	r1, r7
 8008cc8:	4b8c      	ldr	r3, [pc, #560]	; (8008efc <_strtod_l+0xbcc>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f7f7 fc9c 	bl	8000608 <__aeabi_dmul>
 8008cd0:	4606      	mov	r6, r0
 8008cd2:	460f      	mov	r7, r1
 8008cd4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008cd8:	9606      	str	r6, [sp, #24]
 8008cda:	9307      	str	r3, [sp, #28]
 8008cdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ce0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008ce4:	4b86      	ldr	r3, [pc, #536]	; (8008f00 <_strtod_l+0xbd0>)
 8008ce6:	ea0a 0303 	and.w	r3, sl, r3
 8008cea:	930d      	str	r3, [sp, #52]	; 0x34
 8008cec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cee:	4b85      	ldr	r3, [pc, #532]	; (8008f04 <_strtod_l+0xbd4>)
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	f040 8090 	bne.w	8008e16 <_strtod_l+0xae6>
 8008cf6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008cfa:	ec49 8b10 	vmov	d0, r8, r9
 8008cfe:	f7ff f9b9 	bl	8008074 <__ulp>
 8008d02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d06:	ec51 0b10 	vmov	r0, r1, d0
 8008d0a:	f7f7 fc7d 	bl	8000608 <__aeabi_dmul>
 8008d0e:	4642      	mov	r2, r8
 8008d10:	464b      	mov	r3, r9
 8008d12:	f7f7 fac3 	bl	800029c <__adddf3>
 8008d16:	460b      	mov	r3, r1
 8008d18:	4979      	ldr	r1, [pc, #484]	; (8008f00 <_strtod_l+0xbd0>)
 8008d1a:	4a7b      	ldr	r2, [pc, #492]	; (8008f08 <_strtod_l+0xbd8>)
 8008d1c:	4019      	ands	r1, r3
 8008d1e:	4291      	cmp	r1, r2
 8008d20:	4680      	mov	r8, r0
 8008d22:	d944      	bls.n	8008dae <_strtod_l+0xa7e>
 8008d24:	ee18 2a90 	vmov	r2, s17
 8008d28:	4b78      	ldr	r3, [pc, #480]	; (8008f0c <_strtod_l+0xbdc>)
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d104      	bne.n	8008d38 <_strtod_l+0xa08>
 8008d2e:	ee18 3a10 	vmov	r3, s16
 8008d32:	3301      	adds	r3, #1
 8008d34:	f43f ad40 	beq.w	80087b8 <_strtod_l+0x488>
 8008d38:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008f0c <_strtod_l+0xbdc>
 8008d3c:	f04f 38ff 	mov.w	r8, #4294967295
 8008d40:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008d42:	4620      	mov	r0, r4
 8008d44:	f7fe fe6a 	bl	8007a1c <_Bfree>
 8008d48:	9905      	ldr	r1, [sp, #20]
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f7fe fe66 	bl	8007a1c <_Bfree>
 8008d50:	4659      	mov	r1, fp
 8008d52:	4620      	mov	r0, r4
 8008d54:	f7fe fe62 	bl	8007a1c <_Bfree>
 8008d58:	4629      	mov	r1, r5
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f7fe fe5e 	bl	8007a1c <_Bfree>
 8008d60:	e609      	b.n	8008976 <_strtod_l+0x646>
 8008d62:	f1b8 0f01 	cmp.w	r8, #1
 8008d66:	d103      	bne.n	8008d70 <_strtod_l+0xa40>
 8008d68:	f1b9 0f00 	cmp.w	r9, #0
 8008d6c:	f43f ad95 	beq.w	800889a <_strtod_l+0x56a>
 8008d70:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008ec8 <_strtod_l+0xb98>
 8008d74:	4f60      	ldr	r7, [pc, #384]	; (8008ef8 <_strtod_l+0xbc8>)
 8008d76:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008d7a:	2600      	movs	r6, #0
 8008d7c:	e7ae      	b.n	8008cdc <_strtod_l+0x9ac>
 8008d7e:	4f5f      	ldr	r7, [pc, #380]	; (8008efc <_strtod_l+0xbcc>)
 8008d80:	2600      	movs	r6, #0
 8008d82:	e7a7      	b.n	8008cd4 <_strtod_l+0x9a4>
 8008d84:	4b5d      	ldr	r3, [pc, #372]	; (8008efc <_strtod_l+0xbcc>)
 8008d86:	4630      	mov	r0, r6
 8008d88:	4639      	mov	r1, r7
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f7f7 fc3c 	bl	8000608 <__aeabi_dmul>
 8008d90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d92:	4606      	mov	r6, r0
 8008d94:	460f      	mov	r7, r1
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d09c      	beq.n	8008cd4 <_strtod_l+0x9a4>
 8008d9a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008d9e:	e79d      	b.n	8008cdc <_strtod_l+0x9ac>
 8008da0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008ed0 <_strtod_l+0xba0>
 8008da4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008da8:	ec57 6b17 	vmov	r6, r7, d7
 8008dac:	e796      	b.n	8008cdc <_strtod_l+0x9ac>
 8008dae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008db2:	9b04      	ldr	r3, [sp, #16]
 8008db4:	46ca      	mov	sl, r9
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1c2      	bne.n	8008d40 <_strtod_l+0xa10>
 8008dba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008dbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008dc0:	0d1b      	lsrs	r3, r3, #20
 8008dc2:	051b      	lsls	r3, r3, #20
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d1bb      	bne.n	8008d40 <_strtod_l+0xa10>
 8008dc8:	4630      	mov	r0, r6
 8008dca:	4639      	mov	r1, r7
 8008dcc:	f7f7 ff7c 	bl	8000cc8 <__aeabi_d2lz>
 8008dd0:	f7f7 fbec 	bl	80005ac <__aeabi_l2d>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	4630      	mov	r0, r6
 8008dda:	4639      	mov	r1, r7
 8008ddc:	f7f7 fa5c 	bl	8000298 <__aeabi_dsub>
 8008de0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008de2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008de6:	ea43 0308 	orr.w	r3, r3, r8
 8008dea:	4313      	orrs	r3, r2
 8008dec:	4606      	mov	r6, r0
 8008dee:	460f      	mov	r7, r1
 8008df0:	d054      	beq.n	8008e9c <_strtod_l+0xb6c>
 8008df2:	a339      	add	r3, pc, #228	; (adr r3, 8008ed8 <_strtod_l+0xba8>)
 8008df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df8:	f7f7 fe78 	bl	8000aec <__aeabi_dcmplt>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	f47f ace5 	bne.w	80087cc <_strtod_l+0x49c>
 8008e02:	a337      	add	r3, pc, #220	; (adr r3, 8008ee0 <_strtod_l+0xbb0>)
 8008e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e08:	4630      	mov	r0, r6
 8008e0a:	4639      	mov	r1, r7
 8008e0c:	f7f7 fe8c 	bl	8000b28 <__aeabi_dcmpgt>
 8008e10:	2800      	cmp	r0, #0
 8008e12:	d095      	beq.n	8008d40 <_strtod_l+0xa10>
 8008e14:	e4da      	b.n	80087cc <_strtod_l+0x49c>
 8008e16:	9b04      	ldr	r3, [sp, #16]
 8008e18:	b333      	cbz	r3, 8008e68 <_strtod_l+0xb38>
 8008e1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e1c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008e20:	d822      	bhi.n	8008e68 <_strtod_l+0xb38>
 8008e22:	a331      	add	r3, pc, #196	; (adr r3, 8008ee8 <_strtod_l+0xbb8>)
 8008e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e28:	4630      	mov	r0, r6
 8008e2a:	4639      	mov	r1, r7
 8008e2c:	f7f7 fe68 	bl	8000b00 <__aeabi_dcmple>
 8008e30:	b1a0      	cbz	r0, 8008e5c <_strtod_l+0xb2c>
 8008e32:	4639      	mov	r1, r7
 8008e34:	4630      	mov	r0, r6
 8008e36:	f7f7 febf 	bl	8000bb8 <__aeabi_d2uiz>
 8008e3a:	2801      	cmp	r0, #1
 8008e3c:	bf38      	it	cc
 8008e3e:	2001      	movcc	r0, #1
 8008e40:	f7f7 fb68 	bl	8000514 <__aeabi_ui2d>
 8008e44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e46:	4606      	mov	r6, r0
 8008e48:	460f      	mov	r7, r1
 8008e4a:	bb23      	cbnz	r3, 8008e96 <_strtod_l+0xb66>
 8008e4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e50:	9010      	str	r0, [sp, #64]	; 0x40
 8008e52:	9311      	str	r3, [sp, #68]	; 0x44
 8008e54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e58:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008e5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e60:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008e64:	1a9b      	subs	r3, r3, r2
 8008e66:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e68:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008e6c:	eeb0 0a48 	vmov.f32	s0, s16
 8008e70:	eef0 0a68 	vmov.f32	s1, s17
 8008e74:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008e78:	f7ff f8fc 	bl	8008074 <__ulp>
 8008e7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008e80:	ec53 2b10 	vmov	r2, r3, d0
 8008e84:	f7f7 fbc0 	bl	8000608 <__aeabi_dmul>
 8008e88:	ec53 2b18 	vmov	r2, r3, d8
 8008e8c:	f7f7 fa06 	bl	800029c <__adddf3>
 8008e90:	4680      	mov	r8, r0
 8008e92:	4689      	mov	r9, r1
 8008e94:	e78d      	b.n	8008db2 <_strtod_l+0xa82>
 8008e96:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008e9a:	e7db      	b.n	8008e54 <_strtod_l+0xb24>
 8008e9c:	a314      	add	r3, pc, #80	; (adr r3, 8008ef0 <_strtod_l+0xbc0>)
 8008e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea2:	f7f7 fe23 	bl	8000aec <__aeabi_dcmplt>
 8008ea6:	e7b3      	b.n	8008e10 <_strtod_l+0xae0>
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	930a      	str	r3, [sp, #40]	; 0x28
 8008eac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008eae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008eb0:	6013      	str	r3, [r2, #0]
 8008eb2:	f7ff ba7c 	b.w	80083ae <_strtod_l+0x7e>
 8008eb6:	2a65      	cmp	r2, #101	; 0x65
 8008eb8:	f43f ab75 	beq.w	80085a6 <_strtod_l+0x276>
 8008ebc:	2a45      	cmp	r2, #69	; 0x45
 8008ebe:	f43f ab72 	beq.w	80085a6 <_strtod_l+0x276>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	f7ff bbaa 	b.w	800861c <_strtod_l+0x2ec>
 8008ec8:	00000000 	.word	0x00000000
 8008ecc:	bff00000 	.word	0xbff00000
 8008ed0:	00000000 	.word	0x00000000
 8008ed4:	3ff00000 	.word	0x3ff00000
 8008ed8:	94a03595 	.word	0x94a03595
 8008edc:	3fdfffff 	.word	0x3fdfffff
 8008ee0:	35afe535 	.word	0x35afe535
 8008ee4:	3fe00000 	.word	0x3fe00000
 8008ee8:	ffc00000 	.word	0xffc00000
 8008eec:	41dfffff 	.word	0x41dfffff
 8008ef0:	94a03595 	.word	0x94a03595
 8008ef4:	3fcfffff 	.word	0x3fcfffff
 8008ef8:	3ff00000 	.word	0x3ff00000
 8008efc:	3fe00000 	.word	0x3fe00000
 8008f00:	7ff00000 	.word	0x7ff00000
 8008f04:	7fe00000 	.word	0x7fe00000
 8008f08:	7c9fffff 	.word	0x7c9fffff
 8008f0c:	7fefffff 	.word	0x7fefffff

08008f10 <_strtod_r>:
 8008f10:	4b01      	ldr	r3, [pc, #4]	; (8008f18 <_strtod_r+0x8>)
 8008f12:	f7ff ba0d 	b.w	8008330 <_strtod_l>
 8008f16:	bf00      	nop
 8008f18:	20000068 	.word	0x20000068

08008f1c <_strtol_l.constprop.0>:
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f22:	d001      	beq.n	8008f28 <_strtol_l.constprop.0+0xc>
 8008f24:	2b24      	cmp	r3, #36	; 0x24
 8008f26:	d906      	bls.n	8008f36 <_strtol_l.constprop.0+0x1a>
 8008f28:	f7fd fd8a 	bl	8006a40 <__errno>
 8008f2c:	2316      	movs	r3, #22
 8008f2e:	6003      	str	r3, [r0, #0]
 8008f30:	2000      	movs	r0, #0
 8008f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f36:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800901c <_strtol_l.constprop.0+0x100>
 8008f3a:	460d      	mov	r5, r1
 8008f3c:	462e      	mov	r6, r5
 8008f3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f42:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008f46:	f017 0708 	ands.w	r7, r7, #8
 8008f4a:	d1f7      	bne.n	8008f3c <_strtol_l.constprop.0+0x20>
 8008f4c:	2c2d      	cmp	r4, #45	; 0x2d
 8008f4e:	d132      	bne.n	8008fb6 <_strtol_l.constprop.0+0x9a>
 8008f50:	782c      	ldrb	r4, [r5, #0]
 8008f52:	2701      	movs	r7, #1
 8008f54:	1cb5      	adds	r5, r6, #2
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d05b      	beq.n	8009012 <_strtol_l.constprop.0+0xf6>
 8008f5a:	2b10      	cmp	r3, #16
 8008f5c:	d109      	bne.n	8008f72 <_strtol_l.constprop.0+0x56>
 8008f5e:	2c30      	cmp	r4, #48	; 0x30
 8008f60:	d107      	bne.n	8008f72 <_strtol_l.constprop.0+0x56>
 8008f62:	782c      	ldrb	r4, [r5, #0]
 8008f64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008f68:	2c58      	cmp	r4, #88	; 0x58
 8008f6a:	d14d      	bne.n	8009008 <_strtol_l.constprop.0+0xec>
 8008f6c:	786c      	ldrb	r4, [r5, #1]
 8008f6e:	2310      	movs	r3, #16
 8008f70:	3502      	adds	r5, #2
 8008f72:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008f76:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f7a:	f04f 0e00 	mov.w	lr, #0
 8008f7e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008f82:	4676      	mov	r6, lr
 8008f84:	fb03 8a19 	mls	sl, r3, r9, r8
 8008f88:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008f8c:	f1bc 0f09 	cmp.w	ip, #9
 8008f90:	d816      	bhi.n	8008fc0 <_strtol_l.constprop.0+0xa4>
 8008f92:	4664      	mov	r4, ip
 8008f94:	42a3      	cmp	r3, r4
 8008f96:	dd24      	ble.n	8008fe2 <_strtol_l.constprop.0+0xc6>
 8008f98:	f1be 3fff 	cmp.w	lr, #4294967295
 8008f9c:	d008      	beq.n	8008fb0 <_strtol_l.constprop.0+0x94>
 8008f9e:	45b1      	cmp	r9, r6
 8008fa0:	d31c      	bcc.n	8008fdc <_strtol_l.constprop.0+0xc0>
 8008fa2:	d101      	bne.n	8008fa8 <_strtol_l.constprop.0+0x8c>
 8008fa4:	45a2      	cmp	sl, r4
 8008fa6:	db19      	blt.n	8008fdc <_strtol_l.constprop.0+0xc0>
 8008fa8:	fb06 4603 	mla	r6, r6, r3, r4
 8008fac:	f04f 0e01 	mov.w	lr, #1
 8008fb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fb4:	e7e8      	b.n	8008f88 <_strtol_l.constprop.0+0x6c>
 8008fb6:	2c2b      	cmp	r4, #43	; 0x2b
 8008fb8:	bf04      	itt	eq
 8008fba:	782c      	ldrbeq	r4, [r5, #0]
 8008fbc:	1cb5      	addeq	r5, r6, #2
 8008fbe:	e7ca      	b.n	8008f56 <_strtol_l.constprop.0+0x3a>
 8008fc0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008fc4:	f1bc 0f19 	cmp.w	ip, #25
 8008fc8:	d801      	bhi.n	8008fce <_strtol_l.constprop.0+0xb2>
 8008fca:	3c37      	subs	r4, #55	; 0x37
 8008fcc:	e7e2      	b.n	8008f94 <_strtol_l.constprop.0+0x78>
 8008fce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008fd2:	f1bc 0f19 	cmp.w	ip, #25
 8008fd6:	d804      	bhi.n	8008fe2 <_strtol_l.constprop.0+0xc6>
 8008fd8:	3c57      	subs	r4, #87	; 0x57
 8008fda:	e7db      	b.n	8008f94 <_strtol_l.constprop.0+0x78>
 8008fdc:	f04f 3eff 	mov.w	lr, #4294967295
 8008fe0:	e7e6      	b.n	8008fb0 <_strtol_l.constprop.0+0x94>
 8008fe2:	f1be 3fff 	cmp.w	lr, #4294967295
 8008fe6:	d105      	bne.n	8008ff4 <_strtol_l.constprop.0+0xd8>
 8008fe8:	2322      	movs	r3, #34	; 0x22
 8008fea:	6003      	str	r3, [r0, #0]
 8008fec:	4646      	mov	r6, r8
 8008fee:	b942      	cbnz	r2, 8009002 <_strtol_l.constprop.0+0xe6>
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	e79e      	b.n	8008f32 <_strtol_l.constprop.0+0x16>
 8008ff4:	b107      	cbz	r7, 8008ff8 <_strtol_l.constprop.0+0xdc>
 8008ff6:	4276      	negs	r6, r6
 8008ff8:	2a00      	cmp	r2, #0
 8008ffa:	d0f9      	beq.n	8008ff0 <_strtol_l.constprop.0+0xd4>
 8008ffc:	f1be 0f00 	cmp.w	lr, #0
 8009000:	d000      	beq.n	8009004 <_strtol_l.constprop.0+0xe8>
 8009002:	1e69      	subs	r1, r5, #1
 8009004:	6011      	str	r1, [r2, #0]
 8009006:	e7f3      	b.n	8008ff0 <_strtol_l.constprop.0+0xd4>
 8009008:	2430      	movs	r4, #48	; 0x30
 800900a:	2b00      	cmp	r3, #0
 800900c:	d1b1      	bne.n	8008f72 <_strtol_l.constprop.0+0x56>
 800900e:	2308      	movs	r3, #8
 8009010:	e7af      	b.n	8008f72 <_strtol_l.constprop.0+0x56>
 8009012:	2c30      	cmp	r4, #48	; 0x30
 8009014:	d0a5      	beq.n	8008f62 <_strtol_l.constprop.0+0x46>
 8009016:	230a      	movs	r3, #10
 8009018:	e7ab      	b.n	8008f72 <_strtol_l.constprop.0+0x56>
 800901a:	bf00      	nop
 800901c:	0800a421 	.word	0x0800a421

08009020 <_strtol_r>:
 8009020:	f7ff bf7c 	b.w	8008f1c <_strtol_l.constprop.0>

08009024 <__ssputs_r>:
 8009024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009028:	688e      	ldr	r6, [r1, #8]
 800902a:	461f      	mov	r7, r3
 800902c:	42be      	cmp	r6, r7
 800902e:	680b      	ldr	r3, [r1, #0]
 8009030:	4682      	mov	sl, r0
 8009032:	460c      	mov	r4, r1
 8009034:	4690      	mov	r8, r2
 8009036:	d82c      	bhi.n	8009092 <__ssputs_r+0x6e>
 8009038:	898a      	ldrh	r2, [r1, #12]
 800903a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800903e:	d026      	beq.n	800908e <__ssputs_r+0x6a>
 8009040:	6965      	ldr	r5, [r4, #20]
 8009042:	6909      	ldr	r1, [r1, #16]
 8009044:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009048:	eba3 0901 	sub.w	r9, r3, r1
 800904c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009050:	1c7b      	adds	r3, r7, #1
 8009052:	444b      	add	r3, r9
 8009054:	106d      	asrs	r5, r5, #1
 8009056:	429d      	cmp	r5, r3
 8009058:	bf38      	it	cc
 800905a:	461d      	movcc	r5, r3
 800905c:	0553      	lsls	r3, r2, #21
 800905e:	d527      	bpl.n	80090b0 <__ssputs_r+0x8c>
 8009060:	4629      	mov	r1, r5
 8009062:	f7fe fc0f 	bl	8007884 <_malloc_r>
 8009066:	4606      	mov	r6, r0
 8009068:	b360      	cbz	r0, 80090c4 <__ssputs_r+0xa0>
 800906a:	6921      	ldr	r1, [r4, #16]
 800906c:	464a      	mov	r2, r9
 800906e:	f000 fbe3 	bl	8009838 <memcpy>
 8009072:	89a3      	ldrh	r3, [r4, #12]
 8009074:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800907c:	81a3      	strh	r3, [r4, #12]
 800907e:	6126      	str	r6, [r4, #16]
 8009080:	6165      	str	r5, [r4, #20]
 8009082:	444e      	add	r6, r9
 8009084:	eba5 0509 	sub.w	r5, r5, r9
 8009088:	6026      	str	r6, [r4, #0]
 800908a:	60a5      	str	r5, [r4, #8]
 800908c:	463e      	mov	r6, r7
 800908e:	42be      	cmp	r6, r7
 8009090:	d900      	bls.n	8009094 <__ssputs_r+0x70>
 8009092:	463e      	mov	r6, r7
 8009094:	6820      	ldr	r0, [r4, #0]
 8009096:	4632      	mov	r2, r6
 8009098:	4641      	mov	r1, r8
 800909a:	f000 fb6f 	bl	800977c <memmove>
 800909e:	68a3      	ldr	r3, [r4, #8]
 80090a0:	1b9b      	subs	r3, r3, r6
 80090a2:	60a3      	str	r3, [r4, #8]
 80090a4:	6823      	ldr	r3, [r4, #0]
 80090a6:	4433      	add	r3, r6
 80090a8:	6023      	str	r3, [r4, #0]
 80090aa:	2000      	movs	r0, #0
 80090ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090b0:	462a      	mov	r2, r5
 80090b2:	f000 ff76 	bl	8009fa2 <_realloc_r>
 80090b6:	4606      	mov	r6, r0
 80090b8:	2800      	cmp	r0, #0
 80090ba:	d1e0      	bne.n	800907e <__ssputs_r+0x5a>
 80090bc:	6921      	ldr	r1, [r4, #16]
 80090be:	4650      	mov	r0, sl
 80090c0:	f7fe fb6c 	bl	800779c <_free_r>
 80090c4:	230c      	movs	r3, #12
 80090c6:	f8ca 3000 	str.w	r3, [sl]
 80090ca:	89a3      	ldrh	r3, [r4, #12]
 80090cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090d0:	81a3      	strh	r3, [r4, #12]
 80090d2:	f04f 30ff 	mov.w	r0, #4294967295
 80090d6:	e7e9      	b.n	80090ac <__ssputs_r+0x88>

080090d8 <_svfiprintf_r>:
 80090d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090dc:	4698      	mov	r8, r3
 80090de:	898b      	ldrh	r3, [r1, #12]
 80090e0:	061b      	lsls	r3, r3, #24
 80090e2:	b09d      	sub	sp, #116	; 0x74
 80090e4:	4607      	mov	r7, r0
 80090e6:	460d      	mov	r5, r1
 80090e8:	4614      	mov	r4, r2
 80090ea:	d50e      	bpl.n	800910a <_svfiprintf_r+0x32>
 80090ec:	690b      	ldr	r3, [r1, #16]
 80090ee:	b963      	cbnz	r3, 800910a <_svfiprintf_r+0x32>
 80090f0:	2140      	movs	r1, #64	; 0x40
 80090f2:	f7fe fbc7 	bl	8007884 <_malloc_r>
 80090f6:	6028      	str	r0, [r5, #0]
 80090f8:	6128      	str	r0, [r5, #16]
 80090fa:	b920      	cbnz	r0, 8009106 <_svfiprintf_r+0x2e>
 80090fc:	230c      	movs	r3, #12
 80090fe:	603b      	str	r3, [r7, #0]
 8009100:	f04f 30ff 	mov.w	r0, #4294967295
 8009104:	e0d0      	b.n	80092a8 <_svfiprintf_r+0x1d0>
 8009106:	2340      	movs	r3, #64	; 0x40
 8009108:	616b      	str	r3, [r5, #20]
 800910a:	2300      	movs	r3, #0
 800910c:	9309      	str	r3, [sp, #36]	; 0x24
 800910e:	2320      	movs	r3, #32
 8009110:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009114:	f8cd 800c 	str.w	r8, [sp, #12]
 8009118:	2330      	movs	r3, #48	; 0x30
 800911a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80092c0 <_svfiprintf_r+0x1e8>
 800911e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009122:	f04f 0901 	mov.w	r9, #1
 8009126:	4623      	mov	r3, r4
 8009128:	469a      	mov	sl, r3
 800912a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800912e:	b10a      	cbz	r2, 8009134 <_svfiprintf_r+0x5c>
 8009130:	2a25      	cmp	r2, #37	; 0x25
 8009132:	d1f9      	bne.n	8009128 <_svfiprintf_r+0x50>
 8009134:	ebba 0b04 	subs.w	fp, sl, r4
 8009138:	d00b      	beq.n	8009152 <_svfiprintf_r+0x7a>
 800913a:	465b      	mov	r3, fp
 800913c:	4622      	mov	r2, r4
 800913e:	4629      	mov	r1, r5
 8009140:	4638      	mov	r0, r7
 8009142:	f7ff ff6f 	bl	8009024 <__ssputs_r>
 8009146:	3001      	adds	r0, #1
 8009148:	f000 80a9 	beq.w	800929e <_svfiprintf_r+0x1c6>
 800914c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800914e:	445a      	add	r2, fp
 8009150:	9209      	str	r2, [sp, #36]	; 0x24
 8009152:	f89a 3000 	ldrb.w	r3, [sl]
 8009156:	2b00      	cmp	r3, #0
 8009158:	f000 80a1 	beq.w	800929e <_svfiprintf_r+0x1c6>
 800915c:	2300      	movs	r3, #0
 800915e:	f04f 32ff 	mov.w	r2, #4294967295
 8009162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009166:	f10a 0a01 	add.w	sl, sl, #1
 800916a:	9304      	str	r3, [sp, #16]
 800916c:	9307      	str	r3, [sp, #28]
 800916e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009172:	931a      	str	r3, [sp, #104]	; 0x68
 8009174:	4654      	mov	r4, sl
 8009176:	2205      	movs	r2, #5
 8009178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800917c:	4850      	ldr	r0, [pc, #320]	; (80092c0 <_svfiprintf_r+0x1e8>)
 800917e:	f7f7 f82f 	bl	80001e0 <memchr>
 8009182:	9a04      	ldr	r2, [sp, #16]
 8009184:	b9d8      	cbnz	r0, 80091be <_svfiprintf_r+0xe6>
 8009186:	06d0      	lsls	r0, r2, #27
 8009188:	bf44      	itt	mi
 800918a:	2320      	movmi	r3, #32
 800918c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009190:	0711      	lsls	r1, r2, #28
 8009192:	bf44      	itt	mi
 8009194:	232b      	movmi	r3, #43	; 0x2b
 8009196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800919a:	f89a 3000 	ldrb.w	r3, [sl]
 800919e:	2b2a      	cmp	r3, #42	; 0x2a
 80091a0:	d015      	beq.n	80091ce <_svfiprintf_r+0xf6>
 80091a2:	9a07      	ldr	r2, [sp, #28]
 80091a4:	4654      	mov	r4, sl
 80091a6:	2000      	movs	r0, #0
 80091a8:	f04f 0c0a 	mov.w	ip, #10
 80091ac:	4621      	mov	r1, r4
 80091ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091b2:	3b30      	subs	r3, #48	; 0x30
 80091b4:	2b09      	cmp	r3, #9
 80091b6:	d94d      	bls.n	8009254 <_svfiprintf_r+0x17c>
 80091b8:	b1b0      	cbz	r0, 80091e8 <_svfiprintf_r+0x110>
 80091ba:	9207      	str	r2, [sp, #28]
 80091bc:	e014      	b.n	80091e8 <_svfiprintf_r+0x110>
 80091be:	eba0 0308 	sub.w	r3, r0, r8
 80091c2:	fa09 f303 	lsl.w	r3, r9, r3
 80091c6:	4313      	orrs	r3, r2
 80091c8:	9304      	str	r3, [sp, #16]
 80091ca:	46a2      	mov	sl, r4
 80091cc:	e7d2      	b.n	8009174 <_svfiprintf_r+0x9c>
 80091ce:	9b03      	ldr	r3, [sp, #12]
 80091d0:	1d19      	adds	r1, r3, #4
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	9103      	str	r1, [sp, #12]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	bfbb      	ittet	lt
 80091da:	425b      	neglt	r3, r3
 80091dc:	f042 0202 	orrlt.w	r2, r2, #2
 80091e0:	9307      	strge	r3, [sp, #28]
 80091e2:	9307      	strlt	r3, [sp, #28]
 80091e4:	bfb8      	it	lt
 80091e6:	9204      	strlt	r2, [sp, #16]
 80091e8:	7823      	ldrb	r3, [r4, #0]
 80091ea:	2b2e      	cmp	r3, #46	; 0x2e
 80091ec:	d10c      	bne.n	8009208 <_svfiprintf_r+0x130>
 80091ee:	7863      	ldrb	r3, [r4, #1]
 80091f0:	2b2a      	cmp	r3, #42	; 0x2a
 80091f2:	d134      	bne.n	800925e <_svfiprintf_r+0x186>
 80091f4:	9b03      	ldr	r3, [sp, #12]
 80091f6:	1d1a      	adds	r2, r3, #4
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	9203      	str	r2, [sp, #12]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	bfb8      	it	lt
 8009200:	f04f 33ff 	movlt.w	r3, #4294967295
 8009204:	3402      	adds	r4, #2
 8009206:	9305      	str	r3, [sp, #20]
 8009208:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80092d0 <_svfiprintf_r+0x1f8>
 800920c:	7821      	ldrb	r1, [r4, #0]
 800920e:	2203      	movs	r2, #3
 8009210:	4650      	mov	r0, sl
 8009212:	f7f6 ffe5 	bl	80001e0 <memchr>
 8009216:	b138      	cbz	r0, 8009228 <_svfiprintf_r+0x150>
 8009218:	9b04      	ldr	r3, [sp, #16]
 800921a:	eba0 000a 	sub.w	r0, r0, sl
 800921e:	2240      	movs	r2, #64	; 0x40
 8009220:	4082      	lsls	r2, r0
 8009222:	4313      	orrs	r3, r2
 8009224:	3401      	adds	r4, #1
 8009226:	9304      	str	r3, [sp, #16]
 8009228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800922c:	4825      	ldr	r0, [pc, #148]	; (80092c4 <_svfiprintf_r+0x1ec>)
 800922e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009232:	2206      	movs	r2, #6
 8009234:	f7f6 ffd4 	bl	80001e0 <memchr>
 8009238:	2800      	cmp	r0, #0
 800923a:	d038      	beq.n	80092ae <_svfiprintf_r+0x1d6>
 800923c:	4b22      	ldr	r3, [pc, #136]	; (80092c8 <_svfiprintf_r+0x1f0>)
 800923e:	bb1b      	cbnz	r3, 8009288 <_svfiprintf_r+0x1b0>
 8009240:	9b03      	ldr	r3, [sp, #12]
 8009242:	3307      	adds	r3, #7
 8009244:	f023 0307 	bic.w	r3, r3, #7
 8009248:	3308      	adds	r3, #8
 800924a:	9303      	str	r3, [sp, #12]
 800924c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800924e:	4433      	add	r3, r6
 8009250:	9309      	str	r3, [sp, #36]	; 0x24
 8009252:	e768      	b.n	8009126 <_svfiprintf_r+0x4e>
 8009254:	fb0c 3202 	mla	r2, ip, r2, r3
 8009258:	460c      	mov	r4, r1
 800925a:	2001      	movs	r0, #1
 800925c:	e7a6      	b.n	80091ac <_svfiprintf_r+0xd4>
 800925e:	2300      	movs	r3, #0
 8009260:	3401      	adds	r4, #1
 8009262:	9305      	str	r3, [sp, #20]
 8009264:	4619      	mov	r1, r3
 8009266:	f04f 0c0a 	mov.w	ip, #10
 800926a:	4620      	mov	r0, r4
 800926c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009270:	3a30      	subs	r2, #48	; 0x30
 8009272:	2a09      	cmp	r2, #9
 8009274:	d903      	bls.n	800927e <_svfiprintf_r+0x1a6>
 8009276:	2b00      	cmp	r3, #0
 8009278:	d0c6      	beq.n	8009208 <_svfiprintf_r+0x130>
 800927a:	9105      	str	r1, [sp, #20]
 800927c:	e7c4      	b.n	8009208 <_svfiprintf_r+0x130>
 800927e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009282:	4604      	mov	r4, r0
 8009284:	2301      	movs	r3, #1
 8009286:	e7f0      	b.n	800926a <_svfiprintf_r+0x192>
 8009288:	ab03      	add	r3, sp, #12
 800928a:	9300      	str	r3, [sp, #0]
 800928c:	462a      	mov	r2, r5
 800928e:	4b0f      	ldr	r3, [pc, #60]	; (80092cc <_svfiprintf_r+0x1f4>)
 8009290:	a904      	add	r1, sp, #16
 8009292:	4638      	mov	r0, r7
 8009294:	f7fc fb84 	bl	80059a0 <_printf_float>
 8009298:	1c42      	adds	r2, r0, #1
 800929a:	4606      	mov	r6, r0
 800929c:	d1d6      	bne.n	800924c <_svfiprintf_r+0x174>
 800929e:	89ab      	ldrh	r3, [r5, #12]
 80092a0:	065b      	lsls	r3, r3, #25
 80092a2:	f53f af2d 	bmi.w	8009100 <_svfiprintf_r+0x28>
 80092a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092a8:	b01d      	add	sp, #116	; 0x74
 80092aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ae:	ab03      	add	r3, sp, #12
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	462a      	mov	r2, r5
 80092b4:	4b05      	ldr	r3, [pc, #20]	; (80092cc <_svfiprintf_r+0x1f4>)
 80092b6:	a904      	add	r1, sp, #16
 80092b8:	4638      	mov	r0, r7
 80092ba:	f7fc fe15 	bl	8005ee8 <_printf_i>
 80092be:	e7eb      	b.n	8009298 <_svfiprintf_r+0x1c0>
 80092c0:	0800a521 	.word	0x0800a521
 80092c4:	0800a52b 	.word	0x0800a52b
 80092c8:	080059a1 	.word	0x080059a1
 80092cc:	08009025 	.word	0x08009025
 80092d0:	0800a527 	.word	0x0800a527

080092d4 <__sfputc_r>:
 80092d4:	6893      	ldr	r3, [r2, #8]
 80092d6:	3b01      	subs	r3, #1
 80092d8:	2b00      	cmp	r3, #0
 80092da:	b410      	push	{r4}
 80092dc:	6093      	str	r3, [r2, #8]
 80092de:	da08      	bge.n	80092f2 <__sfputc_r+0x1e>
 80092e0:	6994      	ldr	r4, [r2, #24]
 80092e2:	42a3      	cmp	r3, r4
 80092e4:	db01      	blt.n	80092ea <__sfputc_r+0x16>
 80092e6:	290a      	cmp	r1, #10
 80092e8:	d103      	bne.n	80092f2 <__sfputc_r+0x1e>
 80092ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092ee:	f7fd bac0 	b.w	8006872 <__swbuf_r>
 80092f2:	6813      	ldr	r3, [r2, #0]
 80092f4:	1c58      	adds	r0, r3, #1
 80092f6:	6010      	str	r0, [r2, #0]
 80092f8:	7019      	strb	r1, [r3, #0]
 80092fa:	4608      	mov	r0, r1
 80092fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009300:	4770      	bx	lr

08009302 <__sfputs_r>:
 8009302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009304:	4606      	mov	r6, r0
 8009306:	460f      	mov	r7, r1
 8009308:	4614      	mov	r4, r2
 800930a:	18d5      	adds	r5, r2, r3
 800930c:	42ac      	cmp	r4, r5
 800930e:	d101      	bne.n	8009314 <__sfputs_r+0x12>
 8009310:	2000      	movs	r0, #0
 8009312:	e007      	b.n	8009324 <__sfputs_r+0x22>
 8009314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009318:	463a      	mov	r2, r7
 800931a:	4630      	mov	r0, r6
 800931c:	f7ff ffda 	bl	80092d4 <__sfputc_r>
 8009320:	1c43      	adds	r3, r0, #1
 8009322:	d1f3      	bne.n	800930c <__sfputs_r+0xa>
 8009324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009328 <_vfiprintf_r>:
 8009328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800932c:	460d      	mov	r5, r1
 800932e:	b09d      	sub	sp, #116	; 0x74
 8009330:	4614      	mov	r4, r2
 8009332:	4698      	mov	r8, r3
 8009334:	4606      	mov	r6, r0
 8009336:	b118      	cbz	r0, 8009340 <_vfiprintf_r+0x18>
 8009338:	6a03      	ldr	r3, [r0, #32]
 800933a:	b90b      	cbnz	r3, 8009340 <_vfiprintf_r+0x18>
 800933c:	f7fd f992 	bl	8006664 <__sinit>
 8009340:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009342:	07d9      	lsls	r1, r3, #31
 8009344:	d405      	bmi.n	8009352 <_vfiprintf_r+0x2a>
 8009346:	89ab      	ldrh	r3, [r5, #12]
 8009348:	059a      	lsls	r2, r3, #22
 800934a:	d402      	bmi.n	8009352 <_vfiprintf_r+0x2a>
 800934c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800934e:	f7fd fba2 	bl	8006a96 <__retarget_lock_acquire_recursive>
 8009352:	89ab      	ldrh	r3, [r5, #12]
 8009354:	071b      	lsls	r3, r3, #28
 8009356:	d501      	bpl.n	800935c <_vfiprintf_r+0x34>
 8009358:	692b      	ldr	r3, [r5, #16]
 800935a:	b99b      	cbnz	r3, 8009384 <_vfiprintf_r+0x5c>
 800935c:	4629      	mov	r1, r5
 800935e:	4630      	mov	r0, r6
 8009360:	f7fd fac4 	bl	80068ec <__swsetup_r>
 8009364:	b170      	cbz	r0, 8009384 <_vfiprintf_r+0x5c>
 8009366:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009368:	07dc      	lsls	r4, r3, #31
 800936a:	d504      	bpl.n	8009376 <_vfiprintf_r+0x4e>
 800936c:	f04f 30ff 	mov.w	r0, #4294967295
 8009370:	b01d      	add	sp, #116	; 0x74
 8009372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009376:	89ab      	ldrh	r3, [r5, #12]
 8009378:	0598      	lsls	r0, r3, #22
 800937a:	d4f7      	bmi.n	800936c <_vfiprintf_r+0x44>
 800937c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800937e:	f7fd fb8b 	bl	8006a98 <__retarget_lock_release_recursive>
 8009382:	e7f3      	b.n	800936c <_vfiprintf_r+0x44>
 8009384:	2300      	movs	r3, #0
 8009386:	9309      	str	r3, [sp, #36]	; 0x24
 8009388:	2320      	movs	r3, #32
 800938a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800938e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009392:	2330      	movs	r3, #48	; 0x30
 8009394:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009548 <_vfiprintf_r+0x220>
 8009398:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800939c:	f04f 0901 	mov.w	r9, #1
 80093a0:	4623      	mov	r3, r4
 80093a2:	469a      	mov	sl, r3
 80093a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093a8:	b10a      	cbz	r2, 80093ae <_vfiprintf_r+0x86>
 80093aa:	2a25      	cmp	r2, #37	; 0x25
 80093ac:	d1f9      	bne.n	80093a2 <_vfiprintf_r+0x7a>
 80093ae:	ebba 0b04 	subs.w	fp, sl, r4
 80093b2:	d00b      	beq.n	80093cc <_vfiprintf_r+0xa4>
 80093b4:	465b      	mov	r3, fp
 80093b6:	4622      	mov	r2, r4
 80093b8:	4629      	mov	r1, r5
 80093ba:	4630      	mov	r0, r6
 80093bc:	f7ff ffa1 	bl	8009302 <__sfputs_r>
 80093c0:	3001      	adds	r0, #1
 80093c2:	f000 80a9 	beq.w	8009518 <_vfiprintf_r+0x1f0>
 80093c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093c8:	445a      	add	r2, fp
 80093ca:	9209      	str	r2, [sp, #36]	; 0x24
 80093cc:	f89a 3000 	ldrb.w	r3, [sl]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f000 80a1 	beq.w	8009518 <_vfiprintf_r+0x1f0>
 80093d6:	2300      	movs	r3, #0
 80093d8:	f04f 32ff 	mov.w	r2, #4294967295
 80093dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093e0:	f10a 0a01 	add.w	sl, sl, #1
 80093e4:	9304      	str	r3, [sp, #16]
 80093e6:	9307      	str	r3, [sp, #28]
 80093e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093ec:	931a      	str	r3, [sp, #104]	; 0x68
 80093ee:	4654      	mov	r4, sl
 80093f0:	2205      	movs	r2, #5
 80093f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093f6:	4854      	ldr	r0, [pc, #336]	; (8009548 <_vfiprintf_r+0x220>)
 80093f8:	f7f6 fef2 	bl	80001e0 <memchr>
 80093fc:	9a04      	ldr	r2, [sp, #16]
 80093fe:	b9d8      	cbnz	r0, 8009438 <_vfiprintf_r+0x110>
 8009400:	06d1      	lsls	r1, r2, #27
 8009402:	bf44      	itt	mi
 8009404:	2320      	movmi	r3, #32
 8009406:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800940a:	0713      	lsls	r3, r2, #28
 800940c:	bf44      	itt	mi
 800940e:	232b      	movmi	r3, #43	; 0x2b
 8009410:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009414:	f89a 3000 	ldrb.w	r3, [sl]
 8009418:	2b2a      	cmp	r3, #42	; 0x2a
 800941a:	d015      	beq.n	8009448 <_vfiprintf_r+0x120>
 800941c:	9a07      	ldr	r2, [sp, #28]
 800941e:	4654      	mov	r4, sl
 8009420:	2000      	movs	r0, #0
 8009422:	f04f 0c0a 	mov.w	ip, #10
 8009426:	4621      	mov	r1, r4
 8009428:	f811 3b01 	ldrb.w	r3, [r1], #1
 800942c:	3b30      	subs	r3, #48	; 0x30
 800942e:	2b09      	cmp	r3, #9
 8009430:	d94d      	bls.n	80094ce <_vfiprintf_r+0x1a6>
 8009432:	b1b0      	cbz	r0, 8009462 <_vfiprintf_r+0x13a>
 8009434:	9207      	str	r2, [sp, #28]
 8009436:	e014      	b.n	8009462 <_vfiprintf_r+0x13a>
 8009438:	eba0 0308 	sub.w	r3, r0, r8
 800943c:	fa09 f303 	lsl.w	r3, r9, r3
 8009440:	4313      	orrs	r3, r2
 8009442:	9304      	str	r3, [sp, #16]
 8009444:	46a2      	mov	sl, r4
 8009446:	e7d2      	b.n	80093ee <_vfiprintf_r+0xc6>
 8009448:	9b03      	ldr	r3, [sp, #12]
 800944a:	1d19      	adds	r1, r3, #4
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	9103      	str	r1, [sp, #12]
 8009450:	2b00      	cmp	r3, #0
 8009452:	bfbb      	ittet	lt
 8009454:	425b      	neglt	r3, r3
 8009456:	f042 0202 	orrlt.w	r2, r2, #2
 800945a:	9307      	strge	r3, [sp, #28]
 800945c:	9307      	strlt	r3, [sp, #28]
 800945e:	bfb8      	it	lt
 8009460:	9204      	strlt	r2, [sp, #16]
 8009462:	7823      	ldrb	r3, [r4, #0]
 8009464:	2b2e      	cmp	r3, #46	; 0x2e
 8009466:	d10c      	bne.n	8009482 <_vfiprintf_r+0x15a>
 8009468:	7863      	ldrb	r3, [r4, #1]
 800946a:	2b2a      	cmp	r3, #42	; 0x2a
 800946c:	d134      	bne.n	80094d8 <_vfiprintf_r+0x1b0>
 800946e:	9b03      	ldr	r3, [sp, #12]
 8009470:	1d1a      	adds	r2, r3, #4
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	9203      	str	r2, [sp, #12]
 8009476:	2b00      	cmp	r3, #0
 8009478:	bfb8      	it	lt
 800947a:	f04f 33ff 	movlt.w	r3, #4294967295
 800947e:	3402      	adds	r4, #2
 8009480:	9305      	str	r3, [sp, #20]
 8009482:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009558 <_vfiprintf_r+0x230>
 8009486:	7821      	ldrb	r1, [r4, #0]
 8009488:	2203      	movs	r2, #3
 800948a:	4650      	mov	r0, sl
 800948c:	f7f6 fea8 	bl	80001e0 <memchr>
 8009490:	b138      	cbz	r0, 80094a2 <_vfiprintf_r+0x17a>
 8009492:	9b04      	ldr	r3, [sp, #16]
 8009494:	eba0 000a 	sub.w	r0, r0, sl
 8009498:	2240      	movs	r2, #64	; 0x40
 800949a:	4082      	lsls	r2, r0
 800949c:	4313      	orrs	r3, r2
 800949e:	3401      	adds	r4, #1
 80094a0:	9304      	str	r3, [sp, #16]
 80094a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094a6:	4829      	ldr	r0, [pc, #164]	; (800954c <_vfiprintf_r+0x224>)
 80094a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094ac:	2206      	movs	r2, #6
 80094ae:	f7f6 fe97 	bl	80001e0 <memchr>
 80094b2:	2800      	cmp	r0, #0
 80094b4:	d03f      	beq.n	8009536 <_vfiprintf_r+0x20e>
 80094b6:	4b26      	ldr	r3, [pc, #152]	; (8009550 <_vfiprintf_r+0x228>)
 80094b8:	bb1b      	cbnz	r3, 8009502 <_vfiprintf_r+0x1da>
 80094ba:	9b03      	ldr	r3, [sp, #12]
 80094bc:	3307      	adds	r3, #7
 80094be:	f023 0307 	bic.w	r3, r3, #7
 80094c2:	3308      	adds	r3, #8
 80094c4:	9303      	str	r3, [sp, #12]
 80094c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094c8:	443b      	add	r3, r7
 80094ca:	9309      	str	r3, [sp, #36]	; 0x24
 80094cc:	e768      	b.n	80093a0 <_vfiprintf_r+0x78>
 80094ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80094d2:	460c      	mov	r4, r1
 80094d4:	2001      	movs	r0, #1
 80094d6:	e7a6      	b.n	8009426 <_vfiprintf_r+0xfe>
 80094d8:	2300      	movs	r3, #0
 80094da:	3401      	adds	r4, #1
 80094dc:	9305      	str	r3, [sp, #20]
 80094de:	4619      	mov	r1, r3
 80094e0:	f04f 0c0a 	mov.w	ip, #10
 80094e4:	4620      	mov	r0, r4
 80094e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094ea:	3a30      	subs	r2, #48	; 0x30
 80094ec:	2a09      	cmp	r2, #9
 80094ee:	d903      	bls.n	80094f8 <_vfiprintf_r+0x1d0>
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d0c6      	beq.n	8009482 <_vfiprintf_r+0x15a>
 80094f4:	9105      	str	r1, [sp, #20]
 80094f6:	e7c4      	b.n	8009482 <_vfiprintf_r+0x15a>
 80094f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80094fc:	4604      	mov	r4, r0
 80094fe:	2301      	movs	r3, #1
 8009500:	e7f0      	b.n	80094e4 <_vfiprintf_r+0x1bc>
 8009502:	ab03      	add	r3, sp, #12
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	462a      	mov	r2, r5
 8009508:	4b12      	ldr	r3, [pc, #72]	; (8009554 <_vfiprintf_r+0x22c>)
 800950a:	a904      	add	r1, sp, #16
 800950c:	4630      	mov	r0, r6
 800950e:	f7fc fa47 	bl	80059a0 <_printf_float>
 8009512:	4607      	mov	r7, r0
 8009514:	1c78      	adds	r0, r7, #1
 8009516:	d1d6      	bne.n	80094c6 <_vfiprintf_r+0x19e>
 8009518:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800951a:	07d9      	lsls	r1, r3, #31
 800951c:	d405      	bmi.n	800952a <_vfiprintf_r+0x202>
 800951e:	89ab      	ldrh	r3, [r5, #12]
 8009520:	059a      	lsls	r2, r3, #22
 8009522:	d402      	bmi.n	800952a <_vfiprintf_r+0x202>
 8009524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009526:	f7fd fab7 	bl	8006a98 <__retarget_lock_release_recursive>
 800952a:	89ab      	ldrh	r3, [r5, #12]
 800952c:	065b      	lsls	r3, r3, #25
 800952e:	f53f af1d 	bmi.w	800936c <_vfiprintf_r+0x44>
 8009532:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009534:	e71c      	b.n	8009370 <_vfiprintf_r+0x48>
 8009536:	ab03      	add	r3, sp, #12
 8009538:	9300      	str	r3, [sp, #0]
 800953a:	462a      	mov	r2, r5
 800953c:	4b05      	ldr	r3, [pc, #20]	; (8009554 <_vfiprintf_r+0x22c>)
 800953e:	a904      	add	r1, sp, #16
 8009540:	4630      	mov	r0, r6
 8009542:	f7fc fcd1 	bl	8005ee8 <_printf_i>
 8009546:	e7e4      	b.n	8009512 <_vfiprintf_r+0x1ea>
 8009548:	0800a521 	.word	0x0800a521
 800954c:	0800a52b 	.word	0x0800a52b
 8009550:	080059a1 	.word	0x080059a1
 8009554:	08009303 	.word	0x08009303
 8009558:	0800a527 	.word	0x0800a527

0800955c <__sflush_r>:
 800955c:	898a      	ldrh	r2, [r1, #12]
 800955e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009562:	4605      	mov	r5, r0
 8009564:	0710      	lsls	r0, r2, #28
 8009566:	460c      	mov	r4, r1
 8009568:	d458      	bmi.n	800961c <__sflush_r+0xc0>
 800956a:	684b      	ldr	r3, [r1, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	dc05      	bgt.n	800957c <__sflush_r+0x20>
 8009570:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009572:	2b00      	cmp	r3, #0
 8009574:	dc02      	bgt.n	800957c <__sflush_r+0x20>
 8009576:	2000      	movs	r0, #0
 8009578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800957c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800957e:	2e00      	cmp	r6, #0
 8009580:	d0f9      	beq.n	8009576 <__sflush_r+0x1a>
 8009582:	2300      	movs	r3, #0
 8009584:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009588:	682f      	ldr	r7, [r5, #0]
 800958a:	6a21      	ldr	r1, [r4, #32]
 800958c:	602b      	str	r3, [r5, #0]
 800958e:	d032      	beq.n	80095f6 <__sflush_r+0x9a>
 8009590:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009592:	89a3      	ldrh	r3, [r4, #12]
 8009594:	075a      	lsls	r2, r3, #29
 8009596:	d505      	bpl.n	80095a4 <__sflush_r+0x48>
 8009598:	6863      	ldr	r3, [r4, #4]
 800959a:	1ac0      	subs	r0, r0, r3
 800959c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800959e:	b10b      	cbz	r3, 80095a4 <__sflush_r+0x48>
 80095a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095a2:	1ac0      	subs	r0, r0, r3
 80095a4:	2300      	movs	r3, #0
 80095a6:	4602      	mov	r2, r0
 80095a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095aa:	6a21      	ldr	r1, [r4, #32]
 80095ac:	4628      	mov	r0, r5
 80095ae:	47b0      	blx	r6
 80095b0:	1c43      	adds	r3, r0, #1
 80095b2:	89a3      	ldrh	r3, [r4, #12]
 80095b4:	d106      	bne.n	80095c4 <__sflush_r+0x68>
 80095b6:	6829      	ldr	r1, [r5, #0]
 80095b8:	291d      	cmp	r1, #29
 80095ba:	d82b      	bhi.n	8009614 <__sflush_r+0xb8>
 80095bc:	4a29      	ldr	r2, [pc, #164]	; (8009664 <__sflush_r+0x108>)
 80095be:	410a      	asrs	r2, r1
 80095c0:	07d6      	lsls	r6, r2, #31
 80095c2:	d427      	bmi.n	8009614 <__sflush_r+0xb8>
 80095c4:	2200      	movs	r2, #0
 80095c6:	6062      	str	r2, [r4, #4]
 80095c8:	04d9      	lsls	r1, r3, #19
 80095ca:	6922      	ldr	r2, [r4, #16]
 80095cc:	6022      	str	r2, [r4, #0]
 80095ce:	d504      	bpl.n	80095da <__sflush_r+0x7e>
 80095d0:	1c42      	adds	r2, r0, #1
 80095d2:	d101      	bne.n	80095d8 <__sflush_r+0x7c>
 80095d4:	682b      	ldr	r3, [r5, #0]
 80095d6:	b903      	cbnz	r3, 80095da <__sflush_r+0x7e>
 80095d8:	6560      	str	r0, [r4, #84]	; 0x54
 80095da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095dc:	602f      	str	r7, [r5, #0]
 80095de:	2900      	cmp	r1, #0
 80095e0:	d0c9      	beq.n	8009576 <__sflush_r+0x1a>
 80095e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095e6:	4299      	cmp	r1, r3
 80095e8:	d002      	beq.n	80095f0 <__sflush_r+0x94>
 80095ea:	4628      	mov	r0, r5
 80095ec:	f7fe f8d6 	bl	800779c <_free_r>
 80095f0:	2000      	movs	r0, #0
 80095f2:	6360      	str	r0, [r4, #52]	; 0x34
 80095f4:	e7c0      	b.n	8009578 <__sflush_r+0x1c>
 80095f6:	2301      	movs	r3, #1
 80095f8:	4628      	mov	r0, r5
 80095fa:	47b0      	blx	r6
 80095fc:	1c41      	adds	r1, r0, #1
 80095fe:	d1c8      	bne.n	8009592 <__sflush_r+0x36>
 8009600:	682b      	ldr	r3, [r5, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d0c5      	beq.n	8009592 <__sflush_r+0x36>
 8009606:	2b1d      	cmp	r3, #29
 8009608:	d001      	beq.n	800960e <__sflush_r+0xb2>
 800960a:	2b16      	cmp	r3, #22
 800960c:	d101      	bne.n	8009612 <__sflush_r+0xb6>
 800960e:	602f      	str	r7, [r5, #0]
 8009610:	e7b1      	b.n	8009576 <__sflush_r+0x1a>
 8009612:	89a3      	ldrh	r3, [r4, #12]
 8009614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009618:	81a3      	strh	r3, [r4, #12]
 800961a:	e7ad      	b.n	8009578 <__sflush_r+0x1c>
 800961c:	690f      	ldr	r7, [r1, #16]
 800961e:	2f00      	cmp	r7, #0
 8009620:	d0a9      	beq.n	8009576 <__sflush_r+0x1a>
 8009622:	0793      	lsls	r3, r2, #30
 8009624:	680e      	ldr	r6, [r1, #0]
 8009626:	bf08      	it	eq
 8009628:	694b      	ldreq	r3, [r1, #20]
 800962a:	600f      	str	r7, [r1, #0]
 800962c:	bf18      	it	ne
 800962e:	2300      	movne	r3, #0
 8009630:	eba6 0807 	sub.w	r8, r6, r7
 8009634:	608b      	str	r3, [r1, #8]
 8009636:	f1b8 0f00 	cmp.w	r8, #0
 800963a:	dd9c      	ble.n	8009576 <__sflush_r+0x1a>
 800963c:	6a21      	ldr	r1, [r4, #32]
 800963e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009640:	4643      	mov	r3, r8
 8009642:	463a      	mov	r2, r7
 8009644:	4628      	mov	r0, r5
 8009646:	47b0      	blx	r6
 8009648:	2800      	cmp	r0, #0
 800964a:	dc06      	bgt.n	800965a <__sflush_r+0xfe>
 800964c:	89a3      	ldrh	r3, [r4, #12]
 800964e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009652:	81a3      	strh	r3, [r4, #12]
 8009654:	f04f 30ff 	mov.w	r0, #4294967295
 8009658:	e78e      	b.n	8009578 <__sflush_r+0x1c>
 800965a:	4407      	add	r7, r0
 800965c:	eba8 0800 	sub.w	r8, r8, r0
 8009660:	e7e9      	b.n	8009636 <__sflush_r+0xda>
 8009662:	bf00      	nop
 8009664:	dfbffffe 	.word	0xdfbffffe

08009668 <_fflush_r>:
 8009668:	b538      	push	{r3, r4, r5, lr}
 800966a:	690b      	ldr	r3, [r1, #16]
 800966c:	4605      	mov	r5, r0
 800966e:	460c      	mov	r4, r1
 8009670:	b913      	cbnz	r3, 8009678 <_fflush_r+0x10>
 8009672:	2500      	movs	r5, #0
 8009674:	4628      	mov	r0, r5
 8009676:	bd38      	pop	{r3, r4, r5, pc}
 8009678:	b118      	cbz	r0, 8009682 <_fflush_r+0x1a>
 800967a:	6a03      	ldr	r3, [r0, #32]
 800967c:	b90b      	cbnz	r3, 8009682 <_fflush_r+0x1a>
 800967e:	f7fc fff1 	bl	8006664 <__sinit>
 8009682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d0f3      	beq.n	8009672 <_fflush_r+0xa>
 800968a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800968c:	07d0      	lsls	r0, r2, #31
 800968e:	d404      	bmi.n	800969a <_fflush_r+0x32>
 8009690:	0599      	lsls	r1, r3, #22
 8009692:	d402      	bmi.n	800969a <_fflush_r+0x32>
 8009694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009696:	f7fd f9fe 	bl	8006a96 <__retarget_lock_acquire_recursive>
 800969a:	4628      	mov	r0, r5
 800969c:	4621      	mov	r1, r4
 800969e:	f7ff ff5d 	bl	800955c <__sflush_r>
 80096a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096a4:	07da      	lsls	r2, r3, #31
 80096a6:	4605      	mov	r5, r0
 80096a8:	d4e4      	bmi.n	8009674 <_fflush_r+0xc>
 80096aa:	89a3      	ldrh	r3, [r4, #12]
 80096ac:	059b      	lsls	r3, r3, #22
 80096ae:	d4e1      	bmi.n	8009674 <_fflush_r+0xc>
 80096b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096b2:	f7fd f9f1 	bl	8006a98 <__retarget_lock_release_recursive>
 80096b6:	e7dd      	b.n	8009674 <_fflush_r+0xc>

080096b8 <__swhatbuf_r>:
 80096b8:	b570      	push	{r4, r5, r6, lr}
 80096ba:	460c      	mov	r4, r1
 80096bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096c0:	2900      	cmp	r1, #0
 80096c2:	b096      	sub	sp, #88	; 0x58
 80096c4:	4615      	mov	r5, r2
 80096c6:	461e      	mov	r6, r3
 80096c8:	da0d      	bge.n	80096e6 <__swhatbuf_r+0x2e>
 80096ca:	89a3      	ldrh	r3, [r4, #12]
 80096cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80096d0:	f04f 0100 	mov.w	r1, #0
 80096d4:	bf0c      	ite	eq
 80096d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80096da:	2340      	movne	r3, #64	; 0x40
 80096dc:	2000      	movs	r0, #0
 80096de:	6031      	str	r1, [r6, #0]
 80096e0:	602b      	str	r3, [r5, #0]
 80096e2:	b016      	add	sp, #88	; 0x58
 80096e4:	bd70      	pop	{r4, r5, r6, pc}
 80096e6:	466a      	mov	r2, sp
 80096e8:	f000 f874 	bl	80097d4 <_fstat_r>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	dbec      	blt.n	80096ca <__swhatbuf_r+0x12>
 80096f0:	9901      	ldr	r1, [sp, #4]
 80096f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80096f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80096fa:	4259      	negs	r1, r3
 80096fc:	4159      	adcs	r1, r3
 80096fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009702:	e7eb      	b.n	80096dc <__swhatbuf_r+0x24>

08009704 <__smakebuf_r>:
 8009704:	898b      	ldrh	r3, [r1, #12]
 8009706:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009708:	079d      	lsls	r5, r3, #30
 800970a:	4606      	mov	r6, r0
 800970c:	460c      	mov	r4, r1
 800970e:	d507      	bpl.n	8009720 <__smakebuf_r+0x1c>
 8009710:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009714:	6023      	str	r3, [r4, #0]
 8009716:	6123      	str	r3, [r4, #16]
 8009718:	2301      	movs	r3, #1
 800971a:	6163      	str	r3, [r4, #20]
 800971c:	b002      	add	sp, #8
 800971e:	bd70      	pop	{r4, r5, r6, pc}
 8009720:	ab01      	add	r3, sp, #4
 8009722:	466a      	mov	r2, sp
 8009724:	f7ff ffc8 	bl	80096b8 <__swhatbuf_r>
 8009728:	9900      	ldr	r1, [sp, #0]
 800972a:	4605      	mov	r5, r0
 800972c:	4630      	mov	r0, r6
 800972e:	f7fe f8a9 	bl	8007884 <_malloc_r>
 8009732:	b948      	cbnz	r0, 8009748 <__smakebuf_r+0x44>
 8009734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009738:	059a      	lsls	r2, r3, #22
 800973a:	d4ef      	bmi.n	800971c <__smakebuf_r+0x18>
 800973c:	f023 0303 	bic.w	r3, r3, #3
 8009740:	f043 0302 	orr.w	r3, r3, #2
 8009744:	81a3      	strh	r3, [r4, #12]
 8009746:	e7e3      	b.n	8009710 <__smakebuf_r+0xc>
 8009748:	89a3      	ldrh	r3, [r4, #12]
 800974a:	6020      	str	r0, [r4, #0]
 800974c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009750:	81a3      	strh	r3, [r4, #12]
 8009752:	9b00      	ldr	r3, [sp, #0]
 8009754:	6163      	str	r3, [r4, #20]
 8009756:	9b01      	ldr	r3, [sp, #4]
 8009758:	6120      	str	r0, [r4, #16]
 800975a:	b15b      	cbz	r3, 8009774 <__smakebuf_r+0x70>
 800975c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009760:	4630      	mov	r0, r6
 8009762:	f000 f849 	bl	80097f8 <_isatty_r>
 8009766:	b128      	cbz	r0, 8009774 <__smakebuf_r+0x70>
 8009768:	89a3      	ldrh	r3, [r4, #12]
 800976a:	f023 0303 	bic.w	r3, r3, #3
 800976e:	f043 0301 	orr.w	r3, r3, #1
 8009772:	81a3      	strh	r3, [r4, #12]
 8009774:	89a3      	ldrh	r3, [r4, #12]
 8009776:	431d      	orrs	r5, r3
 8009778:	81a5      	strh	r5, [r4, #12]
 800977a:	e7cf      	b.n	800971c <__smakebuf_r+0x18>

0800977c <memmove>:
 800977c:	4288      	cmp	r0, r1
 800977e:	b510      	push	{r4, lr}
 8009780:	eb01 0402 	add.w	r4, r1, r2
 8009784:	d902      	bls.n	800978c <memmove+0x10>
 8009786:	4284      	cmp	r4, r0
 8009788:	4623      	mov	r3, r4
 800978a:	d807      	bhi.n	800979c <memmove+0x20>
 800978c:	1e43      	subs	r3, r0, #1
 800978e:	42a1      	cmp	r1, r4
 8009790:	d008      	beq.n	80097a4 <memmove+0x28>
 8009792:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009796:	f803 2f01 	strb.w	r2, [r3, #1]!
 800979a:	e7f8      	b.n	800978e <memmove+0x12>
 800979c:	4402      	add	r2, r0
 800979e:	4601      	mov	r1, r0
 80097a0:	428a      	cmp	r2, r1
 80097a2:	d100      	bne.n	80097a6 <memmove+0x2a>
 80097a4:	bd10      	pop	{r4, pc}
 80097a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097ae:	e7f7      	b.n	80097a0 <memmove+0x24>

080097b0 <strncmp>:
 80097b0:	b510      	push	{r4, lr}
 80097b2:	b16a      	cbz	r2, 80097d0 <strncmp+0x20>
 80097b4:	3901      	subs	r1, #1
 80097b6:	1884      	adds	r4, r0, r2
 80097b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d103      	bne.n	80097cc <strncmp+0x1c>
 80097c4:	42a0      	cmp	r0, r4
 80097c6:	d001      	beq.n	80097cc <strncmp+0x1c>
 80097c8:	2a00      	cmp	r2, #0
 80097ca:	d1f5      	bne.n	80097b8 <strncmp+0x8>
 80097cc:	1ad0      	subs	r0, r2, r3
 80097ce:	bd10      	pop	{r4, pc}
 80097d0:	4610      	mov	r0, r2
 80097d2:	e7fc      	b.n	80097ce <strncmp+0x1e>

080097d4 <_fstat_r>:
 80097d4:	b538      	push	{r3, r4, r5, lr}
 80097d6:	4d07      	ldr	r5, [pc, #28]	; (80097f4 <_fstat_r+0x20>)
 80097d8:	2300      	movs	r3, #0
 80097da:	4604      	mov	r4, r0
 80097dc:	4608      	mov	r0, r1
 80097de:	4611      	mov	r1, r2
 80097e0:	602b      	str	r3, [r5, #0]
 80097e2:	f7f8 fa02 	bl	8001bea <_fstat>
 80097e6:	1c43      	adds	r3, r0, #1
 80097e8:	d102      	bne.n	80097f0 <_fstat_r+0x1c>
 80097ea:	682b      	ldr	r3, [r5, #0]
 80097ec:	b103      	cbz	r3, 80097f0 <_fstat_r+0x1c>
 80097ee:	6023      	str	r3, [r4, #0]
 80097f0:	bd38      	pop	{r3, r4, r5, pc}
 80097f2:	bf00      	nop
 80097f4:	200004c8 	.word	0x200004c8

080097f8 <_isatty_r>:
 80097f8:	b538      	push	{r3, r4, r5, lr}
 80097fa:	4d06      	ldr	r5, [pc, #24]	; (8009814 <_isatty_r+0x1c>)
 80097fc:	2300      	movs	r3, #0
 80097fe:	4604      	mov	r4, r0
 8009800:	4608      	mov	r0, r1
 8009802:	602b      	str	r3, [r5, #0]
 8009804:	f7f8 fa01 	bl	8001c0a <_isatty>
 8009808:	1c43      	adds	r3, r0, #1
 800980a:	d102      	bne.n	8009812 <_isatty_r+0x1a>
 800980c:	682b      	ldr	r3, [r5, #0]
 800980e:	b103      	cbz	r3, 8009812 <_isatty_r+0x1a>
 8009810:	6023      	str	r3, [r4, #0]
 8009812:	bd38      	pop	{r3, r4, r5, pc}
 8009814:	200004c8 	.word	0x200004c8

08009818 <_sbrk_r>:
 8009818:	b538      	push	{r3, r4, r5, lr}
 800981a:	4d06      	ldr	r5, [pc, #24]	; (8009834 <_sbrk_r+0x1c>)
 800981c:	2300      	movs	r3, #0
 800981e:	4604      	mov	r4, r0
 8009820:	4608      	mov	r0, r1
 8009822:	602b      	str	r3, [r5, #0]
 8009824:	f7f8 fa0a 	bl	8001c3c <_sbrk>
 8009828:	1c43      	adds	r3, r0, #1
 800982a:	d102      	bne.n	8009832 <_sbrk_r+0x1a>
 800982c:	682b      	ldr	r3, [r5, #0]
 800982e:	b103      	cbz	r3, 8009832 <_sbrk_r+0x1a>
 8009830:	6023      	str	r3, [r4, #0]
 8009832:	bd38      	pop	{r3, r4, r5, pc}
 8009834:	200004c8 	.word	0x200004c8

08009838 <memcpy>:
 8009838:	440a      	add	r2, r1
 800983a:	4291      	cmp	r1, r2
 800983c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009840:	d100      	bne.n	8009844 <memcpy+0xc>
 8009842:	4770      	bx	lr
 8009844:	b510      	push	{r4, lr}
 8009846:	f811 4b01 	ldrb.w	r4, [r1], #1
 800984a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800984e:	4291      	cmp	r1, r2
 8009850:	d1f9      	bne.n	8009846 <memcpy+0xe>
 8009852:	bd10      	pop	{r4, pc}
 8009854:	0000      	movs	r0, r0
	...

08009858 <nan>:
 8009858:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009860 <nan+0x8>
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop
 8009860:	00000000 	.word	0x00000000
 8009864:	7ff80000 	.word	0x7ff80000

08009868 <__assert_func>:
 8009868:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800986a:	4614      	mov	r4, r2
 800986c:	461a      	mov	r2, r3
 800986e:	4b09      	ldr	r3, [pc, #36]	; (8009894 <__assert_func+0x2c>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4605      	mov	r5, r0
 8009874:	68d8      	ldr	r0, [r3, #12]
 8009876:	b14c      	cbz	r4, 800988c <__assert_func+0x24>
 8009878:	4b07      	ldr	r3, [pc, #28]	; (8009898 <__assert_func+0x30>)
 800987a:	9100      	str	r1, [sp, #0]
 800987c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009880:	4906      	ldr	r1, [pc, #24]	; (800989c <__assert_func+0x34>)
 8009882:	462b      	mov	r3, r5
 8009884:	f000 fbca 	bl	800a01c <fiprintf>
 8009888:	f000 fbda 	bl	800a040 <abort>
 800988c:	4b04      	ldr	r3, [pc, #16]	; (80098a0 <__assert_func+0x38>)
 800988e:	461c      	mov	r4, r3
 8009890:	e7f3      	b.n	800987a <__assert_func+0x12>
 8009892:	bf00      	nop
 8009894:	20000064 	.word	0x20000064
 8009898:	0800a53a 	.word	0x0800a53a
 800989c:	0800a547 	.word	0x0800a547
 80098a0:	0800a575 	.word	0x0800a575

080098a4 <_calloc_r>:
 80098a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098a6:	fba1 2402 	umull	r2, r4, r1, r2
 80098aa:	b94c      	cbnz	r4, 80098c0 <_calloc_r+0x1c>
 80098ac:	4611      	mov	r1, r2
 80098ae:	9201      	str	r2, [sp, #4]
 80098b0:	f7fd ffe8 	bl	8007884 <_malloc_r>
 80098b4:	9a01      	ldr	r2, [sp, #4]
 80098b6:	4605      	mov	r5, r0
 80098b8:	b930      	cbnz	r0, 80098c8 <_calloc_r+0x24>
 80098ba:	4628      	mov	r0, r5
 80098bc:	b003      	add	sp, #12
 80098be:	bd30      	pop	{r4, r5, pc}
 80098c0:	220c      	movs	r2, #12
 80098c2:	6002      	str	r2, [r0, #0]
 80098c4:	2500      	movs	r5, #0
 80098c6:	e7f8      	b.n	80098ba <_calloc_r+0x16>
 80098c8:	4621      	mov	r1, r4
 80098ca:	f7fd f867 	bl	800699c <memset>
 80098ce:	e7f4      	b.n	80098ba <_calloc_r+0x16>

080098d0 <rshift>:
 80098d0:	6903      	ldr	r3, [r0, #16]
 80098d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80098d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098da:	ea4f 1261 	mov.w	r2, r1, asr #5
 80098de:	f100 0414 	add.w	r4, r0, #20
 80098e2:	dd45      	ble.n	8009970 <rshift+0xa0>
 80098e4:	f011 011f 	ands.w	r1, r1, #31
 80098e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80098ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80098f0:	d10c      	bne.n	800990c <rshift+0x3c>
 80098f2:	f100 0710 	add.w	r7, r0, #16
 80098f6:	4629      	mov	r1, r5
 80098f8:	42b1      	cmp	r1, r6
 80098fa:	d334      	bcc.n	8009966 <rshift+0x96>
 80098fc:	1a9b      	subs	r3, r3, r2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	1eea      	subs	r2, r5, #3
 8009902:	4296      	cmp	r6, r2
 8009904:	bf38      	it	cc
 8009906:	2300      	movcc	r3, #0
 8009908:	4423      	add	r3, r4
 800990a:	e015      	b.n	8009938 <rshift+0x68>
 800990c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009910:	f1c1 0820 	rsb	r8, r1, #32
 8009914:	40cf      	lsrs	r7, r1
 8009916:	f105 0e04 	add.w	lr, r5, #4
 800991a:	46a1      	mov	r9, r4
 800991c:	4576      	cmp	r6, lr
 800991e:	46f4      	mov	ip, lr
 8009920:	d815      	bhi.n	800994e <rshift+0x7e>
 8009922:	1a9a      	subs	r2, r3, r2
 8009924:	0092      	lsls	r2, r2, #2
 8009926:	3a04      	subs	r2, #4
 8009928:	3501      	adds	r5, #1
 800992a:	42ae      	cmp	r6, r5
 800992c:	bf38      	it	cc
 800992e:	2200      	movcc	r2, #0
 8009930:	18a3      	adds	r3, r4, r2
 8009932:	50a7      	str	r7, [r4, r2]
 8009934:	b107      	cbz	r7, 8009938 <rshift+0x68>
 8009936:	3304      	adds	r3, #4
 8009938:	1b1a      	subs	r2, r3, r4
 800993a:	42a3      	cmp	r3, r4
 800993c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009940:	bf08      	it	eq
 8009942:	2300      	moveq	r3, #0
 8009944:	6102      	str	r2, [r0, #16]
 8009946:	bf08      	it	eq
 8009948:	6143      	streq	r3, [r0, #20]
 800994a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800994e:	f8dc c000 	ldr.w	ip, [ip]
 8009952:	fa0c fc08 	lsl.w	ip, ip, r8
 8009956:	ea4c 0707 	orr.w	r7, ip, r7
 800995a:	f849 7b04 	str.w	r7, [r9], #4
 800995e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009962:	40cf      	lsrs	r7, r1
 8009964:	e7da      	b.n	800991c <rshift+0x4c>
 8009966:	f851 cb04 	ldr.w	ip, [r1], #4
 800996a:	f847 cf04 	str.w	ip, [r7, #4]!
 800996e:	e7c3      	b.n	80098f8 <rshift+0x28>
 8009970:	4623      	mov	r3, r4
 8009972:	e7e1      	b.n	8009938 <rshift+0x68>

08009974 <__hexdig_fun>:
 8009974:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009978:	2b09      	cmp	r3, #9
 800997a:	d802      	bhi.n	8009982 <__hexdig_fun+0xe>
 800997c:	3820      	subs	r0, #32
 800997e:	b2c0      	uxtb	r0, r0
 8009980:	4770      	bx	lr
 8009982:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009986:	2b05      	cmp	r3, #5
 8009988:	d801      	bhi.n	800998e <__hexdig_fun+0x1a>
 800998a:	3847      	subs	r0, #71	; 0x47
 800998c:	e7f7      	b.n	800997e <__hexdig_fun+0xa>
 800998e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009992:	2b05      	cmp	r3, #5
 8009994:	d801      	bhi.n	800999a <__hexdig_fun+0x26>
 8009996:	3827      	subs	r0, #39	; 0x27
 8009998:	e7f1      	b.n	800997e <__hexdig_fun+0xa>
 800999a:	2000      	movs	r0, #0
 800999c:	4770      	bx	lr
	...

080099a0 <__gethex>:
 80099a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a4:	4617      	mov	r7, r2
 80099a6:	680a      	ldr	r2, [r1, #0]
 80099a8:	b085      	sub	sp, #20
 80099aa:	f102 0b02 	add.w	fp, r2, #2
 80099ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80099b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80099b6:	4681      	mov	r9, r0
 80099b8:	468a      	mov	sl, r1
 80099ba:	9302      	str	r3, [sp, #8]
 80099bc:	32fe      	adds	r2, #254	; 0xfe
 80099be:	eb02 030b 	add.w	r3, r2, fp
 80099c2:	46d8      	mov	r8, fp
 80099c4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80099c8:	9301      	str	r3, [sp, #4]
 80099ca:	2830      	cmp	r0, #48	; 0x30
 80099cc:	d0f7      	beq.n	80099be <__gethex+0x1e>
 80099ce:	f7ff ffd1 	bl	8009974 <__hexdig_fun>
 80099d2:	4604      	mov	r4, r0
 80099d4:	2800      	cmp	r0, #0
 80099d6:	d138      	bne.n	8009a4a <__gethex+0xaa>
 80099d8:	49a7      	ldr	r1, [pc, #668]	; (8009c78 <__gethex+0x2d8>)
 80099da:	2201      	movs	r2, #1
 80099dc:	4640      	mov	r0, r8
 80099de:	f7ff fee7 	bl	80097b0 <strncmp>
 80099e2:	4606      	mov	r6, r0
 80099e4:	2800      	cmp	r0, #0
 80099e6:	d169      	bne.n	8009abc <__gethex+0x11c>
 80099e8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80099ec:	465d      	mov	r5, fp
 80099ee:	f7ff ffc1 	bl	8009974 <__hexdig_fun>
 80099f2:	2800      	cmp	r0, #0
 80099f4:	d064      	beq.n	8009ac0 <__gethex+0x120>
 80099f6:	465a      	mov	r2, fp
 80099f8:	7810      	ldrb	r0, [r2, #0]
 80099fa:	2830      	cmp	r0, #48	; 0x30
 80099fc:	4690      	mov	r8, r2
 80099fe:	f102 0201 	add.w	r2, r2, #1
 8009a02:	d0f9      	beq.n	80099f8 <__gethex+0x58>
 8009a04:	f7ff ffb6 	bl	8009974 <__hexdig_fun>
 8009a08:	2301      	movs	r3, #1
 8009a0a:	fab0 f480 	clz	r4, r0
 8009a0e:	0964      	lsrs	r4, r4, #5
 8009a10:	465e      	mov	r6, fp
 8009a12:	9301      	str	r3, [sp, #4]
 8009a14:	4642      	mov	r2, r8
 8009a16:	4615      	mov	r5, r2
 8009a18:	3201      	adds	r2, #1
 8009a1a:	7828      	ldrb	r0, [r5, #0]
 8009a1c:	f7ff ffaa 	bl	8009974 <__hexdig_fun>
 8009a20:	2800      	cmp	r0, #0
 8009a22:	d1f8      	bne.n	8009a16 <__gethex+0x76>
 8009a24:	4994      	ldr	r1, [pc, #592]	; (8009c78 <__gethex+0x2d8>)
 8009a26:	2201      	movs	r2, #1
 8009a28:	4628      	mov	r0, r5
 8009a2a:	f7ff fec1 	bl	80097b0 <strncmp>
 8009a2e:	b978      	cbnz	r0, 8009a50 <__gethex+0xb0>
 8009a30:	b946      	cbnz	r6, 8009a44 <__gethex+0xa4>
 8009a32:	1c6e      	adds	r6, r5, #1
 8009a34:	4632      	mov	r2, r6
 8009a36:	4615      	mov	r5, r2
 8009a38:	3201      	adds	r2, #1
 8009a3a:	7828      	ldrb	r0, [r5, #0]
 8009a3c:	f7ff ff9a 	bl	8009974 <__hexdig_fun>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	d1f8      	bne.n	8009a36 <__gethex+0x96>
 8009a44:	1b73      	subs	r3, r6, r5
 8009a46:	009e      	lsls	r6, r3, #2
 8009a48:	e004      	b.n	8009a54 <__gethex+0xb4>
 8009a4a:	2400      	movs	r4, #0
 8009a4c:	4626      	mov	r6, r4
 8009a4e:	e7e1      	b.n	8009a14 <__gethex+0x74>
 8009a50:	2e00      	cmp	r6, #0
 8009a52:	d1f7      	bne.n	8009a44 <__gethex+0xa4>
 8009a54:	782b      	ldrb	r3, [r5, #0]
 8009a56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009a5a:	2b50      	cmp	r3, #80	; 0x50
 8009a5c:	d13d      	bne.n	8009ada <__gethex+0x13a>
 8009a5e:	786b      	ldrb	r3, [r5, #1]
 8009a60:	2b2b      	cmp	r3, #43	; 0x2b
 8009a62:	d02f      	beq.n	8009ac4 <__gethex+0x124>
 8009a64:	2b2d      	cmp	r3, #45	; 0x2d
 8009a66:	d031      	beq.n	8009acc <__gethex+0x12c>
 8009a68:	1c69      	adds	r1, r5, #1
 8009a6a:	f04f 0b00 	mov.w	fp, #0
 8009a6e:	7808      	ldrb	r0, [r1, #0]
 8009a70:	f7ff ff80 	bl	8009974 <__hexdig_fun>
 8009a74:	1e42      	subs	r2, r0, #1
 8009a76:	b2d2      	uxtb	r2, r2
 8009a78:	2a18      	cmp	r2, #24
 8009a7a:	d82e      	bhi.n	8009ada <__gethex+0x13a>
 8009a7c:	f1a0 0210 	sub.w	r2, r0, #16
 8009a80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009a84:	f7ff ff76 	bl	8009974 <__hexdig_fun>
 8009a88:	f100 3cff 	add.w	ip, r0, #4294967295
 8009a8c:	fa5f fc8c 	uxtb.w	ip, ip
 8009a90:	f1bc 0f18 	cmp.w	ip, #24
 8009a94:	d91d      	bls.n	8009ad2 <__gethex+0x132>
 8009a96:	f1bb 0f00 	cmp.w	fp, #0
 8009a9a:	d000      	beq.n	8009a9e <__gethex+0xfe>
 8009a9c:	4252      	negs	r2, r2
 8009a9e:	4416      	add	r6, r2
 8009aa0:	f8ca 1000 	str.w	r1, [sl]
 8009aa4:	b1dc      	cbz	r4, 8009ade <__gethex+0x13e>
 8009aa6:	9b01      	ldr	r3, [sp, #4]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	bf14      	ite	ne
 8009aac:	f04f 0800 	movne.w	r8, #0
 8009ab0:	f04f 0806 	moveq.w	r8, #6
 8009ab4:	4640      	mov	r0, r8
 8009ab6:	b005      	add	sp, #20
 8009ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009abc:	4645      	mov	r5, r8
 8009abe:	4626      	mov	r6, r4
 8009ac0:	2401      	movs	r4, #1
 8009ac2:	e7c7      	b.n	8009a54 <__gethex+0xb4>
 8009ac4:	f04f 0b00 	mov.w	fp, #0
 8009ac8:	1ca9      	adds	r1, r5, #2
 8009aca:	e7d0      	b.n	8009a6e <__gethex+0xce>
 8009acc:	f04f 0b01 	mov.w	fp, #1
 8009ad0:	e7fa      	b.n	8009ac8 <__gethex+0x128>
 8009ad2:	230a      	movs	r3, #10
 8009ad4:	fb03 0002 	mla	r0, r3, r2, r0
 8009ad8:	e7d0      	b.n	8009a7c <__gethex+0xdc>
 8009ada:	4629      	mov	r1, r5
 8009adc:	e7e0      	b.n	8009aa0 <__gethex+0x100>
 8009ade:	eba5 0308 	sub.w	r3, r5, r8
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	4621      	mov	r1, r4
 8009ae6:	2b07      	cmp	r3, #7
 8009ae8:	dc0a      	bgt.n	8009b00 <__gethex+0x160>
 8009aea:	4648      	mov	r0, r9
 8009aec:	f7fd ff56 	bl	800799c <_Balloc>
 8009af0:	4604      	mov	r4, r0
 8009af2:	b940      	cbnz	r0, 8009b06 <__gethex+0x166>
 8009af4:	4b61      	ldr	r3, [pc, #388]	; (8009c7c <__gethex+0x2dc>)
 8009af6:	4602      	mov	r2, r0
 8009af8:	21e4      	movs	r1, #228	; 0xe4
 8009afa:	4861      	ldr	r0, [pc, #388]	; (8009c80 <__gethex+0x2e0>)
 8009afc:	f7ff feb4 	bl	8009868 <__assert_func>
 8009b00:	3101      	adds	r1, #1
 8009b02:	105b      	asrs	r3, r3, #1
 8009b04:	e7ef      	b.n	8009ae6 <__gethex+0x146>
 8009b06:	f100 0a14 	add.w	sl, r0, #20
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	495a      	ldr	r1, [pc, #360]	; (8009c78 <__gethex+0x2d8>)
 8009b0e:	f8cd a004 	str.w	sl, [sp, #4]
 8009b12:	469b      	mov	fp, r3
 8009b14:	45a8      	cmp	r8, r5
 8009b16:	d342      	bcc.n	8009b9e <__gethex+0x1fe>
 8009b18:	9801      	ldr	r0, [sp, #4]
 8009b1a:	f840 bb04 	str.w	fp, [r0], #4
 8009b1e:	eba0 000a 	sub.w	r0, r0, sl
 8009b22:	1080      	asrs	r0, r0, #2
 8009b24:	6120      	str	r0, [r4, #16]
 8009b26:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8009b2a:	4658      	mov	r0, fp
 8009b2c:	f7fe f828 	bl	8007b80 <__hi0bits>
 8009b30:	683d      	ldr	r5, [r7, #0]
 8009b32:	eba8 0000 	sub.w	r0, r8, r0
 8009b36:	42a8      	cmp	r0, r5
 8009b38:	dd59      	ble.n	8009bee <__gethex+0x24e>
 8009b3a:	eba0 0805 	sub.w	r8, r0, r5
 8009b3e:	4641      	mov	r1, r8
 8009b40:	4620      	mov	r0, r4
 8009b42:	f7fe fbb7 	bl	80082b4 <__any_on>
 8009b46:	4683      	mov	fp, r0
 8009b48:	b1b8      	cbz	r0, 8009b7a <__gethex+0x1da>
 8009b4a:	f108 33ff 	add.w	r3, r8, #4294967295
 8009b4e:	1159      	asrs	r1, r3, #5
 8009b50:	f003 021f 	and.w	r2, r3, #31
 8009b54:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009b58:	f04f 0b01 	mov.w	fp, #1
 8009b5c:	fa0b f202 	lsl.w	r2, fp, r2
 8009b60:	420a      	tst	r2, r1
 8009b62:	d00a      	beq.n	8009b7a <__gethex+0x1da>
 8009b64:	455b      	cmp	r3, fp
 8009b66:	dd06      	ble.n	8009b76 <__gethex+0x1d6>
 8009b68:	f1a8 0102 	sub.w	r1, r8, #2
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	f7fe fba1 	bl	80082b4 <__any_on>
 8009b72:	2800      	cmp	r0, #0
 8009b74:	d138      	bne.n	8009be8 <__gethex+0x248>
 8009b76:	f04f 0b02 	mov.w	fp, #2
 8009b7a:	4641      	mov	r1, r8
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	f7ff fea7 	bl	80098d0 <rshift>
 8009b82:	4446      	add	r6, r8
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	42b3      	cmp	r3, r6
 8009b88:	da41      	bge.n	8009c0e <__gethex+0x26e>
 8009b8a:	4621      	mov	r1, r4
 8009b8c:	4648      	mov	r0, r9
 8009b8e:	f7fd ff45 	bl	8007a1c <_Bfree>
 8009b92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b94:	2300      	movs	r3, #0
 8009b96:	6013      	str	r3, [r2, #0]
 8009b98:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009b9c:	e78a      	b.n	8009ab4 <__gethex+0x114>
 8009b9e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009ba2:	2a2e      	cmp	r2, #46	; 0x2e
 8009ba4:	d014      	beq.n	8009bd0 <__gethex+0x230>
 8009ba6:	2b20      	cmp	r3, #32
 8009ba8:	d106      	bne.n	8009bb8 <__gethex+0x218>
 8009baa:	9b01      	ldr	r3, [sp, #4]
 8009bac:	f843 bb04 	str.w	fp, [r3], #4
 8009bb0:	f04f 0b00 	mov.w	fp, #0
 8009bb4:	9301      	str	r3, [sp, #4]
 8009bb6:	465b      	mov	r3, fp
 8009bb8:	7828      	ldrb	r0, [r5, #0]
 8009bba:	9303      	str	r3, [sp, #12]
 8009bbc:	f7ff feda 	bl	8009974 <__hexdig_fun>
 8009bc0:	9b03      	ldr	r3, [sp, #12]
 8009bc2:	f000 000f 	and.w	r0, r0, #15
 8009bc6:	4098      	lsls	r0, r3
 8009bc8:	ea4b 0b00 	orr.w	fp, fp, r0
 8009bcc:	3304      	adds	r3, #4
 8009bce:	e7a1      	b.n	8009b14 <__gethex+0x174>
 8009bd0:	45a8      	cmp	r8, r5
 8009bd2:	d8e8      	bhi.n	8009ba6 <__gethex+0x206>
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	9303      	str	r3, [sp, #12]
 8009bda:	f7ff fde9 	bl	80097b0 <strncmp>
 8009bde:	4926      	ldr	r1, [pc, #152]	; (8009c78 <__gethex+0x2d8>)
 8009be0:	9b03      	ldr	r3, [sp, #12]
 8009be2:	2800      	cmp	r0, #0
 8009be4:	d1df      	bne.n	8009ba6 <__gethex+0x206>
 8009be6:	e795      	b.n	8009b14 <__gethex+0x174>
 8009be8:	f04f 0b03 	mov.w	fp, #3
 8009bec:	e7c5      	b.n	8009b7a <__gethex+0x1da>
 8009bee:	da0b      	bge.n	8009c08 <__gethex+0x268>
 8009bf0:	eba5 0800 	sub.w	r8, r5, r0
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	4642      	mov	r2, r8
 8009bf8:	4648      	mov	r0, r9
 8009bfa:	f7fe f929 	bl	8007e50 <__lshift>
 8009bfe:	eba6 0608 	sub.w	r6, r6, r8
 8009c02:	4604      	mov	r4, r0
 8009c04:	f100 0a14 	add.w	sl, r0, #20
 8009c08:	f04f 0b00 	mov.w	fp, #0
 8009c0c:	e7ba      	b.n	8009b84 <__gethex+0x1e4>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	42b3      	cmp	r3, r6
 8009c12:	dd73      	ble.n	8009cfc <__gethex+0x35c>
 8009c14:	1b9e      	subs	r6, r3, r6
 8009c16:	42b5      	cmp	r5, r6
 8009c18:	dc34      	bgt.n	8009c84 <__gethex+0x2e4>
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d023      	beq.n	8009c68 <__gethex+0x2c8>
 8009c20:	2b03      	cmp	r3, #3
 8009c22:	d025      	beq.n	8009c70 <__gethex+0x2d0>
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d115      	bne.n	8009c54 <__gethex+0x2b4>
 8009c28:	42b5      	cmp	r5, r6
 8009c2a:	d113      	bne.n	8009c54 <__gethex+0x2b4>
 8009c2c:	2d01      	cmp	r5, #1
 8009c2e:	d10b      	bne.n	8009c48 <__gethex+0x2a8>
 8009c30:	9a02      	ldr	r2, [sp, #8]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6013      	str	r3, [r2, #0]
 8009c36:	2301      	movs	r3, #1
 8009c38:	6123      	str	r3, [r4, #16]
 8009c3a:	f8ca 3000 	str.w	r3, [sl]
 8009c3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c40:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009c44:	601c      	str	r4, [r3, #0]
 8009c46:	e735      	b.n	8009ab4 <__gethex+0x114>
 8009c48:	1e69      	subs	r1, r5, #1
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	f7fe fb32 	bl	80082b4 <__any_on>
 8009c50:	2800      	cmp	r0, #0
 8009c52:	d1ed      	bne.n	8009c30 <__gethex+0x290>
 8009c54:	4621      	mov	r1, r4
 8009c56:	4648      	mov	r0, r9
 8009c58:	f7fd fee0 	bl	8007a1c <_Bfree>
 8009c5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c5e:	2300      	movs	r3, #0
 8009c60:	6013      	str	r3, [r2, #0]
 8009c62:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009c66:	e725      	b.n	8009ab4 <__gethex+0x114>
 8009c68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1f2      	bne.n	8009c54 <__gethex+0x2b4>
 8009c6e:	e7df      	b.n	8009c30 <__gethex+0x290>
 8009c70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1dc      	bne.n	8009c30 <__gethex+0x290>
 8009c76:	e7ed      	b.n	8009c54 <__gethex+0x2b4>
 8009c78:	0800a3cc 	.word	0x0800a3cc
 8009c7c:	0800a261 	.word	0x0800a261
 8009c80:	0800a576 	.word	0x0800a576
 8009c84:	f106 38ff 	add.w	r8, r6, #4294967295
 8009c88:	f1bb 0f00 	cmp.w	fp, #0
 8009c8c:	d133      	bne.n	8009cf6 <__gethex+0x356>
 8009c8e:	f1b8 0f00 	cmp.w	r8, #0
 8009c92:	d004      	beq.n	8009c9e <__gethex+0x2fe>
 8009c94:	4641      	mov	r1, r8
 8009c96:	4620      	mov	r0, r4
 8009c98:	f7fe fb0c 	bl	80082b4 <__any_on>
 8009c9c:	4683      	mov	fp, r0
 8009c9e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009ca8:	f008 081f 	and.w	r8, r8, #31
 8009cac:	fa03 f308 	lsl.w	r3, r3, r8
 8009cb0:	4213      	tst	r3, r2
 8009cb2:	4631      	mov	r1, r6
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	bf18      	it	ne
 8009cb8:	f04b 0b02 	orrne.w	fp, fp, #2
 8009cbc:	1bad      	subs	r5, r5, r6
 8009cbe:	f7ff fe07 	bl	80098d0 <rshift>
 8009cc2:	687e      	ldr	r6, [r7, #4]
 8009cc4:	f04f 0802 	mov.w	r8, #2
 8009cc8:	f1bb 0f00 	cmp.w	fp, #0
 8009ccc:	d04a      	beq.n	8009d64 <__gethex+0x3c4>
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	d016      	beq.n	8009d02 <__gethex+0x362>
 8009cd4:	2b03      	cmp	r3, #3
 8009cd6:	d018      	beq.n	8009d0a <__gethex+0x36a>
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d109      	bne.n	8009cf0 <__gethex+0x350>
 8009cdc:	f01b 0f02 	tst.w	fp, #2
 8009ce0:	d006      	beq.n	8009cf0 <__gethex+0x350>
 8009ce2:	f8da 3000 	ldr.w	r3, [sl]
 8009ce6:	ea4b 0b03 	orr.w	fp, fp, r3
 8009cea:	f01b 0f01 	tst.w	fp, #1
 8009cee:	d10f      	bne.n	8009d10 <__gethex+0x370>
 8009cf0:	f048 0810 	orr.w	r8, r8, #16
 8009cf4:	e036      	b.n	8009d64 <__gethex+0x3c4>
 8009cf6:	f04f 0b01 	mov.w	fp, #1
 8009cfa:	e7d0      	b.n	8009c9e <__gethex+0x2fe>
 8009cfc:	f04f 0801 	mov.w	r8, #1
 8009d00:	e7e2      	b.n	8009cc8 <__gethex+0x328>
 8009d02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d04:	f1c3 0301 	rsb	r3, r3, #1
 8009d08:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d0ef      	beq.n	8009cf0 <__gethex+0x350>
 8009d10:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009d14:	f104 0214 	add.w	r2, r4, #20
 8009d18:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009d1c:	9301      	str	r3, [sp, #4]
 8009d1e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009d22:	2300      	movs	r3, #0
 8009d24:	4694      	mov	ip, r2
 8009d26:	f852 1b04 	ldr.w	r1, [r2], #4
 8009d2a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009d2e:	d01e      	beq.n	8009d6e <__gethex+0x3ce>
 8009d30:	3101      	adds	r1, #1
 8009d32:	f8cc 1000 	str.w	r1, [ip]
 8009d36:	f1b8 0f02 	cmp.w	r8, #2
 8009d3a:	f104 0214 	add.w	r2, r4, #20
 8009d3e:	d13d      	bne.n	8009dbc <__gethex+0x41c>
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	3b01      	subs	r3, #1
 8009d44:	42ab      	cmp	r3, r5
 8009d46:	d10b      	bne.n	8009d60 <__gethex+0x3c0>
 8009d48:	1169      	asrs	r1, r5, #5
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	f005 051f 	and.w	r5, r5, #31
 8009d50:	fa03 f505 	lsl.w	r5, r3, r5
 8009d54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d58:	421d      	tst	r5, r3
 8009d5a:	bf18      	it	ne
 8009d5c:	f04f 0801 	movne.w	r8, #1
 8009d60:	f048 0820 	orr.w	r8, r8, #32
 8009d64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d66:	601c      	str	r4, [r3, #0]
 8009d68:	9b02      	ldr	r3, [sp, #8]
 8009d6a:	601e      	str	r6, [r3, #0]
 8009d6c:	e6a2      	b.n	8009ab4 <__gethex+0x114>
 8009d6e:	4290      	cmp	r0, r2
 8009d70:	f842 3c04 	str.w	r3, [r2, #-4]
 8009d74:	d8d6      	bhi.n	8009d24 <__gethex+0x384>
 8009d76:	68a2      	ldr	r2, [r4, #8]
 8009d78:	4593      	cmp	fp, r2
 8009d7a:	db17      	blt.n	8009dac <__gethex+0x40c>
 8009d7c:	6861      	ldr	r1, [r4, #4]
 8009d7e:	4648      	mov	r0, r9
 8009d80:	3101      	adds	r1, #1
 8009d82:	f7fd fe0b 	bl	800799c <_Balloc>
 8009d86:	4682      	mov	sl, r0
 8009d88:	b918      	cbnz	r0, 8009d92 <__gethex+0x3f2>
 8009d8a:	4b1b      	ldr	r3, [pc, #108]	; (8009df8 <__gethex+0x458>)
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	2184      	movs	r1, #132	; 0x84
 8009d90:	e6b3      	b.n	8009afa <__gethex+0x15a>
 8009d92:	6922      	ldr	r2, [r4, #16]
 8009d94:	3202      	adds	r2, #2
 8009d96:	f104 010c 	add.w	r1, r4, #12
 8009d9a:	0092      	lsls	r2, r2, #2
 8009d9c:	300c      	adds	r0, #12
 8009d9e:	f7ff fd4b 	bl	8009838 <memcpy>
 8009da2:	4621      	mov	r1, r4
 8009da4:	4648      	mov	r0, r9
 8009da6:	f7fd fe39 	bl	8007a1c <_Bfree>
 8009daa:	4654      	mov	r4, sl
 8009dac:	6922      	ldr	r2, [r4, #16]
 8009dae:	1c51      	adds	r1, r2, #1
 8009db0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009db4:	6121      	str	r1, [r4, #16]
 8009db6:	2101      	movs	r1, #1
 8009db8:	6151      	str	r1, [r2, #20]
 8009dba:	e7bc      	b.n	8009d36 <__gethex+0x396>
 8009dbc:	6921      	ldr	r1, [r4, #16]
 8009dbe:	4559      	cmp	r1, fp
 8009dc0:	dd0b      	ble.n	8009dda <__gethex+0x43a>
 8009dc2:	2101      	movs	r1, #1
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f7ff fd83 	bl	80098d0 <rshift>
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	3601      	adds	r6, #1
 8009dce:	42b3      	cmp	r3, r6
 8009dd0:	f6ff aedb 	blt.w	8009b8a <__gethex+0x1ea>
 8009dd4:	f04f 0801 	mov.w	r8, #1
 8009dd8:	e7c2      	b.n	8009d60 <__gethex+0x3c0>
 8009dda:	f015 051f 	ands.w	r5, r5, #31
 8009dde:	d0f9      	beq.n	8009dd4 <__gethex+0x434>
 8009de0:	9b01      	ldr	r3, [sp, #4]
 8009de2:	441a      	add	r2, r3
 8009de4:	f1c5 0520 	rsb	r5, r5, #32
 8009de8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009dec:	f7fd fec8 	bl	8007b80 <__hi0bits>
 8009df0:	42a8      	cmp	r0, r5
 8009df2:	dbe6      	blt.n	8009dc2 <__gethex+0x422>
 8009df4:	e7ee      	b.n	8009dd4 <__gethex+0x434>
 8009df6:	bf00      	nop
 8009df8:	0800a261 	.word	0x0800a261

08009dfc <L_shift>:
 8009dfc:	f1c2 0208 	rsb	r2, r2, #8
 8009e00:	0092      	lsls	r2, r2, #2
 8009e02:	b570      	push	{r4, r5, r6, lr}
 8009e04:	f1c2 0620 	rsb	r6, r2, #32
 8009e08:	6843      	ldr	r3, [r0, #4]
 8009e0a:	6804      	ldr	r4, [r0, #0]
 8009e0c:	fa03 f506 	lsl.w	r5, r3, r6
 8009e10:	432c      	orrs	r4, r5
 8009e12:	40d3      	lsrs	r3, r2
 8009e14:	6004      	str	r4, [r0, #0]
 8009e16:	f840 3f04 	str.w	r3, [r0, #4]!
 8009e1a:	4288      	cmp	r0, r1
 8009e1c:	d3f4      	bcc.n	8009e08 <L_shift+0xc>
 8009e1e:	bd70      	pop	{r4, r5, r6, pc}

08009e20 <__match>:
 8009e20:	b530      	push	{r4, r5, lr}
 8009e22:	6803      	ldr	r3, [r0, #0]
 8009e24:	3301      	adds	r3, #1
 8009e26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e2a:	b914      	cbnz	r4, 8009e32 <__match+0x12>
 8009e2c:	6003      	str	r3, [r0, #0]
 8009e2e:	2001      	movs	r0, #1
 8009e30:	bd30      	pop	{r4, r5, pc}
 8009e32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e36:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009e3a:	2d19      	cmp	r5, #25
 8009e3c:	bf98      	it	ls
 8009e3e:	3220      	addls	r2, #32
 8009e40:	42a2      	cmp	r2, r4
 8009e42:	d0f0      	beq.n	8009e26 <__match+0x6>
 8009e44:	2000      	movs	r0, #0
 8009e46:	e7f3      	b.n	8009e30 <__match+0x10>

08009e48 <__hexnan>:
 8009e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4c:	680b      	ldr	r3, [r1, #0]
 8009e4e:	6801      	ldr	r1, [r0, #0]
 8009e50:	115e      	asrs	r6, r3, #5
 8009e52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009e56:	f013 031f 	ands.w	r3, r3, #31
 8009e5a:	b087      	sub	sp, #28
 8009e5c:	bf18      	it	ne
 8009e5e:	3604      	addne	r6, #4
 8009e60:	2500      	movs	r5, #0
 8009e62:	1f37      	subs	r7, r6, #4
 8009e64:	4682      	mov	sl, r0
 8009e66:	4690      	mov	r8, r2
 8009e68:	9301      	str	r3, [sp, #4]
 8009e6a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009e6e:	46b9      	mov	r9, r7
 8009e70:	463c      	mov	r4, r7
 8009e72:	9502      	str	r5, [sp, #8]
 8009e74:	46ab      	mov	fp, r5
 8009e76:	784a      	ldrb	r2, [r1, #1]
 8009e78:	1c4b      	adds	r3, r1, #1
 8009e7a:	9303      	str	r3, [sp, #12]
 8009e7c:	b342      	cbz	r2, 8009ed0 <__hexnan+0x88>
 8009e7e:	4610      	mov	r0, r2
 8009e80:	9105      	str	r1, [sp, #20]
 8009e82:	9204      	str	r2, [sp, #16]
 8009e84:	f7ff fd76 	bl	8009974 <__hexdig_fun>
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	d14f      	bne.n	8009f2c <__hexnan+0xe4>
 8009e8c:	9a04      	ldr	r2, [sp, #16]
 8009e8e:	9905      	ldr	r1, [sp, #20]
 8009e90:	2a20      	cmp	r2, #32
 8009e92:	d818      	bhi.n	8009ec6 <__hexnan+0x7e>
 8009e94:	9b02      	ldr	r3, [sp, #8]
 8009e96:	459b      	cmp	fp, r3
 8009e98:	dd13      	ble.n	8009ec2 <__hexnan+0x7a>
 8009e9a:	454c      	cmp	r4, r9
 8009e9c:	d206      	bcs.n	8009eac <__hexnan+0x64>
 8009e9e:	2d07      	cmp	r5, #7
 8009ea0:	dc04      	bgt.n	8009eac <__hexnan+0x64>
 8009ea2:	462a      	mov	r2, r5
 8009ea4:	4649      	mov	r1, r9
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	f7ff ffa8 	bl	8009dfc <L_shift>
 8009eac:	4544      	cmp	r4, r8
 8009eae:	d950      	bls.n	8009f52 <__hexnan+0x10a>
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	f1a4 0904 	sub.w	r9, r4, #4
 8009eb6:	f844 3c04 	str.w	r3, [r4, #-4]
 8009eba:	f8cd b008 	str.w	fp, [sp, #8]
 8009ebe:	464c      	mov	r4, r9
 8009ec0:	461d      	mov	r5, r3
 8009ec2:	9903      	ldr	r1, [sp, #12]
 8009ec4:	e7d7      	b.n	8009e76 <__hexnan+0x2e>
 8009ec6:	2a29      	cmp	r2, #41	; 0x29
 8009ec8:	d155      	bne.n	8009f76 <__hexnan+0x12e>
 8009eca:	3102      	adds	r1, #2
 8009ecc:	f8ca 1000 	str.w	r1, [sl]
 8009ed0:	f1bb 0f00 	cmp.w	fp, #0
 8009ed4:	d04f      	beq.n	8009f76 <__hexnan+0x12e>
 8009ed6:	454c      	cmp	r4, r9
 8009ed8:	d206      	bcs.n	8009ee8 <__hexnan+0xa0>
 8009eda:	2d07      	cmp	r5, #7
 8009edc:	dc04      	bgt.n	8009ee8 <__hexnan+0xa0>
 8009ede:	462a      	mov	r2, r5
 8009ee0:	4649      	mov	r1, r9
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	f7ff ff8a 	bl	8009dfc <L_shift>
 8009ee8:	4544      	cmp	r4, r8
 8009eea:	d934      	bls.n	8009f56 <__hexnan+0x10e>
 8009eec:	f1a8 0204 	sub.w	r2, r8, #4
 8009ef0:	4623      	mov	r3, r4
 8009ef2:	f853 1b04 	ldr.w	r1, [r3], #4
 8009ef6:	f842 1f04 	str.w	r1, [r2, #4]!
 8009efa:	429f      	cmp	r7, r3
 8009efc:	d2f9      	bcs.n	8009ef2 <__hexnan+0xaa>
 8009efe:	1b3b      	subs	r3, r7, r4
 8009f00:	f023 0303 	bic.w	r3, r3, #3
 8009f04:	3304      	adds	r3, #4
 8009f06:	3e03      	subs	r6, #3
 8009f08:	3401      	adds	r4, #1
 8009f0a:	42a6      	cmp	r6, r4
 8009f0c:	bf38      	it	cc
 8009f0e:	2304      	movcc	r3, #4
 8009f10:	4443      	add	r3, r8
 8009f12:	2200      	movs	r2, #0
 8009f14:	f843 2b04 	str.w	r2, [r3], #4
 8009f18:	429f      	cmp	r7, r3
 8009f1a:	d2fb      	bcs.n	8009f14 <__hexnan+0xcc>
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	b91b      	cbnz	r3, 8009f28 <__hexnan+0xe0>
 8009f20:	4547      	cmp	r7, r8
 8009f22:	d126      	bne.n	8009f72 <__hexnan+0x12a>
 8009f24:	2301      	movs	r3, #1
 8009f26:	603b      	str	r3, [r7, #0]
 8009f28:	2005      	movs	r0, #5
 8009f2a:	e025      	b.n	8009f78 <__hexnan+0x130>
 8009f2c:	3501      	adds	r5, #1
 8009f2e:	2d08      	cmp	r5, #8
 8009f30:	f10b 0b01 	add.w	fp, fp, #1
 8009f34:	dd06      	ble.n	8009f44 <__hexnan+0xfc>
 8009f36:	4544      	cmp	r4, r8
 8009f38:	d9c3      	bls.n	8009ec2 <__hexnan+0x7a>
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f40:	2501      	movs	r5, #1
 8009f42:	3c04      	subs	r4, #4
 8009f44:	6822      	ldr	r2, [r4, #0]
 8009f46:	f000 000f 	and.w	r0, r0, #15
 8009f4a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009f4e:	6020      	str	r0, [r4, #0]
 8009f50:	e7b7      	b.n	8009ec2 <__hexnan+0x7a>
 8009f52:	2508      	movs	r5, #8
 8009f54:	e7b5      	b.n	8009ec2 <__hexnan+0x7a>
 8009f56:	9b01      	ldr	r3, [sp, #4]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d0df      	beq.n	8009f1c <__hexnan+0xd4>
 8009f5c:	f1c3 0320 	rsb	r3, r3, #32
 8009f60:	f04f 32ff 	mov.w	r2, #4294967295
 8009f64:	40da      	lsrs	r2, r3
 8009f66:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009f6a:	4013      	ands	r3, r2
 8009f6c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009f70:	e7d4      	b.n	8009f1c <__hexnan+0xd4>
 8009f72:	3f04      	subs	r7, #4
 8009f74:	e7d2      	b.n	8009f1c <__hexnan+0xd4>
 8009f76:	2004      	movs	r0, #4
 8009f78:	b007      	add	sp, #28
 8009f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f7e <__ascii_mbtowc>:
 8009f7e:	b082      	sub	sp, #8
 8009f80:	b901      	cbnz	r1, 8009f84 <__ascii_mbtowc+0x6>
 8009f82:	a901      	add	r1, sp, #4
 8009f84:	b142      	cbz	r2, 8009f98 <__ascii_mbtowc+0x1a>
 8009f86:	b14b      	cbz	r3, 8009f9c <__ascii_mbtowc+0x1e>
 8009f88:	7813      	ldrb	r3, [r2, #0]
 8009f8a:	600b      	str	r3, [r1, #0]
 8009f8c:	7812      	ldrb	r2, [r2, #0]
 8009f8e:	1e10      	subs	r0, r2, #0
 8009f90:	bf18      	it	ne
 8009f92:	2001      	movne	r0, #1
 8009f94:	b002      	add	sp, #8
 8009f96:	4770      	bx	lr
 8009f98:	4610      	mov	r0, r2
 8009f9a:	e7fb      	b.n	8009f94 <__ascii_mbtowc+0x16>
 8009f9c:	f06f 0001 	mvn.w	r0, #1
 8009fa0:	e7f8      	b.n	8009f94 <__ascii_mbtowc+0x16>

08009fa2 <_realloc_r>:
 8009fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa6:	4680      	mov	r8, r0
 8009fa8:	4614      	mov	r4, r2
 8009faa:	460e      	mov	r6, r1
 8009fac:	b921      	cbnz	r1, 8009fb8 <_realloc_r+0x16>
 8009fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fb2:	4611      	mov	r1, r2
 8009fb4:	f7fd bc66 	b.w	8007884 <_malloc_r>
 8009fb8:	b92a      	cbnz	r2, 8009fc6 <_realloc_r+0x24>
 8009fba:	f7fd fbef 	bl	800779c <_free_r>
 8009fbe:	4625      	mov	r5, r4
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fc6:	f000 f842 	bl	800a04e <_malloc_usable_size_r>
 8009fca:	4284      	cmp	r4, r0
 8009fcc:	4607      	mov	r7, r0
 8009fce:	d802      	bhi.n	8009fd6 <_realloc_r+0x34>
 8009fd0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009fd4:	d812      	bhi.n	8009ffc <_realloc_r+0x5a>
 8009fd6:	4621      	mov	r1, r4
 8009fd8:	4640      	mov	r0, r8
 8009fda:	f7fd fc53 	bl	8007884 <_malloc_r>
 8009fde:	4605      	mov	r5, r0
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	d0ed      	beq.n	8009fc0 <_realloc_r+0x1e>
 8009fe4:	42bc      	cmp	r4, r7
 8009fe6:	4622      	mov	r2, r4
 8009fe8:	4631      	mov	r1, r6
 8009fea:	bf28      	it	cs
 8009fec:	463a      	movcs	r2, r7
 8009fee:	f7ff fc23 	bl	8009838 <memcpy>
 8009ff2:	4631      	mov	r1, r6
 8009ff4:	4640      	mov	r0, r8
 8009ff6:	f7fd fbd1 	bl	800779c <_free_r>
 8009ffa:	e7e1      	b.n	8009fc0 <_realloc_r+0x1e>
 8009ffc:	4635      	mov	r5, r6
 8009ffe:	e7df      	b.n	8009fc0 <_realloc_r+0x1e>

0800a000 <__ascii_wctomb>:
 800a000:	b149      	cbz	r1, 800a016 <__ascii_wctomb+0x16>
 800a002:	2aff      	cmp	r2, #255	; 0xff
 800a004:	bf85      	ittet	hi
 800a006:	238a      	movhi	r3, #138	; 0x8a
 800a008:	6003      	strhi	r3, [r0, #0]
 800a00a:	700a      	strbls	r2, [r1, #0]
 800a00c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a010:	bf98      	it	ls
 800a012:	2001      	movls	r0, #1
 800a014:	4770      	bx	lr
 800a016:	4608      	mov	r0, r1
 800a018:	4770      	bx	lr
	...

0800a01c <fiprintf>:
 800a01c:	b40e      	push	{r1, r2, r3}
 800a01e:	b503      	push	{r0, r1, lr}
 800a020:	4601      	mov	r1, r0
 800a022:	ab03      	add	r3, sp, #12
 800a024:	4805      	ldr	r0, [pc, #20]	; (800a03c <fiprintf+0x20>)
 800a026:	f853 2b04 	ldr.w	r2, [r3], #4
 800a02a:	6800      	ldr	r0, [r0, #0]
 800a02c:	9301      	str	r3, [sp, #4]
 800a02e:	f7ff f97b 	bl	8009328 <_vfiprintf_r>
 800a032:	b002      	add	sp, #8
 800a034:	f85d eb04 	ldr.w	lr, [sp], #4
 800a038:	b003      	add	sp, #12
 800a03a:	4770      	bx	lr
 800a03c:	20000064 	.word	0x20000064

0800a040 <abort>:
 800a040:	b508      	push	{r3, lr}
 800a042:	2006      	movs	r0, #6
 800a044:	f000 f834 	bl	800a0b0 <raise>
 800a048:	2001      	movs	r0, #1
 800a04a:	f7f7 fd7f 	bl	8001b4c <_exit>

0800a04e <_malloc_usable_size_r>:
 800a04e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a052:	1f18      	subs	r0, r3, #4
 800a054:	2b00      	cmp	r3, #0
 800a056:	bfbc      	itt	lt
 800a058:	580b      	ldrlt	r3, [r1, r0]
 800a05a:	18c0      	addlt	r0, r0, r3
 800a05c:	4770      	bx	lr

0800a05e <_raise_r>:
 800a05e:	291f      	cmp	r1, #31
 800a060:	b538      	push	{r3, r4, r5, lr}
 800a062:	4604      	mov	r4, r0
 800a064:	460d      	mov	r5, r1
 800a066:	d904      	bls.n	800a072 <_raise_r+0x14>
 800a068:	2316      	movs	r3, #22
 800a06a:	6003      	str	r3, [r0, #0]
 800a06c:	f04f 30ff 	mov.w	r0, #4294967295
 800a070:	bd38      	pop	{r3, r4, r5, pc}
 800a072:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a074:	b112      	cbz	r2, 800a07c <_raise_r+0x1e>
 800a076:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a07a:	b94b      	cbnz	r3, 800a090 <_raise_r+0x32>
 800a07c:	4620      	mov	r0, r4
 800a07e:	f000 f831 	bl	800a0e4 <_getpid_r>
 800a082:	462a      	mov	r2, r5
 800a084:	4601      	mov	r1, r0
 800a086:	4620      	mov	r0, r4
 800a088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a08c:	f000 b818 	b.w	800a0c0 <_kill_r>
 800a090:	2b01      	cmp	r3, #1
 800a092:	d00a      	beq.n	800a0aa <_raise_r+0x4c>
 800a094:	1c59      	adds	r1, r3, #1
 800a096:	d103      	bne.n	800a0a0 <_raise_r+0x42>
 800a098:	2316      	movs	r3, #22
 800a09a:	6003      	str	r3, [r0, #0]
 800a09c:	2001      	movs	r0, #1
 800a09e:	e7e7      	b.n	800a070 <_raise_r+0x12>
 800a0a0:	2400      	movs	r4, #0
 800a0a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	4798      	blx	r3
 800a0aa:	2000      	movs	r0, #0
 800a0ac:	e7e0      	b.n	800a070 <_raise_r+0x12>
	...

0800a0b0 <raise>:
 800a0b0:	4b02      	ldr	r3, [pc, #8]	; (800a0bc <raise+0xc>)
 800a0b2:	4601      	mov	r1, r0
 800a0b4:	6818      	ldr	r0, [r3, #0]
 800a0b6:	f7ff bfd2 	b.w	800a05e <_raise_r>
 800a0ba:	bf00      	nop
 800a0bc:	20000064 	.word	0x20000064

0800a0c0 <_kill_r>:
 800a0c0:	b538      	push	{r3, r4, r5, lr}
 800a0c2:	4d07      	ldr	r5, [pc, #28]	; (800a0e0 <_kill_r+0x20>)
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	4608      	mov	r0, r1
 800a0ca:	4611      	mov	r1, r2
 800a0cc:	602b      	str	r3, [r5, #0]
 800a0ce:	f7f7 fd2d 	bl	8001b2c <_kill>
 800a0d2:	1c43      	adds	r3, r0, #1
 800a0d4:	d102      	bne.n	800a0dc <_kill_r+0x1c>
 800a0d6:	682b      	ldr	r3, [r5, #0]
 800a0d8:	b103      	cbz	r3, 800a0dc <_kill_r+0x1c>
 800a0da:	6023      	str	r3, [r4, #0]
 800a0dc:	bd38      	pop	{r3, r4, r5, pc}
 800a0de:	bf00      	nop
 800a0e0:	200004c8 	.word	0x200004c8

0800a0e4 <_getpid_r>:
 800a0e4:	f7f7 bd1a 	b.w	8001b1c <_getpid>

0800a0e8 <_init>:
 800a0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ea:	bf00      	nop
 800a0ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ee:	bc08      	pop	{r3}
 800a0f0:	469e      	mov	lr, r3
 800a0f2:	4770      	bx	lr

0800a0f4 <_fini>:
 800a0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f6:	bf00      	nop
 800a0f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0fa:	bc08      	pop	{r3}
 800a0fc:	469e      	mov	lr, r3
 800a0fe:	4770      	bx	lr

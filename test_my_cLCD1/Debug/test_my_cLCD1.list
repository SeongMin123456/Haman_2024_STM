
test_my_cLCD1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004944  08004944  00014944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a58  08004a58  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004a58  08004a58  00014a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a60  08004a60  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a60  08004a60  00014a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a64  08004a64  00014a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000078  08004ae0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08004ae0  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bdcb  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d9f  00000000  00000000  0002beb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a68  00000000  00000000  0002dc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000080e  00000000  00000000  0002e6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016d20  00000000  00000000  0002eece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d705  00000000  00000000  00045bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a1e7  00000000  00000000  000532f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000343c  00000000  00000000  000dd4dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000e0918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800492c 	.word	0x0800492c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800492c 	.word	0x0800492c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <lcd_command>:
#define I2C_ADDR 0x4E	// LCD 주소 값 : 0x27 << 1

I2C_HandleTypeDef *hi2c = NULL;  // i2c가 선언되지 않으면 동작 X

void lcd_command(char cmd)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af02      	add	r7, sp, #8
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
	unsigned char n1, n2, n3, n4, dd[4];
	n1 = cmd & 0xf0;	// upper nibble : top group 4 bit store
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	f023 030f 	bic.w	r3, r3, #15
 800058c:	73fb      	strb	r3, [r7, #15]
	n2 = (cmd & 0x0f) << 4;	// lower nibble : bottom group 4 bit store
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	011b      	lsls	r3, r3, #4
 8000592:	73bb      	strb	r3, [r7, #14]
	n3 = (1<<3)|(1<<2)|0|0; //Back light|EN_1|R/W|RS;	0x0c
 8000594:	230c      	movs	r3, #12
 8000596:	737b      	strb	r3, [r7, #13]
	n4 = (1<<3)|  0	  |0|0; //Back light|EN_1|R/W|RS;	0x08
 8000598:	2308      	movs	r3, #8
 800059a:	733b      	strb	r3, [r7, #12]
	dd[0] = n1 | n3;
 800059c:	7bfa      	ldrb	r2, [r7, #15]
 800059e:	7b7b      	ldrb	r3, [r7, #13]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	723b      	strb	r3, [r7, #8]
	dd[1] = n1 | n4;
 80005a6:	7bfa      	ldrb	r2, [r7, #15]
 80005a8:	7b3b      	ldrb	r3, [r7, #12]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	727b      	strb	r3, [r7, #9]
	dd[2] = n2 | n3;
 80005b0:	7bba      	ldrb	r2, [r7, #14]
 80005b2:	7b7b      	ldrb	r3, [r7, #13]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	72bb      	strb	r3, [r7, #10]
	dd[3] = n2 | n4;
 80005ba:	7bba      	ldrb	r2, [r7, #14]
 80005bc:	7b3b      	ldrb	r3, [r7, #12]
 80005be:	4313      	orrs	r3, r2
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hi2c, I2C_ADDR, dd, 4, 10);
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <lcd_command+0x64>)
 80005c6:	6818      	ldr	r0, [r3, #0]
 80005c8:	f107 0208 	add.w	r2, r7, #8
 80005cc:	230a      	movs	r3, #10
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	2304      	movs	r3, #4
 80005d2:	214e      	movs	r1, #78	; 0x4e
 80005d4:	f001 f9c8 	bl	8001968 <HAL_I2C_Master_Transmit>
}
 80005d8:	bf00      	nop
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000094 	.word	0x20000094

080005e4 <lcd_data>:
void lcd_data(char ch)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	unsigned char n1, n2, n3, n4, dd[4];
	n1 = ch & 0xf0;			// upper nibble : top group 4 bit store
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	f023 030f 	bic.w	r3, r3, #15
 80005f4:	73fb      	strb	r3, [r7, #15]
	n2 = (ch & 0x0f) << 4;	// lower nibble : bottom group 4 bit store
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	011b      	lsls	r3, r3, #4
 80005fa:	73bb      	strb	r3, [r7, #14]
	n3 = (1<<3)|(1<<2)|0|(1<<0); //Back light|EN_1|R/W|RS;	0x0E
 80005fc:	230d      	movs	r3, #13
 80005fe:	737b      	strb	r3, [r7, #13]
	n4 = (1<<3)|  0	  |0|(1<<0); //Back light|EN_1|R/W|RS;	0x09
 8000600:	2309      	movs	r3, #9
 8000602:	733b      	strb	r3, [r7, #12]
	dd[0] = n1 | n3;
 8000604:	7bfa      	ldrb	r2, [r7, #15]
 8000606:	7b7b      	ldrb	r3, [r7, #13]
 8000608:	4313      	orrs	r3, r2
 800060a:	b2db      	uxtb	r3, r3
 800060c:	723b      	strb	r3, [r7, #8]
	dd[1] = n1 | n4;
 800060e:	7bfa      	ldrb	r2, [r7, #15]
 8000610:	7b3b      	ldrb	r3, [r7, #12]
 8000612:	4313      	orrs	r3, r2
 8000614:	b2db      	uxtb	r3, r3
 8000616:	727b      	strb	r3, [r7, #9]
	dd[2] = n2 | n3;
 8000618:	7bba      	ldrb	r2, [r7, #14]
 800061a:	7b7b      	ldrb	r3, [r7, #13]
 800061c:	4313      	orrs	r3, r2
 800061e:	b2db      	uxtb	r3, r3
 8000620:	72bb      	strb	r3, [r7, #10]
	dd[3] = n2 | n4;
 8000622:	7bba      	ldrb	r2, [r7, #14]
 8000624:	7b3b      	ldrb	r3, [r7, #12]
 8000626:	4313      	orrs	r3, r2
 8000628:	b2db      	uxtb	r3, r3
 800062a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hi2c, I2C_ADDR, dd, 4, 10);
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <lcd_data+0x64>)
 800062e:	6818      	ldr	r0, [r3, #0]
 8000630:	f107 0208 	add.w	r2, r7, #8
 8000634:	230a      	movs	r3, #10
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2304      	movs	r3, #4
 800063a:	214e      	movs	r1, #78	; 0x4e
 800063c:	f001 f994 	bl	8001968 <HAL_I2C_Master_Transmit>
}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000094 	.word	0x20000094

0800064c <lcd_init>:
void lcd_init()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	HAL_Delay(50);  // 초기화 전 충분한 대기 시간
 8000650:	2032      	movs	r0, #50	; 0x32
 8000652:	f000 fd41 	bl	80010d8 <HAL_Delay>
	lcd_command(0x33);  // 4비트 모드 초기화 시퀀스
 8000656:	2033      	movs	r0, #51	; 0x33
 8000658:	f7ff ff90 	bl	800057c <lcd_command>
	lcd_command(0x32);
 800065c:	2032      	movs	r0, #50	; 0x32
 800065e:	f7ff ff8d 	bl	800057c <lcd_command>
	lcd_command(0x28);  // 4비트, 2라인, 5x8 폰트
 8000662:	2028      	movs	r0, #40	; 0x28
 8000664:	f7ff ff8a 	bl	800057c <lcd_command>
	lcd_command(0x0C);  // 디스플레이 온, 커서 오프
 8000668:	200c      	movs	r0, #12
 800066a:	f7ff ff87 	bl	800057c <lcd_command>
	lcd_command(0x06);  // 커서 방향 right
 800066e:	2006      	movs	r0, #6
 8000670:	f7ff ff84 	bl	800057c <lcd_command>
	lcd_command(0x01);  // 화면 클리어
 8000674:	2001      	movs	r0, #1
 8000676:	f7ff ff81 	bl	800057c <lcd_command>
	HAL_Delay(2);
 800067a:	2002      	movs	r0, #2
 800067c:	f000 fd2c 	bl	80010d8 <HAL_Delay>
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}

08000684 <lcd_print>:
	}
	lcd_print(str);
}

void lcd_print(char *str)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	while(*str)	lcd_data(*str++);
 800068c:	e006      	b.n	800069c <lcd_print+0x18>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	1c5a      	adds	r2, r3, #1
 8000692:	607a      	str	r2, [r7, #4]
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ffa4 	bl	80005e4 <lcd_data>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1f4      	bne.n	800068e <lcd_print+0xa>
}
 80006a4:	bf00      	nop
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <lcd_printEx>:
void lcd_printEx(char *str, int ln)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
 80006b6:	6039      	str	r1, [r7, #0]
	if(ln == 0) lcd_command (0x80);
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d102      	bne.n	80006c4 <lcd_printEx+0x16>
 80006be:	2080      	movs	r0, #128	; 0x80
 80006c0:	f7ff ff5c 	bl	800057c <lcd_command>
	if(ln == 1) lcd_command (0xc0);
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d102      	bne.n	80006d0 <lcd_printEx+0x22>
 80006ca:	20c0      	movs	r0, #192	; 0xc0
 80006cc:	f7ff ff56 	bl	800057c <lcd_command>
	lcd_print(str);
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f7ff ffd7 	bl	8000684 <lcd_print>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <i2c_init>:

void i2c_init(I2C_HandleTypeDef *p)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	hi2c = p;
 80006e8:	4a04      	ldr	r2, [pc, #16]	; (80006fc <i2c_init+0x1c>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6013      	str	r3, [r2, #0]
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	20000094 	.word	0x20000094

08000700 <i2c_scan>:

void i2c_scan()
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
	if(hi2c == NULL)	return;
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <i2c_scan+0x6c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d029      	beq.n	8000762 <i2c_scan+0x62>
	for(int addr=0; addr<128; addr++)
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	e022      	b.n	800075a <i2c_scan+0x5a>
	{
		if(HAL_I2C_IsDeviceReady(hi2c, addr, 1, 10 /* ms*/) == HAL_OK)
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <i2c_scan+0x6c>)
 8000716:	6818      	ldr	r0, [r3, #0]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	b299      	uxth	r1, r3
 800071c:	230a      	movs	r3, #10
 800071e:	2201      	movs	r2, #1
 8000720:	f001 fa20 	bl	8001b64 <HAL_I2C_IsDeviceReady>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d104      	bne.n	8000734 <i2c_scan+0x34>
		{
			printf("  %02x ", addr);
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	4810      	ldr	r0, [pc, #64]	; (8000770 <i2c_scan+0x70>)
 800072e:	f002 ff9f 	bl	8003670 <iprintf>
 8000732:	e002      	b.n	800073a <i2c_scan+0x3a>
		}
		else
		{
			printf("  .  ");
 8000734:	480f      	ldr	r0, [pc, #60]	; (8000774 <i2c_scan+0x74>)
 8000736:	f002 ff9b 	bl	8003670 <iprintf>
		}
		if((addr % 16) == 15)	printf("\r\n");
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	425a      	negs	r2, r3
 800073e:	f003 030f 	and.w	r3, r3, #15
 8000742:	f002 020f 	and.w	r2, r2, #15
 8000746:	bf58      	it	pl
 8000748:	4253      	negpl	r3, r2
 800074a:	2b0f      	cmp	r3, #15
 800074c:	d102      	bne.n	8000754 <i2c_scan+0x54>
 800074e:	480a      	ldr	r0, [pc, #40]	; (8000778 <i2c_scan+0x78>)
 8000750:	f002 fff4 	bl	800373c <puts>
	for(int addr=0; addr<128; addr++)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3301      	adds	r3, #1
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2b7f      	cmp	r3, #127	; 0x7f
 800075e:	ddd9      	ble.n	8000714 <i2c_scan+0x14>
 8000760:	e000      	b.n	8000764 <i2c_scan+0x64>
	if(hi2c == NULL)	return;
 8000762:	bf00      	nop
	}
}
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000094 	.word	0x20000094
 8000770:	08004944 	.word	0x08004944
 8000774:	0800494c 	.word	0x0800494c
 8000778:	08004954 	.word	0x08004954

0800077c <HAL_GPIO_EXTI_Callback>:
unsigned char *tt2 = "Every day... ";
unsigned char *tt3 = "I Love You   ";
unsigned char *tt4 = "Forever!     ";

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8000786:	88fb      	ldrh	r3, [r7, #6]
 8000788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800078c:	d003      	beq.n	8000796 <HAL_GPIO_EXTI_Callback+0x1a>
 800078e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000792:	d009      	beq.n	80007a8 <HAL_GPIO_EXTI_Callback+0x2c>
		case BTN1_Pin :
			str1 = tt3;
			str2 = tt4;
			break;
	}
}
 8000794:	e011      	b.n	80007ba <HAL_GPIO_EXTI_Callback+0x3e>
			str1 = tt1;
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a0c      	ldr	r2, [pc, #48]	; (80007cc <HAL_GPIO_EXTI_Callback+0x50>)
 800079c:	6013      	str	r3, [r2, #0]
			str2 = tt2;
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <HAL_GPIO_EXTI_Callback+0x54>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a0c      	ldr	r2, [pc, #48]	; (80007d4 <HAL_GPIO_EXTI_Callback+0x58>)
 80007a4:	6013      	str	r3, [r2, #0]
			break;
 80007a6:	e008      	b.n	80007ba <HAL_GPIO_EXTI_Callback+0x3e>
			str1 = tt3;
 80007a8:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a07      	ldr	r2, [pc, #28]	; (80007cc <HAL_GPIO_EXTI_Callback+0x50>)
 80007ae:	6013      	str	r3, [r2, #0]
			str2 = tt4;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <HAL_GPIO_EXTI_Callback+0x60>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a07      	ldr	r2, [pc, #28]	; (80007d4 <HAL_GPIO_EXTI_Callback+0x58>)
 80007b6:	6013      	str	r3, [r2, #0]
			break;
 80007b8:	bf00      	nop
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000000 	.word	0x20000000
 80007cc:	20000134 	.word	0x20000134
 80007d0:	20000004 	.word	0x20000004
 80007d4:	20000138 	.word	0x20000138
 80007d8:	20000008 	.word	0x20000008
 80007dc:	2000000c 	.word	0x2000000c

080007e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e4:	f000 fc06 	bl	8000ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e8:	f000 f836 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ec:	f000 f8f6 	bl	80009dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007f0:	f000 f8ca 	bl	8000988 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007f4:	f000 f89a 	bl	800092c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ProgramStart("LCD (1602)");
 80007f8:	4811      	ldr	r0, [pc, #68]	; (8000840 <main+0x60>)
 80007fa:	f000 f9fb 	bl	8000bf4 <ProgramStart>
  i2c_init(&hi2c1);
 80007fe:	4811      	ldr	r0, [pc, #68]	; (8000844 <main+0x64>)
 8000800:	f7ff ff6e 	bl	80006e0 <i2c_init>
  i2c_scan();
 8000804:	f7ff ff7c 	bl	8000700 <i2c_scan>

  lcd_init();
 8000808:	f7ff ff20 	bl	800064c <lcd_init>

  str1 = "LCD Test";
 800080c:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <main+0x68>)
 800080e:	4a0f      	ldr	r2, [pc, #60]	; (800084c <main+0x6c>)
 8000810:	601a      	str	r2, [r3, #0]
  str2 = "Let's start";
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <main+0x70>)
 8000814:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <main+0x74>)
 8000816:	601a      	str	r2, [r3, #0]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    lcd_printEx(str1, 0);
 8000818:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <main+0x68>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff ff45 	bl	80006ae <lcd_printEx>
		HAL_Delay(50);
 8000824:	2032      	movs	r0, #50	; 0x32
 8000826:	f000 fc57 	bl	80010d8 <HAL_Delay>
		lcd_printEx(str2, 1);
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <main+0x70>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2101      	movs	r1, #1
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff3c 	bl	80006ae <lcd_printEx>
		HAL_Delay(50);
 8000836:	2032      	movs	r0, #50	; 0x32
 8000838:	f000 fc4e 	bl	80010d8 <HAL_Delay>
  {
 800083c:	e7ec      	b.n	8000818 <main+0x38>
 800083e:	bf00      	nop
 8000840:	08004998 	.word	0x08004998
 8000844:	20000098 	.word	0x20000098
 8000848:	20000134 	.word	0x20000134
 800084c:	080049a4 	.word	0x080049a4
 8000850:	20000138 	.word	0x20000138
 8000854:	080049b0 	.word	0x080049b0

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	; 0x50
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	2230      	movs	r2, #48	; 0x30
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f003 f916 	bl	8003a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	4b28      	ldr	r3, [pc, #160]	; (8000924 <SystemClock_Config+0xcc>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	4a27      	ldr	r2, [pc, #156]	; (8000924 <SystemClock_Config+0xcc>)
 8000886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088a:	6413      	str	r3, [r2, #64]	; 0x40
 800088c:	4b25      	ldr	r3, [pc, #148]	; (8000924 <SystemClock_Config+0xcc>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	4b22      	ldr	r3, [pc, #136]	; (8000928 <SystemClock_Config+0xd0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a21      	ldr	r2, [pc, #132]	; (8000928 <SystemClock_Config+0xd0>)
 80008a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <SystemClock_Config+0xd0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b4:	2302      	movs	r3, #2
 80008b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b8:	2301      	movs	r3, #1
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008bc:	2310      	movs	r3, #16
 80008be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c0:	2302      	movs	r3, #2
 80008c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c4:	2300      	movs	r3, #0
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008c8:	2310      	movs	r3, #16
 80008ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008d2:	2304      	movs	r3, #4
 80008d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008d6:	2304      	movs	r3, #4
 80008d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008da:	f107 0320 	add.w	r3, r7, #32
 80008de:	4618      	mov	r0, r3
 80008e0:	f001 fcca 	bl	8002278 <HAL_RCC_OscConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008ea:	f000 f913 	bl	8000b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ee:	230f      	movs	r3, #15
 80008f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f2:	2302      	movs	r3, #2
 80008f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	2102      	movs	r1, #2
 800090a:	4618      	mov	r0, r3
 800090c:	f001 ff2c 	bl	8002768 <HAL_RCC_ClockConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000916:	f000 f8fd 	bl	8000b14 <Error_Handler>
  }
}
 800091a:	bf00      	nop
 800091c:	3750      	adds	r7, #80	; 0x50
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800
 8000928:	40007000 	.word	0x40007000

0800092c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <MX_I2C1_Init+0x50>)
 8000932:	4a13      	ldr	r2, [pc, #76]	; (8000980 <MX_I2C1_Init+0x54>)
 8000934:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_I2C1_Init+0x50>)
 8000938:	4a12      	ldr	r2, [pc, #72]	; (8000984 <MX_I2C1_Init+0x58>)
 800093a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_I2C1_Init+0x50>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_I2C1_Init+0x50>)
 8000944:	2200      	movs	r2, #0
 8000946:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_I2C1_Init+0x50>)
 800094a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800094e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <MX_I2C1_Init+0x50>)
 8000952:	2200      	movs	r2, #0
 8000954:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_I2C1_Init+0x50>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <MX_I2C1_Init+0x50>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_I2C1_Init+0x50>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <MX_I2C1_Init+0x50>)
 800096a:	f000 feb9 	bl	80016e0 <HAL_I2C_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000974:	f000 f8ce 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000098 	.word	0x20000098
 8000980:	40005400 	.word	0x40005400
 8000984:	000186a0 	.word	0x000186a0

08000988 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 800098e:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <MX_USART2_UART_Init+0x50>)
 8000990:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009c0:	f002 f8f2 	bl	8002ba8 <HAL_UART_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ca:	f000 f8a3 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200000ec 	.word	0x200000ec
 80009d8:	40004400 	.word	0x40004400

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	4b43      	ldr	r3, [pc, #268]	; (8000b04 <MX_GPIO_Init+0x128>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a42      	ldr	r2, [pc, #264]	; (8000b04 <MX_GPIO_Init+0x128>)
 80009fc:	f043 0304 	orr.w	r3, r3, #4
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b40      	ldr	r3, [pc, #256]	; (8000b04 <MX_GPIO_Init+0x128>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0304 	and.w	r3, r3, #4
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b3c      	ldr	r3, [pc, #240]	; (8000b04 <MX_GPIO_Init+0x128>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a3b      	ldr	r2, [pc, #236]	; (8000b04 <MX_GPIO_Init+0x128>)
 8000a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b39      	ldr	r3, [pc, #228]	; (8000b04 <MX_GPIO_Init+0x128>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	4b35      	ldr	r3, [pc, #212]	; (8000b04 <MX_GPIO_Init+0x128>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a34      	ldr	r2, [pc, #208]	; (8000b04 <MX_GPIO_Init+0x128>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b32      	ldr	r3, [pc, #200]	; (8000b04 <MX_GPIO_Init+0x128>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b2e      	ldr	r3, [pc, #184]	; (8000b04 <MX_GPIO_Init+0x128>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a2d      	ldr	r2, [pc, #180]	; (8000b04 <MX_GPIO_Init+0x128>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b2b      	ldr	r3, [pc, #172]	; (8000b04 <MX_GPIO_Init+0x128>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2120      	movs	r1, #32
 8000a66:	4828      	ldr	r0, [pc, #160]	; (8000b08 <MX_GPIO_Init+0x12c>)
 8000a68:	f000 fe08 	bl	800167c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a72:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	4822      	ldr	r0, [pc, #136]	; (8000b0c <MX_GPIO_Init+0x130>)
 8000a84:	f000 fc5e 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a88:	2320      	movs	r3, #32
 8000a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	481a      	ldr	r0, [pc, #104]	; (8000b08 <MX_GPIO_Init+0x12c>)
 8000aa0:	f000 fc50 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 8000aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aaa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4815      	ldr	r0, [pc, #84]	; (8000b10 <MX_GPIO_Init+0x134>)
 8000abc:	f000 fc42 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin;
 8000ac0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480c      	ldr	r0, [pc, #48]	; (8000b08 <MX_GPIO_Init+0x12c>)
 8000ad8:	f000 fc34 	bl	8001344 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2017      	movs	r0, #23
 8000ae2:	f000 fbf8 	bl	80012d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ae6:	2017      	movs	r0, #23
 8000ae8:	f000 fc11 	bl	800130e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2100      	movs	r1, #0
 8000af0:	2028      	movs	r0, #40	; 0x28
 8000af2:	f000 fbf0 	bl	80012d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000af6:	2028      	movs	r0, #40	; 0x28
 8000af8:	f000 fc09 	bl	800130e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000afc:	bf00      	nop
 8000afe:	3728      	adds	r7, #40	; 0x28
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40020800 	.word	0x40020800
 8000b10:	40020400 	.word	0x40020400

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
}
 8000b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <Error_Handler+0x8>
	...

08000b20 <__io_getchar>:
#include "main.h"
#include <stdio.h>

extern UART_HandleTypeDef huart2;

int __io_getchar(void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
	char ch;
	while(HAL_UART_Receive(&huart2, &ch, 1, 10/*ms*/) != HAL_OK);
 8000b26:	bf00      	nop
 8000b28:	1df9      	adds	r1, r7, #7
 8000b2a:	230a      	movs	r3, #10
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	480d      	ldr	r0, [pc, #52]	; (8000b64 <__io_getchar+0x44>)
 8000b30:	f002 f915 	bl	8002d5e <HAL_UART_Receive>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d1f6      	bne.n	8000b28 <__io_getchar+0x8>
	HAL_UART_Transmit(&huart2, &ch, 1, 10/*ms*/);	// Echo
 8000b3a:	1df9      	adds	r1, r7, #7
 8000b3c:	230a      	movs	r3, #10
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4808      	ldr	r0, [pc, #32]	; (8000b64 <__io_getchar+0x44>)
 8000b42:	f002 f881 	bl	8002c48 <HAL_UART_Transmit>
	if(ch == '\r'/* Enter */)	HAL_UART_Transmit(&huart2, "\n", 1, 10/*ms*/);
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2b0d      	cmp	r3, #13
 8000b4a:	d105      	bne.n	8000b58 <__io_getchar+0x38>
 8000b4c:	230a      	movs	r3, #10
 8000b4e:	2201      	movs	r2, #1
 8000b50:	4905      	ldr	r1, [pc, #20]	; (8000b68 <__io_getchar+0x48>)
 8000b52:	4804      	ldr	r0, [pc, #16]	; (8000b64 <__io_getchar+0x44>)
 8000b54:	f002 f878 	bl	8002c48 <HAL_UART_Transmit>
	return ch;
 8000b58:	79fb      	ldrb	r3, [r7, #7]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200000ec 	.word	0x200000ec
 8000b68:	080049bc 	.word	0x080049bc

08000b6c <__io_putchar>:
int __io_putchar(int ch) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 10/*ms*/);
 8000b74:	1d39      	adds	r1, r7, #4
 8000b76:	230a      	movs	r3, #10
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4804      	ldr	r0, [pc, #16]	; (8000b8c <__io_putchar+0x20>)
 8000b7c:	f002 f864 	bl	8002c48 <HAL_UART_Transmit>
	return ch;
 8000b80:	687b      	ldr	r3, [r7, #4]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200000ec 	.word	0x200000ec

08000b90 <standby>:
void standby() {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8000b94:	bf00      	nop
 8000b96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b9a:	4804      	ldr	r0, [pc, #16]	; (8000bac <standby+0x1c>)
 8000b9c:	f000 fd56 	bl	800164c <HAL_GPIO_ReadPin>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d1f7      	bne.n	8000b96 <standby+0x6>
		;
}
 8000ba6:	bf00      	nop
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40020800 	.word	0x40020800

08000bb0 <cls>:
void cls()				   // 화면 clear
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	printf("\033[2J");
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <cls+0x10>)
 8000bb6:	f002 fd5b 	bl	8003670 <iprintf>
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	080049c0 	.word	0x080049c0

08000bc4 <cursor>:
void cursor(int x, int y)  // 해당 위치로 커서 이동
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
	char buf[20];
	sprintf(buf, "\033[%d;%dH", y, x);
 8000bce:	f107 000c 	add.w	r0, r7, #12
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	4906      	ldr	r1, [pc, #24]	; (8000bf0 <cursor+0x2c>)
 8000bd8:	f002 fe66 	bl	80038a8 <siprintf>
	puts(buf);
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	4618      	mov	r0, r3
 8000be2:	f002 fdab 	bl	800373c <puts>
}
 8000be6:	bf00      	nop
 8000be8:	3720      	adds	r7, #32
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	080049c8 	.word	0x080049c8

08000bf4 <ProgramStart>:
void ProgramStart(char *str)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
//	printf("\033[2J\033[0;0H");
	cls();
 8000bfc:	f7ff ffd8 	bl	8000bb0 <cls>
	cursor(0,0);
 8000c00:	2100      	movs	r1, #0
 8000c02:	2000      	movs	r0, #0
 8000c04:	f7ff ffde 	bl	8000bc4 <cursor>
	printf("program Name - %s\r\n", str);
 8000c08:	6879      	ldr	r1, [r7, #4]
 8000c0a:	480a      	ldr	r0, [pc, #40]	; (8000c34 <ProgramStart+0x40>)
 8000c0c:	f002 fd30 	bl	8003670 <iprintf>
	printf("Press Blue-button(B1) to Start...\r\n");
 8000c10:	4809      	ldr	r0, [pc, #36]	; (8000c38 <ProgramStart+0x44>)
 8000c12:	f002 fd93 	bl	800373c <puts>
	standby();
 8000c16:	f7ff ffbb 	bl	8000b90 <standby>
	setvbuf(stdin, NULL, _IONBF, 0);
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <ProgramStart+0x48>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	6858      	ldr	r0, [r3, #4]
 8000c20:	2300      	movs	r3, #0
 8000c22:	2202      	movs	r2, #2
 8000c24:	2100      	movs	r1, #0
 8000c26:	f002 fd91 	bl	800374c <setvbuf>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	080049d4 	.word	0x080049d4
 8000c38:	080049e8 	.word	0x080049e8
 8000c3c:	20000074 	.word	0x20000074

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	4a0f      	ldr	r2, [pc, #60]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c54:	6453      	str	r3, [r2, #68]	; 0x44
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c70:	6413      	str	r3, [r2, #64]	; 0x40
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c7e:	2007      	movs	r0, #7
 8000c80:	f000 fb1e 	bl	80012c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40023800 	.word	0x40023800

08000c90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a19      	ldr	r2, [pc, #100]	; (8000d14 <HAL_I2C_MspInit+0x84>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d12c      	bne.n	8000d0c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <HAL_I2C_MspInit+0x88>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a17      	ldr	r2, [pc, #92]	; (8000d18 <HAL_I2C_MspInit+0x88>)
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <HAL_I2C_MspInit+0x88>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cd4:	2312      	movs	r3, #18
 8000cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480c      	ldr	r0, [pc, #48]	; (8000d1c <HAL_I2C_MspInit+0x8c>)
 8000cec:	f000 fb2a 	bl	8001344 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <HAL_I2C_MspInit+0x88>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	4a07      	ldr	r2, [pc, #28]	; (8000d18 <HAL_I2C_MspInit+0x88>)
 8000cfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <HAL_I2C_MspInit+0x88>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3728      	adds	r7, #40	; 0x28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40005400 	.word	0x40005400
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020400 	.word	0x40020400

08000d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a19      	ldr	r2, [pc, #100]	; (8000da4 <HAL_UART_MspInit+0x84>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d12b      	bne.n	8000d9a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <HAL_UART_MspInit+0x88>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <HAL_UART_MspInit+0x88>)
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <HAL_UART_MspInit+0x88>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HAL_UART_MspInit+0x88>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a10      	ldr	r2, [pc, #64]	; (8000da8 <HAL_UART_MspInit+0x88>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_UART_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d7a:	230c      	movs	r3, #12
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d8a:	2307      	movs	r3, #7
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <HAL_UART_MspInit+0x8c>)
 8000d96:	f000 fad5 	bl	8001344 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3728      	adds	r7, #40	; 0x28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40004400 	.word	0x40004400
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020000 	.word	0x40020000

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db4:	e7fe      	b.n	8000db4 <NMI_Handler+0x4>

08000db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfc:	f000 f94c 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN0_Pin);
 8000e08:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e0c:	f000 fc50 	bl	80016b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8000e10:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e14:	f000 fc4c 	bl	80016b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8000e20:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000e24:	f000 fc44 	bl	80016b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e2c:	f000 fc40 	bl	80016b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	e00a      	b.n	8000e5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e46:	f7ff fe6b 	bl	8000b20 <__io_getchar>
 8000e4a:	4601      	mov	r1, r0
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	1c5a      	adds	r2, r3, #1
 8000e50:	60ba      	str	r2, [r7, #8]
 8000e52:	b2ca      	uxtb	r2, r1
 8000e54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	dbf0      	blt.n	8000e46 <_read+0x12>
  }

  return len;
 8000e64:	687b      	ldr	r3, [r7, #4]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b086      	sub	sp, #24
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	60f8      	str	r0, [r7, #12]
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	e009      	b.n	8000e94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	1c5a      	adds	r2, r3, #1
 8000e84:	60ba      	str	r2, [r7, #8]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fe6f 	bl	8000b6c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	3301      	adds	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	dbf1      	blt.n	8000e80 <_write+0x12>
  }
  return len;
 8000e9c:	687b      	ldr	r3, [r7, #4]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <_close>:

int _close(int file)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ece:	605a      	str	r2, [r3, #4]
  return 0;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <_isatty>:

int _isatty(int file)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f18:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <_sbrk+0x5c>)
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <_sbrk+0x60>)
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <_sbrk+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d102      	bne.n	8000f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <_sbrk+0x64>)
 8000f2e:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <_sbrk+0x68>)
 8000f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <_sbrk+0x64>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d207      	bcs.n	8000f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f40:	f002 fdf8 	bl	8003b34 <__errno>
 8000f44:	4603      	mov	r3, r0
 8000f46:	220c      	movs	r2, #12
 8000f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	e009      	b.n	8000f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <_sbrk+0x64>)
 8000f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f62:	68fb      	ldr	r3, [r7, #12]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20020000 	.word	0x20020000
 8000f70:	00000400 	.word	0x00000400
 8000f74:	2000013c 	.word	0x2000013c
 8000f78:	20000290 	.word	0x20000290

08000f7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <SystemInit+0x20>)
 8000f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f86:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <SystemInit+0x20>)
 8000f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fa4:	f7ff ffea 	bl	8000f7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fa8:	480c      	ldr	r0, [pc, #48]	; (8000fdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000faa:	490d      	ldr	r1, [pc, #52]	; (8000fe0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fac:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb0:	e002      	b.n	8000fb8 <LoopCopyDataInit>

08000fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb6:	3304      	adds	r3, #4

08000fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fbc:	d3f9      	bcc.n	8000fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fc0:	4c0a      	ldr	r4, [pc, #40]	; (8000fec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc4:	e001      	b.n	8000fca <LoopFillZerobss>

08000fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc8:	3204      	adds	r2, #4

08000fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fcc:	d3fb      	bcc.n	8000fc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fce:	f002 fdb7 	bl	8003b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd2:	f7ff fc05 	bl	80007e0 <main>
  bx  lr    
 8000fd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000fe4:	08004a68 	.word	0x08004a68
  ldr r2, =_sbss
 8000fe8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000fec:	20000290 	.word	0x20000290

08000ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC_IRQHandler>
	...

08000ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <HAL_Init+0x40>)
 8000ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001002:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <HAL_Init+0x40>)
 800100a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a07      	ldr	r2, [pc, #28]	; (8001034 <HAL_Init+0x40>)
 8001016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101c:	2003      	movs	r0, #3
 800101e:	f000 f94f 	bl	80012c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001022:	2000      	movs	r0, #0
 8001024:	f000 f808 	bl	8001038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001028:	f7ff fe0a 	bl	8000c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023c00 	.word	0x40023c00

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_InitTick+0x54>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_InitTick+0x58>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f967 	bl	800132a <HAL_SYSTICK_Config>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e00e      	b.n	8001084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d80a      	bhi.n	8001082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f000 f92f 	bl	80012d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001078:	4a06      	ldr	r2, [pc, #24]	; (8001094 <HAL_InitTick+0x5c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000010 	.word	0x20000010
 8001090:	20000018 	.word	0x20000018
 8001094:	20000014 	.word	0x20000014

08001098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x20>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x24>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <HAL_IncTick+0x24>)
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000018 	.word	0x20000018
 80010bc:	20000140 	.word	0x20000140

080010c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <HAL_GetTick+0x14>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000140 	.word	0x20000140

080010d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e0:	f7ff ffee 	bl	80010c0 <HAL_GetTick>
 80010e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f0:	d005      	beq.n	80010fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_Delay+0x44>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010fe:	bf00      	nop
 8001100:	f7ff ffde 	bl	80010c0 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	429a      	cmp	r2, r3
 800110e:	d8f7      	bhi.n	8001100 <HAL_Delay+0x28>
  {
  }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000018 	.word	0x20000018

08001120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800113c:	4013      	ands	r3, r2
 800113e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001152:	4a04      	ldr	r2, [pc, #16]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60d3      	str	r3, [r2, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <__NVIC_GetPriorityGrouping+0x18>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	f003 0307 	and.w	r3, r3, #7
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	2b00      	cmp	r3, #0
 8001194:	db0b      	blt.n	80011ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	f003 021f 	and.w	r2, r3, #31
 800119c:	4907      	ldr	r1, [pc, #28]	; (80011bc <__NVIC_EnableIRQ+0x38>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	2001      	movs	r0, #1
 80011a6:	fa00 f202 	lsl.w	r2, r0, r2
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000e100 	.word	0xe000e100

080011c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	db0a      	blt.n	80011ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	490c      	ldr	r1, [pc, #48]	; (800120c <__NVIC_SetPriority+0x4c>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	0112      	lsls	r2, r2, #4
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	440b      	add	r3, r1
 80011e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e8:	e00a      	b.n	8001200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4908      	ldr	r1, [pc, #32]	; (8001210 <__NVIC_SetPriority+0x50>)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	3b04      	subs	r3, #4
 80011f8:	0112      	lsls	r2, r2, #4
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	440b      	add	r3, r1
 80011fe:	761a      	strb	r2, [r3, #24]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000e100 	.word	0xe000e100
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	; 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f1c3 0307 	rsb	r3, r3, #7
 800122e:	2b04      	cmp	r3, #4
 8001230:	bf28      	it	cs
 8001232:	2304      	movcs	r3, #4
 8001234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3304      	adds	r3, #4
 800123a:	2b06      	cmp	r3, #6
 800123c:	d902      	bls.n	8001244 <NVIC_EncodePriority+0x30>
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3b03      	subs	r3, #3
 8001242:	e000      	b.n	8001246 <NVIC_EncodePriority+0x32>
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	f04f 32ff 	mov.w	r2, #4294967295
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43da      	mvns	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	401a      	ands	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800125c:	f04f 31ff 	mov.w	r1, #4294967295
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa01 f303 	lsl.w	r3, r1, r3
 8001266:	43d9      	mvns	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	4313      	orrs	r3, r2
         );
}
 800126e:	4618      	mov	r0, r3
 8001270:	3724      	adds	r7, #36	; 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800128c:	d301      	bcc.n	8001292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800128e:	2301      	movs	r3, #1
 8001290:	e00f      	b.n	80012b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <SysTick_Config+0x40>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129a:	210f      	movs	r1, #15
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f7ff ff8e 	bl	80011c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <SysTick_Config+0x40>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <SysTick_Config+0x40>)
 80012ac:	2207      	movs	r2, #7
 80012ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	e000e010 	.word	0xe000e010

080012c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff29 	bl	8001120 <__NVIC_SetPriorityGrouping>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b086      	sub	sp, #24
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e8:	f7ff ff3e 	bl	8001168 <__NVIC_GetPriorityGrouping>
 80012ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	68b9      	ldr	r1, [r7, #8]
 80012f2:	6978      	ldr	r0, [r7, #20]
 80012f4:	f7ff ff8e 	bl	8001214 <NVIC_EncodePriority>
 80012f8:	4602      	mov	r2, r0
 80012fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff5d 	bl	80011c0 <__NVIC_SetPriority>
}
 8001306:	bf00      	nop
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff31 	bl	8001184 <__NVIC_EnableIRQ>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ffa2 	bl	800127c <SysTick_Config>
 8001338:	4603      	mov	r3, r0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
 800135e:	e159      	b.n	8001614 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001360:	2201      	movs	r2, #1
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	429a      	cmp	r2, r3
 800137a:	f040 8148 	bne.w	800160e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	2b01      	cmp	r3, #1
 8001388:	d005      	beq.n	8001396 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001392:	2b02      	cmp	r3, #2
 8001394:	d130      	bne.n	80013f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	2203      	movs	r2, #3
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	68da      	ldr	r2, [r3, #12]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013cc:	2201      	movs	r2, #1
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	091b      	lsrs	r3, r3, #4
 80013e2:	f003 0201 	and.w	r2, r3, #1
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b03      	cmp	r3, #3
 8001402:	d017      	beq.n	8001434 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d123      	bne.n	8001488 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	08da      	lsrs	r2, r3, #3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3208      	adds	r2, #8
 8001448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	220f      	movs	r2, #15
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	691a      	ldr	r2, [r3, #16]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	08da      	lsrs	r2, r3, #3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3208      	adds	r2, #8
 8001482:	69b9      	ldr	r1, [r7, #24]
 8001484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2203      	movs	r2, #3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0203 	and.w	r2, r3, #3
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 80a2 	beq.w	800160e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b57      	ldr	r3, [pc, #348]	; (800162c <HAL_GPIO_Init+0x2e8>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	4a56      	ldr	r2, [pc, #344]	; (800162c <HAL_GPIO_Init+0x2e8>)
 80014d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d8:	6453      	str	r3, [r2, #68]	; 0x44
 80014da:	4b54      	ldr	r3, [pc, #336]	; (800162c <HAL_GPIO_Init+0x2e8>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014e6:	4a52      	ldr	r2, [pc, #328]	; (8001630 <HAL_GPIO_Init+0x2ec>)
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	089b      	lsrs	r3, r3, #2
 80014ec:	3302      	adds	r3, #2
 80014ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	220f      	movs	r2, #15
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a49      	ldr	r2, [pc, #292]	; (8001634 <HAL_GPIO_Init+0x2f0>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d019      	beq.n	8001546 <HAL_GPIO_Init+0x202>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a48      	ldr	r2, [pc, #288]	; (8001638 <HAL_GPIO_Init+0x2f4>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d013      	beq.n	8001542 <HAL_GPIO_Init+0x1fe>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a47      	ldr	r2, [pc, #284]	; (800163c <HAL_GPIO_Init+0x2f8>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d00d      	beq.n	800153e <HAL_GPIO_Init+0x1fa>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a46      	ldr	r2, [pc, #280]	; (8001640 <HAL_GPIO_Init+0x2fc>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d007      	beq.n	800153a <HAL_GPIO_Init+0x1f6>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a45      	ldr	r2, [pc, #276]	; (8001644 <HAL_GPIO_Init+0x300>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d101      	bne.n	8001536 <HAL_GPIO_Init+0x1f2>
 8001532:	2304      	movs	r3, #4
 8001534:	e008      	b.n	8001548 <HAL_GPIO_Init+0x204>
 8001536:	2307      	movs	r3, #7
 8001538:	e006      	b.n	8001548 <HAL_GPIO_Init+0x204>
 800153a:	2303      	movs	r3, #3
 800153c:	e004      	b.n	8001548 <HAL_GPIO_Init+0x204>
 800153e:	2302      	movs	r3, #2
 8001540:	e002      	b.n	8001548 <HAL_GPIO_Init+0x204>
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <HAL_GPIO_Init+0x204>
 8001546:	2300      	movs	r3, #0
 8001548:	69fa      	ldr	r2, [r7, #28]
 800154a:	f002 0203 	and.w	r2, r2, #3
 800154e:	0092      	lsls	r2, r2, #2
 8001550:	4093      	lsls	r3, r2
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001558:	4935      	ldr	r1, [pc, #212]	; (8001630 <HAL_GPIO_Init+0x2ec>)
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	089b      	lsrs	r3, r3, #2
 800155e:	3302      	adds	r3, #2
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001566:	4b38      	ldr	r3, [pc, #224]	; (8001648 <HAL_GPIO_Init+0x304>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800158a:	4a2f      	ldr	r2, [pc, #188]	; (8001648 <HAL_GPIO_Init+0x304>)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001590:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <HAL_GPIO_Init+0x304>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015b4:	4a24      	ldr	r2, [pc, #144]	; (8001648 <HAL_GPIO_Init+0x304>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015ba:	4b23      	ldr	r3, [pc, #140]	; (8001648 <HAL_GPIO_Init+0x304>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015de:	4a1a      	ldr	r2, [pc, #104]	; (8001648 <HAL_GPIO_Init+0x304>)
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015e4:	4b18      	ldr	r3, [pc, #96]	; (8001648 <HAL_GPIO_Init+0x304>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001608:	4a0f      	ldr	r2, [pc, #60]	; (8001648 <HAL_GPIO_Init+0x304>)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3301      	adds	r3, #1
 8001612:	61fb      	str	r3, [r7, #28]
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	2b0f      	cmp	r3, #15
 8001618:	f67f aea2 	bls.w	8001360 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3724      	adds	r7, #36	; 0x24
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	40013800 	.word	0x40013800
 8001634:	40020000 	.word	0x40020000
 8001638:	40020400 	.word	0x40020400
 800163c:	40020800 	.word	0x40020800
 8001640:	40020c00 	.word	0x40020c00
 8001644:	40021000 	.word	0x40021000
 8001648:	40013c00 	.word	0x40013c00

0800164c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691a      	ldr	r2, [r3, #16]
 800165c:	887b      	ldrh	r3, [r7, #2]
 800165e:	4013      	ands	r3, r2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d002      	beq.n	800166a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001664:	2301      	movs	r3, #1
 8001666:	73fb      	strb	r3, [r7, #15]
 8001668:	e001      	b.n	800166e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800166e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	807b      	strh	r3, [r7, #2]
 8001688:	4613      	mov	r3, r2
 800168a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800168c:	787b      	ldrb	r3, [r7, #1]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001692:	887a      	ldrh	r2, [r7, #2]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001698:	e003      	b.n	80016a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800169a:	887b      	ldrh	r3, [r7, #2]
 800169c:	041a      	lsls	r2, r3, #16
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	619a      	str	r2, [r3, #24]
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016bc:	695a      	ldr	r2, [r3, #20]
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	4013      	ands	r3, r2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d006      	beq.n	80016d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016c6:	4a05      	ldr	r2, [pc, #20]	; (80016dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016c8:	88fb      	ldrh	r3, [r7, #6]
 80016ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff f854 	bl	800077c <HAL_GPIO_EXTI_Callback>
  }
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40013c00 	.word	0x40013c00

080016e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e12b      	b.n	800194a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d106      	bne.n	800170c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff fac2 	bl	8000c90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2224      	movs	r2, #36	; 0x24
 8001710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0201 	bic.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001732:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001742:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001744:	f001 fa08 	bl	8002b58 <HAL_RCC_GetPCLK1Freq>
 8001748:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4a81      	ldr	r2, [pc, #516]	; (8001954 <HAL_I2C_Init+0x274>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d807      	bhi.n	8001764 <HAL_I2C_Init+0x84>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4a80      	ldr	r2, [pc, #512]	; (8001958 <HAL_I2C_Init+0x278>)
 8001758:	4293      	cmp	r3, r2
 800175a:	bf94      	ite	ls
 800175c:	2301      	movls	r3, #1
 800175e:	2300      	movhi	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	e006      	b.n	8001772 <HAL_I2C_Init+0x92>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4a7d      	ldr	r2, [pc, #500]	; (800195c <HAL_I2C_Init+0x27c>)
 8001768:	4293      	cmp	r3, r2
 800176a:	bf94      	ite	ls
 800176c:	2301      	movls	r3, #1
 800176e:	2300      	movhi	r3, #0
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e0e7      	b.n	800194a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4a78      	ldr	r2, [pc, #480]	; (8001960 <HAL_I2C_Init+0x280>)
 800177e:	fba2 2303 	umull	r2, r3, r2, r3
 8001782:	0c9b      	lsrs	r3, r3, #18
 8001784:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	430a      	orrs	r2, r1
 8001798:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	4a6a      	ldr	r2, [pc, #424]	; (8001954 <HAL_I2C_Init+0x274>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d802      	bhi.n	80017b4 <HAL_I2C_Init+0xd4>
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	3301      	adds	r3, #1
 80017b2:	e009      	b.n	80017c8 <HAL_I2C_Init+0xe8>
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017ba:	fb02 f303 	mul.w	r3, r2, r3
 80017be:	4a69      	ldr	r2, [pc, #420]	; (8001964 <HAL_I2C_Init+0x284>)
 80017c0:	fba2 2303 	umull	r2, r3, r2, r3
 80017c4:	099b      	lsrs	r3, r3, #6
 80017c6:	3301      	adds	r3, #1
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	430b      	orrs	r3, r1
 80017ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	495c      	ldr	r1, [pc, #368]	; (8001954 <HAL_I2C_Init+0x274>)
 80017e4:	428b      	cmp	r3, r1
 80017e6:	d819      	bhi.n	800181c <HAL_I2C_Init+0x13c>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	1e59      	subs	r1, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80017f6:	1c59      	adds	r1, r3, #1
 80017f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80017fc:	400b      	ands	r3, r1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00a      	beq.n	8001818 <HAL_I2C_Init+0x138>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	1e59      	subs	r1, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001810:	3301      	adds	r3, #1
 8001812:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001816:	e051      	b.n	80018bc <HAL_I2C_Init+0x1dc>
 8001818:	2304      	movs	r3, #4
 800181a:	e04f      	b.n	80018bc <HAL_I2C_Init+0x1dc>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d111      	bne.n	8001848 <HAL_I2C_Init+0x168>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	1e58      	subs	r0, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	440b      	add	r3, r1
 8001832:	fbb0 f3f3 	udiv	r3, r0, r3
 8001836:	3301      	adds	r3, #1
 8001838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800183c:	2b00      	cmp	r3, #0
 800183e:	bf0c      	ite	eq
 8001840:	2301      	moveq	r3, #1
 8001842:	2300      	movne	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	e012      	b.n	800186e <HAL_I2C_Init+0x18e>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	1e58      	subs	r0, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6859      	ldr	r1, [r3, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	0099      	lsls	r1, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	fbb0 f3f3 	udiv	r3, r0, r3
 800185e:	3301      	adds	r3, #1
 8001860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001864:	2b00      	cmp	r3, #0
 8001866:	bf0c      	ite	eq
 8001868:	2301      	moveq	r3, #1
 800186a:	2300      	movne	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_I2C_Init+0x196>
 8001872:	2301      	movs	r3, #1
 8001874:	e022      	b.n	80018bc <HAL_I2C_Init+0x1dc>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10e      	bne.n	800189c <HAL_I2C_Init+0x1bc>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1e58      	subs	r0, r3, #1
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6859      	ldr	r1, [r3, #4]
 8001886:	460b      	mov	r3, r1
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	440b      	add	r3, r1
 800188c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001890:	3301      	adds	r3, #1
 8001892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800189a:	e00f      	b.n	80018bc <HAL_I2C_Init+0x1dc>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	1e58      	subs	r0, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6859      	ldr	r1, [r3, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	0099      	lsls	r1, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b2:	3301      	adds	r3, #1
 80018b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	6809      	ldr	r1, [r1, #0]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69da      	ldr	r2, [r3, #28]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6911      	ldr	r1, [r2, #16]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68d2      	ldr	r2, [r2, #12]
 80018f6:	4311      	orrs	r1, r2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	430b      	orrs	r3, r1
 80018fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695a      	ldr	r2, [r3, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0201 	orr.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2220      	movs	r2, #32
 8001936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	000186a0 	.word	0x000186a0
 8001958:	001e847f 	.word	0x001e847f
 800195c:	003d08ff 	.word	0x003d08ff
 8001960:	431bde83 	.word	0x431bde83
 8001964:	10624dd3 	.word	0x10624dd3

08001968 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af02      	add	r7, sp, #8
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	461a      	mov	r2, r3
 8001974:	460b      	mov	r3, r1
 8001976:	817b      	strh	r3, [r7, #10]
 8001978:	4613      	mov	r3, r2
 800197a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800197c:	f7ff fba0 	bl	80010c0 <HAL_GetTick>
 8001980:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b20      	cmp	r3, #32
 800198c:	f040 80e0 	bne.w	8001b50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2319      	movs	r3, #25
 8001996:	2201      	movs	r2, #1
 8001998:	4970      	ldr	r1, [pc, #448]	; (8001b5c <HAL_I2C_Master_Transmit+0x1f4>)
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 fa92 	bl	8001ec4 <I2C_WaitOnFlagUntilTimeout>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80019a6:	2302      	movs	r3, #2
 80019a8:	e0d3      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_I2C_Master_Transmit+0x50>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e0cc      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ea>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d007      	beq.n	80019de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f042 0201 	orr.w	r2, r2, #1
 80019dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2221      	movs	r2, #33	; 0x21
 80019f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2210      	movs	r2, #16
 80019fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	893a      	ldrh	r2, [r7, #8]
 8001a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	4a50      	ldr	r2, [pc, #320]	; (8001b60 <HAL_I2C_Master_Transmit+0x1f8>)
 8001a1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a20:	8979      	ldrh	r1, [r7, #10]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	6a3a      	ldr	r2, [r7, #32]
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f000 f9ca 	bl	8001dc0 <I2C_MasterRequestWrite>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e08d      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a4c:	e066      	b.n	8001b1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	6a39      	ldr	r1, [r7, #32]
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f000 fb50 	bl	80020f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00d      	beq.n	8001a7a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d107      	bne.n	8001a76 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e06b      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	781a      	ldrb	r2, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	3b01      	subs	r3, #1
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d11b      	bne.n	8001af0 <HAL_I2C_Master_Transmit+0x188>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d017      	beq.n	8001af0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	781a      	ldrb	r2, [r3, #0]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	6a39      	ldr	r1, [r7, #32]
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 fb47 	bl	8002188 <I2C_WaitOnBTFFlagUntilTimeout>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00d      	beq.n	8001b1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d107      	bne.n	8001b18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e01a      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d194      	bne.n	8001a4e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	e000      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b50:	2302      	movs	r3, #2
  }
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	00100002 	.word	0x00100002
 8001b60:	ffff0000 	.word	0xffff0000

08001b64 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af02      	add	r7, sp, #8
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	607a      	str	r2, [r7, #4]
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	460b      	mov	r3, r1
 8001b72:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001b74:	f7ff faa4 	bl	80010c0 <HAL_GetTick>
 8001b78:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b20      	cmp	r3, #32
 8001b88:	f040 8111 	bne.w	8001dae <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	2319      	movs	r3, #25
 8001b92:	2201      	movs	r2, #1
 8001b94:	4988      	ldr	r1, [pc, #544]	; (8001db8 <HAL_I2C_IsDeviceReady+0x254>)
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 f994 	bl	8001ec4 <I2C_WaitOnFlagUntilTimeout>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e104      	b.n	8001db0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_I2C_IsDeviceReady+0x50>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e0fd      	b.n	8001db0 <HAL_I2C_IsDeviceReady+0x24c>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d007      	beq.n	8001bda <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f042 0201 	orr.w	r2, r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001be8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2224      	movs	r2, #36	; 0x24
 8001bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4a70      	ldr	r2, [pc, #448]	; (8001dbc <HAL_I2C_IsDeviceReady+0x258>)
 8001bfc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c0c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 f952 	bl	8001ec4 <I2C_WaitOnFlagUntilTimeout>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00d      	beq.n	8001c42 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c34:	d103      	bne.n	8001c3e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c3c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e0b6      	b.n	8001db0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c42:	897b      	ldrh	r3, [r7, #10]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c50:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001c52:	f7ff fa35 	bl	80010c0 <HAL_GetTick>
 8001c56:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	bf0c      	ite	eq
 8001c66:	2301      	moveq	r3, #1
 8001c68:	2300      	movne	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c7c:	bf0c      	ite	eq
 8001c7e:	2301      	moveq	r3, #1
 8001c80:	2300      	movne	r3, #0
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001c86:	e025      	b.n	8001cd4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c88:	f7ff fa1a 	bl	80010c0 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d302      	bcc.n	8001c9e <HAL_I2C_IsDeviceReady+0x13a>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d103      	bne.n	8001ca6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	22a0      	movs	r2, #160	; 0xa0
 8001ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	bf0c      	ite	eq
 8001cb4:	2301      	moveq	r3, #1
 8001cb6:	2300      	movne	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cca:	bf0c      	ite	eq
 8001ccc:	2301      	moveq	r3, #1
 8001cce:	2300      	movne	r3, #0
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2ba0      	cmp	r3, #160	; 0xa0
 8001cde:	d005      	beq.n	8001cec <HAL_I2C_IsDeviceReady+0x188>
 8001ce0:	7dfb      	ldrb	r3, [r7, #23]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d102      	bne.n	8001cec <HAL_I2C_IsDeviceReady+0x188>
 8001ce6:	7dbb      	ldrb	r3, [r7, #22]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0cd      	beq.n	8001c88 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2220      	movs	r2, #32
 8001cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d129      	bne.n	8001d56 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d10:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	2319      	movs	r3, #25
 8001d2e:	2201      	movs	r2, #1
 8001d30:	4921      	ldr	r1, [pc, #132]	; (8001db8 <HAL_I2C_IsDeviceReady+0x254>)
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f000 f8c6 	bl	8001ec4 <I2C_WaitOnFlagUntilTimeout>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e036      	b.n	8001db0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2220      	movs	r2, #32
 8001d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e02c      	b.n	8001db0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d64:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d6e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	2319      	movs	r3, #25
 8001d76:	2201      	movs	r2, #1
 8001d78:	490f      	ldr	r1, [pc, #60]	; (8001db8 <HAL_I2C_IsDeviceReady+0x254>)
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 f8a2 	bl	8001ec4 <I2C_WaitOnFlagUntilTimeout>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e012      	b.n	8001db0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	f4ff af32 	bcc.w	8001bfe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001dae:	2302      	movs	r3, #2
  }
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3720      	adds	r7, #32
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	00100002 	.word	0x00100002
 8001dbc:	ffff0000 	.word	0xffff0000

08001dc0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af02      	add	r7, sp, #8
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d006      	beq.n	8001dea <I2C_MasterRequestWrite+0x2a>
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d003      	beq.n	8001dea <I2C_MasterRequestWrite+0x2a>
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001de8:	d108      	bne.n	8001dfc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	e00b      	b.n	8001e14 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	2b12      	cmp	r3, #18
 8001e02:	d107      	bne.n	8001e14 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 f84f 	bl	8001ec4 <I2C_WaitOnFlagUntilTimeout>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00d      	beq.n	8001e48 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e3a:	d103      	bne.n	8001e44 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e035      	b.n	8001eb4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e50:	d108      	bne.n	8001e64 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e52:	897b      	ldrh	r3, [r7, #10]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	461a      	mov	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e60:	611a      	str	r2, [r3, #16]
 8001e62:	e01b      	b.n	8001e9c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e64:	897b      	ldrh	r3, [r7, #10]
 8001e66:	11db      	asrs	r3, r3, #7
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	f003 0306 	and.w	r3, r3, #6
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	f063 030f 	orn	r3, r3, #15
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	490e      	ldr	r1, [pc, #56]	; (8001ebc <I2C_MasterRequestWrite+0xfc>)
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 f898 	bl	8001fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e010      	b.n	8001eb4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e92:	897b      	ldrh	r3, [r7, #10]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	4907      	ldr	r1, [pc, #28]	; (8001ec0 <I2C_MasterRequestWrite+0x100>)
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 f888 	bl	8001fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	00010008 	.word	0x00010008
 8001ec0:	00010002 	.word	0x00010002

08001ec4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ed4:	e048      	b.n	8001f68 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001edc:	d044      	beq.n	8001f68 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ede:	f7ff f8ef 	bl	80010c0 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d302      	bcc.n	8001ef4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d139      	bne.n	8001f68 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	0c1b      	lsrs	r3, r3, #16
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d10d      	bne.n	8001f1a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	43da      	mvns	r2, r3
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	bf0c      	ite	eq
 8001f10:	2301      	moveq	r3, #1
 8001f12:	2300      	movne	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	461a      	mov	r2, r3
 8001f18:	e00c      	b.n	8001f34 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	43da      	mvns	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	4013      	ands	r3, r2
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	bf0c      	ite	eq
 8001f2c:	2301      	moveq	r3, #1
 8001f2e:	2300      	movne	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d116      	bne.n	8001f68 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	f043 0220 	orr.w	r2, r3, #32
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e023      	b.n	8001fb0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	0c1b      	lsrs	r3, r3, #16
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d10d      	bne.n	8001f8e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	43da      	mvns	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf0c      	ite	eq
 8001f84:	2301      	moveq	r3, #1
 8001f86:	2300      	movne	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	e00c      	b.n	8001fa8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	43da      	mvns	r2, r3
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2301      	moveq	r3, #1
 8001fa2:	2300      	movne	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d093      	beq.n	8001ed6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fc6:	e071      	b.n	80020ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fd6:	d123      	bne.n	8002020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ff0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f043 0204 	orr.w	r2, r3, #4
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e067      	b.n	80020f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002026:	d041      	beq.n	80020ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002028:	f7ff f84a 	bl	80010c0 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	429a      	cmp	r2, r3
 8002036:	d302      	bcc.n	800203e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d136      	bne.n	80020ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	0c1b      	lsrs	r3, r3, #16
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b01      	cmp	r3, #1
 8002046:	d10c      	bne.n	8002062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	43da      	mvns	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4013      	ands	r3, r2
 8002054:	b29b      	uxth	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	bf14      	ite	ne
 800205a:	2301      	movne	r3, #1
 800205c:	2300      	moveq	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	e00b      	b.n	800207a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	43da      	mvns	r2, r3
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	4013      	ands	r3, r2
 800206e:	b29b      	uxth	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	bf14      	ite	ne
 8002074:	2301      	movne	r3, #1
 8002076:	2300      	moveq	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d016      	beq.n	80020ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2220      	movs	r2, #32
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f043 0220 	orr.w	r2, r3, #32
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e021      	b.n	80020f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	0c1b      	lsrs	r3, r3, #16
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d10c      	bne.n	80020d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	43da      	mvns	r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	4013      	ands	r3, r2
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf14      	ite	ne
 80020c8:	2301      	movne	r3, #1
 80020ca:	2300      	moveq	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	e00b      	b.n	80020e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	43da      	mvns	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4013      	ands	r3, r2
 80020dc:	b29b      	uxth	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf14      	ite	ne
 80020e2:	2301      	movne	r3, #1
 80020e4:	2300      	moveq	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f47f af6d 	bne.w	8001fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002104:	e034      	b.n	8002170 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 f886 	bl	8002218 <I2C_IsAcknowledgeFailed>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e034      	b.n	8002180 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211c:	d028      	beq.n	8002170 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800211e:	f7fe ffcf 	bl	80010c0 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	429a      	cmp	r2, r3
 800212c:	d302      	bcc.n	8002134 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d11d      	bne.n	8002170 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213e:	2b80      	cmp	r3, #128	; 0x80
 8002140:	d016      	beq.n	8002170 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2220      	movs	r2, #32
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f043 0220 	orr.w	r2, r3, #32
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e007      	b.n	8002180 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217a:	2b80      	cmp	r3, #128	; 0x80
 800217c:	d1c3      	bne.n	8002106 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002194:	e034      	b.n	8002200 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 f83e 	bl	8002218 <I2C_IsAcknowledgeFailed>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e034      	b.n	8002210 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ac:	d028      	beq.n	8002200 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ae:	f7fe ff87 	bl	80010c0 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d302      	bcc.n	80021c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d11d      	bne.n	8002200 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d016      	beq.n	8002200 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2220      	movs	r2, #32
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f043 0220 	orr.w	r2, r3, #32
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e007      	b.n	8002210 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b04      	cmp	r3, #4
 800220c:	d1c3      	bne.n	8002196 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800222e:	d11b      	bne.n	8002268 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002238:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2220      	movs	r2, #32
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	f043 0204 	orr.w	r2, r3, #4
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e267      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d075      	beq.n	8002382 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002296:	4b88      	ldr	r3, [pc, #544]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d00c      	beq.n	80022bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022a2:	4b85      	ldr	r3, [pc, #532]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d112      	bne.n	80022d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ae:	4b82      	ldr	r3, [pc, #520]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ba:	d10b      	bne.n	80022d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022bc:	4b7e      	ldr	r3, [pc, #504]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d05b      	beq.n	8002380 <HAL_RCC_OscConfig+0x108>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d157      	bne.n	8002380 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e242      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022dc:	d106      	bne.n	80022ec <HAL_RCC_OscConfig+0x74>
 80022de:	4b76      	ldr	r3, [pc, #472]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a75      	ldr	r2, [pc, #468]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 80022e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e01d      	b.n	8002328 <HAL_RCC_OscConfig+0xb0>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f4:	d10c      	bne.n	8002310 <HAL_RCC_OscConfig+0x98>
 80022f6:	4b70      	ldr	r3, [pc, #448]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a6f      	ldr	r2, [pc, #444]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 80022fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	4b6d      	ldr	r3, [pc, #436]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a6c      	ldr	r2, [pc, #432]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e00b      	b.n	8002328 <HAL_RCC_OscConfig+0xb0>
 8002310:	4b69      	ldr	r3, [pc, #420]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a68      	ldr	r2, [pc, #416]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	4b66      	ldr	r3, [pc, #408]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a65      	ldr	r2, [pc, #404]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d013      	beq.n	8002358 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7fe fec6 	bl	80010c0 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002338:	f7fe fec2 	bl	80010c0 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b64      	cmp	r3, #100	; 0x64
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e207      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234a:	4b5b      	ldr	r3, [pc, #364]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0xc0>
 8002356:	e014      	b.n	8002382 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002358:	f7fe feb2 	bl	80010c0 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002360:	f7fe feae 	bl	80010c0 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b64      	cmp	r3, #100	; 0x64
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e1f3      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002372:	4b51      	ldr	r3, [pc, #324]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0xe8>
 800237e:	e000      	b.n	8002382 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d063      	beq.n	8002456 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800238e:	4b4a      	ldr	r3, [pc, #296]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00b      	beq.n	80023b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800239a:	4b47      	ldr	r3, [pc, #284]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d11c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023a6:	4b44      	ldr	r3, [pc, #272]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d116      	bne.n	80023e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b2:	4b41      	ldr	r3, [pc, #260]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_RCC_OscConfig+0x152>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d001      	beq.n	80023ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e1c7      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ca:	4b3b      	ldr	r3, [pc, #236]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4937      	ldr	r1, [pc, #220]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023de:	e03a      	b.n	8002456 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d020      	beq.n	800242a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e8:	4b34      	ldr	r3, [pc, #208]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ee:	f7fe fe67 	bl	80010c0 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f6:	f7fe fe63 	bl	80010c0 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e1a8      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002408:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002414:	4b28      	ldr	r3, [pc, #160]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4925      	ldr	r1, [pc, #148]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002424:	4313      	orrs	r3, r2
 8002426:	600b      	str	r3, [r1, #0]
 8002428:	e015      	b.n	8002456 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800242a:	4b24      	ldr	r3, [pc, #144]	; (80024bc <HAL_RCC_OscConfig+0x244>)
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7fe fe46 	bl	80010c0 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002438:	f7fe fe42 	bl	80010c0 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e187      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244a:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d036      	beq.n	80024d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d016      	beq.n	8002498 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800246a:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <HAL_RCC_OscConfig+0x248>)
 800246c:	2201      	movs	r2, #1
 800246e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002470:	f7fe fe26 	bl	80010c0 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002478:	f7fe fe22 	bl	80010c0 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e167      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248a:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_RCC_OscConfig+0x240>)
 800248c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0x200>
 8002496:	e01b      	b.n	80024d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_RCC_OscConfig+0x248>)
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249e:	f7fe fe0f 	bl	80010c0 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a4:	e00e      	b.n	80024c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a6:	f7fe fe0b 	bl	80010c0 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d907      	bls.n	80024c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e150      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
 80024b8:	40023800 	.word	0x40023800
 80024bc:	42470000 	.word	0x42470000
 80024c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c4:	4b88      	ldr	r3, [pc, #544]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 80024c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1ea      	bne.n	80024a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 8097 	beq.w	800260c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024de:	2300      	movs	r3, #0
 80024e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024e2:	4b81      	ldr	r3, [pc, #516]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10f      	bne.n	800250e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	4b7d      	ldr	r3, [pc, #500]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	4a7c      	ldr	r2, [pc, #496]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 80024f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024fc:	6413      	str	r3, [r2, #64]	; 0x40
 80024fe:	4b7a      	ldr	r3, [pc, #488]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800250a:	2301      	movs	r3, #1
 800250c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250e:	4b77      	ldr	r3, [pc, #476]	; (80026ec <HAL_RCC_OscConfig+0x474>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d118      	bne.n	800254c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800251a:	4b74      	ldr	r3, [pc, #464]	; (80026ec <HAL_RCC_OscConfig+0x474>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a73      	ldr	r2, [pc, #460]	; (80026ec <HAL_RCC_OscConfig+0x474>)
 8002520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002526:	f7fe fdcb 	bl	80010c0 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252e:	f7fe fdc7 	bl	80010c0 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e10c      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002540:	4b6a      	ldr	r3, [pc, #424]	; (80026ec <HAL_RCC_OscConfig+0x474>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d106      	bne.n	8002562 <HAL_RCC_OscConfig+0x2ea>
 8002554:	4b64      	ldr	r3, [pc, #400]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002558:	4a63      	ldr	r2, [pc, #396]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	6713      	str	r3, [r2, #112]	; 0x70
 8002560:	e01c      	b.n	800259c <HAL_RCC_OscConfig+0x324>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b05      	cmp	r3, #5
 8002568:	d10c      	bne.n	8002584 <HAL_RCC_OscConfig+0x30c>
 800256a:	4b5f      	ldr	r3, [pc, #380]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256e:	4a5e      	ldr	r2, [pc, #376]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002570:	f043 0304 	orr.w	r3, r3, #4
 8002574:	6713      	str	r3, [r2, #112]	; 0x70
 8002576:	4b5c      	ldr	r3, [pc, #368]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257a:	4a5b      	ldr	r2, [pc, #364]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6713      	str	r3, [r2, #112]	; 0x70
 8002582:	e00b      	b.n	800259c <HAL_RCC_OscConfig+0x324>
 8002584:	4b58      	ldr	r3, [pc, #352]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002588:	4a57      	ldr	r2, [pc, #348]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	6713      	str	r3, [r2, #112]	; 0x70
 8002590:	4b55      	ldr	r3, [pc, #340]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002594:	4a54      	ldr	r2, [pc, #336]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002596:	f023 0304 	bic.w	r3, r3, #4
 800259a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d015      	beq.n	80025d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a4:	f7fe fd8c 	bl	80010c0 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025aa:	e00a      	b.n	80025c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ac:	f7fe fd88 	bl	80010c0 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e0cb      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c2:	4b49      	ldr	r3, [pc, #292]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0ee      	beq.n	80025ac <HAL_RCC_OscConfig+0x334>
 80025ce:	e014      	b.n	80025fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d0:	f7fe fd76 	bl	80010c0 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d6:	e00a      	b.n	80025ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d8:	f7fe fd72 	bl	80010c0 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e0b5      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ee:	4b3e      	ldr	r3, [pc, #248]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1ee      	bne.n	80025d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025fa:	7dfb      	ldrb	r3, [r7, #23]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d105      	bne.n	800260c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002600:	4b39      	ldr	r3, [pc, #228]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	4a38      	ldr	r2, [pc, #224]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800260a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 80a1 	beq.w	8002758 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002616:	4b34      	ldr	r3, [pc, #208]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b08      	cmp	r3, #8
 8002620:	d05c      	beq.n	80026dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d141      	bne.n	80026ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262a:	4b31      	ldr	r3, [pc, #196]	; (80026f0 <HAL_RCC_OscConfig+0x478>)
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7fe fd46 	bl	80010c0 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002638:	f7fe fd42 	bl	80010c0 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e087      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264a:	4b27      	ldr	r3, [pc, #156]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69da      	ldr	r2, [r3, #28]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	019b      	lsls	r3, r3, #6
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	085b      	lsrs	r3, r3, #1
 800266e:	3b01      	subs	r3, #1
 8002670:	041b      	lsls	r3, r3, #16
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	061b      	lsls	r3, r3, #24
 800267a:	491b      	ldr	r1, [pc, #108]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 800267c:	4313      	orrs	r3, r2
 800267e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002680:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <HAL_RCC_OscConfig+0x478>)
 8002682:	2201      	movs	r2, #1
 8002684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002686:	f7fe fd1b 	bl	80010c0 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268e:	f7fe fd17 	bl	80010c0 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e05c      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0x416>
 80026ac:	e054      	b.n	8002758 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <HAL_RCC_OscConfig+0x478>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7fe fd04 	bl	80010c0 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026bc:	f7fe fd00 	bl	80010c0 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e045      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_RCC_OscConfig+0x470>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x444>
 80026da:	e03d      	b.n	8002758 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d107      	bne.n	80026f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e038      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40007000 	.word	0x40007000
 80026f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026f4:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <HAL_RCC_OscConfig+0x4ec>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d028      	beq.n	8002754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800270c:	429a      	cmp	r2, r3
 800270e:	d121      	bne.n	8002754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800271a:	429a      	cmp	r2, r3
 800271c:	d11a      	bne.n	8002754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002724:	4013      	ands	r3, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800272a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800272c:	4293      	cmp	r3, r2
 800272e:	d111      	bne.n	8002754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273a:	085b      	lsrs	r3, r3, #1
 800273c:	3b01      	subs	r3, #1
 800273e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002740:	429a      	cmp	r2, r3
 8002742:	d107      	bne.n	8002754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800

08002768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0cc      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800277c:	4b68      	ldr	r3, [pc, #416]	; (8002920 <HAL_RCC_ClockConfig+0x1b8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d90c      	bls.n	80027a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b65      	ldr	r3, [pc, #404]	; (8002920 <HAL_RCC_ClockConfig+0x1b8>)
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002792:	4b63      	ldr	r3, [pc, #396]	; (8002920 <HAL_RCC_ClockConfig+0x1b8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d001      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0b8      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d020      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027bc:	4b59      	ldr	r3, [pc, #356]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	4a58      	ldr	r2, [pc, #352]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0308 	and.w	r3, r3, #8
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027d4:	4b53      	ldr	r3, [pc, #332]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	4a52      	ldr	r2, [pc, #328]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e0:	4b50      	ldr	r3, [pc, #320]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	494d      	ldr	r1, [pc, #308]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d044      	beq.n	8002888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d107      	bne.n	8002816 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002806:	4b47      	ldr	r3, [pc, #284]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d119      	bne.n	8002846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e07f      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d003      	beq.n	8002826 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002822:	2b03      	cmp	r3, #3
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002826:	4b3f      	ldr	r3, [pc, #252]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d109      	bne.n	8002846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e06f      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002836:	4b3b      	ldr	r3, [pc, #236]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e067      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002846:	4b37      	ldr	r3, [pc, #220]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f023 0203 	bic.w	r2, r3, #3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4934      	ldr	r1, [pc, #208]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	4313      	orrs	r3, r2
 8002856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002858:	f7fe fc32 	bl	80010c0 <HAL_GetTick>
 800285c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285e:	e00a      	b.n	8002876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002860:	f7fe fc2e 	bl	80010c0 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	; 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e04f      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	4b2b      	ldr	r3, [pc, #172]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 020c 	and.w	r2, r3, #12
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	429a      	cmp	r2, r3
 8002886:	d1eb      	bne.n	8002860 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002888:	4b25      	ldr	r3, [pc, #148]	; (8002920 <HAL_RCC_ClockConfig+0x1b8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d20c      	bcs.n	80028b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002896:	4b22      	ldr	r3, [pc, #136]	; (8002920 <HAL_RCC_ClockConfig+0x1b8>)
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289e:	4b20      	ldr	r3, [pc, #128]	; (8002920 <HAL_RCC_ClockConfig+0x1b8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d001      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e032      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d008      	beq.n	80028ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028bc:	4b19      	ldr	r3, [pc, #100]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4916      	ldr	r1, [pc, #88]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d009      	beq.n	80028ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028da:	4b12      	ldr	r3, [pc, #72]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	490e      	ldr	r1, [pc, #56]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028ee:	f000 f821 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 80028f2:	4602      	mov	r2, r0
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	091b      	lsrs	r3, r3, #4
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	490a      	ldr	r1, [pc, #40]	; (8002928 <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	5ccb      	ldrb	r3, [r1, r3]
 8002902:	fa22 f303 	lsr.w	r3, r2, r3
 8002906:	4a09      	ldr	r2, [pc, #36]	; (800292c <HAL_RCC_ClockConfig+0x1c4>)
 8002908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800290a:	4b09      	ldr	r3, [pc, #36]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe fb92 	bl	8001038 <HAL_InitTick>

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40023c00 	.word	0x40023c00
 8002924:	40023800 	.word	0x40023800
 8002928:	08004a0c 	.word	0x08004a0c
 800292c:	20000010 	.word	0x20000010
 8002930:	20000014 	.word	0x20000014

08002934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002938:	b094      	sub	sp, #80	; 0x50
 800293a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8002940:	2300      	movs	r3, #0
 8002942:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800294c:	4b79      	ldr	r3, [pc, #484]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x200>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 030c 	and.w	r3, r3, #12
 8002954:	2b08      	cmp	r3, #8
 8002956:	d00d      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x40>
 8002958:	2b08      	cmp	r3, #8
 800295a:	f200 80e1 	bhi.w	8002b20 <HAL_RCC_GetSysClockFreq+0x1ec>
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0x34>
 8002962:	2b04      	cmp	r3, #4
 8002964:	d003      	beq.n	800296e <HAL_RCC_GetSysClockFreq+0x3a>
 8002966:	e0db      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002968:	4b73      	ldr	r3, [pc, #460]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x204>)
 800296a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800296c:	e0db      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800296e:	4b73      	ldr	r3, [pc, #460]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x208>)
 8002970:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002972:	e0d8      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002974:	4b6f      	ldr	r3, [pc, #444]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800297c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800297e:	4b6d      	ldr	r3, [pc, #436]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d063      	beq.n	8002a52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800298a:	4b6a      	ldr	r3, [pc, #424]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x200>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	099b      	lsrs	r3, r3, #6
 8002990:	2200      	movs	r2, #0
 8002992:	63bb      	str	r3, [r7, #56]	; 0x38
 8002994:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800299c:	633b      	str	r3, [r7, #48]	; 0x30
 800299e:	2300      	movs	r3, #0
 80029a0:	637b      	str	r3, [r7, #52]	; 0x34
 80029a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80029a6:	4622      	mov	r2, r4
 80029a8:	462b      	mov	r3, r5
 80029aa:	f04f 0000 	mov.w	r0, #0
 80029ae:	f04f 0100 	mov.w	r1, #0
 80029b2:	0159      	lsls	r1, r3, #5
 80029b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029b8:	0150      	lsls	r0, r2, #5
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4621      	mov	r1, r4
 80029c0:	1a51      	subs	r1, r2, r1
 80029c2:	6139      	str	r1, [r7, #16]
 80029c4:	4629      	mov	r1, r5
 80029c6:	eb63 0301 	sbc.w	r3, r3, r1
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029d8:	4659      	mov	r1, fp
 80029da:	018b      	lsls	r3, r1, #6
 80029dc:	4651      	mov	r1, sl
 80029de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029e2:	4651      	mov	r1, sl
 80029e4:	018a      	lsls	r2, r1, #6
 80029e6:	4651      	mov	r1, sl
 80029e8:	ebb2 0801 	subs.w	r8, r2, r1
 80029ec:	4659      	mov	r1, fp
 80029ee:	eb63 0901 	sbc.w	r9, r3, r1
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a06:	4690      	mov	r8, r2
 8002a08:	4699      	mov	r9, r3
 8002a0a:	4623      	mov	r3, r4
 8002a0c:	eb18 0303 	adds.w	r3, r8, r3
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	462b      	mov	r3, r5
 8002a14:	eb49 0303 	adc.w	r3, r9, r3
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	f04f 0300 	mov.w	r3, #0
 8002a22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a26:	4629      	mov	r1, r5
 8002a28:	024b      	lsls	r3, r1, #9
 8002a2a:	4621      	mov	r1, r4
 8002a2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a30:	4621      	mov	r1, r4
 8002a32:	024a      	lsls	r2, r1, #9
 8002a34:	4610      	mov	r0, r2
 8002a36:	4619      	mov	r1, r3
 8002a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a44:	f7fd fc1c 	bl	8000280 <__aeabi_uldivmod>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a50:	e058      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a52:	4b38      	ldr	r3, [pc, #224]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	099b      	lsrs	r3, r3, #6
 8002a58:	2200      	movs	r2, #0
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a62:	623b      	str	r3, [r7, #32]
 8002a64:	2300      	movs	r3, #0
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
 8002a68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a6c:	4642      	mov	r2, r8
 8002a6e:	464b      	mov	r3, r9
 8002a70:	f04f 0000 	mov.w	r0, #0
 8002a74:	f04f 0100 	mov.w	r1, #0
 8002a78:	0159      	lsls	r1, r3, #5
 8002a7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a7e:	0150      	lsls	r0, r2, #5
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4641      	mov	r1, r8
 8002a86:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a8a:	4649      	mov	r1, r9
 8002a8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002aa0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002aa4:	ebb2 040a 	subs.w	r4, r2, sl
 8002aa8:	eb63 050b 	sbc.w	r5, r3, fp
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	00eb      	lsls	r3, r5, #3
 8002ab6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002aba:	00e2      	lsls	r2, r4, #3
 8002abc:	4614      	mov	r4, r2
 8002abe:	461d      	mov	r5, r3
 8002ac0:	4643      	mov	r3, r8
 8002ac2:	18e3      	adds	r3, r4, r3
 8002ac4:	603b      	str	r3, [r7, #0]
 8002ac6:	464b      	mov	r3, r9
 8002ac8:	eb45 0303 	adc.w	r3, r5, r3
 8002acc:	607b      	str	r3, [r7, #4]
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ada:	4629      	mov	r1, r5
 8002adc:	028b      	lsls	r3, r1, #10
 8002ade:	4621      	mov	r1, r4
 8002ae0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ae4:	4621      	mov	r1, r4
 8002ae6:	028a      	lsls	r2, r1, #10
 8002ae8:	4610      	mov	r0, r2
 8002aea:	4619      	mov	r1, r3
 8002aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aee:	2200      	movs	r2, #0
 8002af0:	61bb      	str	r3, [r7, #24]
 8002af2:	61fa      	str	r2, [r7, #28]
 8002af4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002af8:	f7fd fbc2 	bl	8000280 <__aeabi_uldivmod>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4613      	mov	r3, r2
 8002b02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	0c1b      	lsrs	r3, r3, #16
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	3301      	adds	r3, #1
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002b14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b1e:	e002      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3750      	adds	r7, #80	; 0x50
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b32:	bf00      	nop
 8002b34:	40023800 	.word	0x40023800
 8002b38:	00f42400 	.word	0x00f42400
 8002b3c:	007a1200 	.word	0x007a1200

08002b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b46:	681b      	ldr	r3, [r3, #0]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	20000010 	.word	0x20000010

08002b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b5c:	f7ff fff0 	bl	8002b40 <HAL_RCC_GetHCLKFreq>
 8002b60:	4602      	mov	r2, r0
 8002b62:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	0a9b      	lsrs	r3, r3, #10
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	4903      	ldr	r1, [pc, #12]	; (8002b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b6e:	5ccb      	ldrb	r3, [r1, r3]
 8002b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	08004a1c 	.word	0x08004a1c

08002b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b84:	f7ff ffdc 	bl	8002b40 <HAL_RCC_GetHCLKFreq>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	0b5b      	lsrs	r3, r3, #13
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	4903      	ldr	r1, [pc, #12]	; (8002ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b96:	5ccb      	ldrb	r3, [r1, r3]
 8002b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	08004a1c 	.word	0x08004a1c

08002ba8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e042      	b.n	8002c40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d106      	bne.n	8002bd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7fe f8a6 	bl	8000d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2224      	movs	r2, #36	; 0x24
 8002bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 fa09 	bl	8003004 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695a      	ldr	r2, [r3, #20]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08a      	sub	sp, #40	; 0x28
 8002c4c:	af02      	add	r7, sp, #8
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	603b      	str	r3, [r7, #0]
 8002c54:	4613      	mov	r3, r2
 8002c56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b20      	cmp	r3, #32
 8002c66:	d175      	bne.n	8002d54 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d002      	beq.n	8002c74 <HAL_UART_Transmit+0x2c>
 8002c6e:	88fb      	ldrh	r3, [r7, #6]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e06e      	b.n	8002d56 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2221      	movs	r2, #33	; 0x21
 8002c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c86:	f7fe fa1b 	bl	80010c0 <HAL_GetTick>
 8002c8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	88fa      	ldrh	r2, [r7, #6]
 8002c90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	88fa      	ldrh	r2, [r7, #6]
 8002c96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca0:	d108      	bne.n	8002cb4 <HAL_UART_Transmit+0x6c>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d104      	bne.n	8002cb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	e003      	b.n	8002cbc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cbc:	e02e      	b.n	8002d1c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2180      	movs	r1, #128	; 0x80
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f8df 	bl	8002e8c <UART_WaitOnFlagUntilTimeout>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d005      	beq.n	8002ce0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e03a      	b.n	8002d56 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10b      	bne.n	8002cfe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cf4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	61bb      	str	r3, [r7, #24]
 8002cfc:	e007      	b.n	8002d0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	781a      	ldrb	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1cb      	bne.n	8002cbe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2140      	movs	r1, #64	; 0x40
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 f8ab 	bl	8002e8c <UART_WaitOnFlagUntilTimeout>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e006      	b.n	8002d56 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	e000      	b.n	8002d56 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d54:	2302      	movs	r3, #2
  }
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3720      	adds	r7, #32
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b08a      	sub	sp, #40	; 0x28
 8002d62:	af02      	add	r7, sp, #8
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	603b      	str	r3, [r7, #0]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b20      	cmp	r3, #32
 8002d7c:	f040 8081 	bne.w	8002e82 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <HAL_UART_Receive+0x2e>
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e079      	b.n	8002e84 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2222      	movs	r2, #34	; 0x22
 8002d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002da4:	f7fe f98c 	bl	80010c0 <HAL_GetTick>
 8002da8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	88fa      	ldrh	r2, [r7, #6]
 8002dae:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	88fa      	ldrh	r2, [r7, #6]
 8002db4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dbe:	d108      	bne.n	8002dd2 <HAL_UART_Receive+0x74>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d104      	bne.n	8002dd2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	61bb      	str	r3, [r7, #24]
 8002dd0:	e003      	b.n	8002dda <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002dda:	e047      	b.n	8002e6c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2200      	movs	r2, #0
 8002de4:	2120      	movs	r1, #32
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f850 	bl	8002e8c <UART_WaitOnFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d005      	beq.n	8002dfe <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e042      	b.n	8002e84 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10c      	bne.n	8002e1e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	3302      	adds	r3, #2
 8002e1a:	61bb      	str	r3, [r7, #24]
 8002e1c:	e01f      	b.n	8002e5e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e26:	d007      	beq.n	8002e38 <HAL_UART_Receive+0xda>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10a      	bne.n	8002e46 <HAL_UART_Receive+0xe8>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d106      	bne.n	8002e46 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	701a      	strb	r2, [r3, #0]
 8002e44:	e008      	b.n	8002e58 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1b2      	bne.n	8002ddc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	e000      	b.n	8002e84 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002e82:	2302      	movs	r3, #2
  }
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3720      	adds	r7, #32
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e9c:	e03b      	b.n	8002f16 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea4:	d037      	beq.n	8002f16 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea6:	f7fe f90b 	bl	80010c0 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	6a3a      	ldr	r2, [r7, #32]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d302      	bcc.n	8002ebc <UART_WaitOnFlagUntilTimeout+0x30>
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e03a      	b.n	8002f36 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d023      	beq.n	8002f16 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2b80      	cmp	r3, #128	; 0x80
 8002ed2:	d020      	beq.n	8002f16 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b40      	cmp	r3, #64	; 0x40
 8002ed8:	d01d      	beq.n	8002f16 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d116      	bne.n	8002f16 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 f81d 	bl	8002f3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2208      	movs	r2, #8
 8002f08:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e00f      	b.n	8002f36 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	bf0c      	ite	eq
 8002f26:	2301      	moveq	r3, #1
 8002f28:	2300      	movne	r3, #0
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d0b4      	beq.n	8002e9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b095      	sub	sp, #84	; 0x54
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	330c      	adds	r3, #12
 8002f4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f50:	e853 3f00 	ldrex	r3, [r3]
 8002f54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	330c      	adds	r3, #12
 8002f64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f66:	643a      	str	r2, [r7, #64]	; 0x40
 8002f68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f6e:	e841 2300 	strex	r3, r2, [r1]
 8002f72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1e5      	bne.n	8002f46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	3314      	adds	r3, #20
 8002f80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	e853 3f00 	ldrex	r3, [r3]
 8002f88:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	f023 0301 	bic.w	r3, r3, #1
 8002f90:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	3314      	adds	r3, #20
 8002f98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fa2:	e841 2300 	strex	r3, r2, [r1]
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1e5      	bne.n	8002f7a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d119      	bne.n	8002fea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	330c      	adds	r3, #12
 8002fbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	e853 3f00 	ldrex	r3, [r3]
 8002fc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f023 0310 	bic.w	r3, r3, #16
 8002fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	330c      	adds	r3, #12
 8002fd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fd6:	61ba      	str	r2, [r7, #24]
 8002fd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fda:	6979      	ldr	r1, [r7, #20]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	e841 2300 	strex	r3, r2, [r1]
 8002fe2:	613b      	str	r3, [r7, #16]
   return(result);
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1e5      	bne.n	8002fb6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002ff8:	bf00      	nop
 8002ffa:	3754      	adds	r7, #84	; 0x54
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003008:	b0c0      	sub	sp, #256	; 0x100
 800300a:	af00      	add	r7, sp, #0
 800300c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800301c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003020:	68d9      	ldr	r1, [r3, #12]
 8003022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	ea40 0301 	orr.w	r3, r0, r1
 800302c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800302e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	431a      	orrs	r2, r3
 800303c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	431a      	orrs	r2, r3
 8003044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800305c:	f021 010c 	bic.w	r1, r1, #12
 8003060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800306a:	430b      	orrs	r3, r1
 800306c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800306e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800307a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800307e:	6999      	ldr	r1, [r3, #24]
 8003080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	ea40 0301 	orr.w	r3, r0, r1
 800308a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800308c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4b8f      	ldr	r3, [pc, #572]	; (80032d0 <UART_SetConfig+0x2cc>)
 8003094:	429a      	cmp	r2, r3
 8003096:	d005      	beq.n	80030a4 <UART_SetConfig+0xa0>
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	4b8d      	ldr	r3, [pc, #564]	; (80032d4 <UART_SetConfig+0x2d0>)
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d104      	bne.n	80030ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030a4:	f7ff fd6c 	bl	8002b80 <HAL_RCC_GetPCLK2Freq>
 80030a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80030ac:	e003      	b.n	80030b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030ae:	f7ff fd53 	bl	8002b58 <HAL_RCC_GetPCLK1Freq>
 80030b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030c0:	f040 810c 	bne.w	80032dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030c8:	2200      	movs	r2, #0
 80030ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80030ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80030d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80030d6:	4622      	mov	r2, r4
 80030d8:	462b      	mov	r3, r5
 80030da:	1891      	adds	r1, r2, r2
 80030dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80030de:	415b      	adcs	r3, r3
 80030e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030e6:	4621      	mov	r1, r4
 80030e8:	eb12 0801 	adds.w	r8, r2, r1
 80030ec:	4629      	mov	r1, r5
 80030ee:	eb43 0901 	adc.w	r9, r3, r1
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003102:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003106:	4690      	mov	r8, r2
 8003108:	4699      	mov	r9, r3
 800310a:	4623      	mov	r3, r4
 800310c:	eb18 0303 	adds.w	r3, r8, r3
 8003110:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003114:	462b      	mov	r3, r5
 8003116:	eb49 0303 	adc.w	r3, r9, r3
 800311a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800311e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800312a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800312e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003132:	460b      	mov	r3, r1
 8003134:	18db      	adds	r3, r3, r3
 8003136:	653b      	str	r3, [r7, #80]	; 0x50
 8003138:	4613      	mov	r3, r2
 800313a:	eb42 0303 	adc.w	r3, r2, r3
 800313e:	657b      	str	r3, [r7, #84]	; 0x54
 8003140:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003144:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003148:	f7fd f89a 	bl	8000280 <__aeabi_uldivmod>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4b61      	ldr	r3, [pc, #388]	; (80032d8 <UART_SetConfig+0x2d4>)
 8003152:	fba3 2302 	umull	r2, r3, r3, r2
 8003156:	095b      	lsrs	r3, r3, #5
 8003158:	011c      	lsls	r4, r3, #4
 800315a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800315e:	2200      	movs	r2, #0
 8003160:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003164:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003168:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800316c:	4642      	mov	r2, r8
 800316e:	464b      	mov	r3, r9
 8003170:	1891      	adds	r1, r2, r2
 8003172:	64b9      	str	r1, [r7, #72]	; 0x48
 8003174:	415b      	adcs	r3, r3
 8003176:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003178:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800317c:	4641      	mov	r1, r8
 800317e:	eb12 0a01 	adds.w	sl, r2, r1
 8003182:	4649      	mov	r1, r9
 8003184:	eb43 0b01 	adc.w	fp, r3, r1
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	f04f 0300 	mov.w	r3, #0
 8003190:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003194:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003198:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800319c:	4692      	mov	sl, r2
 800319e:	469b      	mov	fp, r3
 80031a0:	4643      	mov	r3, r8
 80031a2:	eb1a 0303 	adds.w	r3, sl, r3
 80031a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031aa:	464b      	mov	r3, r9
 80031ac:	eb4b 0303 	adc.w	r3, fp, r3
 80031b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80031c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80031c8:	460b      	mov	r3, r1
 80031ca:	18db      	adds	r3, r3, r3
 80031cc:	643b      	str	r3, [r7, #64]	; 0x40
 80031ce:	4613      	mov	r3, r2
 80031d0:	eb42 0303 	adc.w	r3, r2, r3
 80031d4:	647b      	str	r3, [r7, #68]	; 0x44
 80031d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80031de:	f7fd f84f 	bl	8000280 <__aeabi_uldivmod>
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	4611      	mov	r1, r2
 80031e8:	4b3b      	ldr	r3, [pc, #236]	; (80032d8 <UART_SetConfig+0x2d4>)
 80031ea:	fba3 2301 	umull	r2, r3, r3, r1
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	2264      	movs	r2, #100	; 0x64
 80031f2:	fb02 f303 	mul.w	r3, r2, r3
 80031f6:	1acb      	subs	r3, r1, r3
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80031fe:	4b36      	ldr	r3, [pc, #216]	; (80032d8 <UART_SetConfig+0x2d4>)
 8003200:	fba3 2302 	umull	r2, r3, r3, r2
 8003204:	095b      	lsrs	r3, r3, #5
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800320c:	441c      	add	r4, r3
 800320e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003212:	2200      	movs	r2, #0
 8003214:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003218:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800321c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003220:	4642      	mov	r2, r8
 8003222:	464b      	mov	r3, r9
 8003224:	1891      	adds	r1, r2, r2
 8003226:	63b9      	str	r1, [r7, #56]	; 0x38
 8003228:	415b      	adcs	r3, r3
 800322a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800322c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003230:	4641      	mov	r1, r8
 8003232:	1851      	adds	r1, r2, r1
 8003234:	6339      	str	r1, [r7, #48]	; 0x30
 8003236:	4649      	mov	r1, r9
 8003238:	414b      	adcs	r3, r1
 800323a:	637b      	str	r3, [r7, #52]	; 0x34
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003248:	4659      	mov	r1, fp
 800324a:	00cb      	lsls	r3, r1, #3
 800324c:	4651      	mov	r1, sl
 800324e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003252:	4651      	mov	r1, sl
 8003254:	00ca      	lsls	r2, r1, #3
 8003256:	4610      	mov	r0, r2
 8003258:	4619      	mov	r1, r3
 800325a:	4603      	mov	r3, r0
 800325c:	4642      	mov	r2, r8
 800325e:	189b      	adds	r3, r3, r2
 8003260:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003264:	464b      	mov	r3, r9
 8003266:	460a      	mov	r2, r1
 8003268:	eb42 0303 	adc.w	r3, r2, r3
 800326c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800327c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003280:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003284:	460b      	mov	r3, r1
 8003286:	18db      	adds	r3, r3, r3
 8003288:	62bb      	str	r3, [r7, #40]	; 0x28
 800328a:	4613      	mov	r3, r2
 800328c:	eb42 0303 	adc.w	r3, r2, r3
 8003290:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003292:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003296:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800329a:	f7fc fff1 	bl	8000280 <__aeabi_uldivmod>
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <UART_SetConfig+0x2d4>)
 80032a4:	fba3 1302 	umull	r1, r3, r3, r2
 80032a8:	095b      	lsrs	r3, r3, #5
 80032aa:	2164      	movs	r1, #100	; 0x64
 80032ac:	fb01 f303 	mul.w	r3, r1, r3
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	3332      	adds	r3, #50	; 0x32
 80032b6:	4a08      	ldr	r2, [pc, #32]	; (80032d8 <UART_SetConfig+0x2d4>)
 80032b8:	fba2 2303 	umull	r2, r3, r2, r3
 80032bc:	095b      	lsrs	r3, r3, #5
 80032be:	f003 0207 	and.w	r2, r3, #7
 80032c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4422      	add	r2, r4
 80032ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032cc:	e106      	b.n	80034dc <UART_SetConfig+0x4d8>
 80032ce:	bf00      	nop
 80032d0:	40011000 	.word	0x40011000
 80032d4:	40011400 	.word	0x40011400
 80032d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032e0:	2200      	movs	r2, #0
 80032e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80032ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80032ee:	4642      	mov	r2, r8
 80032f0:	464b      	mov	r3, r9
 80032f2:	1891      	adds	r1, r2, r2
 80032f4:	6239      	str	r1, [r7, #32]
 80032f6:	415b      	adcs	r3, r3
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
 80032fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032fe:	4641      	mov	r1, r8
 8003300:	1854      	adds	r4, r2, r1
 8003302:	4649      	mov	r1, r9
 8003304:	eb43 0501 	adc.w	r5, r3, r1
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	00eb      	lsls	r3, r5, #3
 8003312:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003316:	00e2      	lsls	r2, r4, #3
 8003318:	4614      	mov	r4, r2
 800331a:	461d      	mov	r5, r3
 800331c:	4643      	mov	r3, r8
 800331e:	18e3      	adds	r3, r4, r3
 8003320:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003324:	464b      	mov	r3, r9
 8003326:	eb45 0303 	adc.w	r3, r5, r3
 800332a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800332e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800333a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800334a:	4629      	mov	r1, r5
 800334c:	008b      	lsls	r3, r1, #2
 800334e:	4621      	mov	r1, r4
 8003350:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003354:	4621      	mov	r1, r4
 8003356:	008a      	lsls	r2, r1, #2
 8003358:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800335c:	f7fc ff90 	bl	8000280 <__aeabi_uldivmod>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4b60      	ldr	r3, [pc, #384]	; (80034e8 <UART_SetConfig+0x4e4>)
 8003366:	fba3 2302 	umull	r2, r3, r3, r2
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	011c      	lsls	r4, r3, #4
 800336e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003372:	2200      	movs	r2, #0
 8003374:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003378:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800337c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003380:	4642      	mov	r2, r8
 8003382:	464b      	mov	r3, r9
 8003384:	1891      	adds	r1, r2, r2
 8003386:	61b9      	str	r1, [r7, #24]
 8003388:	415b      	adcs	r3, r3
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003390:	4641      	mov	r1, r8
 8003392:	1851      	adds	r1, r2, r1
 8003394:	6139      	str	r1, [r7, #16]
 8003396:	4649      	mov	r1, r9
 8003398:	414b      	adcs	r3, r1
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033a8:	4659      	mov	r1, fp
 80033aa:	00cb      	lsls	r3, r1, #3
 80033ac:	4651      	mov	r1, sl
 80033ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033b2:	4651      	mov	r1, sl
 80033b4:	00ca      	lsls	r2, r1, #3
 80033b6:	4610      	mov	r0, r2
 80033b8:	4619      	mov	r1, r3
 80033ba:	4603      	mov	r3, r0
 80033bc:	4642      	mov	r2, r8
 80033be:	189b      	adds	r3, r3, r2
 80033c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033c4:	464b      	mov	r3, r9
 80033c6:	460a      	mov	r2, r1
 80033c8:	eb42 0303 	adc.w	r3, r2, r3
 80033cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80033da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80033e8:	4649      	mov	r1, r9
 80033ea:	008b      	lsls	r3, r1, #2
 80033ec:	4641      	mov	r1, r8
 80033ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033f2:	4641      	mov	r1, r8
 80033f4:	008a      	lsls	r2, r1, #2
 80033f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80033fa:	f7fc ff41 	bl	8000280 <__aeabi_uldivmod>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4611      	mov	r1, r2
 8003404:	4b38      	ldr	r3, [pc, #224]	; (80034e8 <UART_SetConfig+0x4e4>)
 8003406:	fba3 2301 	umull	r2, r3, r3, r1
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	2264      	movs	r2, #100	; 0x64
 800340e:	fb02 f303 	mul.w	r3, r2, r3
 8003412:	1acb      	subs	r3, r1, r3
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	3332      	adds	r3, #50	; 0x32
 8003418:	4a33      	ldr	r2, [pc, #204]	; (80034e8 <UART_SetConfig+0x4e4>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003424:	441c      	add	r4, r3
 8003426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800342a:	2200      	movs	r2, #0
 800342c:	673b      	str	r3, [r7, #112]	; 0x70
 800342e:	677a      	str	r2, [r7, #116]	; 0x74
 8003430:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003434:	4642      	mov	r2, r8
 8003436:	464b      	mov	r3, r9
 8003438:	1891      	adds	r1, r2, r2
 800343a:	60b9      	str	r1, [r7, #8]
 800343c:	415b      	adcs	r3, r3
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003444:	4641      	mov	r1, r8
 8003446:	1851      	adds	r1, r2, r1
 8003448:	6039      	str	r1, [r7, #0]
 800344a:	4649      	mov	r1, r9
 800344c:	414b      	adcs	r3, r1
 800344e:	607b      	str	r3, [r7, #4]
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800345c:	4659      	mov	r1, fp
 800345e:	00cb      	lsls	r3, r1, #3
 8003460:	4651      	mov	r1, sl
 8003462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003466:	4651      	mov	r1, sl
 8003468:	00ca      	lsls	r2, r1, #3
 800346a:	4610      	mov	r0, r2
 800346c:	4619      	mov	r1, r3
 800346e:	4603      	mov	r3, r0
 8003470:	4642      	mov	r2, r8
 8003472:	189b      	adds	r3, r3, r2
 8003474:	66bb      	str	r3, [r7, #104]	; 0x68
 8003476:	464b      	mov	r3, r9
 8003478:	460a      	mov	r2, r1
 800347a:	eb42 0303 	adc.w	r3, r2, r3
 800347e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	663b      	str	r3, [r7, #96]	; 0x60
 800348a:	667a      	str	r2, [r7, #100]	; 0x64
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003498:	4649      	mov	r1, r9
 800349a:	008b      	lsls	r3, r1, #2
 800349c:	4641      	mov	r1, r8
 800349e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034a2:	4641      	mov	r1, r8
 80034a4:	008a      	lsls	r2, r1, #2
 80034a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80034aa:	f7fc fee9 	bl	8000280 <__aeabi_uldivmod>
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	4b0d      	ldr	r3, [pc, #52]	; (80034e8 <UART_SetConfig+0x4e4>)
 80034b4:	fba3 1302 	umull	r1, r3, r3, r2
 80034b8:	095b      	lsrs	r3, r3, #5
 80034ba:	2164      	movs	r1, #100	; 0x64
 80034bc:	fb01 f303 	mul.w	r3, r1, r3
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	3332      	adds	r3, #50	; 0x32
 80034c6:	4a08      	ldr	r2, [pc, #32]	; (80034e8 <UART_SetConfig+0x4e4>)
 80034c8:	fba2 2303 	umull	r2, r3, r2, r3
 80034cc:	095b      	lsrs	r3, r3, #5
 80034ce:	f003 020f 	and.w	r2, r3, #15
 80034d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4422      	add	r2, r4
 80034da:	609a      	str	r2, [r3, #8]
}
 80034dc:	bf00      	nop
 80034de:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80034e2:	46bd      	mov	sp, r7
 80034e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034e8:	51eb851f 	.word	0x51eb851f

080034ec <std>:
 80034ec:	2300      	movs	r3, #0
 80034ee:	b510      	push	{r4, lr}
 80034f0:	4604      	mov	r4, r0
 80034f2:	e9c0 3300 	strd	r3, r3, [r0]
 80034f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034fa:	6083      	str	r3, [r0, #8]
 80034fc:	8181      	strh	r1, [r0, #12]
 80034fe:	6643      	str	r3, [r0, #100]	; 0x64
 8003500:	81c2      	strh	r2, [r0, #14]
 8003502:	6183      	str	r3, [r0, #24]
 8003504:	4619      	mov	r1, r3
 8003506:	2208      	movs	r2, #8
 8003508:	305c      	adds	r0, #92	; 0x5c
 800350a:	f000 fac5 	bl	8003a98 <memset>
 800350e:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <std+0x58>)
 8003510:	6263      	str	r3, [r4, #36]	; 0x24
 8003512:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <std+0x5c>)
 8003514:	62a3      	str	r3, [r4, #40]	; 0x28
 8003516:	4b0d      	ldr	r3, [pc, #52]	; (800354c <std+0x60>)
 8003518:	62e3      	str	r3, [r4, #44]	; 0x2c
 800351a:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <std+0x64>)
 800351c:	6323      	str	r3, [r4, #48]	; 0x30
 800351e:	4b0d      	ldr	r3, [pc, #52]	; (8003554 <std+0x68>)
 8003520:	6224      	str	r4, [r4, #32]
 8003522:	429c      	cmp	r4, r3
 8003524:	d006      	beq.n	8003534 <std+0x48>
 8003526:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800352a:	4294      	cmp	r4, r2
 800352c:	d002      	beq.n	8003534 <std+0x48>
 800352e:	33d0      	adds	r3, #208	; 0xd0
 8003530:	429c      	cmp	r4, r3
 8003532:	d105      	bne.n	8003540 <std+0x54>
 8003534:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800353c:	f000 bb24 	b.w	8003b88 <__retarget_lock_init_recursive>
 8003540:	bd10      	pop	{r4, pc}
 8003542:	bf00      	nop
 8003544:	080038e9 	.word	0x080038e9
 8003548:	0800390b 	.word	0x0800390b
 800354c:	08003943 	.word	0x08003943
 8003550:	08003967 	.word	0x08003967
 8003554:	20000144 	.word	0x20000144

08003558 <stdio_exit_handler>:
 8003558:	4a02      	ldr	r2, [pc, #8]	; (8003564 <stdio_exit_handler+0xc>)
 800355a:	4903      	ldr	r1, [pc, #12]	; (8003568 <stdio_exit_handler+0x10>)
 800355c:	4803      	ldr	r0, [pc, #12]	; (800356c <stdio_exit_handler+0x14>)
 800355e:	f000 b869 	b.w	8003634 <_fwalk_sglue>
 8003562:	bf00      	nop
 8003564:	2000001c 	.word	0x2000001c
 8003568:	080046f5 	.word	0x080046f5
 800356c:	20000028 	.word	0x20000028

08003570 <cleanup_stdio>:
 8003570:	6841      	ldr	r1, [r0, #4]
 8003572:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <cleanup_stdio+0x34>)
 8003574:	4299      	cmp	r1, r3
 8003576:	b510      	push	{r4, lr}
 8003578:	4604      	mov	r4, r0
 800357a:	d001      	beq.n	8003580 <cleanup_stdio+0x10>
 800357c:	f001 f8ba 	bl	80046f4 <_fflush_r>
 8003580:	68a1      	ldr	r1, [r4, #8]
 8003582:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <cleanup_stdio+0x38>)
 8003584:	4299      	cmp	r1, r3
 8003586:	d002      	beq.n	800358e <cleanup_stdio+0x1e>
 8003588:	4620      	mov	r0, r4
 800358a:	f001 f8b3 	bl	80046f4 <_fflush_r>
 800358e:	68e1      	ldr	r1, [r4, #12]
 8003590:	4b06      	ldr	r3, [pc, #24]	; (80035ac <cleanup_stdio+0x3c>)
 8003592:	4299      	cmp	r1, r3
 8003594:	d004      	beq.n	80035a0 <cleanup_stdio+0x30>
 8003596:	4620      	mov	r0, r4
 8003598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800359c:	f001 b8aa 	b.w	80046f4 <_fflush_r>
 80035a0:	bd10      	pop	{r4, pc}
 80035a2:	bf00      	nop
 80035a4:	20000144 	.word	0x20000144
 80035a8:	200001ac 	.word	0x200001ac
 80035ac:	20000214 	.word	0x20000214

080035b0 <global_stdio_init.part.0>:
 80035b0:	b510      	push	{r4, lr}
 80035b2:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <global_stdio_init.part.0+0x30>)
 80035b4:	4c0b      	ldr	r4, [pc, #44]	; (80035e4 <global_stdio_init.part.0+0x34>)
 80035b6:	4a0c      	ldr	r2, [pc, #48]	; (80035e8 <global_stdio_init.part.0+0x38>)
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	4620      	mov	r0, r4
 80035bc:	2200      	movs	r2, #0
 80035be:	2104      	movs	r1, #4
 80035c0:	f7ff ff94 	bl	80034ec <std>
 80035c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80035c8:	2201      	movs	r2, #1
 80035ca:	2109      	movs	r1, #9
 80035cc:	f7ff ff8e 	bl	80034ec <std>
 80035d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80035d4:	2202      	movs	r2, #2
 80035d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035da:	2112      	movs	r1, #18
 80035dc:	f7ff bf86 	b.w	80034ec <std>
 80035e0:	2000027c 	.word	0x2000027c
 80035e4:	20000144 	.word	0x20000144
 80035e8:	08003559 	.word	0x08003559

080035ec <__sfp_lock_acquire>:
 80035ec:	4801      	ldr	r0, [pc, #4]	; (80035f4 <__sfp_lock_acquire+0x8>)
 80035ee:	f000 bacc 	b.w	8003b8a <__retarget_lock_acquire_recursive>
 80035f2:	bf00      	nop
 80035f4:	20000285 	.word	0x20000285

080035f8 <__sfp_lock_release>:
 80035f8:	4801      	ldr	r0, [pc, #4]	; (8003600 <__sfp_lock_release+0x8>)
 80035fa:	f000 bac7 	b.w	8003b8c <__retarget_lock_release_recursive>
 80035fe:	bf00      	nop
 8003600:	20000285 	.word	0x20000285

08003604 <__sinit>:
 8003604:	b510      	push	{r4, lr}
 8003606:	4604      	mov	r4, r0
 8003608:	f7ff fff0 	bl	80035ec <__sfp_lock_acquire>
 800360c:	6a23      	ldr	r3, [r4, #32]
 800360e:	b11b      	cbz	r3, 8003618 <__sinit+0x14>
 8003610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003614:	f7ff bff0 	b.w	80035f8 <__sfp_lock_release>
 8003618:	4b04      	ldr	r3, [pc, #16]	; (800362c <__sinit+0x28>)
 800361a:	6223      	str	r3, [r4, #32]
 800361c:	4b04      	ldr	r3, [pc, #16]	; (8003630 <__sinit+0x2c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f5      	bne.n	8003610 <__sinit+0xc>
 8003624:	f7ff ffc4 	bl	80035b0 <global_stdio_init.part.0>
 8003628:	e7f2      	b.n	8003610 <__sinit+0xc>
 800362a:	bf00      	nop
 800362c:	08003571 	.word	0x08003571
 8003630:	2000027c 	.word	0x2000027c

08003634 <_fwalk_sglue>:
 8003634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003638:	4607      	mov	r7, r0
 800363a:	4688      	mov	r8, r1
 800363c:	4614      	mov	r4, r2
 800363e:	2600      	movs	r6, #0
 8003640:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003644:	f1b9 0901 	subs.w	r9, r9, #1
 8003648:	d505      	bpl.n	8003656 <_fwalk_sglue+0x22>
 800364a:	6824      	ldr	r4, [r4, #0]
 800364c:	2c00      	cmp	r4, #0
 800364e:	d1f7      	bne.n	8003640 <_fwalk_sglue+0xc>
 8003650:	4630      	mov	r0, r6
 8003652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003656:	89ab      	ldrh	r3, [r5, #12]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d907      	bls.n	800366c <_fwalk_sglue+0x38>
 800365c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003660:	3301      	adds	r3, #1
 8003662:	d003      	beq.n	800366c <_fwalk_sglue+0x38>
 8003664:	4629      	mov	r1, r5
 8003666:	4638      	mov	r0, r7
 8003668:	47c0      	blx	r8
 800366a:	4306      	orrs	r6, r0
 800366c:	3568      	adds	r5, #104	; 0x68
 800366e:	e7e9      	b.n	8003644 <_fwalk_sglue+0x10>

08003670 <iprintf>:
 8003670:	b40f      	push	{r0, r1, r2, r3}
 8003672:	b507      	push	{r0, r1, r2, lr}
 8003674:	4906      	ldr	r1, [pc, #24]	; (8003690 <iprintf+0x20>)
 8003676:	ab04      	add	r3, sp, #16
 8003678:	6808      	ldr	r0, [r1, #0]
 800367a:	f853 2b04 	ldr.w	r2, [r3], #4
 800367e:	6881      	ldr	r1, [r0, #8]
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	f000 fd07 	bl	8004094 <_vfiprintf_r>
 8003686:	b003      	add	sp, #12
 8003688:	f85d eb04 	ldr.w	lr, [sp], #4
 800368c:	b004      	add	sp, #16
 800368e:	4770      	bx	lr
 8003690:	20000074 	.word	0x20000074

08003694 <_puts_r>:
 8003694:	6a03      	ldr	r3, [r0, #32]
 8003696:	b570      	push	{r4, r5, r6, lr}
 8003698:	6884      	ldr	r4, [r0, #8]
 800369a:	4605      	mov	r5, r0
 800369c:	460e      	mov	r6, r1
 800369e:	b90b      	cbnz	r3, 80036a4 <_puts_r+0x10>
 80036a0:	f7ff ffb0 	bl	8003604 <__sinit>
 80036a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036a6:	07db      	lsls	r3, r3, #31
 80036a8:	d405      	bmi.n	80036b6 <_puts_r+0x22>
 80036aa:	89a3      	ldrh	r3, [r4, #12]
 80036ac:	0598      	lsls	r0, r3, #22
 80036ae:	d402      	bmi.n	80036b6 <_puts_r+0x22>
 80036b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036b2:	f000 fa6a 	bl	8003b8a <__retarget_lock_acquire_recursive>
 80036b6:	89a3      	ldrh	r3, [r4, #12]
 80036b8:	0719      	lsls	r1, r3, #28
 80036ba:	d513      	bpl.n	80036e4 <_puts_r+0x50>
 80036bc:	6923      	ldr	r3, [r4, #16]
 80036be:	b18b      	cbz	r3, 80036e4 <_puts_r+0x50>
 80036c0:	3e01      	subs	r6, #1
 80036c2:	68a3      	ldr	r3, [r4, #8]
 80036c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80036c8:	3b01      	subs	r3, #1
 80036ca:	60a3      	str	r3, [r4, #8]
 80036cc:	b9e9      	cbnz	r1, 800370a <_puts_r+0x76>
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	da2e      	bge.n	8003730 <_puts_r+0x9c>
 80036d2:	4622      	mov	r2, r4
 80036d4:	210a      	movs	r1, #10
 80036d6:	4628      	mov	r0, r5
 80036d8:	f000 f949 	bl	800396e <__swbuf_r>
 80036dc:	3001      	adds	r0, #1
 80036de:	d007      	beq.n	80036f0 <_puts_r+0x5c>
 80036e0:	250a      	movs	r5, #10
 80036e2:	e007      	b.n	80036f4 <_puts_r+0x60>
 80036e4:	4621      	mov	r1, r4
 80036e6:	4628      	mov	r0, r5
 80036e8:	f000 f97e 	bl	80039e8 <__swsetup_r>
 80036ec:	2800      	cmp	r0, #0
 80036ee:	d0e7      	beq.n	80036c0 <_puts_r+0x2c>
 80036f0:	f04f 35ff 	mov.w	r5, #4294967295
 80036f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036f6:	07da      	lsls	r2, r3, #31
 80036f8:	d405      	bmi.n	8003706 <_puts_r+0x72>
 80036fa:	89a3      	ldrh	r3, [r4, #12]
 80036fc:	059b      	lsls	r3, r3, #22
 80036fe:	d402      	bmi.n	8003706 <_puts_r+0x72>
 8003700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003702:	f000 fa43 	bl	8003b8c <__retarget_lock_release_recursive>
 8003706:	4628      	mov	r0, r5
 8003708:	bd70      	pop	{r4, r5, r6, pc}
 800370a:	2b00      	cmp	r3, #0
 800370c:	da04      	bge.n	8003718 <_puts_r+0x84>
 800370e:	69a2      	ldr	r2, [r4, #24]
 8003710:	429a      	cmp	r2, r3
 8003712:	dc06      	bgt.n	8003722 <_puts_r+0x8e>
 8003714:	290a      	cmp	r1, #10
 8003716:	d004      	beq.n	8003722 <_puts_r+0x8e>
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	6022      	str	r2, [r4, #0]
 800371e:	7019      	strb	r1, [r3, #0]
 8003720:	e7cf      	b.n	80036c2 <_puts_r+0x2e>
 8003722:	4622      	mov	r2, r4
 8003724:	4628      	mov	r0, r5
 8003726:	f000 f922 	bl	800396e <__swbuf_r>
 800372a:	3001      	adds	r0, #1
 800372c:	d1c9      	bne.n	80036c2 <_puts_r+0x2e>
 800372e:	e7df      	b.n	80036f0 <_puts_r+0x5c>
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	250a      	movs	r5, #10
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	6022      	str	r2, [r4, #0]
 8003738:	701d      	strb	r5, [r3, #0]
 800373a:	e7db      	b.n	80036f4 <_puts_r+0x60>

0800373c <puts>:
 800373c:	4b02      	ldr	r3, [pc, #8]	; (8003748 <puts+0xc>)
 800373e:	4601      	mov	r1, r0
 8003740:	6818      	ldr	r0, [r3, #0]
 8003742:	f7ff bfa7 	b.w	8003694 <_puts_r>
 8003746:	bf00      	nop
 8003748:	20000074 	.word	0x20000074

0800374c <setvbuf>:
 800374c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003750:	461d      	mov	r5, r3
 8003752:	4b54      	ldr	r3, [pc, #336]	; (80038a4 <setvbuf+0x158>)
 8003754:	681f      	ldr	r7, [r3, #0]
 8003756:	4604      	mov	r4, r0
 8003758:	460e      	mov	r6, r1
 800375a:	4690      	mov	r8, r2
 800375c:	b127      	cbz	r7, 8003768 <setvbuf+0x1c>
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	b913      	cbnz	r3, 8003768 <setvbuf+0x1c>
 8003762:	4638      	mov	r0, r7
 8003764:	f7ff ff4e 	bl	8003604 <__sinit>
 8003768:	f1b8 0f02 	cmp.w	r8, #2
 800376c:	d006      	beq.n	800377c <setvbuf+0x30>
 800376e:	f1b8 0f01 	cmp.w	r8, #1
 8003772:	f200 8094 	bhi.w	800389e <setvbuf+0x152>
 8003776:	2d00      	cmp	r5, #0
 8003778:	f2c0 8091 	blt.w	800389e <setvbuf+0x152>
 800377c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800377e:	07da      	lsls	r2, r3, #31
 8003780:	d405      	bmi.n	800378e <setvbuf+0x42>
 8003782:	89a3      	ldrh	r3, [r4, #12]
 8003784:	059b      	lsls	r3, r3, #22
 8003786:	d402      	bmi.n	800378e <setvbuf+0x42>
 8003788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800378a:	f000 f9fe 	bl	8003b8a <__retarget_lock_acquire_recursive>
 800378e:	4621      	mov	r1, r4
 8003790:	4638      	mov	r0, r7
 8003792:	f000 ffaf 	bl	80046f4 <_fflush_r>
 8003796:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003798:	b141      	cbz	r1, 80037ac <setvbuf+0x60>
 800379a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800379e:	4299      	cmp	r1, r3
 80037a0:	d002      	beq.n	80037a8 <setvbuf+0x5c>
 80037a2:	4638      	mov	r0, r7
 80037a4:	f000 f9f4 	bl	8003b90 <_free_r>
 80037a8:	2300      	movs	r3, #0
 80037aa:	6363      	str	r3, [r4, #52]	; 0x34
 80037ac:	2300      	movs	r3, #0
 80037ae:	61a3      	str	r3, [r4, #24]
 80037b0:	6063      	str	r3, [r4, #4]
 80037b2:	89a3      	ldrh	r3, [r4, #12]
 80037b4:	0618      	lsls	r0, r3, #24
 80037b6:	d503      	bpl.n	80037c0 <setvbuf+0x74>
 80037b8:	6921      	ldr	r1, [r4, #16]
 80037ba:	4638      	mov	r0, r7
 80037bc:	f000 f9e8 	bl	8003b90 <_free_r>
 80037c0:	89a3      	ldrh	r3, [r4, #12]
 80037c2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80037c6:	f023 0303 	bic.w	r3, r3, #3
 80037ca:	f1b8 0f02 	cmp.w	r8, #2
 80037ce:	81a3      	strh	r3, [r4, #12]
 80037d0:	d05f      	beq.n	8003892 <setvbuf+0x146>
 80037d2:	ab01      	add	r3, sp, #4
 80037d4:	466a      	mov	r2, sp
 80037d6:	4621      	mov	r1, r4
 80037d8:	4638      	mov	r0, r7
 80037da:	f000 ffb3 	bl	8004744 <__swhatbuf_r>
 80037de:	89a3      	ldrh	r3, [r4, #12]
 80037e0:	4318      	orrs	r0, r3
 80037e2:	81a0      	strh	r0, [r4, #12]
 80037e4:	bb2d      	cbnz	r5, 8003832 <setvbuf+0xe6>
 80037e6:	9d00      	ldr	r5, [sp, #0]
 80037e8:	4628      	mov	r0, r5
 80037ea:	f000 fa1d 	bl	8003c28 <malloc>
 80037ee:	4606      	mov	r6, r0
 80037f0:	2800      	cmp	r0, #0
 80037f2:	d150      	bne.n	8003896 <setvbuf+0x14a>
 80037f4:	f8dd 9000 	ldr.w	r9, [sp]
 80037f8:	45a9      	cmp	r9, r5
 80037fa:	d13e      	bne.n	800387a <setvbuf+0x12e>
 80037fc:	f04f 35ff 	mov.w	r5, #4294967295
 8003800:	2200      	movs	r2, #0
 8003802:	60a2      	str	r2, [r4, #8]
 8003804:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003808:	6022      	str	r2, [r4, #0]
 800380a:	6122      	str	r2, [r4, #16]
 800380c:	2201      	movs	r2, #1
 800380e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003812:	6162      	str	r2, [r4, #20]
 8003814:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003816:	f043 0302 	orr.w	r3, r3, #2
 800381a:	07d1      	lsls	r1, r2, #31
 800381c:	81a3      	strh	r3, [r4, #12]
 800381e:	d404      	bmi.n	800382a <setvbuf+0xde>
 8003820:	059b      	lsls	r3, r3, #22
 8003822:	d402      	bmi.n	800382a <setvbuf+0xde>
 8003824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003826:	f000 f9b1 	bl	8003b8c <__retarget_lock_release_recursive>
 800382a:	4628      	mov	r0, r5
 800382c:	b003      	add	sp, #12
 800382e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003832:	2e00      	cmp	r6, #0
 8003834:	d0d8      	beq.n	80037e8 <setvbuf+0x9c>
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	b913      	cbnz	r3, 8003840 <setvbuf+0xf4>
 800383a:	4638      	mov	r0, r7
 800383c:	f7ff fee2 	bl	8003604 <__sinit>
 8003840:	f1b8 0f01 	cmp.w	r8, #1
 8003844:	bf08      	it	eq
 8003846:	89a3      	ldrheq	r3, [r4, #12]
 8003848:	6026      	str	r6, [r4, #0]
 800384a:	bf04      	itt	eq
 800384c:	f043 0301 	orreq.w	r3, r3, #1
 8003850:	81a3      	strheq	r3, [r4, #12]
 8003852:	89a3      	ldrh	r3, [r4, #12]
 8003854:	f013 0208 	ands.w	r2, r3, #8
 8003858:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800385c:	d01d      	beq.n	800389a <setvbuf+0x14e>
 800385e:	07da      	lsls	r2, r3, #31
 8003860:	bf41      	itttt	mi
 8003862:	2200      	movmi	r2, #0
 8003864:	426d      	negmi	r5, r5
 8003866:	60a2      	strmi	r2, [r4, #8]
 8003868:	61a5      	strmi	r5, [r4, #24]
 800386a:	bf58      	it	pl
 800386c:	60a5      	strpl	r5, [r4, #8]
 800386e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003870:	f015 0501 	ands.w	r5, r5, #1
 8003874:	d0d4      	beq.n	8003820 <setvbuf+0xd4>
 8003876:	2500      	movs	r5, #0
 8003878:	e7d7      	b.n	800382a <setvbuf+0xde>
 800387a:	4648      	mov	r0, r9
 800387c:	f000 f9d4 	bl	8003c28 <malloc>
 8003880:	4606      	mov	r6, r0
 8003882:	2800      	cmp	r0, #0
 8003884:	d0ba      	beq.n	80037fc <setvbuf+0xb0>
 8003886:	89a3      	ldrh	r3, [r4, #12]
 8003888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800388c:	81a3      	strh	r3, [r4, #12]
 800388e:	464d      	mov	r5, r9
 8003890:	e7d1      	b.n	8003836 <setvbuf+0xea>
 8003892:	2500      	movs	r5, #0
 8003894:	e7b4      	b.n	8003800 <setvbuf+0xb4>
 8003896:	46a9      	mov	r9, r5
 8003898:	e7f5      	b.n	8003886 <setvbuf+0x13a>
 800389a:	60a2      	str	r2, [r4, #8]
 800389c:	e7e7      	b.n	800386e <setvbuf+0x122>
 800389e:	f04f 35ff 	mov.w	r5, #4294967295
 80038a2:	e7c2      	b.n	800382a <setvbuf+0xde>
 80038a4:	20000074 	.word	0x20000074

080038a8 <siprintf>:
 80038a8:	b40e      	push	{r1, r2, r3}
 80038aa:	b500      	push	{lr}
 80038ac:	b09c      	sub	sp, #112	; 0x70
 80038ae:	ab1d      	add	r3, sp, #116	; 0x74
 80038b0:	9002      	str	r0, [sp, #8]
 80038b2:	9006      	str	r0, [sp, #24]
 80038b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038b8:	4809      	ldr	r0, [pc, #36]	; (80038e0 <siprintf+0x38>)
 80038ba:	9107      	str	r1, [sp, #28]
 80038bc:	9104      	str	r1, [sp, #16]
 80038be:	4909      	ldr	r1, [pc, #36]	; (80038e4 <siprintf+0x3c>)
 80038c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80038c4:	9105      	str	r1, [sp, #20]
 80038c6:	6800      	ldr	r0, [r0, #0]
 80038c8:	9301      	str	r3, [sp, #4]
 80038ca:	a902      	add	r1, sp, #8
 80038cc:	f000 faba 	bl	8003e44 <_svfiprintf_r>
 80038d0:	9b02      	ldr	r3, [sp, #8]
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
 80038d6:	b01c      	add	sp, #112	; 0x70
 80038d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80038dc:	b003      	add	sp, #12
 80038de:	4770      	bx	lr
 80038e0:	20000074 	.word	0x20000074
 80038e4:	ffff0208 	.word	0xffff0208

080038e8 <__sread>:
 80038e8:	b510      	push	{r4, lr}
 80038ea:	460c      	mov	r4, r1
 80038ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038f0:	f000 f8fc 	bl	8003aec <_read_r>
 80038f4:	2800      	cmp	r0, #0
 80038f6:	bfab      	itete	ge
 80038f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80038fa:	89a3      	ldrhlt	r3, [r4, #12]
 80038fc:	181b      	addge	r3, r3, r0
 80038fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003902:	bfac      	ite	ge
 8003904:	6563      	strge	r3, [r4, #84]	; 0x54
 8003906:	81a3      	strhlt	r3, [r4, #12]
 8003908:	bd10      	pop	{r4, pc}

0800390a <__swrite>:
 800390a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800390e:	461f      	mov	r7, r3
 8003910:	898b      	ldrh	r3, [r1, #12]
 8003912:	05db      	lsls	r3, r3, #23
 8003914:	4605      	mov	r5, r0
 8003916:	460c      	mov	r4, r1
 8003918:	4616      	mov	r6, r2
 800391a:	d505      	bpl.n	8003928 <__swrite+0x1e>
 800391c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003920:	2302      	movs	r3, #2
 8003922:	2200      	movs	r2, #0
 8003924:	f000 f8d0 	bl	8003ac8 <_lseek_r>
 8003928:	89a3      	ldrh	r3, [r4, #12]
 800392a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800392e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003932:	81a3      	strh	r3, [r4, #12]
 8003934:	4632      	mov	r2, r6
 8003936:	463b      	mov	r3, r7
 8003938:	4628      	mov	r0, r5
 800393a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800393e:	f000 b8e7 	b.w	8003b10 <_write_r>

08003942 <__sseek>:
 8003942:	b510      	push	{r4, lr}
 8003944:	460c      	mov	r4, r1
 8003946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800394a:	f000 f8bd 	bl	8003ac8 <_lseek_r>
 800394e:	1c43      	adds	r3, r0, #1
 8003950:	89a3      	ldrh	r3, [r4, #12]
 8003952:	bf15      	itete	ne
 8003954:	6560      	strne	r0, [r4, #84]	; 0x54
 8003956:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800395a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800395e:	81a3      	strheq	r3, [r4, #12]
 8003960:	bf18      	it	ne
 8003962:	81a3      	strhne	r3, [r4, #12]
 8003964:	bd10      	pop	{r4, pc}

08003966 <__sclose>:
 8003966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800396a:	f000 b89d 	b.w	8003aa8 <_close_r>

0800396e <__swbuf_r>:
 800396e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003970:	460e      	mov	r6, r1
 8003972:	4614      	mov	r4, r2
 8003974:	4605      	mov	r5, r0
 8003976:	b118      	cbz	r0, 8003980 <__swbuf_r+0x12>
 8003978:	6a03      	ldr	r3, [r0, #32]
 800397a:	b90b      	cbnz	r3, 8003980 <__swbuf_r+0x12>
 800397c:	f7ff fe42 	bl	8003604 <__sinit>
 8003980:	69a3      	ldr	r3, [r4, #24]
 8003982:	60a3      	str	r3, [r4, #8]
 8003984:	89a3      	ldrh	r3, [r4, #12]
 8003986:	071a      	lsls	r2, r3, #28
 8003988:	d525      	bpl.n	80039d6 <__swbuf_r+0x68>
 800398a:	6923      	ldr	r3, [r4, #16]
 800398c:	b31b      	cbz	r3, 80039d6 <__swbuf_r+0x68>
 800398e:	6823      	ldr	r3, [r4, #0]
 8003990:	6922      	ldr	r2, [r4, #16]
 8003992:	1a98      	subs	r0, r3, r2
 8003994:	6963      	ldr	r3, [r4, #20]
 8003996:	b2f6      	uxtb	r6, r6
 8003998:	4283      	cmp	r3, r0
 800399a:	4637      	mov	r7, r6
 800399c:	dc04      	bgt.n	80039a8 <__swbuf_r+0x3a>
 800399e:	4621      	mov	r1, r4
 80039a0:	4628      	mov	r0, r5
 80039a2:	f000 fea7 	bl	80046f4 <_fflush_r>
 80039a6:	b9e0      	cbnz	r0, 80039e2 <__swbuf_r+0x74>
 80039a8:	68a3      	ldr	r3, [r4, #8]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	60a3      	str	r3, [r4, #8]
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	6022      	str	r2, [r4, #0]
 80039b4:	701e      	strb	r6, [r3, #0]
 80039b6:	6962      	ldr	r2, [r4, #20]
 80039b8:	1c43      	adds	r3, r0, #1
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d004      	beq.n	80039c8 <__swbuf_r+0x5a>
 80039be:	89a3      	ldrh	r3, [r4, #12]
 80039c0:	07db      	lsls	r3, r3, #31
 80039c2:	d506      	bpl.n	80039d2 <__swbuf_r+0x64>
 80039c4:	2e0a      	cmp	r6, #10
 80039c6:	d104      	bne.n	80039d2 <__swbuf_r+0x64>
 80039c8:	4621      	mov	r1, r4
 80039ca:	4628      	mov	r0, r5
 80039cc:	f000 fe92 	bl	80046f4 <_fflush_r>
 80039d0:	b938      	cbnz	r0, 80039e2 <__swbuf_r+0x74>
 80039d2:	4638      	mov	r0, r7
 80039d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039d6:	4621      	mov	r1, r4
 80039d8:	4628      	mov	r0, r5
 80039da:	f000 f805 	bl	80039e8 <__swsetup_r>
 80039de:	2800      	cmp	r0, #0
 80039e0:	d0d5      	beq.n	800398e <__swbuf_r+0x20>
 80039e2:	f04f 37ff 	mov.w	r7, #4294967295
 80039e6:	e7f4      	b.n	80039d2 <__swbuf_r+0x64>

080039e8 <__swsetup_r>:
 80039e8:	b538      	push	{r3, r4, r5, lr}
 80039ea:	4b2a      	ldr	r3, [pc, #168]	; (8003a94 <__swsetup_r+0xac>)
 80039ec:	4605      	mov	r5, r0
 80039ee:	6818      	ldr	r0, [r3, #0]
 80039f0:	460c      	mov	r4, r1
 80039f2:	b118      	cbz	r0, 80039fc <__swsetup_r+0x14>
 80039f4:	6a03      	ldr	r3, [r0, #32]
 80039f6:	b90b      	cbnz	r3, 80039fc <__swsetup_r+0x14>
 80039f8:	f7ff fe04 	bl	8003604 <__sinit>
 80039fc:	89a3      	ldrh	r3, [r4, #12]
 80039fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a02:	0718      	lsls	r0, r3, #28
 8003a04:	d422      	bmi.n	8003a4c <__swsetup_r+0x64>
 8003a06:	06d9      	lsls	r1, r3, #27
 8003a08:	d407      	bmi.n	8003a1a <__swsetup_r+0x32>
 8003a0a:	2309      	movs	r3, #9
 8003a0c:	602b      	str	r3, [r5, #0]
 8003a0e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003a12:	81a3      	strh	r3, [r4, #12]
 8003a14:	f04f 30ff 	mov.w	r0, #4294967295
 8003a18:	e034      	b.n	8003a84 <__swsetup_r+0x9c>
 8003a1a:	0758      	lsls	r0, r3, #29
 8003a1c:	d512      	bpl.n	8003a44 <__swsetup_r+0x5c>
 8003a1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a20:	b141      	cbz	r1, 8003a34 <__swsetup_r+0x4c>
 8003a22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a26:	4299      	cmp	r1, r3
 8003a28:	d002      	beq.n	8003a30 <__swsetup_r+0x48>
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	f000 f8b0 	bl	8003b90 <_free_r>
 8003a30:	2300      	movs	r3, #0
 8003a32:	6363      	str	r3, [r4, #52]	; 0x34
 8003a34:	89a3      	ldrh	r3, [r4, #12]
 8003a36:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003a3a:	81a3      	strh	r3, [r4, #12]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	6063      	str	r3, [r4, #4]
 8003a40:	6923      	ldr	r3, [r4, #16]
 8003a42:	6023      	str	r3, [r4, #0]
 8003a44:	89a3      	ldrh	r3, [r4, #12]
 8003a46:	f043 0308 	orr.w	r3, r3, #8
 8003a4a:	81a3      	strh	r3, [r4, #12]
 8003a4c:	6923      	ldr	r3, [r4, #16]
 8003a4e:	b94b      	cbnz	r3, 8003a64 <__swsetup_r+0x7c>
 8003a50:	89a3      	ldrh	r3, [r4, #12]
 8003a52:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a5a:	d003      	beq.n	8003a64 <__swsetup_r+0x7c>
 8003a5c:	4621      	mov	r1, r4
 8003a5e:	4628      	mov	r0, r5
 8003a60:	f000 fe96 	bl	8004790 <__smakebuf_r>
 8003a64:	89a0      	ldrh	r0, [r4, #12]
 8003a66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a6a:	f010 0301 	ands.w	r3, r0, #1
 8003a6e:	d00a      	beq.n	8003a86 <__swsetup_r+0x9e>
 8003a70:	2300      	movs	r3, #0
 8003a72:	60a3      	str	r3, [r4, #8]
 8003a74:	6963      	ldr	r3, [r4, #20]
 8003a76:	425b      	negs	r3, r3
 8003a78:	61a3      	str	r3, [r4, #24]
 8003a7a:	6923      	ldr	r3, [r4, #16]
 8003a7c:	b943      	cbnz	r3, 8003a90 <__swsetup_r+0xa8>
 8003a7e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003a82:	d1c4      	bne.n	8003a0e <__swsetup_r+0x26>
 8003a84:	bd38      	pop	{r3, r4, r5, pc}
 8003a86:	0781      	lsls	r1, r0, #30
 8003a88:	bf58      	it	pl
 8003a8a:	6963      	ldrpl	r3, [r4, #20]
 8003a8c:	60a3      	str	r3, [r4, #8]
 8003a8e:	e7f4      	b.n	8003a7a <__swsetup_r+0x92>
 8003a90:	2000      	movs	r0, #0
 8003a92:	e7f7      	b.n	8003a84 <__swsetup_r+0x9c>
 8003a94:	20000074 	.word	0x20000074

08003a98 <memset>:
 8003a98:	4402      	add	r2, r0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d100      	bne.n	8003aa2 <memset+0xa>
 8003aa0:	4770      	bx	lr
 8003aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8003aa6:	e7f9      	b.n	8003a9c <memset+0x4>

08003aa8 <_close_r>:
 8003aa8:	b538      	push	{r3, r4, r5, lr}
 8003aaa:	4d06      	ldr	r5, [pc, #24]	; (8003ac4 <_close_r+0x1c>)
 8003aac:	2300      	movs	r3, #0
 8003aae:	4604      	mov	r4, r0
 8003ab0:	4608      	mov	r0, r1
 8003ab2:	602b      	str	r3, [r5, #0]
 8003ab4:	f7fd f9f7 	bl	8000ea6 <_close>
 8003ab8:	1c43      	adds	r3, r0, #1
 8003aba:	d102      	bne.n	8003ac2 <_close_r+0x1a>
 8003abc:	682b      	ldr	r3, [r5, #0]
 8003abe:	b103      	cbz	r3, 8003ac2 <_close_r+0x1a>
 8003ac0:	6023      	str	r3, [r4, #0]
 8003ac2:	bd38      	pop	{r3, r4, r5, pc}
 8003ac4:	20000280 	.word	0x20000280

08003ac8 <_lseek_r>:
 8003ac8:	b538      	push	{r3, r4, r5, lr}
 8003aca:	4d07      	ldr	r5, [pc, #28]	; (8003ae8 <_lseek_r+0x20>)
 8003acc:	4604      	mov	r4, r0
 8003ace:	4608      	mov	r0, r1
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	602a      	str	r2, [r5, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f7fd fa0c 	bl	8000ef4 <_lseek>
 8003adc:	1c43      	adds	r3, r0, #1
 8003ade:	d102      	bne.n	8003ae6 <_lseek_r+0x1e>
 8003ae0:	682b      	ldr	r3, [r5, #0]
 8003ae2:	b103      	cbz	r3, 8003ae6 <_lseek_r+0x1e>
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	bd38      	pop	{r3, r4, r5, pc}
 8003ae8:	20000280 	.word	0x20000280

08003aec <_read_r>:
 8003aec:	b538      	push	{r3, r4, r5, lr}
 8003aee:	4d07      	ldr	r5, [pc, #28]	; (8003b0c <_read_r+0x20>)
 8003af0:	4604      	mov	r4, r0
 8003af2:	4608      	mov	r0, r1
 8003af4:	4611      	mov	r1, r2
 8003af6:	2200      	movs	r2, #0
 8003af8:	602a      	str	r2, [r5, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	f7fd f99a 	bl	8000e34 <_read>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	d102      	bne.n	8003b0a <_read_r+0x1e>
 8003b04:	682b      	ldr	r3, [r5, #0]
 8003b06:	b103      	cbz	r3, 8003b0a <_read_r+0x1e>
 8003b08:	6023      	str	r3, [r4, #0]
 8003b0a:	bd38      	pop	{r3, r4, r5, pc}
 8003b0c:	20000280 	.word	0x20000280

08003b10 <_write_r>:
 8003b10:	b538      	push	{r3, r4, r5, lr}
 8003b12:	4d07      	ldr	r5, [pc, #28]	; (8003b30 <_write_r+0x20>)
 8003b14:	4604      	mov	r4, r0
 8003b16:	4608      	mov	r0, r1
 8003b18:	4611      	mov	r1, r2
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	602a      	str	r2, [r5, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f7fd f9a5 	bl	8000e6e <_write>
 8003b24:	1c43      	adds	r3, r0, #1
 8003b26:	d102      	bne.n	8003b2e <_write_r+0x1e>
 8003b28:	682b      	ldr	r3, [r5, #0]
 8003b2a:	b103      	cbz	r3, 8003b2e <_write_r+0x1e>
 8003b2c:	6023      	str	r3, [r4, #0]
 8003b2e:	bd38      	pop	{r3, r4, r5, pc}
 8003b30:	20000280 	.word	0x20000280

08003b34 <__errno>:
 8003b34:	4b01      	ldr	r3, [pc, #4]	; (8003b3c <__errno+0x8>)
 8003b36:	6818      	ldr	r0, [r3, #0]
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	20000074 	.word	0x20000074

08003b40 <__libc_init_array>:
 8003b40:	b570      	push	{r4, r5, r6, lr}
 8003b42:	4d0d      	ldr	r5, [pc, #52]	; (8003b78 <__libc_init_array+0x38>)
 8003b44:	4c0d      	ldr	r4, [pc, #52]	; (8003b7c <__libc_init_array+0x3c>)
 8003b46:	1b64      	subs	r4, r4, r5
 8003b48:	10a4      	asrs	r4, r4, #2
 8003b4a:	2600      	movs	r6, #0
 8003b4c:	42a6      	cmp	r6, r4
 8003b4e:	d109      	bne.n	8003b64 <__libc_init_array+0x24>
 8003b50:	4d0b      	ldr	r5, [pc, #44]	; (8003b80 <__libc_init_array+0x40>)
 8003b52:	4c0c      	ldr	r4, [pc, #48]	; (8003b84 <__libc_init_array+0x44>)
 8003b54:	f000 feea 	bl	800492c <_init>
 8003b58:	1b64      	subs	r4, r4, r5
 8003b5a:	10a4      	asrs	r4, r4, #2
 8003b5c:	2600      	movs	r6, #0
 8003b5e:	42a6      	cmp	r6, r4
 8003b60:	d105      	bne.n	8003b6e <__libc_init_array+0x2e>
 8003b62:	bd70      	pop	{r4, r5, r6, pc}
 8003b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b68:	4798      	blx	r3
 8003b6a:	3601      	adds	r6, #1
 8003b6c:	e7ee      	b.n	8003b4c <__libc_init_array+0xc>
 8003b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b72:	4798      	blx	r3
 8003b74:	3601      	adds	r6, #1
 8003b76:	e7f2      	b.n	8003b5e <__libc_init_array+0x1e>
 8003b78:	08004a60 	.word	0x08004a60
 8003b7c:	08004a60 	.word	0x08004a60
 8003b80:	08004a60 	.word	0x08004a60
 8003b84:	08004a64 	.word	0x08004a64

08003b88 <__retarget_lock_init_recursive>:
 8003b88:	4770      	bx	lr

08003b8a <__retarget_lock_acquire_recursive>:
 8003b8a:	4770      	bx	lr

08003b8c <__retarget_lock_release_recursive>:
 8003b8c:	4770      	bx	lr
	...

08003b90 <_free_r>:
 8003b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b92:	2900      	cmp	r1, #0
 8003b94:	d044      	beq.n	8003c20 <_free_r+0x90>
 8003b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b9a:	9001      	str	r0, [sp, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f1a1 0404 	sub.w	r4, r1, #4
 8003ba2:	bfb8      	it	lt
 8003ba4:	18e4      	addlt	r4, r4, r3
 8003ba6:	f000 f8e7 	bl	8003d78 <__malloc_lock>
 8003baa:	4a1e      	ldr	r2, [pc, #120]	; (8003c24 <_free_r+0x94>)
 8003bac:	9801      	ldr	r0, [sp, #4]
 8003bae:	6813      	ldr	r3, [r2, #0]
 8003bb0:	b933      	cbnz	r3, 8003bc0 <_free_r+0x30>
 8003bb2:	6063      	str	r3, [r4, #4]
 8003bb4:	6014      	str	r4, [r2, #0]
 8003bb6:	b003      	add	sp, #12
 8003bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003bbc:	f000 b8e2 	b.w	8003d84 <__malloc_unlock>
 8003bc0:	42a3      	cmp	r3, r4
 8003bc2:	d908      	bls.n	8003bd6 <_free_r+0x46>
 8003bc4:	6825      	ldr	r5, [r4, #0]
 8003bc6:	1961      	adds	r1, r4, r5
 8003bc8:	428b      	cmp	r3, r1
 8003bca:	bf01      	itttt	eq
 8003bcc:	6819      	ldreq	r1, [r3, #0]
 8003bce:	685b      	ldreq	r3, [r3, #4]
 8003bd0:	1949      	addeq	r1, r1, r5
 8003bd2:	6021      	streq	r1, [r4, #0]
 8003bd4:	e7ed      	b.n	8003bb2 <_free_r+0x22>
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	b10b      	cbz	r3, 8003be0 <_free_r+0x50>
 8003bdc:	42a3      	cmp	r3, r4
 8003bde:	d9fa      	bls.n	8003bd6 <_free_r+0x46>
 8003be0:	6811      	ldr	r1, [r2, #0]
 8003be2:	1855      	adds	r5, r2, r1
 8003be4:	42a5      	cmp	r5, r4
 8003be6:	d10b      	bne.n	8003c00 <_free_r+0x70>
 8003be8:	6824      	ldr	r4, [r4, #0]
 8003bea:	4421      	add	r1, r4
 8003bec:	1854      	adds	r4, r2, r1
 8003bee:	42a3      	cmp	r3, r4
 8003bf0:	6011      	str	r1, [r2, #0]
 8003bf2:	d1e0      	bne.n	8003bb6 <_free_r+0x26>
 8003bf4:	681c      	ldr	r4, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	6053      	str	r3, [r2, #4]
 8003bfa:	440c      	add	r4, r1
 8003bfc:	6014      	str	r4, [r2, #0]
 8003bfe:	e7da      	b.n	8003bb6 <_free_r+0x26>
 8003c00:	d902      	bls.n	8003c08 <_free_r+0x78>
 8003c02:	230c      	movs	r3, #12
 8003c04:	6003      	str	r3, [r0, #0]
 8003c06:	e7d6      	b.n	8003bb6 <_free_r+0x26>
 8003c08:	6825      	ldr	r5, [r4, #0]
 8003c0a:	1961      	adds	r1, r4, r5
 8003c0c:	428b      	cmp	r3, r1
 8003c0e:	bf04      	itt	eq
 8003c10:	6819      	ldreq	r1, [r3, #0]
 8003c12:	685b      	ldreq	r3, [r3, #4]
 8003c14:	6063      	str	r3, [r4, #4]
 8003c16:	bf04      	itt	eq
 8003c18:	1949      	addeq	r1, r1, r5
 8003c1a:	6021      	streq	r1, [r4, #0]
 8003c1c:	6054      	str	r4, [r2, #4]
 8003c1e:	e7ca      	b.n	8003bb6 <_free_r+0x26>
 8003c20:	b003      	add	sp, #12
 8003c22:	bd30      	pop	{r4, r5, pc}
 8003c24:	20000288 	.word	0x20000288

08003c28 <malloc>:
 8003c28:	4b02      	ldr	r3, [pc, #8]	; (8003c34 <malloc+0xc>)
 8003c2a:	4601      	mov	r1, r0
 8003c2c:	6818      	ldr	r0, [r3, #0]
 8003c2e:	f000 b823 	b.w	8003c78 <_malloc_r>
 8003c32:	bf00      	nop
 8003c34:	20000074 	.word	0x20000074

08003c38 <sbrk_aligned>:
 8003c38:	b570      	push	{r4, r5, r6, lr}
 8003c3a:	4e0e      	ldr	r6, [pc, #56]	; (8003c74 <sbrk_aligned+0x3c>)
 8003c3c:	460c      	mov	r4, r1
 8003c3e:	6831      	ldr	r1, [r6, #0]
 8003c40:	4605      	mov	r5, r0
 8003c42:	b911      	cbnz	r1, 8003c4a <sbrk_aligned+0x12>
 8003c44:	f000 fe1c 	bl	8004880 <_sbrk_r>
 8003c48:	6030      	str	r0, [r6, #0]
 8003c4a:	4621      	mov	r1, r4
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	f000 fe17 	bl	8004880 <_sbrk_r>
 8003c52:	1c43      	adds	r3, r0, #1
 8003c54:	d00a      	beq.n	8003c6c <sbrk_aligned+0x34>
 8003c56:	1cc4      	adds	r4, r0, #3
 8003c58:	f024 0403 	bic.w	r4, r4, #3
 8003c5c:	42a0      	cmp	r0, r4
 8003c5e:	d007      	beq.n	8003c70 <sbrk_aligned+0x38>
 8003c60:	1a21      	subs	r1, r4, r0
 8003c62:	4628      	mov	r0, r5
 8003c64:	f000 fe0c 	bl	8004880 <_sbrk_r>
 8003c68:	3001      	adds	r0, #1
 8003c6a:	d101      	bne.n	8003c70 <sbrk_aligned+0x38>
 8003c6c:	f04f 34ff 	mov.w	r4, #4294967295
 8003c70:	4620      	mov	r0, r4
 8003c72:	bd70      	pop	{r4, r5, r6, pc}
 8003c74:	2000028c 	.word	0x2000028c

08003c78 <_malloc_r>:
 8003c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c7c:	1ccd      	adds	r5, r1, #3
 8003c7e:	f025 0503 	bic.w	r5, r5, #3
 8003c82:	3508      	adds	r5, #8
 8003c84:	2d0c      	cmp	r5, #12
 8003c86:	bf38      	it	cc
 8003c88:	250c      	movcc	r5, #12
 8003c8a:	2d00      	cmp	r5, #0
 8003c8c:	4607      	mov	r7, r0
 8003c8e:	db01      	blt.n	8003c94 <_malloc_r+0x1c>
 8003c90:	42a9      	cmp	r1, r5
 8003c92:	d905      	bls.n	8003ca0 <_malloc_r+0x28>
 8003c94:	230c      	movs	r3, #12
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	2600      	movs	r6, #0
 8003c9a:	4630      	mov	r0, r6
 8003c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ca0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003d74 <_malloc_r+0xfc>
 8003ca4:	f000 f868 	bl	8003d78 <__malloc_lock>
 8003ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8003cac:	461c      	mov	r4, r3
 8003cae:	bb5c      	cbnz	r4, 8003d08 <_malloc_r+0x90>
 8003cb0:	4629      	mov	r1, r5
 8003cb2:	4638      	mov	r0, r7
 8003cb4:	f7ff ffc0 	bl	8003c38 <sbrk_aligned>
 8003cb8:	1c43      	adds	r3, r0, #1
 8003cba:	4604      	mov	r4, r0
 8003cbc:	d155      	bne.n	8003d6a <_malloc_r+0xf2>
 8003cbe:	f8d8 4000 	ldr.w	r4, [r8]
 8003cc2:	4626      	mov	r6, r4
 8003cc4:	2e00      	cmp	r6, #0
 8003cc6:	d145      	bne.n	8003d54 <_malloc_r+0xdc>
 8003cc8:	2c00      	cmp	r4, #0
 8003cca:	d048      	beq.n	8003d5e <_malloc_r+0xe6>
 8003ccc:	6823      	ldr	r3, [r4, #0]
 8003cce:	4631      	mov	r1, r6
 8003cd0:	4638      	mov	r0, r7
 8003cd2:	eb04 0903 	add.w	r9, r4, r3
 8003cd6:	f000 fdd3 	bl	8004880 <_sbrk_r>
 8003cda:	4581      	cmp	r9, r0
 8003cdc:	d13f      	bne.n	8003d5e <_malloc_r+0xe6>
 8003cde:	6821      	ldr	r1, [r4, #0]
 8003ce0:	1a6d      	subs	r5, r5, r1
 8003ce2:	4629      	mov	r1, r5
 8003ce4:	4638      	mov	r0, r7
 8003ce6:	f7ff ffa7 	bl	8003c38 <sbrk_aligned>
 8003cea:	3001      	adds	r0, #1
 8003cec:	d037      	beq.n	8003d5e <_malloc_r+0xe6>
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	442b      	add	r3, r5
 8003cf2:	6023      	str	r3, [r4, #0]
 8003cf4:	f8d8 3000 	ldr.w	r3, [r8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d038      	beq.n	8003d6e <_malloc_r+0xf6>
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	42a2      	cmp	r2, r4
 8003d00:	d12b      	bne.n	8003d5a <_malloc_r+0xe2>
 8003d02:	2200      	movs	r2, #0
 8003d04:	605a      	str	r2, [r3, #4]
 8003d06:	e00f      	b.n	8003d28 <_malloc_r+0xb0>
 8003d08:	6822      	ldr	r2, [r4, #0]
 8003d0a:	1b52      	subs	r2, r2, r5
 8003d0c:	d41f      	bmi.n	8003d4e <_malloc_r+0xd6>
 8003d0e:	2a0b      	cmp	r2, #11
 8003d10:	d917      	bls.n	8003d42 <_malloc_r+0xca>
 8003d12:	1961      	adds	r1, r4, r5
 8003d14:	42a3      	cmp	r3, r4
 8003d16:	6025      	str	r5, [r4, #0]
 8003d18:	bf18      	it	ne
 8003d1a:	6059      	strne	r1, [r3, #4]
 8003d1c:	6863      	ldr	r3, [r4, #4]
 8003d1e:	bf08      	it	eq
 8003d20:	f8c8 1000 	streq.w	r1, [r8]
 8003d24:	5162      	str	r2, [r4, r5]
 8003d26:	604b      	str	r3, [r1, #4]
 8003d28:	4638      	mov	r0, r7
 8003d2a:	f104 060b 	add.w	r6, r4, #11
 8003d2e:	f000 f829 	bl	8003d84 <__malloc_unlock>
 8003d32:	f026 0607 	bic.w	r6, r6, #7
 8003d36:	1d23      	adds	r3, r4, #4
 8003d38:	1af2      	subs	r2, r6, r3
 8003d3a:	d0ae      	beq.n	8003c9a <_malloc_r+0x22>
 8003d3c:	1b9b      	subs	r3, r3, r6
 8003d3e:	50a3      	str	r3, [r4, r2]
 8003d40:	e7ab      	b.n	8003c9a <_malloc_r+0x22>
 8003d42:	42a3      	cmp	r3, r4
 8003d44:	6862      	ldr	r2, [r4, #4]
 8003d46:	d1dd      	bne.n	8003d04 <_malloc_r+0x8c>
 8003d48:	f8c8 2000 	str.w	r2, [r8]
 8003d4c:	e7ec      	b.n	8003d28 <_malloc_r+0xb0>
 8003d4e:	4623      	mov	r3, r4
 8003d50:	6864      	ldr	r4, [r4, #4]
 8003d52:	e7ac      	b.n	8003cae <_malloc_r+0x36>
 8003d54:	4634      	mov	r4, r6
 8003d56:	6876      	ldr	r6, [r6, #4]
 8003d58:	e7b4      	b.n	8003cc4 <_malloc_r+0x4c>
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	e7cc      	b.n	8003cf8 <_malloc_r+0x80>
 8003d5e:	230c      	movs	r3, #12
 8003d60:	603b      	str	r3, [r7, #0]
 8003d62:	4638      	mov	r0, r7
 8003d64:	f000 f80e 	bl	8003d84 <__malloc_unlock>
 8003d68:	e797      	b.n	8003c9a <_malloc_r+0x22>
 8003d6a:	6025      	str	r5, [r4, #0]
 8003d6c:	e7dc      	b.n	8003d28 <_malloc_r+0xb0>
 8003d6e:	605b      	str	r3, [r3, #4]
 8003d70:	deff      	udf	#255	; 0xff
 8003d72:	bf00      	nop
 8003d74:	20000288 	.word	0x20000288

08003d78 <__malloc_lock>:
 8003d78:	4801      	ldr	r0, [pc, #4]	; (8003d80 <__malloc_lock+0x8>)
 8003d7a:	f7ff bf06 	b.w	8003b8a <__retarget_lock_acquire_recursive>
 8003d7e:	bf00      	nop
 8003d80:	20000284 	.word	0x20000284

08003d84 <__malloc_unlock>:
 8003d84:	4801      	ldr	r0, [pc, #4]	; (8003d8c <__malloc_unlock+0x8>)
 8003d86:	f7ff bf01 	b.w	8003b8c <__retarget_lock_release_recursive>
 8003d8a:	bf00      	nop
 8003d8c:	20000284 	.word	0x20000284

08003d90 <__ssputs_r>:
 8003d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d94:	688e      	ldr	r6, [r1, #8]
 8003d96:	461f      	mov	r7, r3
 8003d98:	42be      	cmp	r6, r7
 8003d9a:	680b      	ldr	r3, [r1, #0]
 8003d9c:	4682      	mov	sl, r0
 8003d9e:	460c      	mov	r4, r1
 8003da0:	4690      	mov	r8, r2
 8003da2:	d82c      	bhi.n	8003dfe <__ssputs_r+0x6e>
 8003da4:	898a      	ldrh	r2, [r1, #12]
 8003da6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003daa:	d026      	beq.n	8003dfa <__ssputs_r+0x6a>
 8003dac:	6965      	ldr	r5, [r4, #20]
 8003dae:	6909      	ldr	r1, [r1, #16]
 8003db0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003db4:	eba3 0901 	sub.w	r9, r3, r1
 8003db8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003dbc:	1c7b      	adds	r3, r7, #1
 8003dbe:	444b      	add	r3, r9
 8003dc0:	106d      	asrs	r5, r5, #1
 8003dc2:	429d      	cmp	r5, r3
 8003dc4:	bf38      	it	cc
 8003dc6:	461d      	movcc	r5, r3
 8003dc8:	0553      	lsls	r3, r2, #21
 8003dca:	d527      	bpl.n	8003e1c <__ssputs_r+0x8c>
 8003dcc:	4629      	mov	r1, r5
 8003dce:	f7ff ff53 	bl	8003c78 <_malloc_r>
 8003dd2:	4606      	mov	r6, r0
 8003dd4:	b360      	cbz	r0, 8003e30 <__ssputs_r+0xa0>
 8003dd6:	6921      	ldr	r1, [r4, #16]
 8003dd8:	464a      	mov	r2, r9
 8003dda:	f000 fd61 	bl	80048a0 <memcpy>
 8003dde:	89a3      	ldrh	r3, [r4, #12]
 8003de0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003de8:	81a3      	strh	r3, [r4, #12]
 8003dea:	6126      	str	r6, [r4, #16]
 8003dec:	6165      	str	r5, [r4, #20]
 8003dee:	444e      	add	r6, r9
 8003df0:	eba5 0509 	sub.w	r5, r5, r9
 8003df4:	6026      	str	r6, [r4, #0]
 8003df6:	60a5      	str	r5, [r4, #8]
 8003df8:	463e      	mov	r6, r7
 8003dfa:	42be      	cmp	r6, r7
 8003dfc:	d900      	bls.n	8003e00 <__ssputs_r+0x70>
 8003dfe:	463e      	mov	r6, r7
 8003e00:	6820      	ldr	r0, [r4, #0]
 8003e02:	4632      	mov	r2, r6
 8003e04:	4641      	mov	r1, r8
 8003e06:	f000 fcff 	bl	8004808 <memmove>
 8003e0a:	68a3      	ldr	r3, [r4, #8]
 8003e0c:	1b9b      	subs	r3, r3, r6
 8003e0e:	60a3      	str	r3, [r4, #8]
 8003e10:	6823      	ldr	r3, [r4, #0]
 8003e12:	4433      	add	r3, r6
 8003e14:	6023      	str	r3, [r4, #0]
 8003e16:	2000      	movs	r0, #0
 8003e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e1c:	462a      	mov	r2, r5
 8003e1e:	f000 fd4d 	bl	80048bc <_realloc_r>
 8003e22:	4606      	mov	r6, r0
 8003e24:	2800      	cmp	r0, #0
 8003e26:	d1e0      	bne.n	8003dea <__ssputs_r+0x5a>
 8003e28:	6921      	ldr	r1, [r4, #16]
 8003e2a:	4650      	mov	r0, sl
 8003e2c:	f7ff feb0 	bl	8003b90 <_free_r>
 8003e30:	230c      	movs	r3, #12
 8003e32:	f8ca 3000 	str.w	r3, [sl]
 8003e36:	89a3      	ldrh	r3, [r4, #12]
 8003e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e3c:	81a3      	strh	r3, [r4, #12]
 8003e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e42:	e7e9      	b.n	8003e18 <__ssputs_r+0x88>

08003e44 <_svfiprintf_r>:
 8003e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e48:	4698      	mov	r8, r3
 8003e4a:	898b      	ldrh	r3, [r1, #12]
 8003e4c:	061b      	lsls	r3, r3, #24
 8003e4e:	b09d      	sub	sp, #116	; 0x74
 8003e50:	4607      	mov	r7, r0
 8003e52:	460d      	mov	r5, r1
 8003e54:	4614      	mov	r4, r2
 8003e56:	d50e      	bpl.n	8003e76 <_svfiprintf_r+0x32>
 8003e58:	690b      	ldr	r3, [r1, #16]
 8003e5a:	b963      	cbnz	r3, 8003e76 <_svfiprintf_r+0x32>
 8003e5c:	2140      	movs	r1, #64	; 0x40
 8003e5e:	f7ff ff0b 	bl	8003c78 <_malloc_r>
 8003e62:	6028      	str	r0, [r5, #0]
 8003e64:	6128      	str	r0, [r5, #16]
 8003e66:	b920      	cbnz	r0, 8003e72 <_svfiprintf_r+0x2e>
 8003e68:	230c      	movs	r3, #12
 8003e6a:	603b      	str	r3, [r7, #0]
 8003e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e70:	e0d0      	b.n	8004014 <_svfiprintf_r+0x1d0>
 8003e72:	2340      	movs	r3, #64	; 0x40
 8003e74:	616b      	str	r3, [r5, #20]
 8003e76:	2300      	movs	r3, #0
 8003e78:	9309      	str	r3, [sp, #36]	; 0x24
 8003e7a:	2320      	movs	r3, #32
 8003e7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e80:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e84:	2330      	movs	r3, #48	; 0x30
 8003e86:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800402c <_svfiprintf_r+0x1e8>
 8003e8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e8e:	f04f 0901 	mov.w	r9, #1
 8003e92:	4623      	mov	r3, r4
 8003e94:	469a      	mov	sl, r3
 8003e96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e9a:	b10a      	cbz	r2, 8003ea0 <_svfiprintf_r+0x5c>
 8003e9c:	2a25      	cmp	r2, #37	; 0x25
 8003e9e:	d1f9      	bne.n	8003e94 <_svfiprintf_r+0x50>
 8003ea0:	ebba 0b04 	subs.w	fp, sl, r4
 8003ea4:	d00b      	beq.n	8003ebe <_svfiprintf_r+0x7a>
 8003ea6:	465b      	mov	r3, fp
 8003ea8:	4622      	mov	r2, r4
 8003eaa:	4629      	mov	r1, r5
 8003eac:	4638      	mov	r0, r7
 8003eae:	f7ff ff6f 	bl	8003d90 <__ssputs_r>
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	f000 80a9 	beq.w	800400a <_svfiprintf_r+0x1c6>
 8003eb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003eba:	445a      	add	r2, fp
 8003ebc:	9209      	str	r2, [sp, #36]	; 0x24
 8003ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 80a1 	beq.w	800400a <_svfiprintf_r+0x1c6>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f04f 32ff 	mov.w	r2, #4294967295
 8003ece:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ed2:	f10a 0a01 	add.w	sl, sl, #1
 8003ed6:	9304      	str	r3, [sp, #16]
 8003ed8:	9307      	str	r3, [sp, #28]
 8003eda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ede:	931a      	str	r3, [sp, #104]	; 0x68
 8003ee0:	4654      	mov	r4, sl
 8003ee2:	2205      	movs	r2, #5
 8003ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ee8:	4850      	ldr	r0, [pc, #320]	; (800402c <_svfiprintf_r+0x1e8>)
 8003eea:	f7fc f979 	bl	80001e0 <memchr>
 8003eee:	9a04      	ldr	r2, [sp, #16]
 8003ef0:	b9d8      	cbnz	r0, 8003f2a <_svfiprintf_r+0xe6>
 8003ef2:	06d0      	lsls	r0, r2, #27
 8003ef4:	bf44      	itt	mi
 8003ef6:	2320      	movmi	r3, #32
 8003ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003efc:	0711      	lsls	r1, r2, #28
 8003efe:	bf44      	itt	mi
 8003f00:	232b      	movmi	r3, #43	; 0x2b
 8003f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f06:	f89a 3000 	ldrb.w	r3, [sl]
 8003f0a:	2b2a      	cmp	r3, #42	; 0x2a
 8003f0c:	d015      	beq.n	8003f3a <_svfiprintf_r+0xf6>
 8003f0e:	9a07      	ldr	r2, [sp, #28]
 8003f10:	4654      	mov	r4, sl
 8003f12:	2000      	movs	r0, #0
 8003f14:	f04f 0c0a 	mov.w	ip, #10
 8003f18:	4621      	mov	r1, r4
 8003f1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f1e:	3b30      	subs	r3, #48	; 0x30
 8003f20:	2b09      	cmp	r3, #9
 8003f22:	d94d      	bls.n	8003fc0 <_svfiprintf_r+0x17c>
 8003f24:	b1b0      	cbz	r0, 8003f54 <_svfiprintf_r+0x110>
 8003f26:	9207      	str	r2, [sp, #28]
 8003f28:	e014      	b.n	8003f54 <_svfiprintf_r+0x110>
 8003f2a:	eba0 0308 	sub.w	r3, r0, r8
 8003f2e:	fa09 f303 	lsl.w	r3, r9, r3
 8003f32:	4313      	orrs	r3, r2
 8003f34:	9304      	str	r3, [sp, #16]
 8003f36:	46a2      	mov	sl, r4
 8003f38:	e7d2      	b.n	8003ee0 <_svfiprintf_r+0x9c>
 8003f3a:	9b03      	ldr	r3, [sp, #12]
 8003f3c:	1d19      	adds	r1, r3, #4
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	9103      	str	r1, [sp, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	bfbb      	ittet	lt
 8003f46:	425b      	neglt	r3, r3
 8003f48:	f042 0202 	orrlt.w	r2, r2, #2
 8003f4c:	9307      	strge	r3, [sp, #28]
 8003f4e:	9307      	strlt	r3, [sp, #28]
 8003f50:	bfb8      	it	lt
 8003f52:	9204      	strlt	r2, [sp, #16]
 8003f54:	7823      	ldrb	r3, [r4, #0]
 8003f56:	2b2e      	cmp	r3, #46	; 0x2e
 8003f58:	d10c      	bne.n	8003f74 <_svfiprintf_r+0x130>
 8003f5a:	7863      	ldrb	r3, [r4, #1]
 8003f5c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f5e:	d134      	bne.n	8003fca <_svfiprintf_r+0x186>
 8003f60:	9b03      	ldr	r3, [sp, #12]
 8003f62:	1d1a      	adds	r2, r3, #4
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	9203      	str	r2, [sp, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	bfb8      	it	lt
 8003f6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f70:	3402      	adds	r4, #2
 8003f72:	9305      	str	r3, [sp, #20]
 8003f74:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800403c <_svfiprintf_r+0x1f8>
 8003f78:	7821      	ldrb	r1, [r4, #0]
 8003f7a:	2203      	movs	r2, #3
 8003f7c:	4650      	mov	r0, sl
 8003f7e:	f7fc f92f 	bl	80001e0 <memchr>
 8003f82:	b138      	cbz	r0, 8003f94 <_svfiprintf_r+0x150>
 8003f84:	9b04      	ldr	r3, [sp, #16]
 8003f86:	eba0 000a 	sub.w	r0, r0, sl
 8003f8a:	2240      	movs	r2, #64	; 0x40
 8003f8c:	4082      	lsls	r2, r0
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	3401      	adds	r4, #1
 8003f92:	9304      	str	r3, [sp, #16]
 8003f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f98:	4825      	ldr	r0, [pc, #148]	; (8004030 <_svfiprintf_r+0x1ec>)
 8003f9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f9e:	2206      	movs	r2, #6
 8003fa0:	f7fc f91e 	bl	80001e0 <memchr>
 8003fa4:	2800      	cmp	r0, #0
 8003fa6:	d038      	beq.n	800401a <_svfiprintf_r+0x1d6>
 8003fa8:	4b22      	ldr	r3, [pc, #136]	; (8004034 <_svfiprintf_r+0x1f0>)
 8003faa:	bb1b      	cbnz	r3, 8003ff4 <_svfiprintf_r+0x1b0>
 8003fac:	9b03      	ldr	r3, [sp, #12]
 8003fae:	3307      	adds	r3, #7
 8003fb0:	f023 0307 	bic.w	r3, r3, #7
 8003fb4:	3308      	adds	r3, #8
 8003fb6:	9303      	str	r3, [sp, #12]
 8003fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fba:	4433      	add	r3, r6
 8003fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8003fbe:	e768      	b.n	8003e92 <_svfiprintf_r+0x4e>
 8003fc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fc4:	460c      	mov	r4, r1
 8003fc6:	2001      	movs	r0, #1
 8003fc8:	e7a6      	b.n	8003f18 <_svfiprintf_r+0xd4>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	3401      	adds	r4, #1
 8003fce:	9305      	str	r3, [sp, #20]
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f04f 0c0a 	mov.w	ip, #10
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fdc:	3a30      	subs	r2, #48	; 0x30
 8003fde:	2a09      	cmp	r2, #9
 8003fe0:	d903      	bls.n	8003fea <_svfiprintf_r+0x1a6>
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0c6      	beq.n	8003f74 <_svfiprintf_r+0x130>
 8003fe6:	9105      	str	r1, [sp, #20]
 8003fe8:	e7c4      	b.n	8003f74 <_svfiprintf_r+0x130>
 8003fea:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fee:	4604      	mov	r4, r0
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e7f0      	b.n	8003fd6 <_svfiprintf_r+0x192>
 8003ff4:	ab03      	add	r3, sp, #12
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	462a      	mov	r2, r5
 8003ffa:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <_svfiprintf_r+0x1f4>)
 8003ffc:	a904      	add	r1, sp, #16
 8003ffe:	4638      	mov	r0, r7
 8004000:	f3af 8000 	nop.w
 8004004:	1c42      	adds	r2, r0, #1
 8004006:	4606      	mov	r6, r0
 8004008:	d1d6      	bne.n	8003fb8 <_svfiprintf_r+0x174>
 800400a:	89ab      	ldrh	r3, [r5, #12]
 800400c:	065b      	lsls	r3, r3, #25
 800400e:	f53f af2d 	bmi.w	8003e6c <_svfiprintf_r+0x28>
 8004012:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004014:	b01d      	add	sp, #116	; 0x74
 8004016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800401a:	ab03      	add	r3, sp, #12
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	462a      	mov	r2, r5
 8004020:	4b05      	ldr	r3, [pc, #20]	; (8004038 <_svfiprintf_r+0x1f4>)
 8004022:	a904      	add	r1, sp, #16
 8004024:	4638      	mov	r0, r7
 8004026:	f000 f9bd 	bl	80043a4 <_printf_i>
 800402a:	e7eb      	b.n	8004004 <_svfiprintf_r+0x1c0>
 800402c:	08004a24 	.word	0x08004a24
 8004030:	08004a2e 	.word	0x08004a2e
 8004034:	00000000 	.word	0x00000000
 8004038:	08003d91 	.word	0x08003d91
 800403c:	08004a2a 	.word	0x08004a2a

08004040 <__sfputc_r>:
 8004040:	6893      	ldr	r3, [r2, #8]
 8004042:	3b01      	subs	r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	b410      	push	{r4}
 8004048:	6093      	str	r3, [r2, #8]
 800404a:	da08      	bge.n	800405e <__sfputc_r+0x1e>
 800404c:	6994      	ldr	r4, [r2, #24]
 800404e:	42a3      	cmp	r3, r4
 8004050:	db01      	blt.n	8004056 <__sfputc_r+0x16>
 8004052:	290a      	cmp	r1, #10
 8004054:	d103      	bne.n	800405e <__sfputc_r+0x1e>
 8004056:	f85d 4b04 	ldr.w	r4, [sp], #4
 800405a:	f7ff bc88 	b.w	800396e <__swbuf_r>
 800405e:	6813      	ldr	r3, [r2, #0]
 8004060:	1c58      	adds	r0, r3, #1
 8004062:	6010      	str	r0, [r2, #0]
 8004064:	7019      	strb	r1, [r3, #0]
 8004066:	4608      	mov	r0, r1
 8004068:	f85d 4b04 	ldr.w	r4, [sp], #4
 800406c:	4770      	bx	lr

0800406e <__sfputs_r>:
 800406e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004070:	4606      	mov	r6, r0
 8004072:	460f      	mov	r7, r1
 8004074:	4614      	mov	r4, r2
 8004076:	18d5      	adds	r5, r2, r3
 8004078:	42ac      	cmp	r4, r5
 800407a:	d101      	bne.n	8004080 <__sfputs_r+0x12>
 800407c:	2000      	movs	r0, #0
 800407e:	e007      	b.n	8004090 <__sfputs_r+0x22>
 8004080:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004084:	463a      	mov	r2, r7
 8004086:	4630      	mov	r0, r6
 8004088:	f7ff ffda 	bl	8004040 <__sfputc_r>
 800408c:	1c43      	adds	r3, r0, #1
 800408e:	d1f3      	bne.n	8004078 <__sfputs_r+0xa>
 8004090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004094 <_vfiprintf_r>:
 8004094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004098:	460d      	mov	r5, r1
 800409a:	b09d      	sub	sp, #116	; 0x74
 800409c:	4614      	mov	r4, r2
 800409e:	4698      	mov	r8, r3
 80040a0:	4606      	mov	r6, r0
 80040a2:	b118      	cbz	r0, 80040ac <_vfiprintf_r+0x18>
 80040a4:	6a03      	ldr	r3, [r0, #32]
 80040a6:	b90b      	cbnz	r3, 80040ac <_vfiprintf_r+0x18>
 80040a8:	f7ff faac 	bl	8003604 <__sinit>
 80040ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040ae:	07d9      	lsls	r1, r3, #31
 80040b0:	d405      	bmi.n	80040be <_vfiprintf_r+0x2a>
 80040b2:	89ab      	ldrh	r3, [r5, #12]
 80040b4:	059a      	lsls	r2, r3, #22
 80040b6:	d402      	bmi.n	80040be <_vfiprintf_r+0x2a>
 80040b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040ba:	f7ff fd66 	bl	8003b8a <__retarget_lock_acquire_recursive>
 80040be:	89ab      	ldrh	r3, [r5, #12]
 80040c0:	071b      	lsls	r3, r3, #28
 80040c2:	d501      	bpl.n	80040c8 <_vfiprintf_r+0x34>
 80040c4:	692b      	ldr	r3, [r5, #16]
 80040c6:	b99b      	cbnz	r3, 80040f0 <_vfiprintf_r+0x5c>
 80040c8:	4629      	mov	r1, r5
 80040ca:	4630      	mov	r0, r6
 80040cc:	f7ff fc8c 	bl	80039e8 <__swsetup_r>
 80040d0:	b170      	cbz	r0, 80040f0 <_vfiprintf_r+0x5c>
 80040d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040d4:	07dc      	lsls	r4, r3, #31
 80040d6:	d504      	bpl.n	80040e2 <_vfiprintf_r+0x4e>
 80040d8:	f04f 30ff 	mov.w	r0, #4294967295
 80040dc:	b01d      	add	sp, #116	; 0x74
 80040de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040e2:	89ab      	ldrh	r3, [r5, #12]
 80040e4:	0598      	lsls	r0, r3, #22
 80040e6:	d4f7      	bmi.n	80040d8 <_vfiprintf_r+0x44>
 80040e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040ea:	f7ff fd4f 	bl	8003b8c <__retarget_lock_release_recursive>
 80040ee:	e7f3      	b.n	80040d8 <_vfiprintf_r+0x44>
 80040f0:	2300      	movs	r3, #0
 80040f2:	9309      	str	r3, [sp, #36]	; 0x24
 80040f4:	2320      	movs	r3, #32
 80040f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80040fe:	2330      	movs	r3, #48	; 0x30
 8004100:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80042b4 <_vfiprintf_r+0x220>
 8004104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004108:	f04f 0901 	mov.w	r9, #1
 800410c:	4623      	mov	r3, r4
 800410e:	469a      	mov	sl, r3
 8004110:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004114:	b10a      	cbz	r2, 800411a <_vfiprintf_r+0x86>
 8004116:	2a25      	cmp	r2, #37	; 0x25
 8004118:	d1f9      	bne.n	800410e <_vfiprintf_r+0x7a>
 800411a:	ebba 0b04 	subs.w	fp, sl, r4
 800411e:	d00b      	beq.n	8004138 <_vfiprintf_r+0xa4>
 8004120:	465b      	mov	r3, fp
 8004122:	4622      	mov	r2, r4
 8004124:	4629      	mov	r1, r5
 8004126:	4630      	mov	r0, r6
 8004128:	f7ff ffa1 	bl	800406e <__sfputs_r>
 800412c:	3001      	adds	r0, #1
 800412e:	f000 80a9 	beq.w	8004284 <_vfiprintf_r+0x1f0>
 8004132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004134:	445a      	add	r2, fp
 8004136:	9209      	str	r2, [sp, #36]	; 0x24
 8004138:	f89a 3000 	ldrb.w	r3, [sl]
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 80a1 	beq.w	8004284 <_vfiprintf_r+0x1f0>
 8004142:	2300      	movs	r3, #0
 8004144:	f04f 32ff 	mov.w	r2, #4294967295
 8004148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800414c:	f10a 0a01 	add.w	sl, sl, #1
 8004150:	9304      	str	r3, [sp, #16]
 8004152:	9307      	str	r3, [sp, #28]
 8004154:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004158:	931a      	str	r3, [sp, #104]	; 0x68
 800415a:	4654      	mov	r4, sl
 800415c:	2205      	movs	r2, #5
 800415e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004162:	4854      	ldr	r0, [pc, #336]	; (80042b4 <_vfiprintf_r+0x220>)
 8004164:	f7fc f83c 	bl	80001e0 <memchr>
 8004168:	9a04      	ldr	r2, [sp, #16]
 800416a:	b9d8      	cbnz	r0, 80041a4 <_vfiprintf_r+0x110>
 800416c:	06d1      	lsls	r1, r2, #27
 800416e:	bf44      	itt	mi
 8004170:	2320      	movmi	r3, #32
 8004172:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004176:	0713      	lsls	r3, r2, #28
 8004178:	bf44      	itt	mi
 800417a:	232b      	movmi	r3, #43	; 0x2b
 800417c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004180:	f89a 3000 	ldrb.w	r3, [sl]
 8004184:	2b2a      	cmp	r3, #42	; 0x2a
 8004186:	d015      	beq.n	80041b4 <_vfiprintf_r+0x120>
 8004188:	9a07      	ldr	r2, [sp, #28]
 800418a:	4654      	mov	r4, sl
 800418c:	2000      	movs	r0, #0
 800418e:	f04f 0c0a 	mov.w	ip, #10
 8004192:	4621      	mov	r1, r4
 8004194:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004198:	3b30      	subs	r3, #48	; 0x30
 800419a:	2b09      	cmp	r3, #9
 800419c:	d94d      	bls.n	800423a <_vfiprintf_r+0x1a6>
 800419e:	b1b0      	cbz	r0, 80041ce <_vfiprintf_r+0x13a>
 80041a0:	9207      	str	r2, [sp, #28]
 80041a2:	e014      	b.n	80041ce <_vfiprintf_r+0x13a>
 80041a4:	eba0 0308 	sub.w	r3, r0, r8
 80041a8:	fa09 f303 	lsl.w	r3, r9, r3
 80041ac:	4313      	orrs	r3, r2
 80041ae:	9304      	str	r3, [sp, #16]
 80041b0:	46a2      	mov	sl, r4
 80041b2:	e7d2      	b.n	800415a <_vfiprintf_r+0xc6>
 80041b4:	9b03      	ldr	r3, [sp, #12]
 80041b6:	1d19      	adds	r1, r3, #4
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	9103      	str	r1, [sp, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	bfbb      	ittet	lt
 80041c0:	425b      	neglt	r3, r3
 80041c2:	f042 0202 	orrlt.w	r2, r2, #2
 80041c6:	9307      	strge	r3, [sp, #28]
 80041c8:	9307      	strlt	r3, [sp, #28]
 80041ca:	bfb8      	it	lt
 80041cc:	9204      	strlt	r2, [sp, #16]
 80041ce:	7823      	ldrb	r3, [r4, #0]
 80041d0:	2b2e      	cmp	r3, #46	; 0x2e
 80041d2:	d10c      	bne.n	80041ee <_vfiprintf_r+0x15a>
 80041d4:	7863      	ldrb	r3, [r4, #1]
 80041d6:	2b2a      	cmp	r3, #42	; 0x2a
 80041d8:	d134      	bne.n	8004244 <_vfiprintf_r+0x1b0>
 80041da:	9b03      	ldr	r3, [sp, #12]
 80041dc:	1d1a      	adds	r2, r3, #4
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	9203      	str	r2, [sp, #12]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	bfb8      	it	lt
 80041e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80041ea:	3402      	adds	r4, #2
 80041ec:	9305      	str	r3, [sp, #20]
 80041ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80042c4 <_vfiprintf_r+0x230>
 80041f2:	7821      	ldrb	r1, [r4, #0]
 80041f4:	2203      	movs	r2, #3
 80041f6:	4650      	mov	r0, sl
 80041f8:	f7fb fff2 	bl	80001e0 <memchr>
 80041fc:	b138      	cbz	r0, 800420e <_vfiprintf_r+0x17a>
 80041fe:	9b04      	ldr	r3, [sp, #16]
 8004200:	eba0 000a 	sub.w	r0, r0, sl
 8004204:	2240      	movs	r2, #64	; 0x40
 8004206:	4082      	lsls	r2, r0
 8004208:	4313      	orrs	r3, r2
 800420a:	3401      	adds	r4, #1
 800420c:	9304      	str	r3, [sp, #16]
 800420e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004212:	4829      	ldr	r0, [pc, #164]	; (80042b8 <_vfiprintf_r+0x224>)
 8004214:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004218:	2206      	movs	r2, #6
 800421a:	f7fb ffe1 	bl	80001e0 <memchr>
 800421e:	2800      	cmp	r0, #0
 8004220:	d03f      	beq.n	80042a2 <_vfiprintf_r+0x20e>
 8004222:	4b26      	ldr	r3, [pc, #152]	; (80042bc <_vfiprintf_r+0x228>)
 8004224:	bb1b      	cbnz	r3, 800426e <_vfiprintf_r+0x1da>
 8004226:	9b03      	ldr	r3, [sp, #12]
 8004228:	3307      	adds	r3, #7
 800422a:	f023 0307 	bic.w	r3, r3, #7
 800422e:	3308      	adds	r3, #8
 8004230:	9303      	str	r3, [sp, #12]
 8004232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004234:	443b      	add	r3, r7
 8004236:	9309      	str	r3, [sp, #36]	; 0x24
 8004238:	e768      	b.n	800410c <_vfiprintf_r+0x78>
 800423a:	fb0c 3202 	mla	r2, ip, r2, r3
 800423e:	460c      	mov	r4, r1
 8004240:	2001      	movs	r0, #1
 8004242:	e7a6      	b.n	8004192 <_vfiprintf_r+0xfe>
 8004244:	2300      	movs	r3, #0
 8004246:	3401      	adds	r4, #1
 8004248:	9305      	str	r3, [sp, #20]
 800424a:	4619      	mov	r1, r3
 800424c:	f04f 0c0a 	mov.w	ip, #10
 8004250:	4620      	mov	r0, r4
 8004252:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004256:	3a30      	subs	r2, #48	; 0x30
 8004258:	2a09      	cmp	r2, #9
 800425a:	d903      	bls.n	8004264 <_vfiprintf_r+0x1d0>
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0c6      	beq.n	80041ee <_vfiprintf_r+0x15a>
 8004260:	9105      	str	r1, [sp, #20]
 8004262:	e7c4      	b.n	80041ee <_vfiprintf_r+0x15a>
 8004264:	fb0c 2101 	mla	r1, ip, r1, r2
 8004268:	4604      	mov	r4, r0
 800426a:	2301      	movs	r3, #1
 800426c:	e7f0      	b.n	8004250 <_vfiprintf_r+0x1bc>
 800426e:	ab03      	add	r3, sp, #12
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	462a      	mov	r2, r5
 8004274:	4b12      	ldr	r3, [pc, #72]	; (80042c0 <_vfiprintf_r+0x22c>)
 8004276:	a904      	add	r1, sp, #16
 8004278:	4630      	mov	r0, r6
 800427a:	f3af 8000 	nop.w
 800427e:	4607      	mov	r7, r0
 8004280:	1c78      	adds	r0, r7, #1
 8004282:	d1d6      	bne.n	8004232 <_vfiprintf_r+0x19e>
 8004284:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004286:	07d9      	lsls	r1, r3, #31
 8004288:	d405      	bmi.n	8004296 <_vfiprintf_r+0x202>
 800428a:	89ab      	ldrh	r3, [r5, #12]
 800428c:	059a      	lsls	r2, r3, #22
 800428e:	d402      	bmi.n	8004296 <_vfiprintf_r+0x202>
 8004290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004292:	f7ff fc7b 	bl	8003b8c <__retarget_lock_release_recursive>
 8004296:	89ab      	ldrh	r3, [r5, #12]
 8004298:	065b      	lsls	r3, r3, #25
 800429a:	f53f af1d 	bmi.w	80040d8 <_vfiprintf_r+0x44>
 800429e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042a0:	e71c      	b.n	80040dc <_vfiprintf_r+0x48>
 80042a2:	ab03      	add	r3, sp, #12
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	462a      	mov	r2, r5
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <_vfiprintf_r+0x22c>)
 80042aa:	a904      	add	r1, sp, #16
 80042ac:	4630      	mov	r0, r6
 80042ae:	f000 f879 	bl	80043a4 <_printf_i>
 80042b2:	e7e4      	b.n	800427e <_vfiprintf_r+0x1ea>
 80042b4:	08004a24 	.word	0x08004a24
 80042b8:	08004a2e 	.word	0x08004a2e
 80042bc:	00000000 	.word	0x00000000
 80042c0:	0800406f 	.word	0x0800406f
 80042c4:	08004a2a 	.word	0x08004a2a

080042c8 <_printf_common>:
 80042c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042cc:	4616      	mov	r6, r2
 80042ce:	4699      	mov	r9, r3
 80042d0:	688a      	ldr	r2, [r1, #8]
 80042d2:	690b      	ldr	r3, [r1, #16]
 80042d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042d8:	4293      	cmp	r3, r2
 80042da:	bfb8      	it	lt
 80042dc:	4613      	movlt	r3, r2
 80042de:	6033      	str	r3, [r6, #0]
 80042e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042e4:	4607      	mov	r7, r0
 80042e6:	460c      	mov	r4, r1
 80042e8:	b10a      	cbz	r2, 80042ee <_printf_common+0x26>
 80042ea:	3301      	adds	r3, #1
 80042ec:	6033      	str	r3, [r6, #0]
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	0699      	lsls	r1, r3, #26
 80042f2:	bf42      	ittt	mi
 80042f4:	6833      	ldrmi	r3, [r6, #0]
 80042f6:	3302      	addmi	r3, #2
 80042f8:	6033      	strmi	r3, [r6, #0]
 80042fa:	6825      	ldr	r5, [r4, #0]
 80042fc:	f015 0506 	ands.w	r5, r5, #6
 8004300:	d106      	bne.n	8004310 <_printf_common+0x48>
 8004302:	f104 0a19 	add.w	sl, r4, #25
 8004306:	68e3      	ldr	r3, [r4, #12]
 8004308:	6832      	ldr	r2, [r6, #0]
 800430a:	1a9b      	subs	r3, r3, r2
 800430c:	42ab      	cmp	r3, r5
 800430e:	dc26      	bgt.n	800435e <_printf_common+0x96>
 8004310:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004314:	1e13      	subs	r3, r2, #0
 8004316:	6822      	ldr	r2, [r4, #0]
 8004318:	bf18      	it	ne
 800431a:	2301      	movne	r3, #1
 800431c:	0692      	lsls	r2, r2, #26
 800431e:	d42b      	bmi.n	8004378 <_printf_common+0xb0>
 8004320:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004324:	4649      	mov	r1, r9
 8004326:	4638      	mov	r0, r7
 8004328:	47c0      	blx	r8
 800432a:	3001      	adds	r0, #1
 800432c:	d01e      	beq.n	800436c <_printf_common+0xa4>
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	6922      	ldr	r2, [r4, #16]
 8004332:	f003 0306 	and.w	r3, r3, #6
 8004336:	2b04      	cmp	r3, #4
 8004338:	bf02      	ittt	eq
 800433a:	68e5      	ldreq	r5, [r4, #12]
 800433c:	6833      	ldreq	r3, [r6, #0]
 800433e:	1aed      	subeq	r5, r5, r3
 8004340:	68a3      	ldr	r3, [r4, #8]
 8004342:	bf0c      	ite	eq
 8004344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004348:	2500      	movne	r5, #0
 800434a:	4293      	cmp	r3, r2
 800434c:	bfc4      	itt	gt
 800434e:	1a9b      	subgt	r3, r3, r2
 8004350:	18ed      	addgt	r5, r5, r3
 8004352:	2600      	movs	r6, #0
 8004354:	341a      	adds	r4, #26
 8004356:	42b5      	cmp	r5, r6
 8004358:	d11a      	bne.n	8004390 <_printf_common+0xc8>
 800435a:	2000      	movs	r0, #0
 800435c:	e008      	b.n	8004370 <_printf_common+0xa8>
 800435e:	2301      	movs	r3, #1
 8004360:	4652      	mov	r2, sl
 8004362:	4649      	mov	r1, r9
 8004364:	4638      	mov	r0, r7
 8004366:	47c0      	blx	r8
 8004368:	3001      	adds	r0, #1
 800436a:	d103      	bne.n	8004374 <_printf_common+0xac>
 800436c:	f04f 30ff 	mov.w	r0, #4294967295
 8004370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004374:	3501      	adds	r5, #1
 8004376:	e7c6      	b.n	8004306 <_printf_common+0x3e>
 8004378:	18e1      	adds	r1, r4, r3
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	2030      	movs	r0, #48	; 0x30
 800437e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004382:	4422      	add	r2, r4
 8004384:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004388:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800438c:	3302      	adds	r3, #2
 800438e:	e7c7      	b.n	8004320 <_printf_common+0x58>
 8004390:	2301      	movs	r3, #1
 8004392:	4622      	mov	r2, r4
 8004394:	4649      	mov	r1, r9
 8004396:	4638      	mov	r0, r7
 8004398:	47c0      	blx	r8
 800439a:	3001      	adds	r0, #1
 800439c:	d0e6      	beq.n	800436c <_printf_common+0xa4>
 800439e:	3601      	adds	r6, #1
 80043a0:	e7d9      	b.n	8004356 <_printf_common+0x8e>
	...

080043a4 <_printf_i>:
 80043a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043a8:	7e0f      	ldrb	r7, [r1, #24]
 80043aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043ac:	2f78      	cmp	r7, #120	; 0x78
 80043ae:	4691      	mov	r9, r2
 80043b0:	4680      	mov	r8, r0
 80043b2:	460c      	mov	r4, r1
 80043b4:	469a      	mov	sl, r3
 80043b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043ba:	d807      	bhi.n	80043cc <_printf_i+0x28>
 80043bc:	2f62      	cmp	r7, #98	; 0x62
 80043be:	d80a      	bhi.n	80043d6 <_printf_i+0x32>
 80043c0:	2f00      	cmp	r7, #0
 80043c2:	f000 80d4 	beq.w	800456e <_printf_i+0x1ca>
 80043c6:	2f58      	cmp	r7, #88	; 0x58
 80043c8:	f000 80c0 	beq.w	800454c <_printf_i+0x1a8>
 80043cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043d4:	e03a      	b.n	800444c <_printf_i+0xa8>
 80043d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043da:	2b15      	cmp	r3, #21
 80043dc:	d8f6      	bhi.n	80043cc <_printf_i+0x28>
 80043de:	a101      	add	r1, pc, #4	; (adr r1, 80043e4 <_printf_i+0x40>)
 80043e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043e4:	0800443d 	.word	0x0800443d
 80043e8:	08004451 	.word	0x08004451
 80043ec:	080043cd 	.word	0x080043cd
 80043f0:	080043cd 	.word	0x080043cd
 80043f4:	080043cd 	.word	0x080043cd
 80043f8:	080043cd 	.word	0x080043cd
 80043fc:	08004451 	.word	0x08004451
 8004400:	080043cd 	.word	0x080043cd
 8004404:	080043cd 	.word	0x080043cd
 8004408:	080043cd 	.word	0x080043cd
 800440c:	080043cd 	.word	0x080043cd
 8004410:	08004555 	.word	0x08004555
 8004414:	0800447d 	.word	0x0800447d
 8004418:	0800450f 	.word	0x0800450f
 800441c:	080043cd 	.word	0x080043cd
 8004420:	080043cd 	.word	0x080043cd
 8004424:	08004577 	.word	0x08004577
 8004428:	080043cd 	.word	0x080043cd
 800442c:	0800447d 	.word	0x0800447d
 8004430:	080043cd 	.word	0x080043cd
 8004434:	080043cd 	.word	0x080043cd
 8004438:	08004517 	.word	0x08004517
 800443c:	682b      	ldr	r3, [r5, #0]
 800443e:	1d1a      	adds	r2, r3, #4
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	602a      	str	r2, [r5, #0]
 8004444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800444c:	2301      	movs	r3, #1
 800444e:	e09f      	b.n	8004590 <_printf_i+0x1ec>
 8004450:	6820      	ldr	r0, [r4, #0]
 8004452:	682b      	ldr	r3, [r5, #0]
 8004454:	0607      	lsls	r7, r0, #24
 8004456:	f103 0104 	add.w	r1, r3, #4
 800445a:	6029      	str	r1, [r5, #0]
 800445c:	d501      	bpl.n	8004462 <_printf_i+0xbe>
 800445e:	681e      	ldr	r6, [r3, #0]
 8004460:	e003      	b.n	800446a <_printf_i+0xc6>
 8004462:	0646      	lsls	r6, r0, #25
 8004464:	d5fb      	bpl.n	800445e <_printf_i+0xba>
 8004466:	f9b3 6000 	ldrsh.w	r6, [r3]
 800446a:	2e00      	cmp	r6, #0
 800446c:	da03      	bge.n	8004476 <_printf_i+0xd2>
 800446e:	232d      	movs	r3, #45	; 0x2d
 8004470:	4276      	negs	r6, r6
 8004472:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004476:	485a      	ldr	r0, [pc, #360]	; (80045e0 <_printf_i+0x23c>)
 8004478:	230a      	movs	r3, #10
 800447a:	e012      	b.n	80044a2 <_printf_i+0xfe>
 800447c:	682b      	ldr	r3, [r5, #0]
 800447e:	6820      	ldr	r0, [r4, #0]
 8004480:	1d19      	adds	r1, r3, #4
 8004482:	6029      	str	r1, [r5, #0]
 8004484:	0605      	lsls	r5, r0, #24
 8004486:	d501      	bpl.n	800448c <_printf_i+0xe8>
 8004488:	681e      	ldr	r6, [r3, #0]
 800448a:	e002      	b.n	8004492 <_printf_i+0xee>
 800448c:	0641      	lsls	r1, r0, #25
 800448e:	d5fb      	bpl.n	8004488 <_printf_i+0xe4>
 8004490:	881e      	ldrh	r6, [r3, #0]
 8004492:	4853      	ldr	r0, [pc, #332]	; (80045e0 <_printf_i+0x23c>)
 8004494:	2f6f      	cmp	r7, #111	; 0x6f
 8004496:	bf0c      	ite	eq
 8004498:	2308      	moveq	r3, #8
 800449a:	230a      	movne	r3, #10
 800449c:	2100      	movs	r1, #0
 800449e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044a2:	6865      	ldr	r5, [r4, #4]
 80044a4:	60a5      	str	r5, [r4, #8]
 80044a6:	2d00      	cmp	r5, #0
 80044a8:	bfa2      	ittt	ge
 80044aa:	6821      	ldrge	r1, [r4, #0]
 80044ac:	f021 0104 	bicge.w	r1, r1, #4
 80044b0:	6021      	strge	r1, [r4, #0]
 80044b2:	b90e      	cbnz	r6, 80044b8 <_printf_i+0x114>
 80044b4:	2d00      	cmp	r5, #0
 80044b6:	d04b      	beq.n	8004550 <_printf_i+0x1ac>
 80044b8:	4615      	mov	r5, r2
 80044ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80044be:	fb03 6711 	mls	r7, r3, r1, r6
 80044c2:	5dc7      	ldrb	r7, [r0, r7]
 80044c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044c8:	4637      	mov	r7, r6
 80044ca:	42bb      	cmp	r3, r7
 80044cc:	460e      	mov	r6, r1
 80044ce:	d9f4      	bls.n	80044ba <_printf_i+0x116>
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d10b      	bne.n	80044ec <_printf_i+0x148>
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	07de      	lsls	r6, r3, #31
 80044d8:	d508      	bpl.n	80044ec <_printf_i+0x148>
 80044da:	6923      	ldr	r3, [r4, #16]
 80044dc:	6861      	ldr	r1, [r4, #4]
 80044de:	4299      	cmp	r1, r3
 80044e0:	bfde      	ittt	le
 80044e2:	2330      	movle	r3, #48	; 0x30
 80044e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80044ec:	1b52      	subs	r2, r2, r5
 80044ee:	6122      	str	r2, [r4, #16]
 80044f0:	f8cd a000 	str.w	sl, [sp]
 80044f4:	464b      	mov	r3, r9
 80044f6:	aa03      	add	r2, sp, #12
 80044f8:	4621      	mov	r1, r4
 80044fa:	4640      	mov	r0, r8
 80044fc:	f7ff fee4 	bl	80042c8 <_printf_common>
 8004500:	3001      	adds	r0, #1
 8004502:	d14a      	bne.n	800459a <_printf_i+0x1f6>
 8004504:	f04f 30ff 	mov.w	r0, #4294967295
 8004508:	b004      	add	sp, #16
 800450a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	f043 0320 	orr.w	r3, r3, #32
 8004514:	6023      	str	r3, [r4, #0]
 8004516:	4833      	ldr	r0, [pc, #204]	; (80045e4 <_printf_i+0x240>)
 8004518:	2778      	movs	r7, #120	; 0x78
 800451a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	6829      	ldr	r1, [r5, #0]
 8004522:	061f      	lsls	r7, r3, #24
 8004524:	f851 6b04 	ldr.w	r6, [r1], #4
 8004528:	d402      	bmi.n	8004530 <_printf_i+0x18c>
 800452a:	065f      	lsls	r7, r3, #25
 800452c:	bf48      	it	mi
 800452e:	b2b6      	uxthmi	r6, r6
 8004530:	07df      	lsls	r7, r3, #31
 8004532:	bf48      	it	mi
 8004534:	f043 0320 	orrmi.w	r3, r3, #32
 8004538:	6029      	str	r1, [r5, #0]
 800453a:	bf48      	it	mi
 800453c:	6023      	strmi	r3, [r4, #0]
 800453e:	b91e      	cbnz	r6, 8004548 <_printf_i+0x1a4>
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	f023 0320 	bic.w	r3, r3, #32
 8004546:	6023      	str	r3, [r4, #0]
 8004548:	2310      	movs	r3, #16
 800454a:	e7a7      	b.n	800449c <_printf_i+0xf8>
 800454c:	4824      	ldr	r0, [pc, #144]	; (80045e0 <_printf_i+0x23c>)
 800454e:	e7e4      	b.n	800451a <_printf_i+0x176>
 8004550:	4615      	mov	r5, r2
 8004552:	e7bd      	b.n	80044d0 <_printf_i+0x12c>
 8004554:	682b      	ldr	r3, [r5, #0]
 8004556:	6826      	ldr	r6, [r4, #0]
 8004558:	6961      	ldr	r1, [r4, #20]
 800455a:	1d18      	adds	r0, r3, #4
 800455c:	6028      	str	r0, [r5, #0]
 800455e:	0635      	lsls	r5, r6, #24
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	d501      	bpl.n	8004568 <_printf_i+0x1c4>
 8004564:	6019      	str	r1, [r3, #0]
 8004566:	e002      	b.n	800456e <_printf_i+0x1ca>
 8004568:	0670      	lsls	r0, r6, #25
 800456a:	d5fb      	bpl.n	8004564 <_printf_i+0x1c0>
 800456c:	8019      	strh	r1, [r3, #0]
 800456e:	2300      	movs	r3, #0
 8004570:	6123      	str	r3, [r4, #16]
 8004572:	4615      	mov	r5, r2
 8004574:	e7bc      	b.n	80044f0 <_printf_i+0x14c>
 8004576:	682b      	ldr	r3, [r5, #0]
 8004578:	1d1a      	adds	r2, r3, #4
 800457a:	602a      	str	r2, [r5, #0]
 800457c:	681d      	ldr	r5, [r3, #0]
 800457e:	6862      	ldr	r2, [r4, #4]
 8004580:	2100      	movs	r1, #0
 8004582:	4628      	mov	r0, r5
 8004584:	f7fb fe2c 	bl	80001e0 <memchr>
 8004588:	b108      	cbz	r0, 800458e <_printf_i+0x1ea>
 800458a:	1b40      	subs	r0, r0, r5
 800458c:	6060      	str	r0, [r4, #4]
 800458e:	6863      	ldr	r3, [r4, #4]
 8004590:	6123      	str	r3, [r4, #16]
 8004592:	2300      	movs	r3, #0
 8004594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004598:	e7aa      	b.n	80044f0 <_printf_i+0x14c>
 800459a:	6923      	ldr	r3, [r4, #16]
 800459c:	462a      	mov	r2, r5
 800459e:	4649      	mov	r1, r9
 80045a0:	4640      	mov	r0, r8
 80045a2:	47d0      	blx	sl
 80045a4:	3001      	adds	r0, #1
 80045a6:	d0ad      	beq.n	8004504 <_printf_i+0x160>
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	079b      	lsls	r3, r3, #30
 80045ac:	d413      	bmi.n	80045d6 <_printf_i+0x232>
 80045ae:	68e0      	ldr	r0, [r4, #12]
 80045b0:	9b03      	ldr	r3, [sp, #12]
 80045b2:	4298      	cmp	r0, r3
 80045b4:	bfb8      	it	lt
 80045b6:	4618      	movlt	r0, r3
 80045b8:	e7a6      	b.n	8004508 <_printf_i+0x164>
 80045ba:	2301      	movs	r3, #1
 80045bc:	4632      	mov	r2, r6
 80045be:	4649      	mov	r1, r9
 80045c0:	4640      	mov	r0, r8
 80045c2:	47d0      	blx	sl
 80045c4:	3001      	adds	r0, #1
 80045c6:	d09d      	beq.n	8004504 <_printf_i+0x160>
 80045c8:	3501      	adds	r5, #1
 80045ca:	68e3      	ldr	r3, [r4, #12]
 80045cc:	9903      	ldr	r1, [sp, #12]
 80045ce:	1a5b      	subs	r3, r3, r1
 80045d0:	42ab      	cmp	r3, r5
 80045d2:	dcf2      	bgt.n	80045ba <_printf_i+0x216>
 80045d4:	e7eb      	b.n	80045ae <_printf_i+0x20a>
 80045d6:	2500      	movs	r5, #0
 80045d8:	f104 0619 	add.w	r6, r4, #25
 80045dc:	e7f5      	b.n	80045ca <_printf_i+0x226>
 80045de:	bf00      	nop
 80045e0:	08004a35 	.word	0x08004a35
 80045e4:	08004a46 	.word	0x08004a46

080045e8 <__sflush_r>:
 80045e8:	898a      	ldrh	r2, [r1, #12]
 80045ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ee:	4605      	mov	r5, r0
 80045f0:	0710      	lsls	r0, r2, #28
 80045f2:	460c      	mov	r4, r1
 80045f4:	d458      	bmi.n	80046a8 <__sflush_r+0xc0>
 80045f6:	684b      	ldr	r3, [r1, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	dc05      	bgt.n	8004608 <__sflush_r+0x20>
 80045fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045fe:	2b00      	cmp	r3, #0
 8004600:	dc02      	bgt.n	8004608 <__sflush_r+0x20>
 8004602:	2000      	movs	r0, #0
 8004604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004608:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800460a:	2e00      	cmp	r6, #0
 800460c:	d0f9      	beq.n	8004602 <__sflush_r+0x1a>
 800460e:	2300      	movs	r3, #0
 8004610:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004614:	682f      	ldr	r7, [r5, #0]
 8004616:	6a21      	ldr	r1, [r4, #32]
 8004618:	602b      	str	r3, [r5, #0]
 800461a:	d032      	beq.n	8004682 <__sflush_r+0x9a>
 800461c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800461e:	89a3      	ldrh	r3, [r4, #12]
 8004620:	075a      	lsls	r2, r3, #29
 8004622:	d505      	bpl.n	8004630 <__sflush_r+0x48>
 8004624:	6863      	ldr	r3, [r4, #4]
 8004626:	1ac0      	subs	r0, r0, r3
 8004628:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800462a:	b10b      	cbz	r3, 8004630 <__sflush_r+0x48>
 800462c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800462e:	1ac0      	subs	r0, r0, r3
 8004630:	2300      	movs	r3, #0
 8004632:	4602      	mov	r2, r0
 8004634:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004636:	6a21      	ldr	r1, [r4, #32]
 8004638:	4628      	mov	r0, r5
 800463a:	47b0      	blx	r6
 800463c:	1c43      	adds	r3, r0, #1
 800463e:	89a3      	ldrh	r3, [r4, #12]
 8004640:	d106      	bne.n	8004650 <__sflush_r+0x68>
 8004642:	6829      	ldr	r1, [r5, #0]
 8004644:	291d      	cmp	r1, #29
 8004646:	d82b      	bhi.n	80046a0 <__sflush_r+0xb8>
 8004648:	4a29      	ldr	r2, [pc, #164]	; (80046f0 <__sflush_r+0x108>)
 800464a:	410a      	asrs	r2, r1
 800464c:	07d6      	lsls	r6, r2, #31
 800464e:	d427      	bmi.n	80046a0 <__sflush_r+0xb8>
 8004650:	2200      	movs	r2, #0
 8004652:	6062      	str	r2, [r4, #4]
 8004654:	04d9      	lsls	r1, r3, #19
 8004656:	6922      	ldr	r2, [r4, #16]
 8004658:	6022      	str	r2, [r4, #0]
 800465a:	d504      	bpl.n	8004666 <__sflush_r+0x7e>
 800465c:	1c42      	adds	r2, r0, #1
 800465e:	d101      	bne.n	8004664 <__sflush_r+0x7c>
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	b903      	cbnz	r3, 8004666 <__sflush_r+0x7e>
 8004664:	6560      	str	r0, [r4, #84]	; 0x54
 8004666:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004668:	602f      	str	r7, [r5, #0]
 800466a:	2900      	cmp	r1, #0
 800466c:	d0c9      	beq.n	8004602 <__sflush_r+0x1a>
 800466e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004672:	4299      	cmp	r1, r3
 8004674:	d002      	beq.n	800467c <__sflush_r+0x94>
 8004676:	4628      	mov	r0, r5
 8004678:	f7ff fa8a 	bl	8003b90 <_free_r>
 800467c:	2000      	movs	r0, #0
 800467e:	6360      	str	r0, [r4, #52]	; 0x34
 8004680:	e7c0      	b.n	8004604 <__sflush_r+0x1c>
 8004682:	2301      	movs	r3, #1
 8004684:	4628      	mov	r0, r5
 8004686:	47b0      	blx	r6
 8004688:	1c41      	adds	r1, r0, #1
 800468a:	d1c8      	bne.n	800461e <__sflush_r+0x36>
 800468c:	682b      	ldr	r3, [r5, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0c5      	beq.n	800461e <__sflush_r+0x36>
 8004692:	2b1d      	cmp	r3, #29
 8004694:	d001      	beq.n	800469a <__sflush_r+0xb2>
 8004696:	2b16      	cmp	r3, #22
 8004698:	d101      	bne.n	800469e <__sflush_r+0xb6>
 800469a:	602f      	str	r7, [r5, #0]
 800469c:	e7b1      	b.n	8004602 <__sflush_r+0x1a>
 800469e:	89a3      	ldrh	r3, [r4, #12]
 80046a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046a4:	81a3      	strh	r3, [r4, #12]
 80046a6:	e7ad      	b.n	8004604 <__sflush_r+0x1c>
 80046a8:	690f      	ldr	r7, [r1, #16]
 80046aa:	2f00      	cmp	r7, #0
 80046ac:	d0a9      	beq.n	8004602 <__sflush_r+0x1a>
 80046ae:	0793      	lsls	r3, r2, #30
 80046b0:	680e      	ldr	r6, [r1, #0]
 80046b2:	bf08      	it	eq
 80046b4:	694b      	ldreq	r3, [r1, #20]
 80046b6:	600f      	str	r7, [r1, #0]
 80046b8:	bf18      	it	ne
 80046ba:	2300      	movne	r3, #0
 80046bc:	eba6 0807 	sub.w	r8, r6, r7
 80046c0:	608b      	str	r3, [r1, #8]
 80046c2:	f1b8 0f00 	cmp.w	r8, #0
 80046c6:	dd9c      	ble.n	8004602 <__sflush_r+0x1a>
 80046c8:	6a21      	ldr	r1, [r4, #32]
 80046ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80046cc:	4643      	mov	r3, r8
 80046ce:	463a      	mov	r2, r7
 80046d0:	4628      	mov	r0, r5
 80046d2:	47b0      	blx	r6
 80046d4:	2800      	cmp	r0, #0
 80046d6:	dc06      	bgt.n	80046e6 <__sflush_r+0xfe>
 80046d8:	89a3      	ldrh	r3, [r4, #12]
 80046da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046de:	81a3      	strh	r3, [r4, #12]
 80046e0:	f04f 30ff 	mov.w	r0, #4294967295
 80046e4:	e78e      	b.n	8004604 <__sflush_r+0x1c>
 80046e6:	4407      	add	r7, r0
 80046e8:	eba8 0800 	sub.w	r8, r8, r0
 80046ec:	e7e9      	b.n	80046c2 <__sflush_r+0xda>
 80046ee:	bf00      	nop
 80046f0:	dfbffffe 	.word	0xdfbffffe

080046f4 <_fflush_r>:
 80046f4:	b538      	push	{r3, r4, r5, lr}
 80046f6:	690b      	ldr	r3, [r1, #16]
 80046f8:	4605      	mov	r5, r0
 80046fa:	460c      	mov	r4, r1
 80046fc:	b913      	cbnz	r3, 8004704 <_fflush_r+0x10>
 80046fe:	2500      	movs	r5, #0
 8004700:	4628      	mov	r0, r5
 8004702:	bd38      	pop	{r3, r4, r5, pc}
 8004704:	b118      	cbz	r0, 800470e <_fflush_r+0x1a>
 8004706:	6a03      	ldr	r3, [r0, #32]
 8004708:	b90b      	cbnz	r3, 800470e <_fflush_r+0x1a>
 800470a:	f7fe ff7b 	bl	8003604 <__sinit>
 800470e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0f3      	beq.n	80046fe <_fflush_r+0xa>
 8004716:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004718:	07d0      	lsls	r0, r2, #31
 800471a:	d404      	bmi.n	8004726 <_fflush_r+0x32>
 800471c:	0599      	lsls	r1, r3, #22
 800471e:	d402      	bmi.n	8004726 <_fflush_r+0x32>
 8004720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004722:	f7ff fa32 	bl	8003b8a <__retarget_lock_acquire_recursive>
 8004726:	4628      	mov	r0, r5
 8004728:	4621      	mov	r1, r4
 800472a:	f7ff ff5d 	bl	80045e8 <__sflush_r>
 800472e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004730:	07da      	lsls	r2, r3, #31
 8004732:	4605      	mov	r5, r0
 8004734:	d4e4      	bmi.n	8004700 <_fflush_r+0xc>
 8004736:	89a3      	ldrh	r3, [r4, #12]
 8004738:	059b      	lsls	r3, r3, #22
 800473a:	d4e1      	bmi.n	8004700 <_fflush_r+0xc>
 800473c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800473e:	f7ff fa25 	bl	8003b8c <__retarget_lock_release_recursive>
 8004742:	e7dd      	b.n	8004700 <_fflush_r+0xc>

08004744 <__swhatbuf_r>:
 8004744:	b570      	push	{r4, r5, r6, lr}
 8004746:	460c      	mov	r4, r1
 8004748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800474c:	2900      	cmp	r1, #0
 800474e:	b096      	sub	sp, #88	; 0x58
 8004750:	4615      	mov	r5, r2
 8004752:	461e      	mov	r6, r3
 8004754:	da0d      	bge.n	8004772 <__swhatbuf_r+0x2e>
 8004756:	89a3      	ldrh	r3, [r4, #12]
 8004758:	f013 0f80 	tst.w	r3, #128	; 0x80
 800475c:	f04f 0100 	mov.w	r1, #0
 8004760:	bf0c      	ite	eq
 8004762:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004766:	2340      	movne	r3, #64	; 0x40
 8004768:	2000      	movs	r0, #0
 800476a:	6031      	str	r1, [r6, #0]
 800476c:	602b      	str	r3, [r5, #0]
 800476e:	b016      	add	sp, #88	; 0x58
 8004770:	bd70      	pop	{r4, r5, r6, pc}
 8004772:	466a      	mov	r2, sp
 8004774:	f000 f862 	bl	800483c <_fstat_r>
 8004778:	2800      	cmp	r0, #0
 800477a:	dbec      	blt.n	8004756 <__swhatbuf_r+0x12>
 800477c:	9901      	ldr	r1, [sp, #4]
 800477e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004782:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004786:	4259      	negs	r1, r3
 8004788:	4159      	adcs	r1, r3
 800478a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800478e:	e7eb      	b.n	8004768 <__swhatbuf_r+0x24>

08004790 <__smakebuf_r>:
 8004790:	898b      	ldrh	r3, [r1, #12]
 8004792:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004794:	079d      	lsls	r5, r3, #30
 8004796:	4606      	mov	r6, r0
 8004798:	460c      	mov	r4, r1
 800479a:	d507      	bpl.n	80047ac <__smakebuf_r+0x1c>
 800479c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80047a0:	6023      	str	r3, [r4, #0]
 80047a2:	6123      	str	r3, [r4, #16]
 80047a4:	2301      	movs	r3, #1
 80047a6:	6163      	str	r3, [r4, #20]
 80047a8:	b002      	add	sp, #8
 80047aa:	bd70      	pop	{r4, r5, r6, pc}
 80047ac:	ab01      	add	r3, sp, #4
 80047ae:	466a      	mov	r2, sp
 80047b0:	f7ff ffc8 	bl	8004744 <__swhatbuf_r>
 80047b4:	9900      	ldr	r1, [sp, #0]
 80047b6:	4605      	mov	r5, r0
 80047b8:	4630      	mov	r0, r6
 80047ba:	f7ff fa5d 	bl	8003c78 <_malloc_r>
 80047be:	b948      	cbnz	r0, 80047d4 <__smakebuf_r+0x44>
 80047c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047c4:	059a      	lsls	r2, r3, #22
 80047c6:	d4ef      	bmi.n	80047a8 <__smakebuf_r+0x18>
 80047c8:	f023 0303 	bic.w	r3, r3, #3
 80047cc:	f043 0302 	orr.w	r3, r3, #2
 80047d0:	81a3      	strh	r3, [r4, #12]
 80047d2:	e7e3      	b.n	800479c <__smakebuf_r+0xc>
 80047d4:	89a3      	ldrh	r3, [r4, #12]
 80047d6:	6020      	str	r0, [r4, #0]
 80047d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047dc:	81a3      	strh	r3, [r4, #12]
 80047de:	9b00      	ldr	r3, [sp, #0]
 80047e0:	6163      	str	r3, [r4, #20]
 80047e2:	9b01      	ldr	r3, [sp, #4]
 80047e4:	6120      	str	r0, [r4, #16]
 80047e6:	b15b      	cbz	r3, 8004800 <__smakebuf_r+0x70>
 80047e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047ec:	4630      	mov	r0, r6
 80047ee:	f000 f837 	bl	8004860 <_isatty_r>
 80047f2:	b128      	cbz	r0, 8004800 <__smakebuf_r+0x70>
 80047f4:	89a3      	ldrh	r3, [r4, #12]
 80047f6:	f023 0303 	bic.w	r3, r3, #3
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	81a3      	strh	r3, [r4, #12]
 8004800:	89a3      	ldrh	r3, [r4, #12]
 8004802:	431d      	orrs	r5, r3
 8004804:	81a5      	strh	r5, [r4, #12]
 8004806:	e7cf      	b.n	80047a8 <__smakebuf_r+0x18>

08004808 <memmove>:
 8004808:	4288      	cmp	r0, r1
 800480a:	b510      	push	{r4, lr}
 800480c:	eb01 0402 	add.w	r4, r1, r2
 8004810:	d902      	bls.n	8004818 <memmove+0x10>
 8004812:	4284      	cmp	r4, r0
 8004814:	4623      	mov	r3, r4
 8004816:	d807      	bhi.n	8004828 <memmove+0x20>
 8004818:	1e43      	subs	r3, r0, #1
 800481a:	42a1      	cmp	r1, r4
 800481c:	d008      	beq.n	8004830 <memmove+0x28>
 800481e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004822:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004826:	e7f8      	b.n	800481a <memmove+0x12>
 8004828:	4402      	add	r2, r0
 800482a:	4601      	mov	r1, r0
 800482c:	428a      	cmp	r2, r1
 800482e:	d100      	bne.n	8004832 <memmove+0x2a>
 8004830:	bd10      	pop	{r4, pc}
 8004832:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004836:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800483a:	e7f7      	b.n	800482c <memmove+0x24>

0800483c <_fstat_r>:
 800483c:	b538      	push	{r3, r4, r5, lr}
 800483e:	4d07      	ldr	r5, [pc, #28]	; (800485c <_fstat_r+0x20>)
 8004840:	2300      	movs	r3, #0
 8004842:	4604      	mov	r4, r0
 8004844:	4608      	mov	r0, r1
 8004846:	4611      	mov	r1, r2
 8004848:	602b      	str	r3, [r5, #0]
 800484a:	f7fc fb38 	bl	8000ebe <_fstat>
 800484e:	1c43      	adds	r3, r0, #1
 8004850:	d102      	bne.n	8004858 <_fstat_r+0x1c>
 8004852:	682b      	ldr	r3, [r5, #0]
 8004854:	b103      	cbz	r3, 8004858 <_fstat_r+0x1c>
 8004856:	6023      	str	r3, [r4, #0]
 8004858:	bd38      	pop	{r3, r4, r5, pc}
 800485a:	bf00      	nop
 800485c:	20000280 	.word	0x20000280

08004860 <_isatty_r>:
 8004860:	b538      	push	{r3, r4, r5, lr}
 8004862:	4d06      	ldr	r5, [pc, #24]	; (800487c <_isatty_r+0x1c>)
 8004864:	2300      	movs	r3, #0
 8004866:	4604      	mov	r4, r0
 8004868:	4608      	mov	r0, r1
 800486a:	602b      	str	r3, [r5, #0]
 800486c:	f7fc fb37 	bl	8000ede <_isatty>
 8004870:	1c43      	adds	r3, r0, #1
 8004872:	d102      	bne.n	800487a <_isatty_r+0x1a>
 8004874:	682b      	ldr	r3, [r5, #0]
 8004876:	b103      	cbz	r3, 800487a <_isatty_r+0x1a>
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	bd38      	pop	{r3, r4, r5, pc}
 800487c:	20000280 	.word	0x20000280

08004880 <_sbrk_r>:
 8004880:	b538      	push	{r3, r4, r5, lr}
 8004882:	4d06      	ldr	r5, [pc, #24]	; (800489c <_sbrk_r+0x1c>)
 8004884:	2300      	movs	r3, #0
 8004886:	4604      	mov	r4, r0
 8004888:	4608      	mov	r0, r1
 800488a:	602b      	str	r3, [r5, #0]
 800488c:	f7fc fb40 	bl	8000f10 <_sbrk>
 8004890:	1c43      	adds	r3, r0, #1
 8004892:	d102      	bne.n	800489a <_sbrk_r+0x1a>
 8004894:	682b      	ldr	r3, [r5, #0]
 8004896:	b103      	cbz	r3, 800489a <_sbrk_r+0x1a>
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	bd38      	pop	{r3, r4, r5, pc}
 800489c:	20000280 	.word	0x20000280

080048a0 <memcpy>:
 80048a0:	440a      	add	r2, r1
 80048a2:	4291      	cmp	r1, r2
 80048a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80048a8:	d100      	bne.n	80048ac <memcpy+0xc>
 80048aa:	4770      	bx	lr
 80048ac:	b510      	push	{r4, lr}
 80048ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048b6:	4291      	cmp	r1, r2
 80048b8:	d1f9      	bne.n	80048ae <memcpy+0xe>
 80048ba:	bd10      	pop	{r4, pc}

080048bc <_realloc_r>:
 80048bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048c0:	4680      	mov	r8, r0
 80048c2:	4614      	mov	r4, r2
 80048c4:	460e      	mov	r6, r1
 80048c6:	b921      	cbnz	r1, 80048d2 <_realloc_r+0x16>
 80048c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048cc:	4611      	mov	r1, r2
 80048ce:	f7ff b9d3 	b.w	8003c78 <_malloc_r>
 80048d2:	b92a      	cbnz	r2, 80048e0 <_realloc_r+0x24>
 80048d4:	f7ff f95c 	bl	8003b90 <_free_r>
 80048d8:	4625      	mov	r5, r4
 80048da:	4628      	mov	r0, r5
 80048dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048e0:	f000 f81b 	bl	800491a <_malloc_usable_size_r>
 80048e4:	4284      	cmp	r4, r0
 80048e6:	4607      	mov	r7, r0
 80048e8:	d802      	bhi.n	80048f0 <_realloc_r+0x34>
 80048ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80048ee:	d812      	bhi.n	8004916 <_realloc_r+0x5a>
 80048f0:	4621      	mov	r1, r4
 80048f2:	4640      	mov	r0, r8
 80048f4:	f7ff f9c0 	bl	8003c78 <_malloc_r>
 80048f8:	4605      	mov	r5, r0
 80048fa:	2800      	cmp	r0, #0
 80048fc:	d0ed      	beq.n	80048da <_realloc_r+0x1e>
 80048fe:	42bc      	cmp	r4, r7
 8004900:	4622      	mov	r2, r4
 8004902:	4631      	mov	r1, r6
 8004904:	bf28      	it	cs
 8004906:	463a      	movcs	r2, r7
 8004908:	f7ff ffca 	bl	80048a0 <memcpy>
 800490c:	4631      	mov	r1, r6
 800490e:	4640      	mov	r0, r8
 8004910:	f7ff f93e 	bl	8003b90 <_free_r>
 8004914:	e7e1      	b.n	80048da <_realloc_r+0x1e>
 8004916:	4635      	mov	r5, r6
 8004918:	e7df      	b.n	80048da <_realloc_r+0x1e>

0800491a <_malloc_usable_size_r>:
 800491a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800491e:	1f18      	subs	r0, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	bfbc      	itt	lt
 8004924:	580b      	ldrlt	r3, [r1, r0]
 8004926:	18c0      	addlt	r0, r0, r3
 8004928:	4770      	bx	lr
	...

0800492c <_init>:
 800492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492e:	bf00      	nop
 8004930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004932:	bc08      	pop	{r3}
 8004934:	469e      	mov	lr, r3
 8004936:	4770      	bx	lr

08004938 <_fini>:
 8004938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493a:	bf00      	nop
 800493c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800493e:	bc08      	pop	{r3}
 8004940:	469e      	mov	lr, r3
 8004942:	4770      	bx	lr


test_my4_motor_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cf8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  08008e98  08008e98  00018e98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009340  08009340  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009340  08009340  00019340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009348  08009348  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009348  08009348  00019348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800934c  0800934c  0001934c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  200001d8  08009524  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  08009524  0002047c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d440  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001df2  00000000  00000000  0002d687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc8  00000000  00000000  0002f480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f7  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001723d  00000000  00000000  00030b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e3f7  00000000  00000000  00047d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090124  00000000  00000000  00056173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ba4  00000000  00000000  000e6298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000eae3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008e80 	.word	0x08008e80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08008e80 	.word	0x08008e80

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int mode = 0, pre_mode = 0;
double dist = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin) {
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001010:	d02a      	beq.n	8001068 <HAL_GPIO_EXTI_Callback+0x68>
 8001012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001016:	d153      	bne.n	80010c0 <HAL_GPIO_EXTI_Callback+0xc0>
  case B1_Pin:
	  if(mode == 5)	{
 8001018:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <HAL_GPIO_EXTI_Callback+0xd0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b05      	cmp	r3, #5
 800101e:	d112      	bne.n	8001046 <HAL_GPIO_EXTI_Callback+0x46>
		  if(dist > 500)	mode = 1;
 8001020:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001022:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <HAL_GPIO_EXTI_Callback+0xd8>)
 800102c:	f7ff fd7c 	bl	8000b28 <__aeabi_dcmpgt>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d002      	beq.n	800103c <HAL_GPIO_EXTI_Callback+0x3c>
 8001036:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001038:	2201      	movs	r2, #1
 800103a:	601a      	str	r2, [r3, #0]
		  pre_mode = mode;
 800103c:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <HAL_GPIO_EXTI_Callback+0xd0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a26      	ldr	r2, [pc, #152]	; (80010dc <HAL_GPIO_EXTI_Callback+0xdc>)
 8001042:	6013      	str	r3, [r2, #0]
//	  else
//	  {
//		  mode = 1;
//		  pre_mode = mode;
//	  }
	  break;
 8001044:	e03c      	b.n	80010c0 <HAL_GPIO_EXTI_Callback+0xc0>
		  mode++;
 8001046:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	4a20      	ldr	r2, [pc, #128]	; (80010d0 <HAL_GPIO_EXTI_Callback+0xd0>)
 800104e:	6013      	str	r3, [r2, #0]
		  if(mode == 5)	mode = 0;
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b05      	cmp	r3, #5
 8001056:	d102      	bne.n	800105e <HAL_GPIO_EXTI_Callback+0x5e>
 8001058:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <HAL_GPIO_EXTI_Callback+0xd0>)
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
		  pre_mode = mode;
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a1e      	ldr	r2, [pc, #120]	; (80010dc <HAL_GPIO_EXTI_Callback+0xdc>)
 8001064:	6013      	str	r3, [r2, #0]
	  break;
 8001066:	e02b      	b.n	80010c0 <HAL_GPIO_EXTI_Callback+0xc0>
  case Echo_Pin:
	  if(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin)) {
 8001068:	f44f 7100 	mov.w	r1, #512	; 0x200
 800106c:	481c      	ldr	r0, [pc, #112]	; (80010e0 <HAL_GPIO_EXTI_Callback+0xe0>)
 800106e:	f001 f9c5 	bl	80023fc <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d004      	beq.n	8001082 <HAL_GPIO_EXTI_Callback+0x82>
		  htim2.Instance->CNT = 0;
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <HAL_GPIO_EXTI_Callback+0xe4>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2200      	movs	r2, #0
 800107e:	625a      	str	r2, [r3, #36]	; 0x24
		  }
		  else {
			  dist = htim2.Instance->CNT * 0.17;
		  }
	  }
	  break;
 8001080:	e01d      	b.n	80010be <HAL_GPIO_EXTI_Callback+0xbe>
		  if(htim2.Instance->CNT > 60000) {
 8001082:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001088:	f64e 2260 	movw	r2, #60000	; 0xea60
 800108c:	4293      	cmp	r3, r2
 800108e:	d906      	bls.n	800109e <HAL_GPIO_EXTI_Callback+0x9e>
			  dist = -1;
 8001090:	4910      	ldr	r1, [pc, #64]	; (80010d4 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001098:	e9c1 2300 	strd	r2, r3, [r1]
	  break;
 800109c:	e00f      	b.n	80010be <HAL_GPIO_EXTI_Callback+0xbe>
			  dist = htim2.Instance->CNT * 0.17;
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HAL_GPIO_EXTI_Callback+0xe4>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fa35 	bl	8000514 <__aeabi_ui2d>
 80010aa:	a307      	add	r3, pc, #28	; (adr r3, 80010c8 <HAL_GPIO_EXTI_Callback+0xc8>)
 80010ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b0:	f7ff faaa 	bl	8000608 <__aeabi_dmul>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4906      	ldr	r1, [pc, #24]	; (80010d4 <HAL_GPIO_EXTI_Callback+0xd4>)
 80010ba:	e9c1 2300 	strd	r2, r3, [r1]
	  break;
 80010be:	bf00      	nop
  }
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	5c28f5c3 	.word	0x5c28f5c3
 80010cc:	3fc5c28f 	.word	0x3fc5c28f
 80010d0:	20000314 	.word	0x20000314
 80010d4:	20000320 	.word	0x20000320
 80010d8:	407f4000 	.word	0x407f4000
 80010dc:	20000318 	.word	0x20000318
 80010e0:	40020000 	.word	0x40020000
 80010e4:	2000023c 	.word	0x2000023c
 80010e8:	bff00000 	.word	0xbff00000
 80010ec:	00000000 	.word	0x00000000

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f4:	f000 fe7a 	bl	8001dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f8:	f000 f8f4 	bl	80012e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010fc:	f000 fad8 	bl	80016b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001100:	f000 faac 	bl	800165c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001104:	f000 f958 	bl	80013b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001108:	f000 f9f6 	bl	80014f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800110c:	f000 fa40 	bl	8001590 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ProgramStart("Mortor test!");
 8001110:	4869      	ldr	r0, [pc, #420]	; (80012b8 <main+0x1c8>)
 8001112:	f000 fbe1 	bl	80018d8 <ProgramStart>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Triger PWM
 8001116:	2100      	movs	r1, #0
 8001118:	4868      	ldr	r0, [pc, #416]	; (80012bc <main+0x1cc>)
 800111a:	f001 ff4b 	bl	8002fb4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim2);				// Echo Counter
 800111e:	4868      	ldr	r0, [pc, #416]	; (80012c0 <main+0x1d0>)
 8001120:	f001 fe9e 	bl	8002e60 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Moter ENA PWM
 8001124:	2100      	movs	r1, #0
 8001126:	4867      	ldr	r0, [pc, #412]	; (80012c4 <main+0x1d4>)
 8001128:	f001 ff44 	bl	8002fb4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Moter ENB PWM
 800112c:	2104      	movs	r1, #4
 800112e:	4865      	ldr	r0, [pc, #404]	; (80012c4 <main+0x1d4>)
 8001130:	f001 ff40 	bl	8002fb4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("%f\r\n", dist);
 8001134:	4b64      	ldr	r3, [pc, #400]	; (80012c8 <main+0x1d8>)
 8001136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113a:	4864      	ldr	r0, [pc, #400]	; (80012cc <main+0x1dc>)
 800113c:	f004 f8e6 	bl	800530c <iprintf>
	  if(dist == -1) {}
 8001140:	4b61      	ldr	r3, [pc, #388]	; (80012c8 <main+0x1d8>)
 8001142:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	4b61      	ldr	r3, [pc, #388]	; (80012d0 <main+0x1e0>)
 800114c:	f7ff fcc4 	bl	8000ad8 <__aeabi_dcmpeq>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d112      	bne.n	800117c <main+0x8c>
	  else if(dist < 150) {
 8001156:	4b5c      	ldr	r3, [pc, #368]	; (80012c8 <main+0x1d8>)
 8001158:	e9d3 0100 	ldrd	r0, r1, [r3]
 800115c:	a354      	add	r3, pc, #336	; (adr r3, 80012b0 <main+0x1c0>)
 800115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001162:	f7ff fcc3 	bl	8000aec <__aeabi_dcmplt>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <main+0x84>
		  mode = 5;
 800116c:	4b59      	ldr	r3, [pc, #356]	; (80012d4 <main+0x1e4>)
 800116e:	2205      	movs	r2, #5
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	e003      	b.n	800117c <main+0x8c>
	  }
	  else {
		  mode = pre_mode;
 8001174:	4b58      	ldr	r3, [pc, #352]	; (80012d8 <main+0x1e8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a56      	ldr	r2, [pc, #344]	; (80012d4 <main+0x1e4>)
 800117a:	6013      	str	r3, [r2, #0]
	  }

	  switch(mode) {
 800117c:	4b55      	ldr	r3, [pc, #340]	; (80012d4 <main+0x1e4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b05      	cmp	r3, #5
 8001182:	d8d7      	bhi.n	8001134 <main+0x44>
 8001184:	a201      	add	r2, pc, #4	; (adr r2, 800118c <main+0x9c>)
 8001186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118a:	bf00      	nop
 800118c:	080011a5 	.word	0x080011a5
 8001190:	080011d1 	.word	0x080011d1
 8001194:	080011fd 	.word	0x080011fd
 8001198:	08001229 	.word	0x08001229
 800119c:	08001255 	.word	0x08001255
 80011a0:	08001281 	.word	0x08001281
	  case 0:
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 80011a4:	2201      	movs	r2, #1
 80011a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011aa:	484c      	ldr	r0, [pc, #304]	; (80012dc <main+0x1ec>)
 80011ac:	f001 f93e 	bl	800242c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 80011b0:	2201      	movs	r2, #1
 80011b2:	2108      	movs	r1, #8
 80011b4:	484a      	ldr	r0, [pc, #296]	; (80012e0 <main+0x1f0>)
 80011b6:	f001 f939 	bl	800242c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
 80011ba:	2201      	movs	r2, #1
 80011bc:	2120      	movs	r1, #32
 80011be:	4848      	ldr	r0, [pc, #288]	; (80012e0 <main+0x1f0>)
 80011c0:	f001 f934 	bl	800242c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 80011c4:	2201      	movs	r2, #1
 80011c6:	2110      	movs	r1, #16
 80011c8:	4845      	ldr	r0, [pc, #276]	; (80012e0 <main+0x1f0>)
 80011ca:	f001 f92f 	bl	800242c <HAL_GPIO_WritePin>
		  break;
 80011ce:	e06e      	b.n	80012ae <main+0x1be>
	  case 1:
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 80011d0:	2201      	movs	r2, #1
 80011d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d6:	4841      	ldr	r0, [pc, #260]	; (80012dc <main+0x1ec>)
 80011d8:	f001 f928 	bl	800242c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2108      	movs	r1, #8
 80011e0:	483f      	ldr	r0, [pc, #252]	; (80012e0 <main+0x1f0>)
 80011e2:	f001 f923 	bl	800242c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
 80011e6:	2201      	movs	r2, #1
 80011e8:	2120      	movs	r1, #32
 80011ea:	483d      	ldr	r0, [pc, #244]	; (80012e0 <main+0x1f0>)
 80011ec:	f001 f91e 	bl	800242c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2110      	movs	r1, #16
 80011f4:	483a      	ldr	r0, [pc, #232]	; (80012e0 <main+0x1f0>)
 80011f6:	f001 f919 	bl	800242c <HAL_GPIO_WritePin>
		  break;
 80011fa:	e058      	b.n	80012ae <main+0x1be>
	  case 2:
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001202:	4836      	ldr	r0, [pc, #216]	; (80012dc <main+0x1ec>)
 8001204:	f001 f912 	bl	800242c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 8001208:	2201      	movs	r2, #1
 800120a:	2108      	movs	r1, #8
 800120c:	4834      	ldr	r0, [pc, #208]	; (80012e0 <main+0x1f0>)
 800120e:	f001 f90d 	bl	800242c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2120      	movs	r1, #32
 8001216:	4832      	ldr	r0, [pc, #200]	; (80012e0 <main+0x1f0>)
 8001218:	f001 f908 	bl	800242c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 800121c:	2201      	movs	r2, #1
 800121e:	2110      	movs	r1, #16
 8001220:	482f      	ldr	r0, [pc, #188]	; (80012e0 <main+0x1f0>)
 8001222:	f001 f903 	bl	800242c <HAL_GPIO_WritePin>
		  break;
 8001226:	e042      	b.n	80012ae <main+0x1be>
	  case 3:
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800122e:	482b      	ldr	r0, [pc, #172]	; (80012dc <main+0x1ec>)
 8001230:	f001 f8fc 	bl	800242c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 8001234:	2201      	movs	r2, #1
 8001236:	2108      	movs	r1, #8
 8001238:	4829      	ldr	r0, [pc, #164]	; (80012e0 <main+0x1f0>)
 800123a:	f001 f8f7 	bl	800242c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
 800123e:	2201      	movs	r2, #1
 8001240:	2120      	movs	r1, #32
 8001242:	4827      	ldr	r0, [pc, #156]	; (80012e0 <main+0x1f0>)
 8001244:	f001 f8f2 	bl	800242c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 8001248:	2200      	movs	r2, #0
 800124a:	2110      	movs	r1, #16
 800124c:	4824      	ldr	r0, [pc, #144]	; (80012e0 <main+0x1f0>)
 800124e:	f001 f8ed 	bl	800242c <HAL_GPIO_WritePin>
		  break;
 8001252:	e02c      	b.n	80012ae <main+0x1be>
	  case 4:
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 8001254:	2201      	movs	r2, #1
 8001256:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800125a:	4820      	ldr	r0, [pc, #128]	; (80012dc <main+0x1ec>)
 800125c:	f001 f8e6 	bl	800242c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8001260:	2200      	movs	r2, #0
 8001262:	2108      	movs	r1, #8
 8001264:	481e      	ldr	r0, [pc, #120]	; (80012e0 <main+0x1f0>)
 8001266:	f001 f8e1 	bl	800242c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2120      	movs	r1, #32
 800126e:	481c      	ldr	r0, [pc, #112]	; (80012e0 <main+0x1f0>)
 8001270:	f001 f8dc 	bl	800242c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 8001274:	2201      	movs	r2, #1
 8001276:	2110      	movs	r1, #16
 8001278:	4819      	ldr	r0, [pc, #100]	; (80012e0 <main+0x1f0>)
 800127a:	f001 f8d7 	bl	800242c <HAL_GPIO_WritePin>
		  break;
 800127e:	e016      	b.n	80012ae <main+0x1be>
	  case 5:
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 8001280:	2201      	movs	r2, #1
 8001282:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001286:	4815      	ldr	r0, [pc, #84]	; (80012dc <main+0x1ec>)
 8001288:	f001 f8d0 	bl	800242c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 800128c:	2201      	movs	r2, #1
 800128e:	2108      	movs	r1, #8
 8001290:	4813      	ldr	r0, [pc, #76]	; (80012e0 <main+0x1f0>)
 8001292:	f001 f8cb 	bl	800242c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
 8001296:	2201      	movs	r2, #1
 8001298:	2120      	movs	r1, #32
 800129a:	4811      	ldr	r0, [pc, #68]	; (80012e0 <main+0x1f0>)
 800129c:	f001 f8c6 	bl	800242c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 80012a0:	2201      	movs	r2, #1
 80012a2:	2110      	movs	r1, #16
 80012a4:	480e      	ldr	r0, [pc, #56]	; (80012e0 <main+0x1f0>)
 80012a6:	f001 f8c1 	bl	800242c <HAL_GPIO_WritePin>
		  break;
 80012aa:	bf00      	nop
 80012ac:	e742      	b.n	8001134 <main+0x44>
  {
 80012ae:	e741      	b.n	8001134 <main+0x44>
 80012b0:	00000000 	.word	0x00000000
 80012b4:	4062c000 	.word	0x4062c000
 80012b8:	08008e98 	.word	0x08008e98
 80012bc:	200001f4 	.word	0x200001f4
 80012c0:	2000023c 	.word	0x2000023c
 80012c4:	20000284 	.word	0x20000284
 80012c8:	20000320 	.word	0x20000320
 80012cc:	08008ea8 	.word	0x08008ea8
 80012d0:	bff00000 	.word	0xbff00000
 80012d4:	20000314 	.word	0x20000314
 80012d8:	20000318 	.word	0x20000318
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40020400 	.word	0x40020400

080012e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b094      	sub	sp, #80	; 0x50
 80012e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ea:	f107 0320 	add.w	r3, r7, #32
 80012ee:	2230      	movs	r2, #48	; 0x30
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f004 fa1e 	bl	8005734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <SystemClock_Config+0xcc>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	4a27      	ldr	r2, [pc, #156]	; (80013b0 <SystemClock_Config+0xcc>)
 8001312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001316:	6413      	str	r3, [r2, #64]	; 0x40
 8001318:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <SystemClock_Config+0xcc>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001324:	2300      	movs	r3, #0
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <SystemClock_Config+0xd0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a21      	ldr	r2, [pc, #132]	; (80013b4 <SystemClock_Config+0xd0>)
 800132e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <SystemClock_Config+0xd0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001340:	2302      	movs	r3, #2
 8001342:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001344:	2301      	movs	r3, #1
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001348:	2310      	movs	r3, #16
 800134a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134c:	2302      	movs	r3, #2
 800134e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001350:	2300      	movs	r3, #0
 8001352:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001354:	2310      	movs	r3, #16
 8001356:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001358:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800135c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800135e:	2304      	movs	r3, #4
 8001360:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001362:	2304      	movs	r3, #4
 8001364:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001366:	f107 0320 	add.w	r3, r7, #32
 800136a:	4618      	mov	r0, r3
 800136c:	f001 f890 	bl	8002490 <HAL_RCC_OscConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001376:	f000 fa3f 	bl	80017f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137a:	230f      	movs	r3, #15
 800137c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137e:	2302      	movs	r3, #2
 8001380:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	2102      	movs	r1, #2
 8001396:	4618      	mov	r0, r3
 8001398:	f001 faf2 	bl	8002980 <HAL_RCC_ClockConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013a2:	f000 fa29 	bl	80017f8 <Error_Handler>
  }
}
 80013a6:	bf00      	nop
 80013a8:	3750      	adds	r7, #80	; 0x50
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40007000 	.word	0x40007000

080013b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b096      	sub	sp, #88	; 0x58
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]
 80013e6:	615a      	str	r2, [r3, #20]
 80013e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2220      	movs	r2, #32
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f004 f99f 	bl	8005734 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013f6:	4b3e      	ldr	r3, [pc, #248]	; (80014f0 <MX_TIM1_Init+0x138>)
 80013f8:	4a3e      	ldr	r2, [pc, #248]	; (80014f4 <MX_TIM1_Init+0x13c>)
 80013fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 210-1;
 80013fc:	4b3c      	ldr	r3, [pc, #240]	; (80014f0 <MX_TIM1_Init+0x138>)
 80013fe:	22d1      	movs	r2, #209	; 0xd1
 8001400:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001402:	4b3b      	ldr	r3, [pc, #236]	; (80014f0 <MX_TIM1_Init+0x138>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001408:	4b39      	ldr	r3, [pc, #228]	; (80014f0 <MX_TIM1_Init+0x138>)
 800140a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800140e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001410:	4b37      	ldr	r3, [pc, #220]	; (80014f0 <MX_TIM1_Init+0x138>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001416:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <MX_TIM1_Init+0x138>)
 8001418:	2200      	movs	r2, #0
 800141a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141c:	4b34      	ldr	r3, [pc, #208]	; (80014f0 <MX_TIM1_Init+0x138>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001422:	4833      	ldr	r0, [pc, #204]	; (80014f0 <MX_TIM1_Init+0x138>)
 8001424:	f001 fccc 	bl	8002dc0 <HAL_TIM_Base_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800142e:	f000 f9e3 	bl	80017f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001436:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001438:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800143c:	4619      	mov	r1, r3
 800143e:	482c      	ldr	r0, [pc, #176]	; (80014f0 <MX_TIM1_Init+0x138>)
 8001440:	f001 ff2a 	bl	8003298 <HAL_TIM_ConfigClockSource>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800144a:	f000 f9d5 	bl	80017f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800144e:	4828      	ldr	r0, [pc, #160]	; (80014f0 <MX_TIM1_Init+0x138>)
 8001450:	f001 fd60 	bl	8002f14 <HAL_TIM_PWM_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800145a:	f000 f9cd 	bl	80017f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145e:	2300      	movs	r3, #0
 8001460:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001466:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800146a:	4619      	mov	r1, r3
 800146c:	4820      	ldr	r0, [pc, #128]	; (80014f0 <MX_TIM1_Init+0x138>)
 800146e:	f002 fab3 	bl	80039d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001478:	f000 f9be 	bl	80017f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800147c:	2360      	movs	r3, #96	; 0x60
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4;
 8001480:	2304      	movs	r3, #4
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001484:	2300      	movs	r3, #0
 8001486:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001488:	2300      	movs	r3, #0
 800148a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001490:	2300      	movs	r3, #0
 8001492:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001494:	2300      	movs	r3, #0
 8001496:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149c:	2200      	movs	r2, #0
 800149e:	4619      	mov	r1, r3
 80014a0:	4813      	ldr	r0, [pc, #76]	; (80014f0 <MX_TIM1_Init+0x138>)
 80014a2:	f001 fe37 	bl	8003114 <HAL_TIM_PWM_ConfigChannel>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80014ac:	f000 f9a4 	bl	80017f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	4619      	mov	r1, r3
 80014d2:	4807      	ldr	r0, [pc, #28]	; (80014f0 <MX_TIM1_Init+0x138>)
 80014d4:	f002 faee 	bl	8003ab4 <HAL_TIMEx_ConfigBreakDeadTime>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80014de:	f000 f98b 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014e2:	4803      	ldr	r0, [pc, #12]	; (80014f0 <MX_TIM1_Init+0x138>)
 80014e4:	f000 fa9e 	bl	8001a24 <HAL_TIM_MspPostInit>

}
 80014e8:	bf00      	nop
 80014ea:	3758      	adds	r7, #88	; 0x58
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	200001f4 	.word	0x200001f4
 80014f4:	40010000 	.word	0x40010000

080014f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150c:	463b      	mov	r3, r7
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001514:	4b1d      	ldr	r3, [pc, #116]	; (800158c <MX_TIM2_Init+0x94>)
 8001516:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800151a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <MX_TIM2_Init+0x94>)
 800151e:	2253      	movs	r2, #83	; 0x53
 8001520:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001522:	4b1a      	ldr	r3, [pc, #104]	; (800158c <MX_TIM2_Init+0x94>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001528:	4b18      	ldr	r3, [pc, #96]	; (800158c <MX_TIM2_Init+0x94>)
 800152a:	f04f 32ff 	mov.w	r2, #4294967295
 800152e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <MX_TIM2_Init+0x94>)
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <MX_TIM2_Init+0x94>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800153c:	4813      	ldr	r0, [pc, #76]	; (800158c <MX_TIM2_Init+0x94>)
 800153e:	f001 fc3f 	bl	8002dc0 <HAL_TIM_Base_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001548:	f000 f956 	bl	80017f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800154c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001550:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001552:	f107 0308 	add.w	r3, r7, #8
 8001556:	4619      	mov	r1, r3
 8001558:	480c      	ldr	r0, [pc, #48]	; (800158c <MX_TIM2_Init+0x94>)
 800155a:	f001 fe9d 	bl	8003298 <HAL_TIM_ConfigClockSource>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001564:	f000 f948 	bl	80017f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001570:	463b      	mov	r3, r7
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_TIM2_Init+0x94>)
 8001576:	f002 fa2f 	bl	80039d8 <HAL_TIMEx_MasterConfigSynchronization>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001580:	f000 f93a 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	2000023c 	.word	0x2000023c

08001590 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001596:	f107 0320 	add.w	r3, r7, #32
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	611a      	str	r2, [r3, #16]
 80015ae:	615a      	str	r2, [r3, #20]
 80015b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015b2:	4b28      	ldr	r3, [pc, #160]	; (8001654 <MX_TIM3_Init+0xc4>)
 80015b4:	4a28      	ldr	r2, [pc, #160]	; (8001658 <MX_TIM3_Init+0xc8>)
 80015b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80015b8:	4b26      	ldr	r3, [pc, #152]	; (8001654 <MX_TIM3_Init+0xc4>)
 80015ba:	2253      	movs	r2, #83	; 0x53
 80015bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015be:	4b25      	ldr	r3, [pc, #148]	; (8001654 <MX_TIM3_Init+0xc4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80015c4:	4b23      	ldr	r3, [pc, #140]	; (8001654 <MX_TIM3_Init+0xc4>)
 80015c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015cc:	4b21      	ldr	r3, [pc, #132]	; (8001654 <MX_TIM3_Init+0xc4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d2:	4b20      	ldr	r3, [pc, #128]	; (8001654 <MX_TIM3_Init+0xc4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015d8:	481e      	ldr	r0, [pc, #120]	; (8001654 <MX_TIM3_Init+0xc4>)
 80015da:	f001 fc9b 	bl	8002f14 <HAL_TIM_PWM_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80015e4:	f000 f908 	bl	80017f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e8:	2300      	movs	r3, #0
 80015ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015f0:	f107 0320 	add.w	r3, r7, #32
 80015f4:	4619      	mov	r1, r3
 80015f6:	4817      	ldr	r0, [pc, #92]	; (8001654 <MX_TIM3_Init+0xc4>)
 80015f8:	f002 f9ee 	bl	80039d8 <HAL_TIMEx_MasterConfigSynchronization>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001602:	f000 f8f9 	bl	80017f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001606:	2360      	movs	r3, #96	; 0x60
 8001608:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800160a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800160e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2200      	movs	r2, #0
 800161c:	4619      	mov	r1, r3
 800161e:	480d      	ldr	r0, [pc, #52]	; (8001654 <MX_TIM3_Init+0xc4>)
 8001620:	f001 fd78 	bl	8003114 <HAL_TIM_PWM_ConfigChannel>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800162a:	f000 f8e5 	bl	80017f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2204      	movs	r2, #4
 8001632:	4619      	mov	r1, r3
 8001634:	4807      	ldr	r0, [pc, #28]	; (8001654 <MX_TIM3_Init+0xc4>)
 8001636:	f001 fd6d 	bl	8003114 <HAL_TIM_PWM_ConfigChannel>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001640:	f000 f8da 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001644:	4803      	ldr	r0, [pc, #12]	; (8001654 <MX_TIM3_Init+0xc4>)
 8001646:	f000 f9ed 	bl	8001a24 <HAL_TIM_MspPostInit>

}
 800164a:	bf00      	nop
 800164c:	3728      	adds	r7, #40	; 0x28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000284 	.word	0x20000284
 8001658:	40000400 	.word	0x40000400

0800165c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001662:	4a12      	ldr	r2, [pc, #72]	; (80016ac <MX_USART2_UART_Init+0x50>)
 8001664:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001668:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800166c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001682:	220c      	movs	r2, #12
 8001684:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001694:	f002 fa60 	bl	8003b58 <HAL_UART_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800169e:	f000 f8ab 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200002cc 	.word	0x200002cc
 80016ac:	40004400 	.word	0x40004400

080016b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	4b47      	ldr	r3, [pc, #284]	; (80017e8 <MX_GPIO_Init+0x138>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a46      	ldr	r2, [pc, #280]	; (80017e8 <MX_GPIO_Init+0x138>)
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b44      	ldr	r3, [pc, #272]	; (80017e8 <MX_GPIO_Init+0x138>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	4b40      	ldr	r3, [pc, #256]	; (80017e8 <MX_GPIO_Init+0x138>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a3f      	ldr	r2, [pc, #252]	; (80017e8 <MX_GPIO_Init+0x138>)
 80016ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b3d      	ldr	r3, [pc, #244]	; (80017e8 <MX_GPIO_Init+0x138>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	4b39      	ldr	r3, [pc, #228]	; (80017e8 <MX_GPIO_Init+0x138>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a38      	ldr	r2, [pc, #224]	; (80017e8 <MX_GPIO_Init+0x138>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b36      	ldr	r3, [pc, #216]	; (80017e8 <MX_GPIO_Init+0x138>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	4b32      	ldr	r3, [pc, #200]	; (80017e8 <MX_GPIO_Init+0x138>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a31      	ldr	r2, [pc, #196]	; (80017e8 <MX_GPIO_Init+0x138>)
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b2f      	ldr	r3, [pc, #188]	; (80017e8 <MX_GPIO_Init+0x138>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|IN1_Pin, GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800173c:	482b      	ldr	r0, [pc, #172]	; (80017ec <MX_GPIO_Init+0x13c>)
 800173e:	f000 fe75 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN2_Pin|IN4_Pin|IN3_Pin, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	2138      	movs	r1, #56	; 0x38
 8001746:	482a      	ldr	r0, [pc, #168]	; (80017f0 <MX_GPIO_Init+0x140>)
 8001748:	f000 fe70 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800174c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001752:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	4824      	ldr	r0, [pc, #144]	; (80017f4 <MX_GPIO_Init+0x144>)
 8001764:	f000 fcc6 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|IN1_Pin;
 8001768:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800176c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176e:	2301      	movs	r3, #1
 8001770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	481a      	ldr	r0, [pc, #104]	; (80017ec <MX_GPIO_Init+0x13c>)
 8001782:	f000 fcb7 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_Pin */
  GPIO_InitStruct.Pin = Echo_Pin;
 8001786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800178a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800178c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	4619      	mov	r1, r3
 800179c:	4813      	ldr	r0, [pc, #76]	; (80017ec <MX_GPIO_Init+0x13c>)
 800179e:	f000 fca9 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_Pin IN4_Pin IN3_Pin */
  GPIO_InitStruct.Pin = IN2_Pin|IN4_Pin|IN3_Pin;
 80017a2:	2338      	movs	r3, #56	; 0x38
 80017a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	480d      	ldr	r0, [pc, #52]	; (80017f0 <MX_GPIO_Init+0x140>)
 80017ba:	f000 fc9b 	bl	80020f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	2017      	movs	r0, #23
 80017c4:	f000 fc5f 	bl	8002086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017c8:	2017      	movs	r0, #23
 80017ca:	f000 fc78 	bl	80020be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2100      	movs	r1, #0
 80017d2:	2028      	movs	r0, #40	; 0x28
 80017d4:	f000 fc57 	bl	8002086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017d8:	2028      	movs	r0, #40	; 0x28
 80017da:	f000 fc70 	bl	80020be <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017de:	bf00      	nop
 80017e0:	3728      	adds	r7, #40	; 0x28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020000 	.word	0x40020000
 80017f0:	40020400 	.word	0x40020400
 80017f4:	40020800 	.word	0x40020800

080017f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017fc:	b672      	cpsid	i
}
 80017fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001800:	e7fe      	b.n	8001800 <Error_Handler+0x8>
	...

08001804 <__io_getchar>:
#include "main.h"
#include <stdio.h>

extern UART_HandleTypeDef huart2;

int __io_getchar(void) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
	char ch;
	while(HAL_UART_Receive(&huart2, &ch, 1, 10/*ms*/) != HAL_OK);
 800180a:	bf00      	nop
 800180c:	1df9      	adds	r1, r7, #7
 800180e:	230a      	movs	r3, #10
 8001810:	2201      	movs	r2, #1
 8001812:	480d      	ldr	r0, [pc, #52]	; (8001848 <__io_getchar+0x44>)
 8001814:	f002 fa7b 	bl	8003d0e <HAL_UART_Receive>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f6      	bne.n	800180c <__io_getchar+0x8>
	HAL_UART_Transmit(&huart2, &ch, 1, 10/*ms*/);	// Echo
 800181e:	1df9      	adds	r1, r7, #7
 8001820:	230a      	movs	r3, #10
 8001822:	2201      	movs	r2, #1
 8001824:	4808      	ldr	r0, [pc, #32]	; (8001848 <__io_getchar+0x44>)
 8001826:	f002 f9e7 	bl	8003bf8 <HAL_UART_Transmit>
	if(ch == '\r'/* Enter */)	HAL_UART_Transmit(&huart2, "\n", 1, 10/*ms*/);
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	2b0d      	cmp	r3, #13
 800182e:	d105      	bne.n	800183c <__io_getchar+0x38>
 8001830:	230a      	movs	r3, #10
 8001832:	2201      	movs	r2, #1
 8001834:	4905      	ldr	r1, [pc, #20]	; (800184c <__io_getchar+0x48>)
 8001836:	4804      	ldr	r0, [pc, #16]	; (8001848 <__io_getchar+0x44>)
 8001838:	f002 f9de 	bl	8003bf8 <HAL_UART_Transmit>
	return ch;
 800183c:	79fb      	ldrb	r3, [r7, #7]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	200002cc 	.word	0x200002cc
 800184c:	08008eb0 	.word	0x08008eb0

08001850 <__io_putchar>:
int __io_putchar(int ch) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 10/*ms*/);
 8001858:	1d39      	adds	r1, r7, #4
 800185a:	230a      	movs	r3, #10
 800185c:	2201      	movs	r2, #1
 800185e:	4804      	ldr	r0, [pc, #16]	; (8001870 <__io_putchar+0x20>)
 8001860:	f002 f9ca 	bl	8003bf8 <HAL_UART_Transmit>
	return ch;
 8001864:	687b      	ldr	r3, [r7, #4]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200002cc 	.word	0x200002cc

08001874 <standby>:
void standby() {
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8001878:	bf00      	nop
 800187a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800187e:	4804      	ldr	r0, [pc, #16]	; (8001890 <standby+0x1c>)
 8001880:	f000 fdbc 	bl	80023fc <HAL_GPIO_ReadPin>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f7      	bne.n	800187a <standby+0x6>
		;
}
 800188a:	bf00      	nop
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40020800 	.word	0x40020800

08001894 <cls>:
void cls()				   // 화면 clear
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
	printf("\033[2J");
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <cls+0x10>)
 800189a:	f003 fd37 	bl	800530c <iprintf>
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	08008eb4 	.word	0x08008eb4

080018a8 <cursor>:
void cursor(int x, int y)  // 해당 위치로 커서 이동
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
	char buf[20];
	sprintf(buf, "\033[%d;%dH", y, x);
 80018b2:	f107 000c 	add.w	r0, r7, #12
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	4906      	ldr	r1, [pc, #24]	; (80018d4 <cursor+0x2c>)
 80018bc:	f003 fe42 	bl	8005544 <siprintf>
	puts(buf);
 80018c0:	f107 030c 	add.w	r3, r7, #12
 80018c4:	4618      	mov	r0, r3
 80018c6:	f003 fd87 	bl	80053d8 <puts>
}
 80018ca:	bf00      	nop
 80018cc:	3720      	adds	r7, #32
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	08008ebc 	.word	0x08008ebc

080018d8 <ProgramStart>:
void ProgramStart(char *str)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
//	printf("\033[2J\033[0;0H");
	cls();
 80018e0:	f7ff ffd8 	bl	8001894 <cls>
	cursor(0,0);
 80018e4:	2100      	movs	r1, #0
 80018e6:	2000      	movs	r0, #0
 80018e8:	f7ff ffde 	bl	80018a8 <cursor>
	printf("program Name - %s\r\n", str);
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	480a      	ldr	r0, [pc, #40]	; (8001918 <ProgramStart+0x40>)
 80018f0:	f003 fd0c 	bl	800530c <iprintf>
	printf("Press Blue-button(B1) to Start...\r\n");
 80018f4:	4809      	ldr	r0, [pc, #36]	; (800191c <ProgramStart+0x44>)
 80018f6:	f003 fd6f 	bl	80053d8 <puts>
	standby();
 80018fa:	f7ff ffbb 	bl	8001874 <standby>
	setvbuf(stdin, NULL, _IONBF, 0);
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <ProgramStart+0x48>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6858      	ldr	r0, [r3, #4]
 8001904:	2300      	movs	r3, #0
 8001906:	2202      	movs	r2, #2
 8001908:	2100      	movs	r1, #0
 800190a:	f003 fd6d 	bl	80053e8 <setvbuf>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	08008ec8 	.word	0x08008ec8
 800191c:	08008edc 	.word	0x08008edc
 8001920:	20000064 	.word	0x20000064

08001924 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <HAL_MspInit+0x4c>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	4a0f      	ldr	r2, [pc, #60]	; (8001970 <HAL_MspInit+0x4c>)
 8001934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001938:	6453      	str	r3, [r2, #68]	; 0x44
 800193a:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <HAL_MspInit+0x4c>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_MspInit+0x4c>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	4a08      	ldr	r2, [pc, #32]	; (8001970 <HAL_MspInit+0x4c>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001954:	6413      	str	r3, [r2, #64]	; 0x40
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_MspInit+0x4c>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001962:	2007      	movs	r0, #7
 8001964:	f000 fb84 	bl	8002070 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40023800 	.word	0x40023800

08001974 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a15      	ldr	r2, [pc, #84]	; (80019d8 <HAL_TIM_Base_MspInit+0x64>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d10e      	bne.n	80019a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	4b14      	ldr	r3, [pc, #80]	; (80019dc <HAL_TIM_Base_MspInit+0x68>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	4a13      	ldr	r2, [pc, #76]	; (80019dc <HAL_TIM_Base_MspInit+0x68>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6453      	str	r3, [r2, #68]	; 0x44
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_TIM_Base_MspInit+0x68>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019a2:	e012      	b.n	80019ca <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ac:	d10d      	bne.n	80019ca <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_TIM_Base_MspInit+0x68>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	4a09      	ldr	r2, [pc, #36]	; (80019dc <HAL_TIM_Base_MspInit+0x68>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <HAL_TIM_Base_MspInit+0x68>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
}
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40010000 	.word	0x40010000
 80019dc:	40023800 	.word	0x40023800

080019e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0b      	ldr	r2, [pc, #44]	; (8001a1c <HAL_TIM_PWM_MspInit+0x3c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d10d      	bne.n	8001a0e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_TIM_PWM_MspInit+0x40>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <HAL_TIM_PWM_MspInit+0x40>)
 80019fc:	f043 0302 	orr.w	r3, r3, #2
 8001a00:	6413      	str	r3, [r2, #64]	; 0x40
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <HAL_TIM_PWM_MspInit+0x40>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a0e:	bf00      	nop
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40000400 	.word	0x40000400
 8001a20:	40023800 	.word	0x40023800

08001a24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a24      	ldr	r2, [pc, #144]	; (8001ad4 <HAL_TIM_MspPostInit+0xb0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d11f      	bne.n	8001a86 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <HAL_TIM_MspPostInit+0xb4>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a22      	ldr	r2, [pc, #136]	; (8001ad8 <HAL_TIM_MspPostInit+0xb4>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <HAL_TIM_MspPostInit+0xb4>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Trig_Pin;
 8001a62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a74:	2301      	movs	r3, #1
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4817      	ldr	r0, [pc, #92]	; (8001adc <HAL_TIM_MspPostInit+0xb8>)
 8001a80:	f000 fb38 	bl	80020f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a84:	e022      	b.n	8001acc <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a15      	ldr	r2, [pc, #84]	; (8001ae0 <HAL_TIM_MspPostInit+0xbc>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d11d      	bne.n	8001acc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <HAL_TIM_MspPostInit+0xb4>)
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a98:	4a0f      	ldr	r2, [pc, #60]	; (8001ad8 <HAL_TIM_MspPostInit+0xb4>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa0:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <HAL_TIM_MspPostInit+0xb4>)
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aac:	23c0      	movs	r3, #192	; 0xc0
 8001aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001abc:	2302      	movs	r3, #2
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4805      	ldr	r0, [pc, #20]	; (8001adc <HAL_TIM_MspPostInit+0xb8>)
 8001ac8:	f000 fb14 	bl	80020f4 <HAL_GPIO_Init>
}
 8001acc:	bf00      	nop
 8001ace:	3728      	adds	r7, #40	; 0x28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40010000 	.word	0x40010000
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40020000 	.word	0x40020000
 8001ae0:	40000400 	.word	0x40000400

08001ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	; 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a19      	ldr	r2, [pc, #100]	; (8001b68 <HAL_UART_MspInit+0x84>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d12b      	bne.n	8001b5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <HAL_UART_MspInit+0x88>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	4a17      	ldr	r2, [pc, #92]	; (8001b6c <HAL_UART_MspInit+0x88>)
 8001b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b14:	6413      	str	r3, [r2, #64]	; 0x40
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <HAL_UART_MspInit+0x88>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <HAL_UART_MspInit+0x88>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a10      	ldr	r2, [pc, #64]	; (8001b6c <HAL_UART_MspInit+0x88>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <HAL_UART_MspInit+0x88>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b3e:	230c      	movs	r3, #12
 8001b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b4e:	2307      	movs	r3, #7
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	; (8001b70 <HAL_UART_MspInit+0x8c>)
 8001b5a:	f000 facb 	bl	80020f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b5e:	bf00      	nop
 8001b60:	3728      	adds	r7, #40	; 0x28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40004400 	.word	0x40004400
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40020000 	.word	0x40020000

08001b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b78:	e7fe      	b.n	8001b78 <NMI_Handler+0x4>

08001b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <HardFault_Handler+0x4>

08001b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <MemManage_Handler+0x4>

08001b86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <BusFault_Handler+0x4>

08001b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <UsageFault_Handler+0x4>

08001b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc0:	f000 f966 	bl	8001e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Echo_Pin);
 8001bcc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001bd0:	f000 fc46 	bl	8002460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001bdc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001be0:	f000 fc3e 	bl	8002460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return 1;
 8001bec:	2301      	movs	r3, #1
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <_kill>:

int _kill(int pid, int sig)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c02:	f003 fde9 	bl	80057d8 <__errno>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2216      	movs	r2, #22
 8001c0a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <_exit>:

void _exit (int status)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c20:	f04f 31ff 	mov.w	r1, #4294967295
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff ffe7 	bl	8001bf8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c2a:	e7fe      	b.n	8001c2a <_exit+0x12>

08001c2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	e00a      	b.n	8001c54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c3e:	f7ff fde1 	bl	8001804 <__io_getchar>
 8001c42:	4601      	mov	r1, r0
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	60ba      	str	r2, [r7, #8]
 8001c4a:	b2ca      	uxtb	r2, r1
 8001c4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3301      	adds	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	dbf0      	blt.n	8001c3e <_read+0x12>
  }

  return len;
 8001c5c:	687b      	ldr	r3, [r7, #4]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b086      	sub	sp, #24
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	60f8      	str	r0, [r7, #12]
 8001c6e:	60b9      	str	r1, [r7, #8]
 8001c70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	e009      	b.n	8001c8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	60ba      	str	r2, [r7, #8]
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fde5 	bl	8001850 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	dbf1      	blt.n	8001c78 <_write+0x12>
  }
  return len;
 8001c94:	687b      	ldr	r3, [r7, #4]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <_close>:

int _close(int file)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cc6:	605a      	str	r2, [r3, #4]
  return 0;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <_isatty>:

int _isatty(int file)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cde:	2301      	movs	r3, #1
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d10:	4a14      	ldr	r2, [pc, #80]	; (8001d64 <_sbrk+0x5c>)
 8001d12:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <_sbrk+0x60>)
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d1c:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <_sbrk+0x64>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d102      	bne.n	8001d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <_sbrk+0x64>)
 8001d26:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <_sbrk+0x68>)
 8001d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <_sbrk+0x64>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d207      	bcs.n	8001d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d38:	f003 fd4e 	bl	80057d8 <__errno>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	220c      	movs	r2, #12
 8001d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295
 8001d46:	e009      	b.n	8001d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d48:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <_sbrk+0x64>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d4e:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <_sbrk+0x64>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	4a05      	ldr	r2, [pc, #20]	; (8001d6c <_sbrk+0x64>)
 8001d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20020000 	.word	0x20020000
 8001d68:	00000400 	.word	0x00000400
 8001d6c:	20000328 	.word	0x20000328
 8001d70:	20000480 	.word	0x20000480

08001d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <SystemInit+0x20>)
 8001d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d7e:	4a05      	ldr	r2, [pc, #20]	; (8001d94 <SystemInit+0x20>)
 8001d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d9c:	f7ff ffea 	bl	8001d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001da0:	480c      	ldr	r0, [pc, #48]	; (8001dd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001da2:	490d      	ldr	r1, [pc, #52]	; (8001dd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001da4:	4a0d      	ldr	r2, [pc, #52]	; (8001ddc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da8:	e002      	b.n	8001db0 <LoopCopyDataInit>

08001daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dae:	3304      	adds	r3, #4

08001db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db4:	d3f9      	bcc.n	8001daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db6:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001db8:	4c0a      	ldr	r4, [pc, #40]	; (8001de4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dbc:	e001      	b.n	8001dc2 <LoopFillZerobss>

08001dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc0:	3204      	adds	r2, #4

08001dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc4:	d3fb      	bcc.n	8001dbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dc6:	f003 fd0d 	bl	80057e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dca:	f7ff f991 	bl	80010f0 <main>
  bx  lr    
 8001dce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ddc:	08009350 	.word	0x08009350
  ldr r2, =_sbss
 8001de0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001de4:	2000047c 	.word	0x2000047c

08001de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de8:	e7fe      	b.n	8001de8 <ADC_IRQHandler>
	...

08001dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001df0:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <HAL_Init+0x40>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0d      	ldr	r2, [pc, #52]	; (8001e2c <HAL_Init+0x40>)
 8001df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_Init+0x40>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <HAL_Init+0x40>)
 8001e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <HAL_Init+0x40>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a07      	ldr	r2, [pc, #28]	; (8001e2c <HAL_Init+0x40>)
 8001e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e14:	2003      	movs	r0, #3
 8001e16:	f000 f92b 	bl	8002070 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f000 f808 	bl	8001e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e20:	f7ff fd80 	bl	8001924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40023c00 	.word	0x40023c00

08001e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_InitTick+0x54>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_InitTick+0x58>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 f943 	bl	80020da <HAL_SYSTICK_Config>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00e      	b.n	8001e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b0f      	cmp	r3, #15
 8001e62:	d80a      	bhi.n	8001e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e64:	2200      	movs	r2, #0
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f000 f90b 	bl	8002086 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e70:	4a06      	ldr	r2, [pc, #24]	; (8001e8c <HAL_InitTick+0x5c>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	e000      	b.n	8001e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000000 	.word	0x20000000
 8001e88:	20000008 	.word	0x20000008
 8001e8c:	20000004 	.word	0x20000004

08001e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_IncTick+0x20>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_IncTick+0x24>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a04      	ldr	r2, [pc, #16]	; (8001eb4 <HAL_IncTick+0x24>)
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000008 	.word	0x20000008
 8001eb4:	2000032c 	.word	0x2000032c

08001eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return uwTick;
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <HAL_GetTick+0x14>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	2000032c 	.word	0x2000032c

08001ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eec:	4013      	ands	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f02:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	60d3      	str	r3, [r2, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <__NVIC_GetPriorityGrouping+0x18>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	f003 0307 	and.w	r3, r3, #7
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	db0b      	blt.n	8001f5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	f003 021f 	and.w	r2, r3, #31
 8001f4c:	4907      	ldr	r1, [pc, #28]	; (8001f6c <__NVIC_EnableIRQ+0x38>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	2001      	movs	r0, #1
 8001f56:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000e100 	.word	0xe000e100

08001f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	6039      	str	r1, [r7, #0]
 8001f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	db0a      	blt.n	8001f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	490c      	ldr	r1, [pc, #48]	; (8001fbc <__NVIC_SetPriority+0x4c>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	0112      	lsls	r2, r2, #4
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	440b      	add	r3, r1
 8001f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f98:	e00a      	b.n	8001fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4908      	ldr	r1, [pc, #32]	; (8001fc0 <__NVIC_SetPriority+0x50>)
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	3b04      	subs	r3, #4
 8001fa8:	0112      	lsls	r2, r2, #4
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	440b      	add	r3, r1
 8001fae:	761a      	strb	r2, [r3, #24]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000e100 	.word	0xe000e100
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b089      	sub	sp, #36	; 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f1c3 0307 	rsb	r3, r3, #7
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	bf28      	it	cs
 8001fe2:	2304      	movcs	r3, #4
 8001fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	2b06      	cmp	r3, #6
 8001fec:	d902      	bls.n	8001ff4 <NVIC_EncodePriority+0x30>
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3b03      	subs	r3, #3
 8001ff2:	e000      	b.n	8001ff6 <NVIC_EncodePriority+0x32>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43da      	mvns	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	401a      	ands	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800200c:	f04f 31ff 	mov.w	r1, #4294967295
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	fa01 f303 	lsl.w	r3, r1, r3
 8002016:	43d9      	mvns	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	4313      	orrs	r3, r2
         );
}
 800201e:	4618      	mov	r0, r3
 8002020:	3724      	adds	r7, #36	; 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3b01      	subs	r3, #1
 8002038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800203c:	d301      	bcc.n	8002042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800203e:	2301      	movs	r3, #1
 8002040:	e00f      	b.n	8002062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002042:	4a0a      	ldr	r2, [pc, #40]	; (800206c <SysTick_Config+0x40>)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3b01      	subs	r3, #1
 8002048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800204a:	210f      	movs	r1, #15
 800204c:	f04f 30ff 	mov.w	r0, #4294967295
 8002050:	f7ff ff8e 	bl	8001f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <SysTick_Config+0x40>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800205a:	4b04      	ldr	r3, [pc, #16]	; (800206c <SysTick_Config+0x40>)
 800205c:	2207      	movs	r2, #7
 800205e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	e000e010 	.word	0xe000e010

08002070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff ff29 	bl	8001ed0 <__NVIC_SetPriorityGrouping>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002086:	b580      	push	{r7, lr}
 8002088:	b086      	sub	sp, #24
 800208a:	af00      	add	r7, sp, #0
 800208c:	4603      	mov	r3, r0
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002098:	f7ff ff3e 	bl	8001f18 <__NVIC_GetPriorityGrouping>
 800209c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	68b9      	ldr	r1, [r7, #8]
 80020a2:	6978      	ldr	r0, [r7, #20]
 80020a4:	f7ff ff8e 	bl	8001fc4 <NVIC_EncodePriority>
 80020a8:	4602      	mov	r2, r0
 80020aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ae:	4611      	mov	r1, r2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff5d 	bl	8001f70 <__NVIC_SetPriority>
}
 80020b6:	bf00      	nop
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff31 	bl	8001f34 <__NVIC_EnableIRQ>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff ffa2 	bl	800202c <SysTick_Config>
 80020e8:	4603      	mov	r3, r0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	; 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	e159      	b.n	80023c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002110:	2201      	movs	r2, #1
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	429a      	cmp	r2, r3
 800212a:	f040 8148 	bne.w	80023be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	2b01      	cmp	r3, #1
 8002138:	d005      	beq.n	8002146 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002142:	2b02      	cmp	r3, #2
 8002144:	d130      	bne.n	80021a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	2203      	movs	r2, #3
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800217c:	2201      	movs	r2, #1
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	091b      	lsrs	r3, r3, #4
 8002192:	f003 0201 	and.w	r2, r3, #1
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d017      	beq.n	80021e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	2203      	movs	r2, #3
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d123      	bne.n	8002238 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	08da      	lsrs	r2, r3, #3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3208      	adds	r2, #8
 80021f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	220f      	movs	r2, #15
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	08da      	lsrs	r2, r3, #3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3208      	adds	r2, #8
 8002232:	69b9      	ldr	r1, [r7, #24]
 8002234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	2203      	movs	r2, #3
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0203 	and.w	r2, r3, #3
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 80a2 	beq.w	80023be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	4b57      	ldr	r3, [pc, #348]	; (80023dc <HAL_GPIO_Init+0x2e8>)
 8002280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002282:	4a56      	ldr	r2, [pc, #344]	; (80023dc <HAL_GPIO_Init+0x2e8>)
 8002284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002288:	6453      	str	r3, [r2, #68]	; 0x44
 800228a:	4b54      	ldr	r3, [pc, #336]	; (80023dc <HAL_GPIO_Init+0x2e8>)
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002296:	4a52      	ldr	r2, [pc, #328]	; (80023e0 <HAL_GPIO_Init+0x2ec>)
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	089b      	lsrs	r3, r3, #2
 800229c:	3302      	adds	r3, #2
 800229e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	220f      	movs	r2, #15
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a49      	ldr	r2, [pc, #292]	; (80023e4 <HAL_GPIO_Init+0x2f0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d019      	beq.n	80022f6 <HAL_GPIO_Init+0x202>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a48      	ldr	r2, [pc, #288]	; (80023e8 <HAL_GPIO_Init+0x2f4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d013      	beq.n	80022f2 <HAL_GPIO_Init+0x1fe>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a47      	ldr	r2, [pc, #284]	; (80023ec <HAL_GPIO_Init+0x2f8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00d      	beq.n	80022ee <HAL_GPIO_Init+0x1fa>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a46      	ldr	r2, [pc, #280]	; (80023f0 <HAL_GPIO_Init+0x2fc>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d007      	beq.n	80022ea <HAL_GPIO_Init+0x1f6>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a45      	ldr	r2, [pc, #276]	; (80023f4 <HAL_GPIO_Init+0x300>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d101      	bne.n	80022e6 <HAL_GPIO_Init+0x1f2>
 80022e2:	2304      	movs	r3, #4
 80022e4:	e008      	b.n	80022f8 <HAL_GPIO_Init+0x204>
 80022e6:	2307      	movs	r3, #7
 80022e8:	e006      	b.n	80022f8 <HAL_GPIO_Init+0x204>
 80022ea:	2303      	movs	r3, #3
 80022ec:	e004      	b.n	80022f8 <HAL_GPIO_Init+0x204>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e002      	b.n	80022f8 <HAL_GPIO_Init+0x204>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <HAL_GPIO_Init+0x204>
 80022f6:	2300      	movs	r3, #0
 80022f8:	69fa      	ldr	r2, [r7, #28]
 80022fa:	f002 0203 	and.w	r2, r2, #3
 80022fe:	0092      	lsls	r2, r2, #2
 8002300:	4093      	lsls	r3, r2
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002308:	4935      	ldr	r1, [pc, #212]	; (80023e0 <HAL_GPIO_Init+0x2ec>)
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	089b      	lsrs	r3, r3, #2
 800230e:	3302      	adds	r3, #2
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002316:	4b38      	ldr	r3, [pc, #224]	; (80023f8 <HAL_GPIO_Init+0x304>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800233a:	4a2f      	ldr	r2, [pc, #188]	; (80023f8 <HAL_GPIO_Init+0x304>)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002340:	4b2d      	ldr	r3, [pc, #180]	; (80023f8 <HAL_GPIO_Init+0x304>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002364:	4a24      	ldr	r2, [pc, #144]	; (80023f8 <HAL_GPIO_Init+0x304>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800236a:	4b23      	ldr	r3, [pc, #140]	; (80023f8 <HAL_GPIO_Init+0x304>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800238e:	4a1a      	ldr	r2, [pc, #104]	; (80023f8 <HAL_GPIO_Init+0x304>)
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002394:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <HAL_GPIO_Init+0x304>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	43db      	mvns	r3, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023b8:	4a0f      	ldr	r2, [pc, #60]	; (80023f8 <HAL_GPIO_Init+0x304>)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3301      	adds	r3, #1
 80023c2:	61fb      	str	r3, [r7, #28]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	2b0f      	cmp	r3, #15
 80023c8:	f67f aea2 	bls.w	8002110 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023cc:	bf00      	nop
 80023ce:	bf00      	nop
 80023d0:	3724      	adds	r7, #36	; 0x24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40013800 	.word	0x40013800
 80023e4:	40020000 	.word	0x40020000
 80023e8:	40020400 	.word	0x40020400
 80023ec:	40020800 	.word	0x40020800
 80023f0:	40020c00 	.word	0x40020c00
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40013c00 	.word	0x40013c00

080023fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	887b      	ldrh	r3, [r7, #2]
 800240e:	4013      	ands	r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
 8002418:	e001      	b.n	800241e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800241a:	2300      	movs	r3, #0
 800241c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800241e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	807b      	strh	r3, [r7, #2]
 8002438:	4613      	mov	r3, r2
 800243a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800243c:	787b      	ldrb	r3, [r7, #1]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002442:	887a      	ldrh	r2, [r7, #2]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002448:	e003      	b.n	8002452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800244a:	887b      	ldrh	r3, [r7, #2]
 800244c:	041a      	lsls	r2, r3, #16
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	619a      	str	r2, [r3, #24]
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800246a:	4b08      	ldr	r3, [pc, #32]	; (800248c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	4013      	ands	r3, r2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d006      	beq.n	8002484 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002476:	4a05      	ldr	r2, [pc, #20]	; (800248c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002478:	88fb      	ldrh	r3, [r7, #6]
 800247a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe fdbe 	bl	8001000 <HAL_GPIO_EXTI_Callback>
  }
}
 8002484:	bf00      	nop
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40013c00 	.word	0x40013c00

08002490 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e267      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d075      	beq.n	800259a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024ae:	4b88      	ldr	r3, [pc, #544]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d00c      	beq.n	80024d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ba:	4b85      	ldr	r3, [pc, #532]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d112      	bne.n	80024ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024c6:	4b82      	ldr	r3, [pc, #520]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024d2:	d10b      	bne.n	80024ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d4:	4b7e      	ldr	r3, [pc, #504]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d05b      	beq.n	8002598 <HAL_RCC_OscConfig+0x108>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d157      	bne.n	8002598 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e242      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f4:	d106      	bne.n	8002504 <HAL_RCC_OscConfig+0x74>
 80024f6:	4b76      	ldr	r3, [pc, #472]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a75      	ldr	r2, [pc, #468]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 80024fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	e01d      	b.n	8002540 <HAL_RCC_OscConfig+0xb0>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800250c:	d10c      	bne.n	8002528 <HAL_RCC_OscConfig+0x98>
 800250e:	4b70      	ldr	r3, [pc, #448]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a6f      	ldr	r2, [pc, #444]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	4b6d      	ldr	r3, [pc, #436]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a6c      	ldr	r2, [pc, #432]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	e00b      	b.n	8002540 <HAL_RCC_OscConfig+0xb0>
 8002528:	4b69      	ldr	r3, [pc, #420]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a68      	ldr	r2, [pc, #416]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 800252e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	4b66      	ldr	r3, [pc, #408]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a65      	ldr	r2, [pc, #404]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 800253a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800253e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d013      	beq.n	8002570 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7ff fcb6 	bl	8001eb8 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002550:	f7ff fcb2 	bl	8001eb8 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b64      	cmp	r3, #100	; 0x64
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e207      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	4b5b      	ldr	r3, [pc, #364]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f0      	beq.n	8002550 <HAL_RCC_OscConfig+0xc0>
 800256e:	e014      	b.n	800259a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7ff fca2 	bl	8001eb8 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002578:	f7ff fc9e 	bl	8001eb8 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b64      	cmp	r3, #100	; 0x64
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e1f3      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258a:	4b51      	ldr	r3, [pc, #324]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0xe8>
 8002596:	e000      	b.n	800259a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d063      	beq.n	800266e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025a6:	4b4a      	ldr	r3, [pc, #296]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00b      	beq.n	80025ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b2:	4b47      	ldr	r3, [pc, #284]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d11c      	bne.n	80025f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025be:	4b44      	ldr	r3, [pc, #272]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d116      	bne.n	80025f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ca:	4b41      	ldr	r3, [pc, #260]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <HAL_RCC_OscConfig+0x152>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d001      	beq.n	80025e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e1c7      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e2:	4b3b      	ldr	r3, [pc, #236]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4937      	ldr	r1, [pc, #220]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f6:	e03a      	b.n	800266e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d020      	beq.n	8002642 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002600:	4b34      	ldr	r3, [pc, #208]	; (80026d4 <HAL_RCC_OscConfig+0x244>)
 8002602:	2201      	movs	r2, #1
 8002604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002606:	f7ff fc57 	bl	8001eb8 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800260e:	f7ff fc53 	bl	8001eb8 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e1a8      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002620:	4b2b      	ldr	r3, [pc, #172]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262c:	4b28      	ldr	r3, [pc, #160]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	4925      	ldr	r1, [pc, #148]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 800263c:	4313      	orrs	r3, r2
 800263e:	600b      	str	r3, [r1, #0]
 8002640:	e015      	b.n	800266e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002642:	4b24      	ldr	r3, [pc, #144]	; (80026d4 <HAL_RCC_OscConfig+0x244>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002648:	f7ff fc36 	bl	8001eb8 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002650:	f7ff fc32 	bl	8001eb8 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e187      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002662:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d036      	beq.n	80026e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d016      	beq.n	80026b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <HAL_RCC_OscConfig+0x248>)
 8002684:	2201      	movs	r2, #1
 8002686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002688:	f7ff fc16 	bl	8001eb8 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002690:	f7ff fc12 	bl	8001eb8 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e167      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a2:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 80026a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0x200>
 80026ae:	e01b      	b.n	80026e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b0:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <HAL_RCC_OscConfig+0x248>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b6:	f7ff fbff 	bl	8001eb8 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026bc:	e00e      	b.n	80026dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026be:	f7ff fbfb 	bl	8001eb8 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d907      	bls.n	80026dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e150      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
 80026d0:	40023800 	.word	0x40023800
 80026d4:	42470000 	.word	0x42470000
 80026d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026dc:	4b88      	ldr	r3, [pc, #544]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 80026de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1ea      	bne.n	80026be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 8097 	beq.w	8002824 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026f6:	2300      	movs	r3, #0
 80026f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026fa:	4b81      	ldr	r3, [pc, #516]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10f      	bne.n	8002726 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	4b7d      	ldr	r3, [pc, #500]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	4a7c      	ldr	r2, [pc, #496]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 8002710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002714:	6413      	str	r3, [r2, #64]	; 0x40
 8002716:	4b7a      	ldr	r3, [pc, #488]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002722:	2301      	movs	r3, #1
 8002724:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002726:	4b77      	ldr	r3, [pc, #476]	; (8002904 <HAL_RCC_OscConfig+0x474>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272e:	2b00      	cmp	r3, #0
 8002730:	d118      	bne.n	8002764 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002732:	4b74      	ldr	r3, [pc, #464]	; (8002904 <HAL_RCC_OscConfig+0x474>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a73      	ldr	r2, [pc, #460]	; (8002904 <HAL_RCC_OscConfig+0x474>)
 8002738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800273e:	f7ff fbbb 	bl	8001eb8 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002746:	f7ff fbb7 	bl	8001eb8 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e10c      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002758:	4b6a      	ldr	r3, [pc, #424]	; (8002904 <HAL_RCC_OscConfig+0x474>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f0      	beq.n	8002746 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d106      	bne.n	800277a <HAL_RCC_OscConfig+0x2ea>
 800276c:	4b64      	ldr	r3, [pc, #400]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 800276e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002770:	4a63      	ldr	r2, [pc, #396]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	6713      	str	r3, [r2, #112]	; 0x70
 8002778:	e01c      	b.n	80027b4 <HAL_RCC_OscConfig+0x324>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2b05      	cmp	r3, #5
 8002780:	d10c      	bne.n	800279c <HAL_RCC_OscConfig+0x30c>
 8002782:	4b5f      	ldr	r3, [pc, #380]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002786:	4a5e      	ldr	r2, [pc, #376]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 8002788:	f043 0304 	orr.w	r3, r3, #4
 800278c:	6713      	str	r3, [r2, #112]	; 0x70
 800278e:	4b5c      	ldr	r3, [pc, #368]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002792:	4a5b      	ldr	r2, [pc, #364]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6713      	str	r3, [r2, #112]	; 0x70
 800279a:	e00b      	b.n	80027b4 <HAL_RCC_OscConfig+0x324>
 800279c:	4b58      	ldr	r3, [pc, #352]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a0:	4a57      	ldr	r2, [pc, #348]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 80027a2:	f023 0301 	bic.w	r3, r3, #1
 80027a6:	6713      	str	r3, [r2, #112]	; 0x70
 80027a8:	4b55      	ldr	r3, [pc, #340]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 80027aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ac:	4a54      	ldr	r2, [pc, #336]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 80027ae:	f023 0304 	bic.w	r3, r3, #4
 80027b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d015      	beq.n	80027e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027bc:	f7ff fb7c 	bl	8001eb8 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c2:	e00a      	b.n	80027da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c4:	f7ff fb78 	bl	8001eb8 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e0cb      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027da:	4b49      	ldr	r3, [pc, #292]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0ee      	beq.n	80027c4 <HAL_RCC_OscConfig+0x334>
 80027e6:	e014      	b.n	8002812 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e8:	f7ff fb66 	bl	8001eb8 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f0:	f7ff fb62 	bl	8001eb8 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e0b5      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002806:	4b3e      	ldr	r3, [pc, #248]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 8002808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1ee      	bne.n	80027f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002812:	7dfb      	ldrb	r3, [r7, #23]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d105      	bne.n	8002824 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002818:	4b39      	ldr	r3, [pc, #228]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	4a38      	ldr	r2, [pc, #224]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 800281e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002822:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 80a1 	beq.w	8002970 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800282e:	4b34      	ldr	r3, [pc, #208]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	2b08      	cmp	r3, #8
 8002838:	d05c      	beq.n	80028f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d141      	bne.n	80028c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002842:	4b31      	ldr	r3, [pc, #196]	; (8002908 <HAL_RCC_OscConfig+0x478>)
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7ff fb36 	bl	8001eb8 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002850:	f7ff fb32 	bl	8001eb8 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e087      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002862:	4b27      	ldr	r3, [pc, #156]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69da      	ldr	r2, [r3, #28]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	019b      	lsls	r3, r3, #6
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002884:	085b      	lsrs	r3, r3, #1
 8002886:	3b01      	subs	r3, #1
 8002888:	041b      	lsls	r3, r3, #16
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	061b      	lsls	r3, r3, #24
 8002892:	491b      	ldr	r1, [pc, #108]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 8002894:	4313      	orrs	r3, r2
 8002896:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002898:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <HAL_RCC_OscConfig+0x478>)
 800289a:	2201      	movs	r2, #1
 800289c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289e:	f7ff fb0b 	bl	8001eb8 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a6:	f7ff fb07 	bl	8001eb8 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e05c      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x416>
 80028c4:	e054      	b.n	8002970 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c6:	4b10      	ldr	r3, [pc, #64]	; (8002908 <HAL_RCC_OscConfig+0x478>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7ff faf4 	bl	8001eb8 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d4:	f7ff faf0 	bl	8001eb8 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e045      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x444>
 80028f2:	e03d      	b.n	8002970 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d107      	bne.n	800290c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e038      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
 8002900:	40023800 	.word	0x40023800
 8002904:	40007000 	.word	0x40007000
 8002908:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800290c:	4b1b      	ldr	r3, [pc, #108]	; (800297c <HAL_RCC_OscConfig+0x4ec>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d028      	beq.n	800296c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002924:	429a      	cmp	r2, r3
 8002926:	d121      	bne.n	800296c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002932:	429a      	cmp	r2, r3
 8002934:	d11a      	bne.n	800296c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800293c:	4013      	ands	r3, r2
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002942:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002944:	4293      	cmp	r3, r2
 8002946:	d111      	bne.n	800296c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	085b      	lsrs	r3, r3, #1
 8002954:	3b01      	subs	r3, #1
 8002956:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002958:	429a      	cmp	r2, r3
 800295a:	d107      	bne.n	800296c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002966:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40023800 	.word	0x40023800

08002980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0cc      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002994:	4b68      	ldr	r3, [pc, #416]	; (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d90c      	bls.n	80029bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a2:	4b65      	ldr	r3, [pc, #404]	; (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029aa:	4b63      	ldr	r3, [pc, #396]	; (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d001      	beq.n	80029bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0b8      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d020      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d4:	4b59      	ldr	r3, [pc, #356]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	4a58      	ldr	r2, [pc, #352]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029ec:	4b53      	ldr	r3, [pc, #332]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	4a52      	ldr	r2, [pc, #328]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f8:	4b50      	ldr	r3, [pc, #320]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	494d      	ldr	r1, [pc, #308]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d044      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d107      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	4b47      	ldr	r3, [pc, #284]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d119      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e07f      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d003      	beq.n	8002a3e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d107      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3e:	4b3f      	ldr	r3, [pc, #252]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d109      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e06f      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4e:	4b3b      	ldr	r3, [pc, #236]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e067      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a5e:	4b37      	ldr	r3, [pc, #220]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f023 0203 	bic.w	r2, r3, #3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	4934      	ldr	r1, [pc, #208]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a70:	f7ff fa22 	bl	8001eb8 <HAL_GetTick>
 8002a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a78:	f7ff fa1e 	bl	8001eb8 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e04f      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8e:	4b2b      	ldr	r3, [pc, #172]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 020c 	and.w	r2, r3, #12
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d1eb      	bne.n	8002a78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b25      	ldr	r3, [pc, #148]	; (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d20c      	bcs.n	8002ac8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e032      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad4:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4916      	ldr	r1, [pc, #88]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d009      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002af2:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	490e      	ldr	r1, [pc, #56]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b06:	f000 f821 	bl	8002b4c <HAL_RCC_GetSysClockFreq>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	490a      	ldr	r1, [pc, #40]	; (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 8002b18:	5ccb      	ldrb	r3, [r1, r3]
 8002b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1e:	4a09      	ldr	r2, [pc, #36]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b22:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <HAL_RCC_ClockConfig+0x1c8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff f982 	bl	8001e30 <HAL_InitTick>

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40023c00 	.word	0x40023c00
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	08008f00 	.word	0x08008f00
 8002b44:	20000000 	.word	0x20000000
 8002b48:	20000004 	.word	0x20000004

08002b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b50:	b094      	sub	sp, #80	; 0x50
 8002b52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b64:	4b79      	ldr	r3, [pc, #484]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 030c 	and.w	r3, r3, #12
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d00d      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0x40>
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	f200 80e1 	bhi.w	8002d38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d002      	beq.n	8002b80 <HAL_RCC_GetSysClockFreq+0x34>
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d003      	beq.n	8002b86 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b7e:	e0db      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b80:	4b73      	ldr	r3, [pc, #460]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b84:	e0db      	b.n	8002d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b86:	4b73      	ldr	r3, [pc, #460]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b8a:	e0d8      	b.n	8002d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b8c:	4b6f      	ldr	r3, [pc, #444]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b94:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b96:	4b6d      	ldr	r3, [pc, #436]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d063      	beq.n	8002c6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba2:	4b6a      	ldr	r3, [pc, #424]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	099b      	lsrs	r3, r3, #6
 8002ba8:	2200      	movs	r2, #0
 8002baa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb4:	633b      	str	r3, [r7, #48]	; 0x30
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8002bba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bbe:	4622      	mov	r2, r4
 8002bc0:	462b      	mov	r3, r5
 8002bc2:	f04f 0000 	mov.w	r0, #0
 8002bc6:	f04f 0100 	mov.w	r1, #0
 8002bca:	0159      	lsls	r1, r3, #5
 8002bcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bd0:	0150      	lsls	r0, r2, #5
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4621      	mov	r1, r4
 8002bd8:	1a51      	subs	r1, r2, r1
 8002bda:	6139      	str	r1, [r7, #16]
 8002bdc:	4629      	mov	r1, r5
 8002bde:	eb63 0301 	sbc.w	r3, r3, r1
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bf0:	4659      	mov	r1, fp
 8002bf2:	018b      	lsls	r3, r1, #6
 8002bf4:	4651      	mov	r1, sl
 8002bf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bfa:	4651      	mov	r1, sl
 8002bfc:	018a      	lsls	r2, r1, #6
 8002bfe:	4651      	mov	r1, sl
 8002c00:	ebb2 0801 	subs.w	r8, r2, r1
 8002c04:	4659      	mov	r1, fp
 8002c06:	eb63 0901 	sbc.w	r9, r3, r1
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c1e:	4690      	mov	r8, r2
 8002c20:	4699      	mov	r9, r3
 8002c22:	4623      	mov	r3, r4
 8002c24:	eb18 0303 	adds.w	r3, r8, r3
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	462b      	mov	r3, r5
 8002c2c:	eb49 0303 	adc.w	r3, r9, r3
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	f04f 0300 	mov.w	r3, #0
 8002c3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c3e:	4629      	mov	r1, r5
 8002c40:	024b      	lsls	r3, r1, #9
 8002c42:	4621      	mov	r1, r4
 8002c44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c48:	4621      	mov	r1, r4
 8002c4a:	024a      	lsls	r2, r1, #9
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	4619      	mov	r1, r3
 8002c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c52:	2200      	movs	r2, #0
 8002c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c5c:	f7fe f81c 	bl	8000c98 <__aeabi_uldivmod>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4613      	mov	r3, r2
 8002c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c68:	e058      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c6a:	4b38      	ldr	r3, [pc, #224]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	099b      	lsrs	r3, r3, #6
 8002c70:	2200      	movs	r2, #0
 8002c72:	4618      	mov	r0, r3
 8002c74:	4611      	mov	r1, r2
 8002c76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c7a:	623b      	str	r3, [r7, #32]
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c84:	4642      	mov	r2, r8
 8002c86:	464b      	mov	r3, r9
 8002c88:	f04f 0000 	mov.w	r0, #0
 8002c8c:	f04f 0100 	mov.w	r1, #0
 8002c90:	0159      	lsls	r1, r3, #5
 8002c92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c96:	0150      	lsls	r0, r2, #5
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4641      	mov	r1, r8
 8002c9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ca2:	4649      	mov	r1, r9
 8002ca4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cbc:	ebb2 040a 	subs.w	r4, r2, sl
 8002cc0:	eb63 050b 	sbc.w	r5, r3, fp
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	00eb      	lsls	r3, r5, #3
 8002cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cd2:	00e2      	lsls	r2, r4, #3
 8002cd4:	4614      	mov	r4, r2
 8002cd6:	461d      	mov	r5, r3
 8002cd8:	4643      	mov	r3, r8
 8002cda:	18e3      	adds	r3, r4, r3
 8002cdc:	603b      	str	r3, [r7, #0]
 8002cde:	464b      	mov	r3, r9
 8002ce0:	eb45 0303 	adc.w	r3, r5, r3
 8002ce4:	607b      	str	r3, [r7, #4]
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cf2:	4629      	mov	r1, r5
 8002cf4:	028b      	lsls	r3, r1, #10
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cfc:	4621      	mov	r1, r4
 8002cfe:	028a      	lsls	r2, r1, #10
 8002d00:	4610      	mov	r0, r2
 8002d02:	4619      	mov	r1, r3
 8002d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d06:	2200      	movs	r2, #0
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	61fa      	str	r2, [r7, #28]
 8002d0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d10:	f7fd ffc2 	bl	8000c98 <__aeabi_uldivmod>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4613      	mov	r3, r2
 8002d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	0c1b      	lsrs	r3, r3, #16
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	3301      	adds	r3, #1
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002d2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d36:	e002      	b.n	8002d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3750      	adds	r7, #80	; 0x50
 8002d44:	46bd      	mov	sp, r7
 8002d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	00f42400 	.word	0x00f42400
 8002d54:	007a1200 	.word	0x007a1200

08002d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d5c:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	20000000 	.word	0x20000000

08002d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d74:	f7ff fff0 	bl	8002d58 <HAL_RCC_GetHCLKFreq>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	0a9b      	lsrs	r3, r3, #10
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	4903      	ldr	r1, [pc, #12]	; (8002d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d86:	5ccb      	ldrb	r3, [r1, r3]
 8002d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40023800 	.word	0x40023800
 8002d94:	08008f10 	.word	0x08008f10

08002d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d9c:	f7ff ffdc 	bl	8002d58 <HAL_RCC_GetHCLKFreq>
 8002da0:	4602      	mov	r2, r0
 8002da2:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	0b5b      	lsrs	r3, r3, #13
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	4903      	ldr	r1, [pc, #12]	; (8002dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dae:	5ccb      	ldrb	r3, [r1, r3]
 8002db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	08008f10 	.word	0x08008f10

08002dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e041      	b.n	8002e56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fe fdc4 	bl	8001974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4610      	mov	r0, r2
 8002e00:	f000 fb12 	bl	8003428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d001      	beq.n	8002e78 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e03c      	b.n	8002ef2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1e      	ldr	r2, [pc, #120]	; (8002f00 <HAL_TIM_Base_Start+0xa0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d018      	beq.n	8002ebc <HAL_TIM_Base_Start+0x5c>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e92:	d013      	beq.n	8002ebc <HAL_TIM_Base_Start+0x5c>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a1a      	ldr	r2, [pc, #104]	; (8002f04 <HAL_TIM_Base_Start+0xa4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00e      	beq.n	8002ebc <HAL_TIM_Base_Start+0x5c>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a19      	ldr	r2, [pc, #100]	; (8002f08 <HAL_TIM_Base_Start+0xa8>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d009      	beq.n	8002ebc <HAL_TIM_Base_Start+0x5c>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a17      	ldr	r2, [pc, #92]	; (8002f0c <HAL_TIM_Base_Start+0xac>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d004      	beq.n	8002ebc <HAL_TIM_Base_Start+0x5c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a16      	ldr	r2, [pc, #88]	; (8002f10 <HAL_TIM_Base_Start+0xb0>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d111      	bne.n	8002ee0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2b06      	cmp	r3, #6
 8002ecc:	d010      	beq.n	8002ef0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f042 0201 	orr.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ede:	e007      	b.n	8002ef0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40010000 	.word	0x40010000
 8002f04:	40000400 	.word	0x40000400
 8002f08:	40000800 	.word	0x40000800
 8002f0c:	40000c00 	.word	0x40000c00
 8002f10:	40014000 	.word	0x40014000

08002f14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e041      	b.n	8002faa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d106      	bne.n	8002f40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7fe fd50 	bl	80019e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3304      	adds	r3, #4
 8002f50:	4619      	mov	r1, r3
 8002f52:	4610      	mov	r0, r2
 8002f54:	f000 fa68 	bl	8003428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d109      	bne.n	8002fd8 <HAL_TIM_PWM_Start+0x24>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	bf14      	ite	ne
 8002fd0:	2301      	movne	r3, #1
 8002fd2:	2300      	moveq	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	e022      	b.n	800301e <HAL_TIM_PWM_Start+0x6a>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d109      	bne.n	8002ff2 <HAL_TIM_PWM_Start+0x3e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	bf14      	ite	ne
 8002fea:	2301      	movne	r3, #1
 8002fec:	2300      	moveq	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	e015      	b.n	800301e <HAL_TIM_PWM_Start+0x6a>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d109      	bne.n	800300c <HAL_TIM_PWM_Start+0x58>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b01      	cmp	r3, #1
 8003002:	bf14      	ite	ne
 8003004:	2301      	movne	r3, #1
 8003006:	2300      	moveq	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	e008      	b.n	800301e <HAL_TIM_PWM_Start+0x6a>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b01      	cmp	r3, #1
 8003016:	bf14      	ite	ne
 8003018:	2301      	movne	r3, #1
 800301a:	2300      	moveq	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e068      	b.n	80030f8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d104      	bne.n	8003036 <HAL_TIM_PWM_Start+0x82>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003034:	e013      	b.n	800305e <HAL_TIM_PWM_Start+0xaa>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b04      	cmp	r3, #4
 800303a:	d104      	bne.n	8003046 <HAL_TIM_PWM_Start+0x92>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003044:	e00b      	b.n	800305e <HAL_TIM_PWM_Start+0xaa>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b08      	cmp	r3, #8
 800304a:	d104      	bne.n	8003056 <HAL_TIM_PWM_Start+0xa2>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003054:	e003      	b.n	800305e <HAL_TIM_PWM_Start+0xaa>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2202      	movs	r2, #2
 800305a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2201      	movs	r2, #1
 8003064:	6839      	ldr	r1, [r7, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fc90 	bl	800398c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a23      	ldr	r2, [pc, #140]	; (8003100 <HAL_TIM_PWM_Start+0x14c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d107      	bne.n	8003086 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003084:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a1d      	ldr	r2, [pc, #116]	; (8003100 <HAL_TIM_PWM_Start+0x14c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d018      	beq.n	80030c2 <HAL_TIM_PWM_Start+0x10e>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003098:	d013      	beq.n	80030c2 <HAL_TIM_PWM_Start+0x10e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a19      	ldr	r2, [pc, #100]	; (8003104 <HAL_TIM_PWM_Start+0x150>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d00e      	beq.n	80030c2 <HAL_TIM_PWM_Start+0x10e>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a17      	ldr	r2, [pc, #92]	; (8003108 <HAL_TIM_PWM_Start+0x154>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d009      	beq.n	80030c2 <HAL_TIM_PWM_Start+0x10e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a16      	ldr	r2, [pc, #88]	; (800310c <HAL_TIM_PWM_Start+0x158>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d004      	beq.n	80030c2 <HAL_TIM_PWM_Start+0x10e>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a14      	ldr	r2, [pc, #80]	; (8003110 <HAL_TIM_PWM_Start+0x15c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d111      	bne.n	80030e6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2b06      	cmp	r3, #6
 80030d2:	d010      	beq.n	80030f6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e4:	e007      	b.n	80030f6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 0201 	orr.w	r2, r2, #1
 80030f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40010000 	.word	0x40010000
 8003104:	40000400 	.word	0x40000400
 8003108:	40000800 	.word	0x40000800
 800310c:	40000c00 	.word	0x40000c00
 8003110:	40014000 	.word	0x40014000

08003114 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800312e:	2302      	movs	r3, #2
 8003130:	e0ae      	b.n	8003290 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b0c      	cmp	r3, #12
 800313e:	f200 809f 	bhi.w	8003280 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003142:	a201      	add	r2, pc, #4	; (adr r2, 8003148 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003148:	0800317d 	.word	0x0800317d
 800314c:	08003281 	.word	0x08003281
 8003150:	08003281 	.word	0x08003281
 8003154:	08003281 	.word	0x08003281
 8003158:	080031bd 	.word	0x080031bd
 800315c:	08003281 	.word	0x08003281
 8003160:	08003281 	.word	0x08003281
 8003164:	08003281 	.word	0x08003281
 8003168:	080031ff 	.word	0x080031ff
 800316c:	08003281 	.word	0x08003281
 8003170:	08003281 	.word	0x08003281
 8003174:	08003281 	.word	0x08003281
 8003178:	0800323f 	.word	0x0800323f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68b9      	ldr	r1, [r7, #8]
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f9dc 	bl	8003540 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699a      	ldr	r2, [r3, #24]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0208 	orr.w	r2, r2, #8
 8003196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0204 	bic.w	r2, r2, #4
 80031a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6999      	ldr	r1, [r3, #24]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	691a      	ldr	r2, [r3, #16]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	619a      	str	r2, [r3, #24]
      break;
 80031ba:	e064      	b.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 fa22 	bl	800360c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699a      	ldr	r2, [r3, #24]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6999      	ldr	r1, [r3, #24]
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	021a      	lsls	r2, r3, #8
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	619a      	str	r2, [r3, #24]
      break;
 80031fc:	e043      	b.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68b9      	ldr	r1, [r7, #8]
 8003204:	4618      	mov	r0, r3
 8003206:	f000 fa6d 	bl	80036e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69da      	ldr	r2, [r3, #28]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f042 0208 	orr.w	r2, r2, #8
 8003218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	69da      	ldr	r2, [r3, #28]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0204 	bic.w	r2, r2, #4
 8003228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69d9      	ldr	r1, [r3, #28]
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	61da      	str	r2, [r3, #28]
      break;
 800323c:	e023      	b.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68b9      	ldr	r1, [r7, #8]
 8003244:	4618      	mov	r0, r3
 8003246:	f000 fab7 	bl	80037b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69da      	ldr	r2, [r3, #28]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69da      	ldr	r2, [r3, #28]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	69d9      	ldr	r1, [r3, #28]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	021a      	lsls	r2, r3, #8
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	61da      	str	r2, [r3, #28]
      break;
 800327e:	e002      	b.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	75fb      	strb	r3, [r7, #23]
      break;
 8003284:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800328e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3718      	adds	r7, #24
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_TIM_ConfigClockSource+0x1c>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e0b4      	b.n	800341e <HAL_TIM_ConfigClockSource+0x186>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ec:	d03e      	beq.n	800336c <HAL_TIM_ConfigClockSource+0xd4>
 80032ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032f2:	f200 8087 	bhi.w	8003404 <HAL_TIM_ConfigClockSource+0x16c>
 80032f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032fa:	f000 8086 	beq.w	800340a <HAL_TIM_ConfigClockSource+0x172>
 80032fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003302:	d87f      	bhi.n	8003404 <HAL_TIM_ConfigClockSource+0x16c>
 8003304:	2b70      	cmp	r3, #112	; 0x70
 8003306:	d01a      	beq.n	800333e <HAL_TIM_ConfigClockSource+0xa6>
 8003308:	2b70      	cmp	r3, #112	; 0x70
 800330a:	d87b      	bhi.n	8003404 <HAL_TIM_ConfigClockSource+0x16c>
 800330c:	2b60      	cmp	r3, #96	; 0x60
 800330e:	d050      	beq.n	80033b2 <HAL_TIM_ConfigClockSource+0x11a>
 8003310:	2b60      	cmp	r3, #96	; 0x60
 8003312:	d877      	bhi.n	8003404 <HAL_TIM_ConfigClockSource+0x16c>
 8003314:	2b50      	cmp	r3, #80	; 0x50
 8003316:	d03c      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0xfa>
 8003318:	2b50      	cmp	r3, #80	; 0x50
 800331a:	d873      	bhi.n	8003404 <HAL_TIM_ConfigClockSource+0x16c>
 800331c:	2b40      	cmp	r3, #64	; 0x40
 800331e:	d058      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x13a>
 8003320:	2b40      	cmp	r3, #64	; 0x40
 8003322:	d86f      	bhi.n	8003404 <HAL_TIM_ConfigClockSource+0x16c>
 8003324:	2b30      	cmp	r3, #48	; 0x30
 8003326:	d064      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003328:	2b30      	cmp	r3, #48	; 0x30
 800332a:	d86b      	bhi.n	8003404 <HAL_TIM_ConfigClockSource+0x16c>
 800332c:	2b20      	cmp	r3, #32
 800332e:	d060      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003330:	2b20      	cmp	r3, #32
 8003332:	d867      	bhi.n	8003404 <HAL_TIM_ConfigClockSource+0x16c>
 8003334:	2b00      	cmp	r3, #0
 8003336:	d05c      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003338:	2b10      	cmp	r3, #16
 800333a:	d05a      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0x15a>
 800333c:	e062      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800334e:	f000 fafd 	bl	800394c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003360:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	609a      	str	r2, [r3, #8]
      break;
 800336a:	e04f      	b.n	800340c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800337c:	f000 fae6 	bl	800394c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800338e:	609a      	str	r2, [r3, #8]
      break;
 8003390:	e03c      	b.n	800340c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800339e:	461a      	mov	r2, r3
 80033a0:	f000 fa5a 	bl	8003858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2150      	movs	r1, #80	; 0x50
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fab3 	bl	8003916 <TIM_ITRx_SetConfig>
      break;
 80033b0:	e02c      	b.n	800340c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033be:	461a      	mov	r2, r3
 80033c0:	f000 fa79 	bl	80038b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2160      	movs	r1, #96	; 0x60
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 faa3 	bl	8003916 <TIM_ITRx_SetConfig>
      break;
 80033d0:	e01c      	b.n	800340c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033de:	461a      	mov	r2, r3
 80033e0:	f000 fa3a 	bl	8003858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2140      	movs	r1, #64	; 0x40
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 fa93 	bl	8003916 <TIM_ITRx_SetConfig>
      break;
 80033f0:	e00c      	b.n	800340c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4619      	mov	r1, r3
 80033fc:	4610      	mov	r0, r2
 80033fe:	f000 fa8a 	bl	8003916 <TIM_ITRx_SetConfig>
      break;
 8003402:	e003      	b.n	800340c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
      break;
 8003408:	e000      	b.n	800340c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800340a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800341c:	7bfb      	ldrb	r3, [r7, #15]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a3a      	ldr	r2, [pc, #232]	; (8003524 <TIM_Base_SetConfig+0xfc>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d00f      	beq.n	8003460 <TIM_Base_SetConfig+0x38>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003446:	d00b      	beq.n	8003460 <TIM_Base_SetConfig+0x38>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a37      	ldr	r2, [pc, #220]	; (8003528 <TIM_Base_SetConfig+0x100>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d007      	beq.n	8003460 <TIM_Base_SetConfig+0x38>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a36      	ldr	r2, [pc, #216]	; (800352c <TIM_Base_SetConfig+0x104>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d003      	beq.n	8003460 <TIM_Base_SetConfig+0x38>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a35      	ldr	r2, [pc, #212]	; (8003530 <TIM_Base_SetConfig+0x108>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d108      	bne.n	8003472 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a2b      	ldr	r2, [pc, #172]	; (8003524 <TIM_Base_SetConfig+0xfc>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d01b      	beq.n	80034b2 <TIM_Base_SetConfig+0x8a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003480:	d017      	beq.n	80034b2 <TIM_Base_SetConfig+0x8a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a28      	ldr	r2, [pc, #160]	; (8003528 <TIM_Base_SetConfig+0x100>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d013      	beq.n	80034b2 <TIM_Base_SetConfig+0x8a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a27      	ldr	r2, [pc, #156]	; (800352c <TIM_Base_SetConfig+0x104>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00f      	beq.n	80034b2 <TIM_Base_SetConfig+0x8a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a26      	ldr	r2, [pc, #152]	; (8003530 <TIM_Base_SetConfig+0x108>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00b      	beq.n	80034b2 <TIM_Base_SetConfig+0x8a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a25      	ldr	r2, [pc, #148]	; (8003534 <TIM_Base_SetConfig+0x10c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d007      	beq.n	80034b2 <TIM_Base_SetConfig+0x8a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a24      	ldr	r2, [pc, #144]	; (8003538 <TIM_Base_SetConfig+0x110>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d003      	beq.n	80034b2 <TIM_Base_SetConfig+0x8a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a23      	ldr	r2, [pc, #140]	; (800353c <TIM_Base_SetConfig+0x114>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d108      	bne.n	80034c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a0e      	ldr	r2, [pc, #56]	; (8003524 <TIM_Base_SetConfig+0xfc>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d103      	bne.n	80034f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b01      	cmp	r3, #1
 8003508:	d105      	bne.n	8003516 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f023 0201 	bic.w	r2, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	611a      	str	r2, [r3, #16]
  }
}
 8003516:	bf00      	nop
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40010000 	.word	0x40010000
 8003528:	40000400 	.word	0x40000400
 800352c:	40000800 	.word	0x40000800
 8003530:	40000c00 	.word	0x40000c00
 8003534:	40014000 	.word	0x40014000
 8003538:	40014400 	.word	0x40014400
 800353c:	40014800 	.word	0x40014800

08003540 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	f023 0201 	bic.w	r2, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0303 	bic.w	r3, r3, #3
 8003576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f023 0302 	bic.w	r3, r3, #2
 8003588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a1c      	ldr	r2, [pc, #112]	; (8003608 <TIM_OC1_SetConfig+0xc8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d10c      	bne.n	80035b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f023 0308 	bic.w	r3, r3, #8
 80035a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f023 0304 	bic.w	r3, r3, #4
 80035b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a13      	ldr	r2, [pc, #76]	; (8003608 <TIM_OC1_SetConfig+0xc8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d111      	bne.n	80035e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	621a      	str	r2, [r3, #32]
}
 80035fc:	bf00      	nop
 80035fe:	371c      	adds	r7, #28
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	40010000 	.word	0x40010000

0800360c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	f023 0210 	bic.w	r2, r3, #16
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800363a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	021b      	lsls	r3, r3, #8
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4313      	orrs	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f023 0320 	bic.w	r3, r3, #32
 8003656:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a1e      	ldr	r2, [pc, #120]	; (80036e0 <TIM_OC2_SetConfig+0xd4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d10d      	bne.n	8003688 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003686:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a15      	ldr	r2, [pc, #84]	; (80036e0 <TIM_OC2_SetConfig+0xd4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d113      	bne.n	80036b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003696:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800369e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	621a      	str	r2, [r3, #32]
}
 80036d2:	bf00      	nop
 80036d4:	371c      	adds	r7, #28
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40010000 	.word	0x40010000

080036e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0303 	bic.w	r3, r3, #3
 800371a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800372c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	021b      	lsls	r3, r3, #8
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a1d      	ldr	r2, [pc, #116]	; (80037b4 <TIM_OC3_SetConfig+0xd0>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d10d      	bne.n	800375e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003748:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	021b      	lsls	r3, r3, #8
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	4313      	orrs	r3, r2
 8003754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800375c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a14      	ldr	r2, [pc, #80]	; (80037b4 <TIM_OC3_SetConfig+0xd0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d113      	bne.n	800378e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800376c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	4313      	orrs	r3, r2
 800378c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	621a      	str	r2, [r3, #32]
}
 80037a8:	bf00      	nop
 80037aa:	371c      	adds	r7, #28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	40010000 	.word	0x40010000

080037b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	021b      	lsls	r3, r3, #8
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003802:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	031b      	lsls	r3, r3, #12
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a10      	ldr	r2, [pc, #64]	; (8003854 <TIM_OC4_SetConfig+0x9c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d109      	bne.n	800382c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800381e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	019b      	lsls	r3, r3, #6
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	621a      	str	r2, [r3, #32]
}
 8003846:	bf00      	nop
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40010000 	.word	0x40010000

08003858 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	f023 0201 	bic.w	r2, r3, #1
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	4313      	orrs	r3, r2
 800388c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f023 030a 	bic.w	r3, r3, #10
 8003894:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	4313      	orrs	r3, r2
 800389c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	621a      	str	r2, [r3, #32]
}
 80038aa:	bf00      	nop
 80038ac:	371c      	adds	r7, #28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b087      	sub	sp, #28
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	60f8      	str	r0, [r7, #12]
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	f023 0210 	bic.w	r2, r3, #16
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	031b      	lsls	r3, r3, #12
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	621a      	str	r2, [r3, #32]
}
 800390a:	bf00      	nop
 800390c:	371c      	adds	r7, #28
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003916:	b480      	push	{r7}
 8003918:	b085      	sub	sp, #20
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	f043 0307 	orr.w	r3, r3, #7
 8003938:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	609a      	str	r2, [r3, #8]
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
 8003958:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003966:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	021a      	lsls	r2, r3, #8
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	431a      	orrs	r2, r3
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4313      	orrs	r3, r2
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	4313      	orrs	r3, r2
 8003978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	609a      	str	r2, [r3, #8]
}
 8003980:	bf00      	nop
 8003982:	371c      	adds	r7, #28
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800398c:	b480      	push	{r7}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f003 031f 	and.w	r3, r3, #31
 800399e:	2201      	movs	r2, #1
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a1a      	ldr	r2, [r3, #32]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	43db      	mvns	r3, r3
 80039ae:	401a      	ands	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6a1a      	ldr	r2, [r3, #32]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f003 031f 	and.w	r3, r3, #31
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	fa01 f303 	lsl.w	r3, r1, r3
 80039c4:	431a      	orrs	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	621a      	str	r2, [r3, #32]
}
 80039ca:	bf00      	nop
 80039cc:	371c      	adds	r7, #28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
	...

080039d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039ec:	2302      	movs	r3, #2
 80039ee:	e050      	b.n	8003a92 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1c      	ldr	r2, [pc, #112]	; (8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d018      	beq.n	8003a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3c:	d013      	beq.n	8003a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a18      	ldr	r2, [pc, #96]	; (8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00e      	beq.n	8003a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a16      	ldr	r2, [pc, #88]	; (8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d009      	beq.n	8003a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a15      	ldr	r2, [pc, #84]	; (8003aac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d004      	beq.n	8003a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a13      	ldr	r2, [pc, #76]	; (8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d10c      	bne.n	8003a80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40010000 	.word	0x40010000
 8003aa4:	40000400 	.word	0x40000400
 8003aa8:	40000800 	.word	0x40000800
 8003aac:	40000c00 	.word	0x40000c00
 8003ab0:	40014000 	.word	0x40014000

08003ab4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e03d      	b.n	8003b4c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e042      	b.n	8003bf0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d106      	bne.n	8003b84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fd ffb0 	bl	8001ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2224      	movs	r2, #36	; 0x24
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 fa09 	bl	8003fb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	691a      	ldr	r2, [r3, #16]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695a      	ldr	r2, [r3, #20]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08a      	sub	sp, #40	; 0x28
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	4613      	mov	r3, r2
 8003c06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b20      	cmp	r3, #32
 8003c16:	d175      	bne.n	8003d04 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <HAL_UART_Transmit+0x2c>
 8003c1e:	88fb      	ldrh	r3, [r7, #6]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e06e      	b.n	8003d06 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2221      	movs	r2, #33	; 0x21
 8003c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c36:	f7fe f93f 	bl	8001eb8 <HAL_GetTick>
 8003c3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	88fa      	ldrh	r2, [r7, #6]
 8003c40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	88fa      	ldrh	r2, [r7, #6]
 8003c46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c50:	d108      	bne.n	8003c64 <HAL_UART_Transmit+0x6c>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d104      	bne.n	8003c64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	e003      	b.n	8003c6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c6c:	e02e      	b.n	8003ccc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2200      	movs	r2, #0
 8003c76:	2180      	movs	r1, #128	; 0x80
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 f8df 	bl	8003e3c <UART_WaitOnFlagUntilTimeout>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e03a      	b.n	8003d06 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10b      	bne.n	8003cae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ca4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	3302      	adds	r3, #2
 8003caa:	61bb      	str	r3, [r7, #24]
 8003cac:	e007      	b.n	8003cbe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	781a      	ldrb	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1cb      	bne.n	8003c6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2140      	movs	r1, #64	; 0x40
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 f8ab 	bl	8003e3c <UART_WaitOnFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e006      	b.n	8003d06 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003d00:	2300      	movs	r3, #0
 8003d02:	e000      	b.n	8003d06 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d04:	2302      	movs	r3, #2
  }
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3720      	adds	r7, #32
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b08a      	sub	sp, #40	; 0x28
 8003d12:	af02      	add	r7, sp, #8
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	603b      	str	r3, [r7, #0]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b20      	cmp	r3, #32
 8003d2c:	f040 8081 	bne.w	8003e32 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <HAL_UART_Receive+0x2e>
 8003d36:	88fb      	ldrh	r3, [r7, #6]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e079      	b.n	8003e34 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2222      	movs	r2, #34	; 0x22
 8003d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d54:	f7fe f8b0 	bl	8001eb8 <HAL_GetTick>
 8003d58:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	88fa      	ldrh	r2, [r7, #6]
 8003d5e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	88fa      	ldrh	r2, [r7, #6]
 8003d64:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6e:	d108      	bne.n	8003d82 <HAL_UART_Receive+0x74>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d104      	bne.n	8003d82 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	61bb      	str	r3, [r7, #24]
 8003d80:	e003      	b.n	8003d8a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003d8a:	e047      	b.n	8003e1c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2200      	movs	r2, #0
 8003d94:	2120      	movs	r1, #32
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 f850 	bl	8003e3c <UART_WaitOnFlagUntilTimeout>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d005      	beq.n	8003dae <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e042      	b.n	8003e34 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10c      	bne.n	8003dce <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	3302      	adds	r3, #2
 8003dca:	61bb      	str	r3, [r7, #24]
 8003dcc:	e01f      	b.n	8003e0e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd6:	d007      	beq.n	8003de8 <HAL_UART_Receive+0xda>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10a      	bne.n	8003df6 <HAL_UART_Receive+0xe8>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d106      	bne.n	8003df6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	701a      	strb	r2, [r3, #0]
 8003df4:	e008      	b.n	8003e08 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1b2      	bne.n	8003d8c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	e000      	b.n	8003e34 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003e32:	2302      	movs	r3, #2
  }
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3720      	adds	r7, #32
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e4c:	e03b      	b.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e54:	d037      	beq.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e56:	f7fe f82f 	bl	8001eb8 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	6a3a      	ldr	r2, [r7, #32]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d302      	bcc.n	8003e6c <UART_WaitOnFlagUntilTimeout+0x30>
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e03a      	b.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d023      	beq.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b80      	cmp	r3, #128	; 0x80
 8003e82:	d020      	beq.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b40      	cmp	r3, #64	; 0x40
 8003e88:	d01d      	beq.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d116      	bne.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 f81d 	bl	8003eee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2208      	movs	r2, #8
 8003eb8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e00f      	b.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	bf0c      	ite	eq
 8003ed6:	2301      	moveq	r3, #1
 8003ed8:	2300      	movne	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	461a      	mov	r2, r3
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d0b4      	beq.n	8003e4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b095      	sub	sp, #84	; 0x54
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	330c      	adds	r3, #12
 8003efc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	330c      	adds	r3, #12
 8003f14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f16:	643a      	str	r2, [r7, #64]	; 0x40
 8003f18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e5      	bne.n	8003ef6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3314      	adds	r3, #20
 8003f30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	f023 0301 	bic.w	r3, r3, #1
 8003f40:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3314      	adds	r3, #20
 8003f48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e5      	bne.n	8003f2a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d119      	bne.n	8003f9a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	330c      	adds	r3, #12
 8003f6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	e853 3f00 	ldrex	r3, [r3]
 8003f74:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f023 0310 	bic.w	r3, r3, #16
 8003f7c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	330c      	adds	r3, #12
 8003f84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f86:	61ba      	str	r2, [r7, #24]
 8003f88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8a:	6979      	ldr	r1, [r7, #20]
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	e841 2300 	strex	r3, r2, [r1]
 8003f92:	613b      	str	r3, [r7, #16]
   return(result);
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1e5      	bne.n	8003f66 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003fa8:	bf00      	nop
 8003faa:	3754      	adds	r7, #84	; 0x54
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fb8:	b0c0      	sub	sp, #256	; 0x100
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd0:	68d9      	ldr	r1, [r3, #12]
 8003fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	ea40 0301 	orr.w	r3, r0, r1
 8003fdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	431a      	orrs	r2, r3
 8003fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800400c:	f021 010c 	bic.w	r1, r1, #12
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800401a:	430b      	orrs	r3, r1
 800401c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800401e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800402a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402e:	6999      	ldr	r1, [r3, #24]
 8004030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	ea40 0301 	orr.w	r3, r0, r1
 800403a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	4b8f      	ldr	r3, [pc, #572]	; (8004280 <UART_SetConfig+0x2cc>)
 8004044:	429a      	cmp	r2, r3
 8004046:	d005      	beq.n	8004054 <UART_SetConfig+0xa0>
 8004048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	4b8d      	ldr	r3, [pc, #564]	; (8004284 <UART_SetConfig+0x2d0>)
 8004050:	429a      	cmp	r2, r3
 8004052:	d104      	bne.n	800405e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004054:	f7fe fea0 	bl	8002d98 <HAL_RCC_GetPCLK2Freq>
 8004058:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800405c:	e003      	b.n	8004066 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800405e:	f7fe fe87 	bl	8002d70 <HAL_RCC_GetPCLK1Freq>
 8004062:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004070:	f040 810c 	bne.w	800428c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004074:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004078:	2200      	movs	r2, #0
 800407a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800407e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004082:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004086:	4622      	mov	r2, r4
 8004088:	462b      	mov	r3, r5
 800408a:	1891      	adds	r1, r2, r2
 800408c:	65b9      	str	r1, [r7, #88]	; 0x58
 800408e:	415b      	adcs	r3, r3
 8004090:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004092:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004096:	4621      	mov	r1, r4
 8004098:	eb12 0801 	adds.w	r8, r2, r1
 800409c:	4629      	mov	r1, r5
 800409e:	eb43 0901 	adc.w	r9, r3, r1
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040b6:	4690      	mov	r8, r2
 80040b8:	4699      	mov	r9, r3
 80040ba:	4623      	mov	r3, r4
 80040bc:	eb18 0303 	adds.w	r3, r8, r3
 80040c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040c4:	462b      	mov	r3, r5
 80040c6:	eb49 0303 	adc.w	r3, r9, r3
 80040ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040e2:	460b      	mov	r3, r1
 80040e4:	18db      	adds	r3, r3, r3
 80040e6:	653b      	str	r3, [r7, #80]	; 0x50
 80040e8:	4613      	mov	r3, r2
 80040ea:	eb42 0303 	adc.w	r3, r2, r3
 80040ee:	657b      	str	r3, [r7, #84]	; 0x54
 80040f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040f8:	f7fc fdce 	bl	8000c98 <__aeabi_uldivmod>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4b61      	ldr	r3, [pc, #388]	; (8004288 <UART_SetConfig+0x2d4>)
 8004102:	fba3 2302 	umull	r2, r3, r3, r2
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	011c      	lsls	r4, r3, #4
 800410a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800410e:	2200      	movs	r2, #0
 8004110:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004114:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004118:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800411c:	4642      	mov	r2, r8
 800411e:	464b      	mov	r3, r9
 8004120:	1891      	adds	r1, r2, r2
 8004122:	64b9      	str	r1, [r7, #72]	; 0x48
 8004124:	415b      	adcs	r3, r3
 8004126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004128:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800412c:	4641      	mov	r1, r8
 800412e:	eb12 0a01 	adds.w	sl, r2, r1
 8004132:	4649      	mov	r1, r9
 8004134:	eb43 0b01 	adc.w	fp, r3, r1
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004144:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004148:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800414c:	4692      	mov	sl, r2
 800414e:	469b      	mov	fp, r3
 8004150:	4643      	mov	r3, r8
 8004152:	eb1a 0303 	adds.w	r3, sl, r3
 8004156:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800415a:	464b      	mov	r3, r9
 800415c:	eb4b 0303 	adc.w	r3, fp, r3
 8004160:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004170:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004174:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004178:	460b      	mov	r3, r1
 800417a:	18db      	adds	r3, r3, r3
 800417c:	643b      	str	r3, [r7, #64]	; 0x40
 800417e:	4613      	mov	r3, r2
 8004180:	eb42 0303 	adc.w	r3, r2, r3
 8004184:	647b      	str	r3, [r7, #68]	; 0x44
 8004186:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800418a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800418e:	f7fc fd83 	bl	8000c98 <__aeabi_uldivmod>
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	4611      	mov	r1, r2
 8004198:	4b3b      	ldr	r3, [pc, #236]	; (8004288 <UART_SetConfig+0x2d4>)
 800419a:	fba3 2301 	umull	r2, r3, r3, r1
 800419e:	095b      	lsrs	r3, r3, #5
 80041a0:	2264      	movs	r2, #100	; 0x64
 80041a2:	fb02 f303 	mul.w	r3, r2, r3
 80041a6:	1acb      	subs	r3, r1, r3
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041ae:	4b36      	ldr	r3, [pc, #216]	; (8004288 <UART_SetConfig+0x2d4>)
 80041b0:	fba3 2302 	umull	r2, r3, r3, r2
 80041b4:	095b      	lsrs	r3, r3, #5
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041bc:	441c      	add	r4, r3
 80041be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80041cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80041d0:	4642      	mov	r2, r8
 80041d2:	464b      	mov	r3, r9
 80041d4:	1891      	adds	r1, r2, r2
 80041d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80041d8:	415b      	adcs	r3, r3
 80041da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041e0:	4641      	mov	r1, r8
 80041e2:	1851      	adds	r1, r2, r1
 80041e4:	6339      	str	r1, [r7, #48]	; 0x30
 80041e6:	4649      	mov	r1, r9
 80041e8:	414b      	adcs	r3, r1
 80041ea:	637b      	str	r3, [r7, #52]	; 0x34
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80041f8:	4659      	mov	r1, fp
 80041fa:	00cb      	lsls	r3, r1, #3
 80041fc:	4651      	mov	r1, sl
 80041fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004202:	4651      	mov	r1, sl
 8004204:	00ca      	lsls	r2, r1, #3
 8004206:	4610      	mov	r0, r2
 8004208:	4619      	mov	r1, r3
 800420a:	4603      	mov	r3, r0
 800420c:	4642      	mov	r2, r8
 800420e:	189b      	adds	r3, r3, r2
 8004210:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004214:	464b      	mov	r3, r9
 8004216:	460a      	mov	r2, r1
 8004218:	eb42 0303 	adc.w	r3, r2, r3
 800421c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800422c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004230:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004234:	460b      	mov	r3, r1
 8004236:	18db      	adds	r3, r3, r3
 8004238:	62bb      	str	r3, [r7, #40]	; 0x28
 800423a:	4613      	mov	r3, r2
 800423c:	eb42 0303 	adc.w	r3, r2, r3
 8004240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004242:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004246:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800424a:	f7fc fd25 	bl	8000c98 <__aeabi_uldivmod>
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <UART_SetConfig+0x2d4>)
 8004254:	fba3 1302 	umull	r1, r3, r3, r2
 8004258:	095b      	lsrs	r3, r3, #5
 800425a:	2164      	movs	r1, #100	; 0x64
 800425c:	fb01 f303 	mul.w	r3, r1, r3
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	3332      	adds	r3, #50	; 0x32
 8004266:	4a08      	ldr	r2, [pc, #32]	; (8004288 <UART_SetConfig+0x2d4>)
 8004268:	fba2 2303 	umull	r2, r3, r2, r3
 800426c:	095b      	lsrs	r3, r3, #5
 800426e:	f003 0207 	and.w	r2, r3, #7
 8004272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4422      	add	r2, r4
 800427a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800427c:	e106      	b.n	800448c <UART_SetConfig+0x4d8>
 800427e:	bf00      	nop
 8004280:	40011000 	.word	0x40011000
 8004284:	40011400 	.word	0x40011400
 8004288:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800428c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004290:	2200      	movs	r2, #0
 8004292:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004296:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800429a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800429e:	4642      	mov	r2, r8
 80042a0:	464b      	mov	r3, r9
 80042a2:	1891      	adds	r1, r2, r2
 80042a4:	6239      	str	r1, [r7, #32]
 80042a6:	415b      	adcs	r3, r3
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
 80042aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042ae:	4641      	mov	r1, r8
 80042b0:	1854      	adds	r4, r2, r1
 80042b2:	4649      	mov	r1, r9
 80042b4:	eb43 0501 	adc.w	r5, r3, r1
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	00eb      	lsls	r3, r5, #3
 80042c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042c6:	00e2      	lsls	r2, r4, #3
 80042c8:	4614      	mov	r4, r2
 80042ca:	461d      	mov	r5, r3
 80042cc:	4643      	mov	r3, r8
 80042ce:	18e3      	adds	r3, r4, r3
 80042d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042d4:	464b      	mov	r3, r9
 80042d6:	eb45 0303 	adc.w	r3, r5, r3
 80042da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042fa:	4629      	mov	r1, r5
 80042fc:	008b      	lsls	r3, r1, #2
 80042fe:	4621      	mov	r1, r4
 8004300:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004304:	4621      	mov	r1, r4
 8004306:	008a      	lsls	r2, r1, #2
 8004308:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800430c:	f7fc fcc4 	bl	8000c98 <__aeabi_uldivmod>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4b60      	ldr	r3, [pc, #384]	; (8004498 <UART_SetConfig+0x4e4>)
 8004316:	fba3 2302 	umull	r2, r3, r3, r2
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	011c      	lsls	r4, r3, #4
 800431e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004322:	2200      	movs	r2, #0
 8004324:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004328:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800432c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004330:	4642      	mov	r2, r8
 8004332:	464b      	mov	r3, r9
 8004334:	1891      	adds	r1, r2, r2
 8004336:	61b9      	str	r1, [r7, #24]
 8004338:	415b      	adcs	r3, r3
 800433a:	61fb      	str	r3, [r7, #28]
 800433c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004340:	4641      	mov	r1, r8
 8004342:	1851      	adds	r1, r2, r1
 8004344:	6139      	str	r1, [r7, #16]
 8004346:	4649      	mov	r1, r9
 8004348:	414b      	adcs	r3, r1
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004358:	4659      	mov	r1, fp
 800435a:	00cb      	lsls	r3, r1, #3
 800435c:	4651      	mov	r1, sl
 800435e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004362:	4651      	mov	r1, sl
 8004364:	00ca      	lsls	r2, r1, #3
 8004366:	4610      	mov	r0, r2
 8004368:	4619      	mov	r1, r3
 800436a:	4603      	mov	r3, r0
 800436c:	4642      	mov	r2, r8
 800436e:	189b      	adds	r3, r3, r2
 8004370:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004374:	464b      	mov	r3, r9
 8004376:	460a      	mov	r2, r1
 8004378:	eb42 0303 	adc.w	r3, r2, r3
 800437c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	67bb      	str	r3, [r7, #120]	; 0x78
 800438a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004398:	4649      	mov	r1, r9
 800439a:	008b      	lsls	r3, r1, #2
 800439c:	4641      	mov	r1, r8
 800439e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043a2:	4641      	mov	r1, r8
 80043a4:	008a      	lsls	r2, r1, #2
 80043a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80043aa:	f7fc fc75 	bl	8000c98 <__aeabi_uldivmod>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	4611      	mov	r1, r2
 80043b4:	4b38      	ldr	r3, [pc, #224]	; (8004498 <UART_SetConfig+0x4e4>)
 80043b6:	fba3 2301 	umull	r2, r3, r3, r1
 80043ba:	095b      	lsrs	r3, r3, #5
 80043bc:	2264      	movs	r2, #100	; 0x64
 80043be:	fb02 f303 	mul.w	r3, r2, r3
 80043c2:	1acb      	subs	r3, r1, r3
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	3332      	adds	r3, #50	; 0x32
 80043c8:	4a33      	ldr	r2, [pc, #204]	; (8004498 <UART_SetConfig+0x4e4>)
 80043ca:	fba2 2303 	umull	r2, r3, r2, r3
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043d4:	441c      	add	r4, r3
 80043d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043da:	2200      	movs	r2, #0
 80043dc:	673b      	str	r3, [r7, #112]	; 0x70
 80043de:	677a      	str	r2, [r7, #116]	; 0x74
 80043e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80043e4:	4642      	mov	r2, r8
 80043e6:	464b      	mov	r3, r9
 80043e8:	1891      	adds	r1, r2, r2
 80043ea:	60b9      	str	r1, [r7, #8]
 80043ec:	415b      	adcs	r3, r3
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043f4:	4641      	mov	r1, r8
 80043f6:	1851      	adds	r1, r2, r1
 80043f8:	6039      	str	r1, [r7, #0]
 80043fa:	4649      	mov	r1, r9
 80043fc:	414b      	adcs	r3, r1
 80043fe:	607b      	str	r3, [r7, #4]
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800440c:	4659      	mov	r1, fp
 800440e:	00cb      	lsls	r3, r1, #3
 8004410:	4651      	mov	r1, sl
 8004412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004416:	4651      	mov	r1, sl
 8004418:	00ca      	lsls	r2, r1, #3
 800441a:	4610      	mov	r0, r2
 800441c:	4619      	mov	r1, r3
 800441e:	4603      	mov	r3, r0
 8004420:	4642      	mov	r2, r8
 8004422:	189b      	adds	r3, r3, r2
 8004424:	66bb      	str	r3, [r7, #104]	; 0x68
 8004426:	464b      	mov	r3, r9
 8004428:	460a      	mov	r2, r1
 800442a:	eb42 0303 	adc.w	r3, r2, r3
 800442e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	663b      	str	r3, [r7, #96]	; 0x60
 800443a:	667a      	str	r2, [r7, #100]	; 0x64
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004448:	4649      	mov	r1, r9
 800444a:	008b      	lsls	r3, r1, #2
 800444c:	4641      	mov	r1, r8
 800444e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004452:	4641      	mov	r1, r8
 8004454:	008a      	lsls	r2, r1, #2
 8004456:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800445a:	f7fc fc1d 	bl	8000c98 <__aeabi_uldivmod>
 800445e:	4602      	mov	r2, r0
 8004460:	460b      	mov	r3, r1
 8004462:	4b0d      	ldr	r3, [pc, #52]	; (8004498 <UART_SetConfig+0x4e4>)
 8004464:	fba3 1302 	umull	r1, r3, r3, r2
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	2164      	movs	r1, #100	; 0x64
 800446c:	fb01 f303 	mul.w	r3, r1, r3
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	3332      	adds	r3, #50	; 0x32
 8004476:	4a08      	ldr	r2, [pc, #32]	; (8004498 <UART_SetConfig+0x4e4>)
 8004478:	fba2 2303 	umull	r2, r3, r2, r3
 800447c:	095b      	lsrs	r3, r3, #5
 800447e:	f003 020f 	and.w	r2, r3, #15
 8004482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4422      	add	r2, r4
 800448a:	609a      	str	r2, [r3, #8]
}
 800448c:	bf00      	nop
 800448e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004492:	46bd      	mov	sp, r7
 8004494:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004498:	51eb851f 	.word	0x51eb851f

0800449c <__cvt>:
 800449c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044a0:	ec55 4b10 	vmov	r4, r5, d0
 80044a4:	2d00      	cmp	r5, #0
 80044a6:	460e      	mov	r6, r1
 80044a8:	4619      	mov	r1, r3
 80044aa:	462b      	mov	r3, r5
 80044ac:	bfbb      	ittet	lt
 80044ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80044b2:	461d      	movlt	r5, r3
 80044b4:	2300      	movge	r3, #0
 80044b6:	232d      	movlt	r3, #45	; 0x2d
 80044b8:	700b      	strb	r3, [r1, #0]
 80044ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80044c0:	4691      	mov	r9, r2
 80044c2:	f023 0820 	bic.w	r8, r3, #32
 80044c6:	bfbc      	itt	lt
 80044c8:	4622      	movlt	r2, r4
 80044ca:	4614      	movlt	r4, r2
 80044cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80044d0:	d005      	beq.n	80044de <__cvt+0x42>
 80044d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80044d6:	d100      	bne.n	80044da <__cvt+0x3e>
 80044d8:	3601      	adds	r6, #1
 80044da:	2102      	movs	r1, #2
 80044dc:	e000      	b.n	80044e0 <__cvt+0x44>
 80044de:	2103      	movs	r1, #3
 80044e0:	ab03      	add	r3, sp, #12
 80044e2:	9301      	str	r3, [sp, #4]
 80044e4:	ab02      	add	r3, sp, #8
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	ec45 4b10 	vmov	d0, r4, r5
 80044ec:	4653      	mov	r3, sl
 80044ee:	4632      	mov	r2, r6
 80044f0:	f001 fa2e 	bl	8005950 <_dtoa_r>
 80044f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80044f8:	4607      	mov	r7, r0
 80044fa:	d102      	bne.n	8004502 <__cvt+0x66>
 80044fc:	f019 0f01 	tst.w	r9, #1
 8004500:	d022      	beq.n	8004548 <__cvt+0xac>
 8004502:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004506:	eb07 0906 	add.w	r9, r7, r6
 800450a:	d110      	bne.n	800452e <__cvt+0x92>
 800450c:	783b      	ldrb	r3, [r7, #0]
 800450e:	2b30      	cmp	r3, #48	; 0x30
 8004510:	d10a      	bne.n	8004528 <__cvt+0x8c>
 8004512:	2200      	movs	r2, #0
 8004514:	2300      	movs	r3, #0
 8004516:	4620      	mov	r0, r4
 8004518:	4629      	mov	r1, r5
 800451a:	f7fc fadd 	bl	8000ad8 <__aeabi_dcmpeq>
 800451e:	b918      	cbnz	r0, 8004528 <__cvt+0x8c>
 8004520:	f1c6 0601 	rsb	r6, r6, #1
 8004524:	f8ca 6000 	str.w	r6, [sl]
 8004528:	f8da 3000 	ldr.w	r3, [sl]
 800452c:	4499      	add	r9, r3
 800452e:	2200      	movs	r2, #0
 8004530:	2300      	movs	r3, #0
 8004532:	4620      	mov	r0, r4
 8004534:	4629      	mov	r1, r5
 8004536:	f7fc facf 	bl	8000ad8 <__aeabi_dcmpeq>
 800453a:	b108      	cbz	r0, 8004540 <__cvt+0xa4>
 800453c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004540:	2230      	movs	r2, #48	; 0x30
 8004542:	9b03      	ldr	r3, [sp, #12]
 8004544:	454b      	cmp	r3, r9
 8004546:	d307      	bcc.n	8004558 <__cvt+0xbc>
 8004548:	9b03      	ldr	r3, [sp, #12]
 800454a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800454c:	1bdb      	subs	r3, r3, r7
 800454e:	4638      	mov	r0, r7
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	b004      	add	sp, #16
 8004554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004558:	1c59      	adds	r1, r3, #1
 800455a:	9103      	str	r1, [sp, #12]
 800455c:	701a      	strb	r2, [r3, #0]
 800455e:	e7f0      	b.n	8004542 <__cvt+0xa6>

08004560 <__exponent>:
 8004560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004562:	4603      	mov	r3, r0
 8004564:	2900      	cmp	r1, #0
 8004566:	bfb8      	it	lt
 8004568:	4249      	neglt	r1, r1
 800456a:	f803 2b02 	strb.w	r2, [r3], #2
 800456e:	bfb4      	ite	lt
 8004570:	222d      	movlt	r2, #45	; 0x2d
 8004572:	222b      	movge	r2, #43	; 0x2b
 8004574:	2909      	cmp	r1, #9
 8004576:	7042      	strb	r2, [r0, #1]
 8004578:	dd2a      	ble.n	80045d0 <__exponent+0x70>
 800457a:	f10d 0207 	add.w	r2, sp, #7
 800457e:	4617      	mov	r7, r2
 8004580:	260a      	movs	r6, #10
 8004582:	4694      	mov	ip, r2
 8004584:	fb91 f5f6 	sdiv	r5, r1, r6
 8004588:	fb06 1415 	mls	r4, r6, r5, r1
 800458c:	3430      	adds	r4, #48	; 0x30
 800458e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004592:	460c      	mov	r4, r1
 8004594:	2c63      	cmp	r4, #99	; 0x63
 8004596:	f102 32ff 	add.w	r2, r2, #4294967295
 800459a:	4629      	mov	r1, r5
 800459c:	dcf1      	bgt.n	8004582 <__exponent+0x22>
 800459e:	3130      	adds	r1, #48	; 0x30
 80045a0:	f1ac 0402 	sub.w	r4, ip, #2
 80045a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80045a8:	1c41      	adds	r1, r0, #1
 80045aa:	4622      	mov	r2, r4
 80045ac:	42ba      	cmp	r2, r7
 80045ae:	d30a      	bcc.n	80045c6 <__exponent+0x66>
 80045b0:	f10d 0209 	add.w	r2, sp, #9
 80045b4:	eba2 020c 	sub.w	r2, r2, ip
 80045b8:	42bc      	cmp	r4, r7
 80045ba:	bf88      	it	hi
 80045bc:	2200      	movhi	r2, #0
 80045be:	4413      	add	r3, r2
 80045c0:	1a18      	subs	r0, r3, r0
 80045c2:	b003      	add	sp, #12
 80045c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045c6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80045ca:	f801 5f01 	strb.w	r5, [r1, #1]!
 80045ce:	e7ed      	b.n	80045ac <__exponent+0x4c>
 80045d0:	2330      	movs	r3, #48	; 0x30
 80045d2:	3130      	adds	r1, #48	; 0x30
 80045d4:	7083      	strb	r3, [r0, #2]
 80045d6:	70c1      	strb	r1, [r0, #3]
 80045d8:	1d03      	adds	r3, r0, #4
 80045da:	e7f1      	b.n	80045c0 <__exponent+0x60>

080045dc <_printf_float>:
 80045dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e0:	ed2d 8b02 	vpush	{d8}
 80045e4:	b08d      	sub	sp, #52	; 0x34
 80045e6:	460c      	mov	r4, r1
 80045e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80045ec:	4616      	mov	r6, r2
 80045ee:	461f      	mov	r7, r3
 80045f0:	4605      	mov	r5, r0
 80045f2:	f001 f8a7 	bl	8005744 <_localeconv_r>
 80045f6:	f8d0 a000 	ldr.w	sl, [r0]
 80045fa:	4650      	mov	r0, sl
 80045fc:	f7fb fe40 	bl	8000280 <strlen>
 8004600:	2300      	movs	r3, #0
 8004602:	930a      	str	r3, [sp, #40]	; 0x28
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	9305      	str	r3, [sp, #20]
 8004608:	f8d8 3000 	ldr.w	r3, [r8]
 800460c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004610:	3307      	adds	r3, #7
 8004612:	f023 0307 	bic.w	r3, r3, #7
 8004616:	f103 0208 	add.w	r2, r3, #8
 800461a:	f8c8 2000 	str.w	r2, [r8]
 800461e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004622:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004626:	9307      	str	r3, [sp, #28]
 8004628:	f8cd 8018 	str.w	r8, [sp, #24]
 800462c:	ee08 0a10 	vmov	s16, r0
 8004630:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004634:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004638:	4b9e      	ldr	r3, [pc, #632]	; (80048b4 <_printf_float+0x2d8>)
 800463a:	f04f 32ff 	mov.w	r2, #4294967295
 800463e:	f7fc fa7d 	bl	8000b3c <__aeabi_dcmpun>
 8004642:	bb88      	cbnz	r0, 80046a8 <_printf_float+0xcc>
 8004644:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004648:	4b9a      	ldr	r3, [pc, #616]	; (80048b4 <_printf_float+0x2d8>)
 800464a:	f04f 32ff 	mov.w	r2, #4294967295
 800464e:	f7fc fa57 	bl	8000b00 <__aeabi_dcmple>
 8004652:	bb48      	cbnz	r0, 80046a8 <_printf_float+0xcc>
 8004654:	2200      	movs	r2, #0
 8004656:	2300      	movs	r3, #0
 8004658:	4640      	mov	r0, r8
 800465a:	4649      	mov	r1, r9
 800465c:	f7fc fa46 	bl	8000aec <__aeabi_dcmplt>
 8004660:	b110      	cbz	r0, 8004668 <_printf_float+0x8c>
 8004662:	232d      	movs	r3, #45	; 0x2d
 8004664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004668:	4a93      	ldr	r2, [pc, #588]	; (80048b8 <_printf_float+0x2dc>)
 800466a:	4b94      	ldr	r3, [pc, #592]	; (80048bc <_printf_float+0x2e0>)
 800466c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004670:	bf94      	ite	ls
 8004672:	4690      	movls	r8, r2
 8004674:	4698      	movhi	r8, r3
 8004676:	2303      	movs	r3, #3
 8004678:	6123      	str	r3, [r4, #16]
 800467a:	9b05      	ldr	r3, [sp, #20]
 800467c:	f023 0304 	bic.w	r3, r3, #4
 8004680:	6023      	str	r3, [r4, #0]
 8004682:	f04f 0900 	mov.w	r9, #0
 8004686:	9700      	str	r7, [sp, #0]
 8004688:	4633      	mov	r3, r6
 800468a:	aa0b      	add	r2, sp, #44	; 0x2c
 800468c:	4621      	mov	r1, r4
 800468e:	4628      	mov	r0, r5
 8004690:	f000 f9da 	bl	8004a48 <_printf_common>
 8004694:	3001      	adds	r0, #1
 8004696:	f040 8090 	bne.w	80047ba <_printf_float+0x1de>
 800469a:	f04f 30ff 	mov.w	r0, #4294967295
 800469e:	b00d      	add	sp, #52	; 0x34
 80046a0:	ecbd 8b02 	vpop	{d8}
 80046a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046a8:	4642      	mov	r2, r8
 80046aa:	464b      	mov	r3, r9
 80046ac:	4640      	mov	r0, r8
 80046ae:	4649      	mov	r1, r9
 80046b0:	f7fc fa44 	bl	8000b3c <__aeabi_dcmpun>
 80046b4:	b140      	cbz	r0, 80046c8 <_printf_float+0xec>
 80046b6:	464b      	mov	r3, r9
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	bfbc      	itt	lt
 80046bc:	232d      	movlt	r3, #45	; 0x2d
 80046be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80046c2:	4a7f      	ldr	r2, [pc, #508]	; (80048c0 <_printf_float+0x2e4>)
 80046c4:	4b7f      	ldr	r3, [pc, #508]	; (80048c4 <_printf_float+0x2e8>)
 80046c6:	e7d1      	b.n	800466c <_printf_float+0x90>
 80046c8:	6863      	ldr	r3, [r4, #4]
 80046ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80046ce:	9206      	str	r2, [sp, #24]
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	d13f      	bne.n	8004754 <_printf_float+0x178>
 80046d4:	2306      	movs	r3, #6
 80046d6:	6063      	str	r3, [r4, #4]
 80046d8:	9b05      	ldr	r3, [sp, #20]
 80046da:	6861      	ldr	r1, [r4, #4]
 80046dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80046e0:	2300      	movs	r3, #0
 80046e2:	9303      	str	r3, [sp, #12]
 80046e4:	ab0a      	add	r3, sp, #40	; 0x28
 80046e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80046ea:	ab09      	add	r3, sp, #36	; 0x24
 80046ec:	ec49 8b10 	vmov	d0, r8, r9
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	6022      	str	r2, [r4, #0]
 80046f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80046f8:	4628      	mov	r0, r5
 80046fa:	f7ff fecf 	bl	800449c <__cvt>
 80046fe:	9b06      	ldr	r3, [sp, #24]
 8004700:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004702:	2b47      	cmp	r3, #71	; 0x47
 8004704:	4680      	mov	r8, r0
 8004706:	d108      	bne.n	800471a <_printf_float+0x13e>
 8004708:	1cc8      	adds	r0, r1, #3
 800470a:	db02      	blt.n	8004712 <_printf_float+0x136>
 800470c:	6863      	ldr	r3, [r4, #4]
 800470e:	4299      	cmp	r1, r3
 8004710:	dd41      	ble.n	8004796 <_printf_float+0x1ba>
 8004712:	f1ab 0302 	sub.w	r3, fp, #2
 8004716:	fa5f fb83 	uxtb.w	fp, r3
 800471a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800471e:	d820      	bhi.n	8004762 <_printf_float+0x186>
 8004720:	3901      	subs	r1, #1
 8004722:	465a      	mov	r2, fp
 8004724:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004728:	9109      	str	r1, [sp, #36]	; 0x24
 800472a:	f7ff ff19 	bl	8004560 <__exponent>
 800472e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004730:	1813      	adds	r3, r2, r0
 8004732:	2a01      	cmp	r2, #1
 8004734:	4681      	mov	r9, r0
 8004736:	6123      	str	r3, [r4, #16]
 8004738:	dc02      	bgt.n	8004740 <_printf_float+0x164>
 800473a:	6822      	ldr	r2, [r4, #0]
 800473c:	07d2      	lsls	r2, r2, #31
 800473e:	d501      	bpl.n	8004744 <_printf_float+0x168>
 8004740:	3301      	adds	r3, #1
 8004742:	6123      	str	r3, [r4, #16]
 8004744:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004748:	2b00      	cmp	r3, #0
 800474a:	d09c      	beq.n	8004686 <_printf_float+0xaa>
 800474c:	232d      	movs	r3, #45	; 0x2d
 800474e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004752:	e798      	b.n	8004686 <_printf_float+0xaa>
 8004754:	9a06      	ldr	r2, [sp, #24]
 8004756:	2a47      	cmp	r2, #71	; 0x47
 8004758:	d1be      	bne.n	80046d8 <_printf_float+0xfc>
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1bc      	bne.n	80046d8 <_printf_float+0xfc>
 800475e:	2301      	movs	r3, #1
 8004760:	e7b9      	b.n	80046d6 <_printf_float+0xfa>
 8004762:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004766:	d118      	bne.n	800479a <_printf_float+0x1be>
 8004768:	2900      	cmp	r1, #0
 800476a:	6863      	ldr	r3, [r4, #4]
 800476c:	dd0b      	ble.n	8004786 <_printf_float+0x1aa>
 800476e:	6121      	str	r1, [r4, #16]
 8004770:	b913      	cbnz	r3, 8004778 <_printf_float+0x19c>
 8004772:	6822      	ldr	r2, [r4, #0]
 8004774:	07d0      	lsls	r0, r2, #31
 8004776:	d502      	bpl.n	800477e <_printf_float+0x1a2>
 8004778:	3301      	adds	r3, #1
 800477a:	440b      	add	r3, r1
 800477c:	6123      	str	r3, [r4, #16]
 800477e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004780:	f04f 0900 	mov.w	r9, #0
 8004784:	e7de      	b.n	8004744 <_printf_float+0x168>
 8004786:	b913      	cbnz	r3, 800478e <_printf_float+0x1b2>
 8004788:	6822      	ldr	r2, [r4, #0]
 800478a:	07d2      	lsls	r2, r2, #31
 800478c:	d501      	bpl.n	8004792 <_printf_float+0x1b6>
 800478e:	3302      	adds	r3, #2
 8004790:	e7f4      	b.n	800477c <_printf_float+0x1a0>
 8004792:	2301      	movs	r3, #1
 8004794:	e7f2      	b.n	800477c <_printf_float+0x1a0>
 8004796:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800479a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800479c:	4299      	cmp	r1, r3
 800479e:	db05      	blt.n	80047ac <_printf_float+0x1d0>
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	6121      	str	r1, [r4, #16]
 80047a4:	07d8      	lsls	r0, r3, #31
 80047a6:	d5ea      	bpl.n	800477e <_printf_float+0x1a2>
 80047a8:	1c4b      	adds	r3, r1, #1
 80047aa:	e7e7      	b.n	800477c <_printf_float+0x1a0>
 80047ac:	2900      	cmp	r1, #0
 80047ae:	bfd4      	ite	le
 80047b0:	f1c1 0202 	rsble	r2, r1, #2
 80047b4:	2201      	movgt	r2, #1
 80047b6:	4413      	add	r3, r2
 80047b8:	e7e0      	b.n	800477c <_printf_float+0x1a0>
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	055a      	lsls	r2, r3, #21
 80047be:	d407      	bmi.n	80047d0 <_printf_float+0x1f4>
 80047c0:	6923      	ldr	r3, [r4, #16]
 80047c2:	4642      	mov	r2, r8
 80047c4:	4631      	mov	r1, r6
 80047c6:	4628      	mov	r0, r5
 80047c8:	47b8      	blx	r7
 80047ca:	3001      	adds	r0, #1
 80047cc:	d12c      	bne.n	8004828 <_printf_float+0x24c>
 80047ce:	e764      	b.n	800469a <_printf_float+0xbe>
 80047d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80047d4:	f240 80e0 	bls.w	8004998 <_printf_float+0x3bc>
 80047d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047dc:	2200      	movs	r2, #0
 80047de:	2300      	movs	r3, #0
 80047e0:	f7fc f97a 	bl	8000ad8 <__aeabi_dcmpeq>
 80047e4:	2800      	cmp	r0, #0
 80047e6:	d034      	beq.n	8004852 <_printf_float+0x276>
 80047e8:	4a37      	ldr	r2, [pc, #220]	; (80048c8 <_printf_float+0x2ec>)
 80047ea:	2301      	movs	r3, #1
 80047ec:	4631      	mov	r1, r6
 80047ee:	4628      	mov	r0, r5
 80047f0:	47b8      	blx	r7
 80047f2:	3001      	adds	r0, #1
 80047f4:	f43f af51 	beq.w	800469a <_printf_float+0xbe>
 80047f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047fc:	429a      	cmp	r2, r3
 80047fe:	db02      	blt.n	8004806 <_printf_float+0x22a>
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	07d8      	lsls	r0, r3, #31
 8004804:	d510      	bpl.n	8004828 <_printf_float+0x24c>
 8004806:	ee18 3a10 	vmov	r3, s16
 800480a:	4652      	mov	r2, sl
 800480c:	4631      	mov	r1, r6
 800480e:	4628      	mov	r0, r5
 8004810:	47b8      	blx	r7
 8004812:	3001      	adds	r0, #1
 8004814:	f43f af41 	beq.w	800469a <_printf_float+0xbe>
 8004818:	f04f 0800 	mov.w	r8, #0
 800481c:	f104 091a 	add.w	r9, r4, #26
 8004820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004822:	3b01      	subs	r3, #1
 8004824:	4543      	cmp	r3, r8
 8004826:	dc09      	bgt.n	800483c <_printf_float+0x260>
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	079b      	lsls	r3, r3, #30
 800482c:	f100 8107 	bmi.w	8004a3e <_printf_float+0x462>
 8004830:	68e0      	ldr	r0, [r4, #12]
 8004832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004834:	4298      	cmp	r0, r3
 8004836:	bfb8      	it	lt
 8004838:	4618      	movlt	r0, r3
 800483a:	e730      	b.n	800469e <_printf_float+0xc2>
 800483c:	2301      	movs	r3, #1
 800483e:	464a      	mov	r2, r9
 8004840:	4631      	mov	r1, r6
 8004842:	4628      	mov	r0, r5
 8004844:	47b8      	blx	r7
 8004846:	3001      	adds	r0, #1
 8004848:	f43f af27 	beq.w	800469a <_printf_float+0xbe>
 800484c:	f108 0801 	add.w	r8, r8, #1
 8004850:	e7e6      	b.n	8004820 <_printf_float+0x244>
 8004852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004854:	2b00      	cmp	r3, #0
 8004856:	dc39      	bgt.n	80048cc <_printf_float+0x2f0>
 8004858:	4a1b      	ldr	r2, [pc, #108]	; (80048c8 <_printf_float+0x2ec>)
 800485a:	2301      	movs	r3, #1
 800485c:	4631      	mov	r1, r6
 800485e:	4628      	mov	r0, r5
 8004860:	47b8      	blx	r7
 8004862:	3001      	adds	r0, #1
 8004864:	f43f af19 	beq.w	800469a <_printf_float+0xbe>
 8004868:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800486c:	4313      	orrs	r3, r2
 800486e:	d102      	bne.n	8004876 <_printf_float+0x29a>
 8004870:	6823      	ldr	r3, [r4, #0]
 8004872:	07d9      	lsls	r1, r3, #31
 8004874:	d5d8      	bpl.n	8004828 <_printf_float+0x24c>
 8004876:	ee18 3a10 	vmov	r3, s16
 800487a:	4652      	mov	r2, sl
 800487c:	4631      	mov	r1, r6
 800487e:	4628      	mov	r0, r5
 8004880:	47b8      	blx	r7
 8004882:	3001      	adds	r0, #1
 8004884:	f43f af09 	beq.w	800469a <_printf_float+0xbe>
 8004888:	f04f 0900 	mov.w	r9, #0
 800488c:	f104 0a1a 	add.w	sl, r4, #26
 8004890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004892:	425b      	negs	r3, r3
 8004894:	454b      	cmp	r3, r9
 8004896:	dc01      	bgt.n	800489c <_printf_float+0x2c0>
 8004898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800489a:	e792      	b.n	80047c2 <_printf_float+0x1e6>
 800489c:	2301      	movs	r3, #1
 800489e:	4652      	mov	r2, sl
 80048a0:	4631      	mov	r1, r6
 80048a2:	4628      	mov	r0, r5
 80048a4:	47b8      	blx	r7
 80048a6:	3001      	adds	r0, #1
 80048a8:	f43f aef7 	beq.w	800469a <_printf_float+0xbe>
 80048ac:	f109 0901 	add.w	r9, r9, #1
 80048b0:	e7ee      	b.n	8004890 <_printf_float+0x2b4>
 80048b2:	bf00      	nop
 80048b4:	7fefffff 	.word	0x7fefffff
 80048b8:	08008f18 	.word	0x08008f18
 80048bc:	08008f1c 	.word	0x08008f1c
 80048c0:	08008f20 	.word	0x08008f20
 80048c4:	08008f24 	.word	0x08008f24
 80048c8:	08008f28 	.word	0x08008f28
 80048cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048d0:	429a      	cmp	r2, r3
 80048d2:	bfa8      	it	ge
 80048d4:	461a      	movge	r2, r3
 80048d6:	2a00      	cmp	r2, #0
 80048d8:	4691      	mov	r9, r2
 80048da:	dc37      	bgt.n	800494c <_printf_float+0x370>
 80048dc:	f04f 0b00 	mov.w	fp, #0
 80048e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048e4:	f104 021a 	add.w	r2, r4, #26
 80048e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048ea:	9305      	str	r3, [sp, #20]
 80048ec:	eba3 0309 	sub.w	r3, r3, r9
 80048f0:	455b      	cmp	r3, fp
 80048f2:	dc33      	bgt.n	800495c <_printf_float+0x380>
 80048f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048f8:	429a      	cmp	r2, r3
 80048fa:	db3b      	blt.n	8004974 <_printf_float+0x398>
 80048fc:	6823      	ldr	r3, [r4, #0]
 80048fe:	07da      	lsls	r2, r3, #31
 8004900:	d438      	bmi.n	8004974 <_printf_float+0x398>
 8004902:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004906:	eba2 0903 	sub.w	r9, r2, r3
 800490a:	9b05      	ldr	r3, [sp, #20]
 800490c:	1ad2      	subs	r2, r2, r3
 800490e:	4591      	cmp	r9, r2
 8004910:	bfa8      	it	ge
 8004912:	4691      	movge	r9, r2
 8004914:	f1b9 0f00 	cmp.w	r9, #0
 8004918:	dc35      	bgt.n	8004986 <_printf_float+0x3aa>
 800491a:	f04f 0800 	mov.w	r8, #0
 800491e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004922:	f104 0a1a 	add.w	sl, r4, #26
 8004926:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800492a:	1a9b      	subs	r3, r3, r2
 800492c:	eba3 0309 	sub.w	r3, r3, r9
 8004930:	4543      	cmp	r3, r8
 8004932:	f77f af79 	ble.w	8004828 <_printf_float+0x24c>
 8004936:	2301      	movs	r3, #1
 8004938:	4652      	mov	r2, sl
 800493a:	4631      	mov	r1, r6
 800493c:	4628      	mov	r0, r5
 800493e:	47b8      	blx	r7
 8004940:	3001      	adds	r0, #1
 8004942:	f43f aeaa 	beq.w	800469a <_printf_float+0xbe>
 8004946:	f108 0801 	add.w	r8, r8, #1
 800494a:	e7ec      	b.n	8004926 <_printf_float+0x34a>
 800494c:	4613      	mov	r3, r2
 800494e:	4631      	mov	r1, r6
 8004950:	4642      	mov	r2, r8
 8004952:	4628      	mov	r0, r5
 8004954:	47b8      	blx	r7
 8004956:	3001      	adds	r0, #1
 8004958:	d1c0      	bne.n	80048dc <_printf_float+0x300>
 800495a:	e69e      	b.n	800469a <_printf_float+0xbe>
 800495c:	2301      	movs	r3, #1
 800495e:	4631      	mov	r1, r6
 8004960:	4628      	mov	r0, r5
 8004962:	9205      	str	r2, [sp, #20]
 8004964:	47b8      	blx	r7
 8004966:	3001      	adds	r0, #1
 8004968:	f43f ae97 	beq.w	800469a <_printf_float+0xbe>
 800496c:	9a05      	ldr	r2, [sp, #20]
 800496e:	f10b 0b01 	add.w	fp, fp, #1
 8004972:	e7b9      	b.n	80048e8 <_printf_float+0x30c>
 8004974:	ee18 3a10 	vmov	r3, s16
 8004978:	4652      	mov	r2, sl
 800497a:	4631      	mov	r1, r6
 800497c:	4628      	mov	r0, r5
 800497e:	47b8      	blx	r7
 8004980:	3001      	adds	r0, #1
 8004982:	d1be      	bne.n	8004902 <_printf_float+0x326>
 8004984:	e689      	b.n	800469a <_printf_float+0xbe>
 8004986:	9a05      	ldr	r2, [sp, #20]
 8004988:	464b      	mov	r3, r9
 800498a:	4442      	add	r2, r8
 800498c:	4631      	mov	r1, r6
 800498e:	4628      	mov	r0, r5
 8004990:	47b8      	blx	r7
 8004992:	3001      	adds	r0, #1
 8004994:	d1c1      	bne.n	800491a <_printf_float+0x33e>
 8004996:	e680      	b.n	800469a <_printf_float+0xbe>
 8004998:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800499a:	2a01      	cmp	r2, #1
 800499c:	dc01      	bgt.n	80049a2 <_printf_float+0x3c6>
 800499e:	07db      	lsls	r3, r3, #31
 80049a0:	d53a      	bpl.n	8004a18 <_printf_float+0x43c>
 80049a2:	2301      	movs	r3, #1
 80049a4:	4642      	mov	r2, r8
 80049a6:	4631      	mov	r1, r6
 80049a8:	4628      	mov	r0, r5
 80049aa:	47b8      	blx	r7
 80049ac:	3001      	adds	r0, #1
 80049ae:	f43f ae74 	beq.w	800469a <_printf_float+0xbe>
 80049b2:	ee18 3a10 	vmov	r3, s16
 80049b6:	4652      	mov	r2, sl
 80049b8:	4631      	mov	r1, r6
 80049ba:	4628      	mov	r0, r5
 80049bc:	47b8      	blx	r7
 80049be:	3001      	adds	r0, #1
 80049c0:	f43f ae6b 	beq.w	800469a <_printf_float+0xbe>
 80049c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049c8:	2200      	movs	r2, #0
 80049ca:	2300      	movs	r3, #0
 80049cc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80049d0:	f7fc f882 	bl	8000ad8 <__aeabi_dcmpeq>
 80049d4:	b9d8      	cbnz	r0, 8004a0e <_printf_float+0x432>
 80049d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80049da:	f108 0201 	add.w	r2, r8, #1
 80049de:	4631      	mov	r1, r6
 80049e0:	4628      	mov	r0, r5
 80049e2:	47b8      	blx	r7
 80049e4:	3001      	adds	r0, #1
 80049e6:	d10e      	bne.n	8004a06 <_printf_float+0x42a>
 80049e8:	e657      	b.n	800469a <_printf_float+0xbe>
 80049ea:	2301      	movs	r3, #1
 80049ec:	4652      	mov	r2, sl
 80049ee:	4631      	mov	r1, r6
 80049f0:	4628      	mov	r0, r5
 80049f2:	47b8      	blx	r7
 80049f4:	3001      	adds	r0, #1
 80049f6:	f43f ae50 	beq.w	800469a <_printf_float+0xbe>
 80049fa:	f108 0801 	add.w	r8, r8, #1
 80049fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a00:	3b01      	subs	r3, #1
 8004a02:	4543      	cmp	r3, r8
 8004a04:	dcf1      	bgt.n	80049ea <_printf_float+0x40e>
 8004a06:	464b      	mov	r3, r9
 8004a08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a0c:	e6da      	b.n	80047c4 <_printf_float+0x1e8>
 8004a0e:	f04f 0800 	mov.w	r8, #0
 8004a12:	f104 0a1a 	add.w	sl, r4, #26
 8004a16:	e7f2      	b.n	80049fe <_printf_float+0x422>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	4642      	mov	r2, r8
 8004a1c:	e7df      	b.n	80049de <_printf_float+0x402>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	464a      	mov	r2, r9
 8004a22:	4631      	mov	r1, r6
 8004a24:	4628      	mov	r0, r5
 8004a26:	47b8      	blx	r7
 8004a28:	3001      	adds	r0, #1
 8004a2a:	f43f ae36 	beq.w	800469a <_printf_float+0xbe>
 8004a2e:	f108 0801 	add.w	r8, r8, #1
 8004a32:	68e3      	ldr	r3, [r4, #12]
 8004a34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a36:	1a5b      	subs	r3, r3, r1
 8004a38:	4543      	cmp	r3, r8
 8004a3a:	dcf0      	bgt.n	8004a1e <_printf_float+0x442>
 8004a3c:	e6f8      	b.n	8004830 <_printf_float+0x254>
 8004a3e:	f04f 0800 	mov.w	r8, #0
 8004a42:	f104 0919 	add.w	r9, r4, #25
 8004a46:	e7f4      	b.n	8004a32 <_printf_float+0x456>

08004a48 <_printf_common>:
 8004a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a4c:	4616      	mov	r6, r2
 8004a4e:	4699      	mov	r9, r3
 8004a50:	688a      	ldr	r2, [r1, #8]
 8004a52:	690b      	ldr	r3, [r1, #16]
 8004a54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	bfb8      	it	lt
 8004a5c:	4613      	movlt	r3, r2
 8004a5e:	6033      	str	r3, [r6, #0]
 8004a60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a64:	4607      	mov	r7, r0
 8004a66:	460c      	mov	r4, r1
 8004a68:	b10a      	cbz	r2, 8004a6e <_printf_common+0x26>
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	6033      	str	r3, [r6, #0]
 8004a6e:	6823      	ldr	r3, [r4, #0]
 8004a70:	0699      	lsls	r1, r3, #26
 8004a72:	bf42      	ittt	mi
 8004a74:	6833      	ldrmi	r3, [r6, #0]
 8004a76:	3302      	addmi	r3, #2
 8004a78:	6033      	strmi	r3, [r6, #0]
 8004a7a:	6825      	ldr	r5, [r4, #0]
 8004a7c:	f015 0506 	ands.w	r5, r5, #6
 8004a80:	d106      	bne.n	8004a90 <_printf_common+0x48>
 8004a82:	f104 0a19 	add.w	sl, r4, #25
 8004a86:	68e3      	ldr	r3, [r4, #12]
 8004a88:	6832      	ldr	r2, [r6, #0]
 8004a8a:	1a9b      	subs	r3, r3, r2
 8004a8c:	42ab      	cmp	r3, r5
 8004a8e:	dc26      	bgt.n	8004ade <_printf_common+0x96>
 8004a90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a94:	1e13      	subs	r3, r2, #0
 8004a96:	6822      	ldr	r2, [r4, #0]
 8004a98:	bf18      	it	ne
 8004a9a:	2301      	movne	r3, #1
 8004a9c:	0692      	lsls	r2, r2, #26
 8004a9e:	d42b      	bmi.n	8004af8 <_printf_common+0xb0>
 8004aa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004aa4:	4649      	mov	r1, r9
 8004aa6:	4638      	mov	r0, r7
 8004aa8:	47c0      	blx	r8
 8004aaa:	3001      	adds	r0, #1
 8004aac:	d01e      	beq.n	8004aec <_printf_common+0xa4>
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	6922      	ldr	r2, [r4, #16]
 8004ab2:	f003 0306 	and.w	r3, r3, #6
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	bf02      	ittt	eq
 8004aba:	68e5      	ldreq	r5, [r4, #12]
 8004abc:	6833      	ldreq	r3, [r6, #0]
 8004abe:	1aed      	subeq	r5, r5, r3
 8004ac0:	68a3      	ldr	r3, [r4, #8]
 8004ac2:	bf0c      	ite	eq
 8004ac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ac8:	2500      	movne	r5, #0
 8004aca:	4293      	cmp	r3, r2
 8004acc:	bfc4      	itt	gt
 8004ace:	1a9b      	subgt	r3, r3, r2
 8004ad0:	18ed      	addgt	r5, r5, r3
 8004ad2:	2600      	movs	r6, #0
 8004ad4:	341a      	adds	r4, #26
 8004ad6:	42b5      	cmp	r5, r6
 8004ad8:	d11a      	bne.n	8004b10 <_printf_common+0xc8>
 8004ada:	2000      	movs	r0, #0
 8004adc:	e008      	b.n	8004af0 <_printf_common+0xa8>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	4652      	mov	r2, sl
 8004ae2:	4649      	mov	r1, r9
 8004ae4:	4638      	mov	r0, r7
 8004ae6:	47c0      	blx	r8
 8004ae8:	3001      	adds	r0, #1
 8004aea:	d103      	bne.n	8004af4 <_printf_common+0xac>
 8004aec:	f04f 30ff 	mov.w	r0, #4294967295
 8004af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004af4:	3501      	adds	r5, #1
 8004af6:	e7c6      	b.n	8004a86 <_printf_common+0x3e>
 8004af8:	18e1      	adds	r1, r4, r3
 8004afa:	1c5a      	adds	r2, r3, #1
 8004afc:	2030      	movs	r0, #48	; 0x30
 8004afe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b02:	4422      	add	r2, r4
 8004b04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b0c:	3302      	adds	r3, #2
 8004b0e:	e7c7      	b.n	8004aa0 <_printf_common+0x58>
 8004b10:	2301      	movs	r3, #1
 8004b12:	4622      	mov	r2, r4
 8004b14:	4649      	mov	r1, r9
 8004b16:	4638      	mov	r0, r7
 8004b18:	47c0      	blx	r8
 8004b1a:	3001      	adds	r0, #1
 8004b1c:	d0e6      	beq.n	8004aec <_printf_common+0xa4>
 8004b1e:	3601      	adds	r6, #1
 8004b20:	e7d9      	b.n	8004ad6 <_printf_common+0x8e>
	...

08004b24 <_printf_i>:
 8004b24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b28:	7e0f      	ldrb	r7, [r1, #24]
 8004b2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b2c:	2f78      	cmp	r7, #120	; 0x78
 8004b2e:	4691      	mov	r9, r2
 8004b30:	4680      	mov	r8, r0
 8004b32:	460c      	mov	r4, r1
 8004b34:	469a      	mov	sl, r3
 8004b36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b3a:	d807      	bhi.n	8004b4c <_printf_i+0x28>
 8004b3c:	2f62      	cmp	r7, #98	; 0x62
 8004b3e:	d80a      	bhi.n	8004b56 <_printf_i+0x32>
 8004b40:	2f00      	cmp	r7, #0
 8004b42:	f000 80d4 	beq.w	8004cee <_printf_i+0x1ca>
 8004b46:	2f58      	cmp	r7, #88	; 0x58
 8004b48:	f000 80c0 	beq.w	8004ccc <_printf_i+0x1a8>
 8004b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b54:	e03a      	b.n	8004bcc <_printf_i+0xa8>
 8004b56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b5a:	2b15      	cmp	r3, #21
 8004b5c:	d8f6      	bhi.n	8004b4c <_printf_i+0x28>
 8004b5e:	a101      	add	r1, pc, #4	; (adr r1, 8004b64 <_printf_i+0x40>)
 8004b60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b64:	08004bbd 	.word	0x08004bbd
 8004b68:	08004bd1 	.word	0x08004bd1
 8004b6c:	08004b4d 	.word	0x08004b4d
 8004b70:	08004b4d 	.word	0x08004b4d
 8004b74:	08004b4d 	.word	0x08004b4d
 8004b78:	08004b4d 	.word	0x08004b4d
 8004b7c:	08004bd1 	.word	0x08004bd1
 8004b80:	08004b4d 	.word	0x08004b4d
 8004b84:	08004b4d 	.word	0x08004b4d
 8004b88:	08004b4d 	.word	0x08004b4d
 8004b8c:	08004b4d 	.word	0x08004b4d
 8004b90:	08004cd5 	.word	0x08004cd5
 8004b94:	08004bfd 	.word	0x08004bfd
 8004b98:	08004c8f 	.word	0x08004c8f
 8004b9c:	08004b4d 	.word	0x08004b4d
 8004ba0:	08004b4d 	.word	0x08004b4d
 8004ba4:	08004cf7 	.word	0x08004cf7
 8004ba8:	08004b4d 	.word	0x08004b4d
 8004bac:	08004bfd 	.word	0x08004bfd
 8004bb0:	08004b4d 	.word	0x08004b4d
 8004bb4:	08004b4d 	.word	0x08004b4d
 8004bb8:	08004c97 	.word	0x08004c97
 8004bbc:	682b      	ldr	r3, [r5, #0]
 8004bbe:	1d1a      	adds	r2, r3, #4
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	602a      	str	r2, [r5, #0]
 8004bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e09f      	b.n	8004d10 <_printf_i+0x1ec>
 8004bd0:	6820      	ldr	r0, [r4, #0]
 8004bd2:	682b      	ldr	r3, [r5, #0]
 8004bd4:	0607      	lsls	r7, r0, #24
 8004bd6:	f103 0104 	add.w	r1, r3, #4
 8004bda:	6029      	str	r1, [r5, #0]
 8004bdc:	d501      	bpl.n	8004be2 <_printf_i+0xbe>
 8004bde:	681e      	ldr	r6, [r3, #0]
 8004be0:	e003      	b.n	8004bea <_printf_i+0xc6>
 8004be2:	0646      	lsls	r6, r0, #25
 8004be4:	d5fb      	bpl.n	8004bde <_printf_i+0xba>
 8004be6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004bea:	2e00      	cmp	r6, #0
 8004bec:	da03      	bge.n	8004bf6 <_printf_i+0xd2>
 8004bee:	232d      	movs	r3, #45	; 0x2d
 8004bf0:	4276      	negs	r6, r6
 8004bf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bf6:	485a      	ldr	r0, [pc, #360]	; (8004d60 <_printf_i+0x23c>)
 8004bf8:	230a      	movs	r3, #10
 8004bfa:	e012      	b.n	8004c22 <_printf_i+0xfe>
 8004bfc:	682b      	ldr	r3, [r5, #0]
 8004bfe:	6820      	ldr	r0, [r4, #0]
 8004c00:	1d19      	adds	r1, r3, #4
 8004c02:	6029      	str	r1, [r5, #0]
 8004c04:	0605      	lsls	r5, r0, #24
 8004c06:	d501      	bpl.n	8004c0c <_printf_i+0xe8>
 8004c08:	681e      	ldr	r6, [r3, #0]
 8004c0a:	e002      	b.n	8004c12 <_printf_i+0xee>
 8004c0c:	0641      	lsls	r1, r0, #25
 8004c0e:	d5fb      	bpl.n	8004c08 <_printf_i+0xe4>
 8004c10:	881e      	ldrh	r6, [r3, #0]
 8004c12:	4853      	ldr	r0, [pc, #332]	; (8004d60 <_printf_i+0x23c>)
 8004c14:	2f6f      	cmp	r7, #111	; 0x6f
 8004c16:	bf0c      	ite	eq
 8004c18:	2308      	moveq	r3, #8
 8004c1a:	230a      	movne	r3, #10
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c22:	6865      	ldr	r5, [r4, #4]
 8004c24:	60a5      	str	r5, [r4, #8]
 8004c26:	2d00      	cmp	r5, #0
 8004c28:	bfa2      	ittt	ge
 8004c2a:	6821      	ldrge	r1, [r4, #0]
 8004c2c:	f021 0104 	bicge.w	r1, r1, #4
 8004c30:	6021      	strge	r1, [r4, #0]
 8004c32:	b90e      	cbnz	r6, 8004c38 <_printf_i+0x114>
 8004c34:	2d00      	cmp	r5, #0
 8004c36:	d04b      	beq.n	8004cd0 <_printf_i+0x1ac>
 8004c38:	4615      	mov	r5, r2
 8004c3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c3e:	fb03 6711 	mls	r7, r3, r1, r6
 8004c42:	5dc7      	ldrb	r7, [r0, r7]
 8004c44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c48:	4637      	mov	r7, r6
 8004c4a:	42bb      	cmp	r3, r7
 8004c4c:	460e      	mov	r6, r1
 8004c4e:	d9f4      	bls.n	8004c3a <_printf_i+0x116>
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d10b      	bne.n	8004c6c <_printf_i+0x148>
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	07de      	lsls	r6, r3, #31
 8004c58:	d508      	bpl.n	8004c6c <_printf_i+0x148>
 8004c5a:	6923      	ldr	r3, [r4, #16]
 8004c5c:	6861      	ldr	r1, [r4, #4]
 8004c5e:	4299      	cmp	r1, r3
 8004c60:	bfde      	ittt	le
 8004c62:	2330      	movle	r3, #48	; 0x30
 8004c64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c6c:	1b52      	subs	r2, r2, r5
 8004c6e:	6122      	str	r2, [r4, #16]
 8004c70:	f8cd a000 	str.w	sl, [sp]
 8004c74:	464b      	mov	r3, r9
 8004c76:	aa03      	add	r2, sp, #12
 8004c78:	4621      	mov	r1, r4
 8004c7a:	4640      	mov	r0, r8
 8004c7c:	f7ff fee4 	bl	8004a48 <_printf_common>
 8004c80:	3001      	adds	r0, #1
 8004c82:	d14a      	bne.n	8004d1a <_printf_i+0x1f6>
 8004c84:	f04f 30ff 	mov.w	r0, #4294967295
 8004c88:	b004      	add	sp, #16
 8004c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	f043 0320 	orr.w	r3, r3, #32
 8004c94:	6023      	str	r3, [r4, #0]
 8004c96:	4833      	ldr	r0, [pc, #204]	; (8004d64 <_printf_i+0x240>)
 8004c98:	2778      	movs	r7, #120	; 0x78
 8004c9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	6829      	ldr	r1, [r5, #0]
 8004ca2:	061f      	lsls	r7, r3, #24
 8004ca4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ca8:	d402      	bmi.n	8004cb0 <_printf_i+0x18c>
 8004caa:	065f      	lsls	r7, r3, #25
 8004cac:	bf48      	it	mi
 8004cae:	b2b6      	uxthmi	r6, r6
 8004cb0:	07df      	lsls	r7, r3, #31
 8004cb2:	bf48      	it	mi
 8004cb4:	f043 0320 	orrmi.w	r3, r3, #32
 8004cb8:	6029      	str	r1, [r5, #0]
 8004cba:	bf48      	it	mi
 8004cbc:	6023      	strmi	r3, [r4, #0]
 8004cbe:	b91e      	cbnz	r6, 8004cc8 <_printf_i+0x1a4>
 8004cc0:	6823      	ldr	r3, [r4, #0]
 8004cc2:	f023 0320 	bic.w	r3, r3, #32
 8004cc6:	6023      	str	r3, [r4, #0]
 8004cc8:	2310      	movs	r3, #16
 8004cca:	e7a7      	b.n	8004c1c <_printf_i+0xf8>
 8004ccc:	4824      	ldr	r0, [pc, #144]	; (8004d60 <_printf_i+0x23c>)
 8004cce:	e7e4      	b.n	8004c9a <_printf_i+0x176>
 8004cd0:	4615      	mov	r5, r2
 8004cd2:	e7bd      	b.n	8004c50 <_printf_i+0x12c>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	6826      	ldr	r6, [r4, #0]
 8004cd8:	6961      	ldr	r1, [r4, #20]
 8004cda:	1d18      	adds	r0, r3, #4
 8004cdc:	6028      	str	r0, [r5, #0]
 8004cde:	0635      	lsls	r5, r6, #24
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	d501      	bpl.n	8004ce8 <_printf_i+0x1c4>
 8004ce4:	6019      	str	r1, [r3, #0]
 8004ce6:	e002      	b.n	8004cee <_printf_i+0x1ca>
 8004ce8:	0670      	lsls	r0, r6, #25
 8004cea:	d5fb      	bpl.n	8004ce4 <_printf_i+0x1c0>
 8004cec:	8019      	strh	r1, [r3, #0]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	6123      	str	r3, [r4, #16]
 8004cf2:	4615      	mov	r5, r2
 8004cf4:	e7bc      	b.n	8004c70 <_printf_i+0x14c>
 8004cf6:	682b      	ldr	r3, [r5, #0]
 8004cf8:	1d1a      	adds	r2, r3, #4
 8004cfa:	602a      	str	r2, [r5, #0]
 8004cfc:	681d      	ldr	r5, [r3, #0]
 8004cfe:	6862      	ldr	r2, [r4, #4]
 8004d00:	2100      	movs	r1, #0
 8004d02:	4628      	mov	r0, r5
 8004d04:	f7fb fa6c 	bl	80001e0 <memchr>
 8004d08:	b108      	cbz	r0, 8004d0e <_printf_i+0x1ea>
 8004d0a:	1b40      	subs	r0, r0, r5
 8004d0c:	6060      	str	r0, [r4, #4]
 8004d0e:	6863      	ldr	r3, [r4, #4]
 8004d10:	6123      	str	r3, [r4, #16]
 8004d12:	2300      	movs	r3, #0
 8004d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d18:	e7aa      	b.n	8004c70 <_printf_i+0x14c>
 8004d1a:	6923      	ldr	r3, [r4, #16]
 8004d1c:	462a      	mov	r2, r5
 8004d1e:	4649      	mov	r1, r9
 8004d20:	4640      	mov	r0, r8
 8004d22:	47d0      	blx	sl
 8004d24:	3001      	adds	r0, #1
 8004d26:	d0ad      	beq.n	8004c84 <_printf_i+0x160>
 8004d28:	6823      	ldr	r3, [r4, #0]
 8004d2a:	079b      	lsls	r3, r3, #30
 8004d2c:	d413      	bmi.n	8004d56 <_printf_i+0x232>
 8004d2e:	68e0      	ldr	r0, [r4, #12]
 8004d30:	9b03      	ldr	r3, [sp, #12]
 8004d32:	4298      	cmp	r0, r3
 8004d34:	bfb8      	it	lt
 8004d36:	4618      	movlt	r0, r3
 8004d38:	e7a6      	b.n	8004c88 <_printf_i+0x164>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	4632      	mov	r2, r6
 8004d3e:	4649      	mov	r1, r9
 8004d40:	4640      	mov	r0, r8
 8004d42:	47d0      	blx	sl
 8004d44:	3001      	adds	r0, #1
 8004d46:	d09d      	beq.n	8004c84 <_printf_i+0x160>
 8004d48:	3501      	adds	r5, #1
 8004d4a:	68e3      	ldr	r3, [r4, #12]
 8004d4c:	9903      	ldr	r1, [sp, #12]
 8004d4e:	1a5b      	subs	r3, r3, r1
 8004d50:	42ab      	cmp	r3, r5
 8004d52:	dcf2      	bgt.n	8004d3a <_printf_i+0x216>
 8004d54:	e7eb      	b.n	8004d2e <_printf_i+0x20a>
 8004d56:	2500      	movs	r5, #0
 8004d58:	f104 0619 	add.w	r6, r4, #25
 8004d5c:	e7f5      	b.n	8004d4a <_printf_i+0x226>
 8004d5e:	bf00      	nop
 8004d60:	08008f2a 	.word	0x08008f2a
 8004d64:	08008f3b 	.word	0x08008f3b

08004d68 <_scanf_float>:
 8004d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6c:	b087      	sub	sp, #28
 8004d6e:	4617      	mov	r7, r2
 8004d70:	9303      	str	r3, [sp, #12]
 8004d72:	688b      	ldr	r3, [r1, #8]
 8004d74:	1e5a      	subs	r2, r3, #1
 8004d76:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004d7a:	bf83      	ittte	hi
 8004d7c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004d80:	195b      	addhi	r3, r3, r5
 8004d82:	9302      	strhi	r3, [sp, #8]
 8004d84:	2300      	movls	r3, #0
 8004d86:	bf86      	itte	hi
 8004d88:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004d8c:	608b      	strhi	r3, [r1, #8]
 8004d8e:	9302      	strls	r3, [sp, #8]
 8004d90:	680b      	ldr	r3, [r1, #0]
 8004d92:	468b      	mov	fp, r1
 8004d94:	2500      	movs	r5, #0
 8004d96:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004d9a:	f84b 3b1c 	str.w	r3, [fp], #28
 8004d9e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004da2:	4680      	mov	r8, r0
 8004da4:	460c      	mov	r4, r1
 8004da6:	465e      	mov	r6, fp
 8004da8:	46aa      	mov	sl, r5
 8004daa:	46a9      	mov	r9, r5
 8004dac:	9501      	str	r5, [sp, #4]
 8004dae:	68a2      	ldr	r2, [r4, #8]
 8004db0:	b152      	cbz	r2, 8004dc8 <_scanf_float+0x60>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b4e      	cmp	r3, #78	; 0x4e
 8004db8:	d864      	bhi.n	8004e84 <_scanf_float+0x11c>
 8004dba:	2b40      	cmp	r3, #64	; 0x40
 8004dbc:	d83c      	bhi.n	8004e38 <_scanf_float+0xd0>
 8004dbe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004dc2:	b2c8      	uxtb	r0, r1
 8004dc4:	280e      	cmp	r0, #14
 8004dc6:	d93a      	bls.n	8004e3e <_scanf_float+0xd6>
 8004dc8:	f1b9 0f00 	cmp.w	r9, #0
 8004dcc:	d003      	beq.n	8004dd6 <_scanf_float+0x6e>
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dd4:	6023      	str	r3, [r4, #0]
 8004dd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dda:	f1ba 0f01 	cmp.w	sl, #1
 8004dde:	f200 8113 	bhi.w	8005008 <_scanf_float+0x2a0>
 8004de2:	455e      	cmp	r6, fp
 8004de4:	f200 8105 	bhi.w	8004ff2 <_scanf_float+0x28a>
 8004de8:	2501      	movs	r5, #1
 8004dea:	4628      	mov	r0, r5
 8004dec:	b007      	add	sp, #28
 8004dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004df2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004df6:	2a0d      	cmp	r2, #13
 8004df8:	d8e6      	bhi.n	8004dc8 <_scanf_float+0x60>
 8004dfa:	a101      	add	r1, pc, #4	; (adr r1, 8004e00 <_scanf_float+0x98>)
 8004dfc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004e00:	08004f3f 	.word	0x08004f3f
 8004e04:	08004dc9 	.word	0x08004dc9
 8004e08:	08004dc9 	.word	0x08004dc9
 8004e0c:	08004dc9 	.word	0x08004dc9
 8004e10:	08004f9f 	.word	0x08004f9f
 8004e14:	08004f77 	.word	0x08004f77
 8004e18:	08004dc9 	.word	0x08004dc9
 8004e1c:	08004dc9 	.word	0x08004dc9
 8004e20:	08004f4d 	.word	0x08004f4d
 8004e24:	08004dc9 	.word	0x08004dc9
 8004e28:	08004dc9 	.word	0x08004dc9
 8004e2c:	08004dc9 	.word	0x08004dc9
 8004e30:	08004dc9 	.word	0x08004dc9
 8004e34:	08004f05 	.word	0x08004f05
 8004e38:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004e3c:	e7db      	b.n	8004df6 <_scanf_float+0x8e>
 8004e3e:	290e      	cmp	r1, #14
 8004e40:	d8c2      	bhi.n	8004dc8 <_scanf_float+0x60>
 8004e42:	a001      	add	r0, pc, #4	; (adr r0, 8004e48 <_scanf_float+0xe0>)
 8004e44:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004e48:	08004ef7 	.word	0x08004ef7
 8004e4c:	08004dc9 	.word	0x08004dc9
 8004e50:	08004ef7 	.word	0x08004ef7
 8004e54:	08004f8b 	.word	0x08004f8b
 8004e58:	08004dc9 	.word	0x08004dc9
 8004e5c:	08004ea5 	.word	0x08004ea5
 8004e60:	08004ee1 	.word	0x08004ee1
 8004e64:	08004ee1 	.word	0x08004ee1
 8004e68:	08004ee1 	.word	0x08004ee1
 8004e6c:	08004ee1 	.word	0x08004ee1
 8004e70:	08004ee1 	.word	0x08004ee1
 8004e74:	08004ee1 	.word	0x08004ee1
 8004e78:	08004ee1 	.word	0x08004ee1
 8004e7c:	08004ee1 	.word	0x08004ee1
 8004e80:	08004ee1 	.word	0x08004ee1
 8004e84:	2b6e      	cmp	r3, #110	; 0x6e
 8004e86:	d809      	bhi.n	8004e9c <_scanf_float+0x134>
 8004e88:	2b60      	cmp	r3, #96	; 0x60
 8004e8a:	d8b2      	bhi.n	8004df2 <_scanf_float+0x8a>
 8004e8c:	2b54      	cmp	r3, #84	; 0x54
 8004e8e:	d077      	beq.n	8004f80 <_scanf_float+0x218>
 8004e90:	2b59      	cmp	r3, #89	; 0x59
 8004e92:	d199      	bne.n	8004dc8 <_scanf_float+0x60>
 8004e94:	2d07      	cmp	r5, #7
 8004e96:	d197      	bne.n	8004dc8 <_scanf_float+0x60>
 8004e98:	2508      	movs	r5, #8
 8004e9a:	e029      	b.n	8004ef0 <_scanf_float+0x188>
 8004e9c:	2b74      	cmp	r3, #116	; 0x74
 8004e9e:	d06f      	beq.n	8004f80 <_scanf_float+0x218>
 8004ea0:	2b79      	cmp	r3, #121	; 0x79
 8004ea2:	e7f6      	b.n	8004e92 <_scanf_float+0x12a>
 8004ea4:	6821      	ldr	r1, [r4, #0]
 8004ea6:	05c8      	lsls	r0, r1, #23
 8004ea8:	d51a      	bpl.n	8004ee0 <_scanf_float+0x178>
 8004eaa:	9b02      	ldr	r3, [sp, #8]
 8004eac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004eb0:	6021      	str	r1, [r4, #0]
 8004eb2:	f109 0901 	add.w	r9, r9, #1
 8004eb6:	b11b      	cbz	r3, 8004ec0 <_scanf_float+0x158>
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	3201      	adds	r2, #1
 8004ebc:	9302      	str	r3, [sp, #8]
 8004ebe:	60a2      	str	r2, [r4, #8]
 8004ec0:	68a3      	ldr	r3, [r4, #8]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	60a3      	str	r3, [r4, #8]
 8004ec6:	6923      	ldr	r3, [r4, #16]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	6123      	str	r3, [r4, #16]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	607b      	str	r3, [r7, #4]
 8004ed4:	f340 8084 	ble.w	8004fe0 <_scanf_float+0x278>
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	3301      	adds	r3, #1
 8004edc:	603b      	str	r3, [r7, #0]
 8004ede:	e766      	b.n	8004dae <_scanf_float+0x46>
 8004ee0:	eb1a 0f05 	cmn.w	sl, r5
 8004ee4:	f47f af70 	bne.w	8004dc8 <_scanf_float+0x60>
 8004ee8:	6822      	ldr	r2, [r4, #0]
 8004eea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004eee:	6022      	str	r2, [r4, #0]
 8004ef0:	f806 3b01 	strb.w	r3, [r6], #1
 8004ef4:	e7e4      	b.n	8004ec0 <_scanf_float+0x158>
 8004ef6:	6822      	ldr	r2, [r4, #0]
 8004ef8:	0610      	lsls	r0, r2, #24
 8004efa:	f57f af65 	bpl.w	8004dc8 <_scanf_float+0x60>
 8004efe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f02:	e7f4      	b.n	8004eee <_scanf_float+0x186>
 8004f04:	f1ba 0f00 	cmp.w	sl, #0
 8004f08:	d10e      	bne.n	8004f28 <_scanf_float+0x1c0>
 8004f0a:	f1b9 0f00 	cmp.w	r9, #0
 8004f0e:	d10e      	bne.n	8004f2e <_scanf_float+0x1c6>
 8004f10:	6822      	ldr	r2, [r4, #0]
 8004f12:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004f16:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004f1a:	d108      	bne.n	8004f2e <_scanf_float+0x1c6>
 8004f1c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004f20:	6022      	str	r2, [r4, #0]
 8004f22:	f04f 0a01 	mov.w	sl, #1
 8004f26:	e7e3      	b.n	8004ef0 <_scanf_float+0x188>
 8004f28:	f1ba 0f02 	cmp.w	sl, #2
 8004f2c:	d055      	beq.n	8004fda <_scanf_float+0x272>
 8004f2e:	2d01      	cmp	r5, #1
 8004f30:	d002      	beq.n	8004f38 <_scanf_float+0x1d0>
 8004f32:	2d04      	cmp	r5, #4
 8004f34:	f47f af48 	bne.w	8004dc8 <_scanf_float+0x60>
 8004f38:	3501      	adds	r5, #1
 8004f3a:	b2ed      	uxtb	r5, r5
 8004f3c:	e7d8      	b.n	8004ef0 <_scanf_float+0x188>
 8004f3e:	f1ba 0f01 	cmp.w	sl, #1
 8004f42:	f47f af41 	bne.w	8004dc8 <_scanf_float+0x60>
 8004f46:	f04f 0a02 	mov.w	sl, #2
 8004f4a:	e7d1      	b.n	8004ef0 <_scanf_float+0x188>
 8004f4c:	b97d      	cbnz	r5, 8004f6e <_scanf_float+0x206>
 8004f4e:	f1b9 0f00 	cmp.w	r9, #0
 8004f52:	f47f af3c 	bne.w	8004dce <_scanf_float+0x66>
 8004f56:	6822      	ldr	r2, [r4, #0]
 8004f58:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004f5c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004f60:	f47f af39 	bne.w	8004dd6 <_scanf_float+0x6e>
 8004f64:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004f68:	6022      	str	r2, [r4, #0]
 8004f6a:	2501      	movs	r5, #1
 8004f6c:	e7c0      	b.n	8004ef0 <_scanf_float+0x188>
 8004f6e:	2d03      	cmp	r5, #3
 8004f70:	d0e2      	beq.n	8004f38 <_scanf_float+0x1d0>
 8004f72:	2d05      	cmp	r5, #5
 8004f74:	e7de      	b.n	8004f34 <_scanf_float+0x1cc>
 8004f76:	2d02      	cmp	r5, #2
 8004f78:	f47f af26 	bne.w	8004dc8 <_scanf_float+0x60>
 8004f7c:	2503      	movs	r5, #3
 8004f7e:	e7b7      	b.n	8004ef0 <_scanf_float+0x188>
 8004f80:	2d06      	cmp	r5, #6
 8004f82:	f47f af21 	bne.w	8004dc8 <_scanf_float+0x60>
 8004f86:	2507      	movs	r5, #7
 8004f88:	e7b2      	b.n	8004ef0 <_scanf_float+0x188>
 8004f8a:	6822      	ldr	r2, [r4, #0]
 8004f8c:	0591      	lsls	r1, r2, #22
 8004f8e:	f57f af1b 	bpl.w	8004dc8 <_scanf_float+0x60>
 8004f92:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004f96:	6022      	str	r2, [r4, #0]
 8004f98:	f8cd 9004 	str.w	r9, [sp, #4]
 8004f9c:	e7a8      	b.n	8004ef0 <_scanf_float+0x188>
 8004f9e:	6822      	ldr	r2, [r4, #0]
 8004fa0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004fa4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004fa8:	d006      	beq.n	8004fb8 <_scanf_float+0x250>
 8004faa:	0550      	lsls	r0, r2, #21
 8004fac:	f57f af0c 	bpl.w	8004dc8 <_scanf_float+0x60>
 8004fb0:	f1b9 0f00 	cmp.w	r9, #0
 8004fb4:	f43f af0f 	beq.w	8004dd6 <_scanf_float+0x6e>
 8004fb8:	0591      	lsls	r1, r2, #22
 8004fba:	bf58      	it	pl
 8004fbc:	9901      	ldrpl	r1, [sp, #4]
 8004fbe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004fc2:	bf58      	it	pl
 8004fc4:	eba9 0101 	subpl.w	r1, r9, r1
 8004fc8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004fcc:	bf58      	it	pl
 8004fce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004fd2:	6022      	str	r2, [r4, #0]
 8004fd4:	f04f 0900 	mov.w	r9, #0
 8004fd8:	e78a      	b.n	8004ef0 <_scanf_float+0x188>
 8004fda:	f04f 0a03 	mov.w	sl, #3
 8004fde:	e787      	b.n	8004ef0 <_scanf_float+0x188>
 8004fe0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004fe4:	4639      	mov	r1, r7
 8004fe6:	4640      	mov	r0, r8
 8004fe8:	4798      	blx	r3
 8004fea:	2800      	cmp	r0, #0
 8004fec:	f43f aedf 	beq.w	8004dae <_scanf_float+0x46>
 8004ff0:	e6ea      	b.n	8004dc8 <_scanf_float+0x60>
 8004ff2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ff6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004ffa:	463a      	mov	r2, r7
 8004ffc:	4640      	mov	r0, r8
 8004ffe:	4798      	blx	r3
 8005000:	6923      	ldr	r3, [r4, #16]
 8005002:	3b01      	subs	r3, #1
 8005004:	6123      	str	r3, [r4, #16]
 8005006:	e6ec      	b.n	8004de2 <_scanf_float+0x7a>
 8005008:	1e6b      	subs	r3, r5, #1
 800500a:	2b06      	cmp	r3, #6
 800500c:	d825      	bhi.n	800505a <_scanf_float+0x2f2>
 800500e:	2d02      	cmp	r5, #2
 8005010:	d836      	bhi.n	8005080 <_scanf_float+0x318>
 8005012:	455e      	cmp	r6, fp
 8005014:	f67f aee8 	bls.w	8004de8 <_scanf_float+0x80>
 8005018:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800501c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005020:	463a      	mov	r2, r7
 8005022:	4640      	mov	r0, r8
 8005024:	4798      	blx	r3
 8005026:	6923      	ldr	r3, [r4, #16]
 8005028:	3b01      	subs	r3, #1
 800502a:	6123      	str	r3, [r4, #16]
 800502c:	e7f1      	b.n	8005012 <_scanf_float+0x2aa>
 800502e:	9802      	ldr	r0, [sp, #8]
 8005030:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005034:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005038:	9002      	str	r0, [sp, #8]
 800503a:	463a      	mov	r2, r7
 800503c:	4640      	mov	r0, r8
 800503e:	4798      	blx	r3
 8005040:	6923      	ldr	r3, [r4, #16]
 8005042:	3b01      	subs	r3, #1
 8005044:	6123      	str	r3, [r4, #16]
 8005046:	f10a 3aff 	add.w	sl, sl, #4294967295
 800504a:	fa5f fa8a 	uxtb.w	sl, sl
 800504e:	f1ba 0f02 	cmp.w	sl, #2
 8005052:	d1ec      	bne.n	800502e <_scanf_float+0x2c6>
 8005054:	3d03      	subs	r5, #3
 8005056:	b2ed      	uxtb	r5, r5
 8005058:	1b76      	subs	r6, r6, r5
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	05da      	lsls	r2, r3, #23
 800505e:	d52f      	bpl.n	80050c0 <_scanf_float+0x358>
 8005060:	055b      	lsls	r3, r3, #21
 8005062:	d510      	bpl.n	8005086 <_scanf_float+0x31e>
 8005064:	455e      	cmp	r6, fp
 8005066:	f67f aebf 	bls.w	8004de8 <_scanf_float+0x80>
 800506a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800506e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005072:	463a      	mov	r2, r7
 8005074:	4640      	mov	r0, r8
 8005076:	4798      	blx	r3
 8005078:	6923      	ldr	r3, [r4, #16]
 800507a:	3b01      	subs	r3, #1
 800507c:	6123      	str	r3, [r4, #16]
 800507e:	e7f1      	b.n	8005064 <_scanf_float+0x2fc>
 8005080:	46aa      	mov	sl, r5
 8005082:	9602      	str	r6, [sp, #8]
 8005084:	e7df      	b.n	8005046 <_scanf_float+0x2de>
 8005086:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800508a:	6923      	ldr	r3, [r4, #16]
 800508c:	2965      	cmp	r1, #101	; 0x65
 800508e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005092:	f106 35ff 	add.w	r5, r6, #4294967295
 8005096:	6123      	str	r3, [r4, #16]
 8005098:	d00c      	beq.n	80050b4 <_scanf_float+0x34c>
 800509a:	2945      	cmp	r1, #69	; 0x45
 800509c:	d00a      	beq.n	80050b4 <_scanf_float+0x34c>
 800509e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050a2:	463a      	mov	r2, r7
 80050a4:	4640      	mov	r0, r8
 80050a6:	4798      	blx	r3
 80050a8:	6923      	ldr	r3, [r4, #16]
 80050aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	1eb5      	subs	r5, r6, #2
 80050b2:	6123      	str	r3, [r4, #16]
 80050b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050b8:	463a      	mov	r2, r7
 80050ba:	4640      	mov	r0, r8
 80050bc:	4798      	blx	r3
 80050be:	462e      	mov	r6, r5
 80050c0:	6825      	ldr	r5, [r4, #0]
 80050c2:	f015 0510 	ands.w	r5, r5, #16
 80050c6:	d158      	bne.n	800517a <_scanf_float+0x412>
 80050c8:	7035      	strb	r5, [r6, #0]
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d4:	d11c      	bne.n	8005110 <_scanf_float+0x3a8>
 80050d6:	9b01      	ldr	r3, [sp, #4]
 80050d8:	454b      	cmp	r3, r9
 80050da:	eba3 0209 	sub.w	r2, r3, r9
 80050de:	d124      	bne.n	800512a <_scanf_float+0x3c2>
 80050e0:	2200      	movs	r2, #0
 80050e2:	4659      	mov	r1, fp
 80050e4:	4640      	mov	r0, r8
 80050e6:	f002 fddf 	bl	8007ca8 <_strtod_r>
 80050ea:	9b03      	ldr	r3, [sp, #12]
 80050ec:	6821      	ldr	r1, [r4, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f011 0f02 	tst.w	r1, #2
 80050f4:	ec57 6b10 	vmov	r6, r7, d0
 80050f8:	f103 0204 	add.w	r2, r3, #4
 80050fc:	d020      	beq.n	8005140 <_scanf_float+0x3d8>
 80050fe:	9903      	ldr	r1, [sp, #12]
 8005100:	600a      	str	r2, [r1, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	e9c3 6700 	strd	r6, r7, [r3]
 8005108:	68e3      	ldr	r3, [r4, #12]
 800510a:	3301      	adds	r3, #1
 800510c:	60e3      	str	r3, [r4, #12]
 800510e:	e66c      	b.n	8004dea <_scanf_float+0x82>
 8005110:	9b04      	ldr	r3, [sp, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0e4      	beq.n	80050e0 <_scanf_float+0x378>
 8005116:	9905      	ldr	r1, [sp, #20]
 8005118:	230a      	movs	r3, #10
 800511a:	462a      	mov	r2, r5
 800511c:	3101      	adds	r1, #1
 800511e:	4640      	mov	r0, r8
 8005120:	f002 fe4a 	bl	8007db8 <_strtol_r>
 8005124:	9b04      	ldr	r3, [sp, #16]
 8005126:	9e05      	ldr	r6, [sp, #20]
 8005128:	1ac2      	subs	r2, r0, r3
 800512a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800512e:	429e      	cmp	r6, r3
 8005130:	bf28      	it	cs
 8005132:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005136:	4912      	ldr	r1, [pc, #72]	; (8005180 <_scanf_float+0x418>)
 8005138:	4630      	mov	r0, r6
 800513a:	f000 fa03 	bl	8005544 <siprintf>
 800513e:	e7cf      	b.n	80050e0 <_scanf_float+0x378>
 8005140:	f011 0f04 	tst.w	r1, #4
 8005144:	9903      	ldr	r1, [sp, #12]
 8005146:	600a      	str	r2, [r1, #0]
 8005148:	d1db      	bne.n	8005102 <_scanf_float+0x39a>
 800514a:	f8d3 8000 	ldr.w	r8, [r3]
 800514e:	ee10 2a10 	vmov	r2, s0
 8005152:	ee10 0a10 	vmov	r0, s0
 8005156:	463b      	mov	r3, r7
 8005158:	4639      	mov	r1, r7
 800515a:	f7fb fcef 	bl	8000b3c <__aeabi_dcmpun>
 800515e:	b128      	cbz	r0, 800516c <_scanf_float+0x404>
 8005160:	4808      	ldr	r0, [pc, #32]	; (8005184 <_scanf_float+0x41c>)
 8005162:	f000 fb67 	bl	8005834 <nanf>
 8005166:	ed88 0a00 	vstr	s0, [r8]
 800516a:	e7cd      	b.n	8005108 <_scanf_float+0x3a0>
 800516c:	4630      	mov	r0, r6
 800516e:	4639      	mov	r1, r7
 8005170:	f7fb fd42 	bl	8000bf8 <__aeabi_d2f>
 8005174:	f8c8 0000 	str.w	r0, [r8]
 8005178:	e7c6      	b.n	8005108 <_scanf_float+0x3a0>
 800517a:	2500      	movs	r5, #0
 800517c:	e635      	b.n	8004dea <_scanf_float+0x82>
 800517e:	bf00      	nop
 8005180:	08008f4c 	.word	0x08008f4c
 8005184:	080092dd 	.word	0x080092dd

08005188 <std>:
 8005188:	2300      	movs	r3, #0
 800518a:	b510      	push	{r4, lr}
 800518c:	4604      	mov	r4, r0
 800518e:	e9c0 3300 	strd	r3, r3, [r0]
 8005192:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005196:	6083      	str	r3, [r0, #8]
 8005198:	8181      	strh	r1, [r0, #12]
 800519a:	6643      	str	r3, [r0, #100]	; 0x64
 800519c:	81c2      	strh	r2, [r0, #14]
 800519e:	6183      	str	r3, [r0, #24]
 80051a0:	4619      	mov	r1, r3
 80051a2:	2208      	movs	r2, #8
 80051a4:	305c      	adds	r0, #92	; 0x5c
 80051a6:	f000 fac5 	bl	8005734 <memset>
 80051aa:	4b0d      	ldr	r3, [pc, #52]	; (80051e0 <std+0x58>)
 80051ac:	6263      	str	r3, [r4, #36]	; 0x24
 80051ae:	4b0d      	ldr	r3, [pc, #52]	; (80051e4 <std+0x5c>)
 80051b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80051b2:	4b0d      	ldr	r3, [pc, #52]	; (80051e8 <std+0x60>)
 80051b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051b6:	4b0d      	ldr	r3, [pc, #52]	; (80051ec <std+0x64>)
 80051b8:	6323      	str	r3, [r4, #48]	; 0x30
 80051ba:	4b0d      	ldr	r3, [pc, #52]	; (80051f0 <std+0x68>)
 80051bc:	6224      	str	r4, [r4, #32]
 80051be:	429c      	cmp	r4, r3
 80051c0:	d006      	beq.n	80051d0 <std+0x48>
 80051c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80051c6:	4294      	cmp	r4, r2
 80051c8:	d002      	beq.n	80051d0 <std+0x48>
 80051ca:	33d0      	adds	r3, #208	; 0xd0
 80051cc:	429c      	cmp	r4, r3
 80051ce:	d105      	bne.n	80051dc <std+0x54>
 80051d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80051d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051d8:	f000 bb28 	b.w	800582c <__retarget_lock_init_recursive>
 80051dc:	bd10      	pop	{r4, pc}
 80051de:	bf00      	nop
 80051e0:	08005585 	.word	0x08005585
 80051e4:	080055a7 	.word	0x080055a7
 80051e8:	080055df 	.word	0x080055df
 80051ec:	08005603 	.word	0x08005603
 80051f0:	20000330 	.word	0x20000330

080051f4 <stdio_exit_handler>:
 80051f4:	4a02      	ldr	r2, [pc, #8]	; (8005200 <stdio_exit_handler+0xc>)
 80051f6:	4903      	ldr	r1, [pc, #12]	; (8005204 <stdio_exit_handler+0x10>)
 80051f8:	4803      	ldr	r0, [pc, #12]	; (8005208 <stdio_exit_handler+0x14>)
 80051fa:	f000 b869 	b.w	80052d0 <_fwalk_sglue>
 80051fe:	bf00      	nop
 8005200:	2000000c 	.word	0x2000000c
 8005204:	08008401 	.word	0x08008401
 8005208:	20000018 	.word	0x20000018

0800520c <cleanup_stdio>:
 800520c:	6841      	ldr	r1, [r0, #4]
 800520e:	4b0c      	ldr	r3, [pc, #48]	; (8005240 <cleanup_stdio+0x34>)
 8005210:	4299      	cmp	r1, r3
 8005212:	b510      	push	{r4, lr}
 8005214:	4604      	mov	r4, r0
 8005216:	d001      	beq.n	800521c <cleanup_stdio+0x10>
 8005218:	f003 f8f2 	bl	8008400 <_fflush_r>
 800521c:	68a1      	ldr	r1, [r4, #8]
 800521e:	4b09      	ldr	r3, [pc, #36]	; (8005244 <cleanup_stdio+0x38>)
 8005220:	4299      	cmp	r1, r3
 8005222:	d002      	beq.n	800522a <cleanup_stdio+0x1e>
 8005224:	4620      	mov	r0, r4
 8005226:	f003 f8eb 	bl	8008400 <_fflush_r>
 800522a:	68e1      	ldr	r1, [r4, #12]
 800522c:	4b06      	ldr	r3, [pc, #24]	; (8005248 <cleanup_stdio+0x3c>)
 800522e:	4299      	cmp	r1, r3
 8005230:	d004      	beq.n	800523c <cleanup_stdio+0x30>
 8005232:	4620      	mov	r0, r4
 8005234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005238:	f003 b8e2 	b.w	8008400 <_fflush_r>
 800523c:	bd10      	pop	{r4, pc}
 800523e:	bf00      	nop
 8005240:	20000330 	.word	0x20000330
 8005244:	20000398 	.word	0x20000398
 8005248:	20000400 	.word	0x20000400

0800524c <global_stdio_init.part.0>:
 800524c:	b510      	push	{r4, lr}
 800524e:	4b0b      	ldr	r3, [pc, #44]	; (800527c <global_stdio_init.part.0+0x30>)
 8005250:	4c0b      	ldr	r4, [pc, #44]	; (8005280 <global_stdio_init.part.0+0x34>)
 8005252:	4a0c      	ldr	r2, [pc, #48]	; (8005284 <global_stdio_init.part.0+0x38>)
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	4620      	mov	r0, r4
 8005258:	2200      	movs	r2, #0
 800525a:	2104      	movs	r1, #4
 800525c:	f7ff ff94 	bl	8005188 <std>
 8005260:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005264:	2201      	movs	r2, #1
 8005266:	2109      	movs	r1, #9
 8005268:	f7ff ff8e 	bl	8005188 <std>
 800526c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005270:	2202      	movs	r2, #2
 8005272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005276:	2112      	movs	r1, #18
 8005278:	f7ff bf86 	b.w	8005188 <std>
 800527c:	20000468 	.word	0x20000468
 8005280:	20000330 	.word	0x20000330
 8005284:	080051f5 	.word	0x080051f5

08005288 <__sfp_lock_acquire>:
 8005288:	4801      	ldr	r0, [pc, #4]	; (8005290 <__sfp_lock_acquire+0x8>)
 800528a:	f000 bad0 	b.w	800582e <__retarget_lock_acquire_recursive>
 800528e:	bf00      	nop
 8005290:	20000471 	.word	0x20000471

08005294 <__sfp_lock_release>:
 8005294:	4801      	ldr	r0, [pc, #4]	; (800529c <__sfp_lock_release+0x8>)
 8005296:	f000 bacb 	b.w	8005830 <__retarget_lock_release_recursive>
 800529a:	bf00      	nop
 800529c:	20000471 	.word	0x20000471

080052a0 <__sinit>:
 80052a0:	b510      	push	{r4, lr}
 80052a2:	4604      	mov	r4, r0
 80052a4:	f7ff fff0 	bl	8005288 <__sfp_lock_acquire>
 80052a8:	6a23      	ldr	r3, [r4, #32]
 80052aa:	b11b      	cbz	r3, 80052b4 <__sinit+0x14>
 80052ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052b0:	f7ff bff0 	b.w	8005294 <__sfp_lock_release>
 80052b4:	4b04      	ldr	r3, [pc, #16]	; (80052c8 <__sinit+0x28>)
 80052b6:	6223      	str	r3, [r4, #32]
 80052b8:	4b04      	ldr	r3, [pc, #16]	; (80052cc <__sinit+0x2c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1f5      	bne.n	80052ac <__sinit+0xc>
 80052c0:	f7ff ffc4 	bl	800524c <global_stdio_init.part.0>
 80052c4:	e7f2      	b.n	80052ac <__sinit+0xc>
 80052c6:	bf00      	nop
 80052c8:	0800520d 	.word	0x0800520d
 80052cc:	20000468 	.word	0x20000468

080052d0 <_fwalk_sglue>:
 80052d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052d4:	4607      	mov	r7, r0
 80052d6:	4688      	mov	r8, r1
 80052d8:	4614      	mov	r4, r2
 80052da:	2600      	movs	r6, #0
 80052dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052e0:	f1b9 0901 	subs.w	r9, r9, #1
 80052e4:	d505      	bpl.n	80052f2 <_fwalk_sglue+0x22>
 80052e6:	6824      	ldr	r4, [r4, #0]
 80052e8:	2c00      	cmp	r4, #0
 80052ea:	d1f7      	bne.n	80052dc <_fwalk_sglue+0xc>
 80052ec:	4630      	mov	r0, r6
 80052ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052f2:	89ab      	ldrh	r3, [r5, #12]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d907      	bls.n	8005308 <_fwalk_sglue+0x38>
 80052f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052fc:	3301      	adds	r3, #1
 80052fe:	d003      	beq.n	8005308 <_fwalk_sglue+0x38>
 8005300:	4629      	mov	r1, r5
 8005302:	4638      	mov	r0, r7
 8005304:	47c0      	blx	r8
 8005306:	4306      	orrs	r6, r0
 8005308:	3568      	adds	r5, #104	; 0x68
 800530a:	e7e9      	b.n	80052e0 <_fwalk_sglue+0x10>

0800530c <iprintf>:
 800530c:	b40f      	push	{r0, r1, r2, r3}
 800530e:	b507      	push	{r0, r1, r2, lr}
 8005310:	4906      	ldr	r1, [pc, #24]	; (800532c <iprintf+0x20>)
 8005312:	ab04      	add	r3, sp, #16
 8005314:	6808      	ldr	r0, [r1, #0]
 8005316:	f853 2b04 	ldr.w	r2, [r3], #4
 800531a:	6881      	ldr	r1, [r0, #8]
 800531c:	9301      	str	r3, [sp, #4]
 800531e:	f002 fecf 	bl	80080c0 <_vfiprintf_r>
 8005322:	b003      	add	sp, #12
 8005324:	f85d eb04 	ldr.w	lr, [sp], #4
 8005328:	b004      	add	sp, #16
 800532a:	4770      	bx	lr
 800532c:	20000064 	.word	0x20000064

08005330 <_puts_r>:
 8005330:	6a03      	ldr	r3, [r0, #32]
 8005332:	b570      	push	{r4, r5, r6, lr}
 8005334:	6884      	ldr	r4, [r0, #8]
 8005336:	4605      	mov	r5, r0
 8005338:	460e      	mov	r6, r1
 800533a:	b90b      	cbnz	r3, 8005340 <_puts_r+0x10>
 800533c:	f7ff ffb0 	bl	80052a0 <__sinit>
 8005340:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005342:	07db      	lsls	r3, r3, #31
 8005344:	d405      	bmi.n	8005352 <_puts_r+0x22>
 8005346:	89a3      	ldrh	r3, [r4, #12]
 8005348:	0598      	lsls	r0, r3, #22
 800534a:	d402      	bmi.n	8005352 <_puts_r+0x22>
 800534c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800534e:	f000 fa6e 	bl	800582e <__retarget_lock_acquire_recursive>
 8005352:	89a3      	ldrh	r3, [r4, #12]
 8005354:	0719      	lsls	r1, r3, #28
 8005356:	d513      	bpl.n	8005380 <_puts_r+0x50>
 8005358:	6923      	ldr	r3, [r4, #16]
 800535a:	b18b      	cbz	r3, 8005380 <_puts_r+0x50>
 800535c:	3e01      	subs	r6, #1
 800535e:	68a3      	ldr	r3, [r4, #8]
 8005360:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005364:	3b01      	subs	r3, #1
 8005366:	60a3      	str	r3, [r4, #8]
 8005368:	b9e9      	cbnz	r1, 80053a6 <_puts_r+0x76>
 800536a:	2b00      	cmp	r3, #0
 800536c:	da2e      	bge.n	80053cc <_puts_r+0x9c>
 800536e:	4622      	mov	r2, r4
 8005370:	210a      	movs	r1, #10
 8005372:	4628      	mov	r0, r5
 8005374:	f000 f949 	bl	800560a <__swbuf_r>
 8005378:	3001      	adds	r0, #1
 800537a:	d007      	beq.n	800538c <_puts_r+0x5c>
 800537c:	250a      	movs	r5, #10
 800537e:	e007      	b.n	8005390 <_puts_r+0x60>
 8005380:	4621      	mov	r1, r4
 8005382:	4628      	mov	r0, r5
 8005384:	f000 f97e 	bl	8005684 <__swsetup_r>
 8005388:	2800      	cmp	r0, #0
 800538a:	d0e7      	beq.n	800535c <_puts_r+0x2c>
 800538c:	f04f 35ff 	mov.w	r5, #4294967295
 8005390:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005392:	07da      	lsls	r2, r3, #31
 8005394:	d405      	bmi.n	80053a2 <_puts_r+0x72>
 8005396:	89a3      	ldrh	r3, [r4, #12]
 8005398:	059b      	lsls	r3, r3, #22
 800539a:	d402      	bmi.n	80053a2 <_puts_r+0x72>
 800539c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800539e:	f000 fa47 	bl	8005830 <__retarget_lock_release_recursive>
 80053a2:	4628      	mov	r0, r5
 80053a4:	bd70      	pop	{r4, r5, r6, pc}
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	da04      	bge.n	80053b4 <_puts_r+0x84>
 80053aa:	69a2      	ldr	r2, [r4, #24]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	dc06      	bgt.n	80053be <_puts_r+0x8e>
 80053b0:	290a      	cmp	r1, #10
 80053b2:	d004      	beq.n	80053be <_puts_r+0x8e>
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	6022      	str	r2, [r4, #0]
 80053ba:	7019      	strb	r1, [r3, #0]
 80053bc:	e7cf      	b.n	800535e <_puts_r+0x2e>
 80053be:	4622      	mov	r2, r4
 80053c0:	4628      	mov	r0, r5
 80053c2:	f000 f922 	bl	800560a <__swbuf_r>
 80053c6:	3001      	adds	r0, #1
 80053c8:	d1c9      	bne.n	800535e <_puts_r+0x2e>
 80053ca:	e7df      	b.n	800538c <_puts_r+0x5c>
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	250a      	movs	r5, #10
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	6022      	str	r2, [r4, #0]
 80053d4:	701d      	strb	r5, [r3, #0]
 80053d6:	e7db      	b.n	8005390 <_puts_r+0x60>

080053d8 <puts>:
 80053d8:	4b02      	ldr	r3, [pc, #8]	; (80053e4 <puts+0xc>)
 80053da:	4601      	mov	r1, r0
 80053dc:	6818      	ldr	r0, [r3, #0]
 80053de:	f7ff bfa7 	b.w	8005330 <_puts_r>
 80053e2:	bf00      	nop
 80053e4:	20000064 	.word	0x20000064

080053e8 <setvbuf>:
 80053e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80053ec:	461d      	mov	r5, r3
 80053ee:	4b54      	ldr	r3, [pc, #336]	; (8005540 <setvbuf+0x158>)
 80053f0:	681f      	ldr	r7, [r3, #0]
 80053f2:	4604      	mov	r4, r0
 80053f4:	460e      	mov	r6, r1
 80053f6:	4690      	mov	r8, r2
 80053f8:	b127      	cbz	r7, 8005404 <setvbuf+0x1c>
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	b913      	cbnz	r3, 8005404 <setvbuf+0x1c>
 80053fe:	4638      	mov	r0, r7
 8005400:	f7ff ff4e 	bl	80052a0 <__sinit>
 8005404:	f1b8 0f02 	cmp.w	r8, #2
 8005408:	d006      	beq.n	8005418 <setvbuf+0x30>
 800540a:	f1b8 0f01 	cmp.w	r8, #1
 800540e:	f200 8094 	bhi.w	800553a <setvbuf+0x152>
 8005412:	2d00      	cmp	r5, #0
 8005414:	f2c0 8091 	blt.w	800553a <setvbuf+0x152>
 8005418:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800541a:	07da      	lsls	r2, r3, #31
 800541c:	d405      	bmi.n	800542a <setvbuf+0x42>
 800541e:	89a3      	ldrh	r3, [r4, #12]
 8005420:	059b      	lsls	r3, r3, #22
 8005422:	d402      	bmi.n	800542a <setvbuf+0x42>
 8005424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005426:	f000 fa02 	bl	800582e <__retarget_lock_acquire_recursive>
 800542a:	4621      	mov	r1, r4
 800542c:	4638      	mov	r0, r7
 800542e:	f002 ffe7 	bl	8008400 <_fflush_r>
 8005432:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005434:	b141      	cbz	r1, 8005448 <setvbuf+0x60>
 8005436:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800543a:	4299      	cmp	r1, r3
 800543c:	d002      	beq.n	8005444 <setvbuf+0x5c>
 800543e:	4638      	mov	r0, r7
 8005440:	f001 f878 	bl	8006534 <_free_r>
 8005444:	2300      	movs	r3, #0
 8005446:	6363      	str	r3, [r4, #52]	; 0x34
 8005448:	2300      	movs	r3, #0
 800544a:	61a3      	str	r3, [r4, #24]
 800544c:	6063      	str	r3, [r4, #4]
 800544e:	89a3      	ldrh	r3, [r4, #12]
 8005450:	0618      	lsls	r0, r3, #24
 8005452:	d503      	bpl.n	800545c <setvbuf+0x74>
 8005454:	6921      	ldr	r1, [r4, #16]
 8005456:	4638      	mov	r0, r7
 8005458:	f001 f86c 	bl	8006534 <_free_r>
 800545c:	89a3      	ldrh	r3, [r4, #12]
 800545e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005462:	f023 0303 	bic.w	r3, r3, #3
 8005466:	f1b8 0f02 	cmp.w	r8, #2
 800546a:	81a3      	strh	r3, [r4, #12]
 800546c:	d05f      	beq.n	800552e <setvbuf+0x146>
 800546e:	ab01      	add	r3, sp, #4
 8005470:	466a      	mov	r2, sp
 8005472:	4621      	mov	r1, r4
 8005474:	4638      	mov	r0, r7
 8005476:	f002 ffeb 	bl	8008450 <__swhatbuf_r>
 800547a:	89a3      	ldrh	r3, [r4, #12]
 800547c:	4318      	orrs	r0, r3
 800547e:	81a0      	strh	r0, [r4, #12]
 8005480:	bb2d      	cbnz	r5, 80054ce <setvbuf+0xe6>
 8005482:	9d00      	ldr	r5, [sp, #0]
 8005484:	4628      	mov	r0, r5
 8005486:	f001 f8a1 	bl	80065cc <malloc>
 800548a:	4606      	mov	r6, r0
 800548c:	2800      	cmp	r0, #0
 800548e:	d150      	bne.n	8005532 <setvbuf+0x14a>
 8005490:	f8dd 9000 	ldr.w	r9, [sp]
 8005494:	45a9      	cmp	r9, r5
 8005496:	d13e      	bne.n	8005516 <setvbuf+0x12e>
 8005498:	f04f 35ff 	mov.w	r5, #4294967295
 800549c:	2200      	movs	r2, #0
 800549e:	60a2      	str	r2, [r4, #8]
 80054a0:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80054a4:	6022      	str	r2, [r4, #0]
 80054a6:	6122      	str	r2, [r4, #16]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054ae:	6162      	str	r2, [r4, #20]
 80054b0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054b2:	f043 0302 	orr.w	r3, r3, #2
 80054b6:	07d1      	lsls	r1, r2, #31
 80054b8:	81a3      	strh	r3, [r4, #12]
 80054ba:	d404      	bmi.n	80054c6 <setvbuf+0xde>
 80054bc:	059b      	lsls	r3, r3, #22
 80054be:	d402      	bmi.n	80054c6 <setvbuf+0xde>
 80054c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054c2:	f000 f9b5 	bl	8005830 <__retarget_lock_release_recursive>
 80054c6:	4628      	mov	r0, r5
 80054c8:	b003      	add	sp, #12
 80054ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054ce:	2e00      	cmp	r6, #0
 80054d0:	d0d8      	beq.n	8005484 <setvbuf+0x9c>
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	b913      	cbnz	r3, 80054dc <setvbuf+0xf4>
 80054d6:	4638      	mov	r0, r7
 80054d8:	f7ff fee2 	bl	80052a0 <__sinit>
 80054dc:	f1b8 0f01 	cmp.w	r8, #1
 80054e0:	bf08      	it	eq
 80054e2:	89a3      	ldrheq	r3, [r4, #12]
 80054e4:	6026      	str	r6, [r4, #0]
 80054e6:	bf04      	itt	eq
 80054e8:	f043 0301 	orreq.w	r3, r3, #1
 80054ec:	81a3      	strheq	r3, [r4, #12]
 80054ee:	89a3      	ldrh	r3, [r4, #12]
 80054f0:	f013 0208 	ands.w	r2, r3, #8
 80054f4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80054f8:	d01d      	beq.n	8005536 <setvbuf+0x14e>
 80054fa:	07da      	lsls	r2, r3, #31
 80054fc:	bf41      	itttt	mi
 80054fe:	2200      	movmi	r2, #0
 8005500:	426d      	negmi	r5, r5
 8005502:	60a2      	strmi	r2, [r4, #8]
 8005504:	61a5      	strmi	r5, [r4, #24]
 8005506:	bf58      	it	pl
 8005508:	60a5      	strpl	r5, [r4, #8]
 800550a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800550c:	f015 0501 	ands.w	r5, r5, #1
 8005510:	d0d4      	beq.n	80054bc <setvbuf+0xd4>
 8005512:	2500      	movs	r5, #0
 8005514:	e7d7      	b.n	80054c6 <setvbuf+0xde>
 8005516:	4648      	mov	r0, r9
 8005518:	f001 f858 	bl	80065cc <malloc>
 800551c:	4606      	mov	r6, r0
 800551e:	2800      	cmp	r0, #0
 8005520:	d0ba      	beq.n	8005498 <setvbuf+0xb0>
 8005522:	89a3      	ldrh	r3, [r4, #12]
 8005524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005528:	81a3      	strh	r3, [r4, #12]
 800552a:	464d      	mov	r5, r9
 800552c:	e7d1      	b.n	80054d2 <setvbuf+0xea>
 800552e:	2500      	movs	r5, #0
 8005530:	e7b4      	b.n	800549c <setvbuf+0xb4>
 8005532:	46a9      	mov	r9, r5
 8005534:	e7f5      	b.n	8005522 <setvbuf+0x13a>
 8005536:	60a2      	str	r2, [r4, #8]
 8005538:	e7e7      	b.n	800550a <setvbuf+0x122>
 800553a:	f04f 35ff 	mov.w	r5, #4294967295
 800553e:	e7c2      	b.n	80054c6 <setvbuf+0xde>
 8005540:	20000064 	.word	0x20000064

08005544 <siprintf>:
 8005544:	b40e      	push	{r1, r2, r3}
 8005546:	b500      	push	{lr}
 8005548:	b09c      	sub	sp, #112	; 0x70
 800554a:	ab1d      	add	r3, sp, #116	; 0x74
 800554c:	9002      	str	r0, [sp, #8]
 800554e:	9006      	str	r0, [sp, #24]
 8005550:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005554:	4809      	ldr	r0, [pc, #36]	; (800557c <siprintf+0x38>)
 8005556:	9107      	str	r1, [sp, #28]
 8005558:	9104      	str	r1, [sp, #16]
 800555a:	4909      	ldr	r1, [pc, #36]	; (8005580 <siprintf+0x3c>)
 800555c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005560:	9105      	str	r1, [sp, #20]
 8005562:	6800      	ldr	r0, [r0, #0]
 8005564:	9301      	str	r3, [sp, #4]
 8005566:	a902      	add	r1, sp, #8
 8005568:	f002 fc82 	bl	8007e70 <_svfiprintf_r>
 800556c:	9b02      	ldr	r3, [sp, #8]
 800556e:	2200      	movs	r2, #0
 8005570:	701a      	strb	r2, [r3, #0]
 8005572:	b01c      	add	sp, #112	; 0x70
 8005574:	f85d eb04 	ldr.w	lr, [sp], #4
 8005578:	b003      	add	sp, #12
 800557a:	4770      	bx	lr
 800557c:	20000064 	.word	0x20000064
 8005580:	ffff0208 	.word	0xffff0208

08005584 <__sread>:
 8005584:	b510      	push	{r4, lr}
 8005586:	460c      	mov	r4, r1
 8005588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800558c:	f000 f900 	bl	8005790 <_read_r>
 8005590:	2800      	cmp	r0, #0
 8005592:	bfab      	itete	ge
 8005594:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005596:	89a3      	ldrhlt	r3, [r4, #12]
 8005598:	181b      	addge	r3, r3, r0
 800559a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800559e:	bfac      	ite	ge
 80055a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80055a2:	81a3      	strhlt	r3, [r4, #12]
 80055a4:	bd10      	pop	{r4, pc}

080055a6 <__swrite>:
 80055a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055aa:	461f      	mov	r7, r3
 80055ac:	898b      	ldrh	r3, [r1, #12]
 80055ae:	05db      	lsls	r3, r3, #23
 80055b0:	4605      	mov	r5, r0
 80055b2:	460c      	mov	r4, r1
 80055b4:	4616      	mov	r6, r2
 80055b6:	d505      	bpl.n	80055c4 <__swrite+0x1e>
 80055b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055bc:	2302      	movs	r3, #2
 80055be:	2200      	movs	r2, #0
 80055c0:	f000 f8d4 	bl	800576c <_lseek_r>
 80055c4:	89a3      	ldrh	r3, [r4, #12]
 80055c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055ce:	81a3      	strh	r3, [r4, #12]
 80055d0:	4632      	mov	r2, r6
 80055d2:	463b      	mov	r3, r7
 80055d4:	4628      	mov	r0, r5
 80055d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055da:	f000 b8eb 	b.w	80057b4 <_write_r>

080055de <__sseek>:
 80055de:	b510      	push	{r4, lr}
 80055e0:	460c      	mov	r4, r1
 80055e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055e6:	f000 f8c1 	bl	800576c <_lseek_r>
 80055ea:	1c43      	adds	r3, r0, #1
 80055ec:	89a3      	ldrh	r3, [r4, #12]
 80055ee:	bf15      	itete	ne
 80055f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80055f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055fa:	81a3      	strheq	r3, [r4, #12]
 80055fc:	bf18      	it	ne
 80055fe:	81a3      	strhne	r3, [r4, #12]
 8005600:	bd10      	pop	{r4, pc}

08005602 <__sclose>:
 8005602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005606:	f000 b8a1 	b.w	800574c <_close_r>

0800560a <__swbuf_r>:
 800560a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560c:	460e      	mov	r6, r1
 800560e:	4614      	mov	r4, r2
 8005610:	4605      	mov	r5, r0
 8005612:	b118      	cbz	r0, 800561c <__swbuf_r+0x12>
 8005614:	6a03      	ldr	r3, [r0, #32]
 8005616:	b90b      	cbnz	r3, 800561c <__swbuf_r+0x12>
 8005618:	f7ff fe42 	bl	80052a0 <__sinit>
 800561c:	69a3      	ldr	r3, [r4, #24]
 800561e:	60a3      	str	r3, [r4, #8]
 8005620:	89a3      	ldrh	r3, [r4, #12]
 8005622:	071a      	lsls	r2, r3, #28
 8005624:	d525      	bpl.n	8005672 <__swbuf_r+0x68>
 8005626:	6923      	ldr	r3, [r4, #16]
 8005628:	b31b      	cbz	r3, 8005672 <__swbuf_r+0x68>
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	6922      	ldr	r2, [r4, #16]
 800562e:	1a98      	subs	r0, r3, r2
 8005630:	6963      	ldr	r3, [r4, #20]
 8005632:	b2f6      	uxtb	r6, r6
 8005634:	4283      	cmp	r3, r0
 8005636:	4637      	mov	r7, r6
 8005638:	dc04      	bgt.n	8005644 <__swbuf_r+0x3a>
 800563a:	4621      	mov	r1, r4
 800563c:	4628      	mov	r0, r5
 800563e:	f002 fedf 	bl	8008400 <_fflush_r>
 8005642:	b9e0      	cbnz	r0, 800567e <__swbuf_r+0x74>
 8005644:	68a3      	ldr	r3, [r4, #8]
 8005646:	3b01      	subs	r3, #1
 8005648:	60a3      	str	r3, [r4, #8]
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	6022      	str	r2, [r4, #0]
 8005650:	701e      	strb	r6, [r3, #0]
 8005652:	6962      	ldr	r2, [r4, #20]
 8005654:	1c43      	adds	r3, r0, #1
 8005656:	429a      	cmp	r2, r3
 8005658:	d004      	beq.n	8005664 <__swbuf_r+0x5a>
 800565a:	89a3      	ldrh	r3, [r4, #12]
 800565c:	07db      	lsls	r3, r3, #31
 800565e:	d506      	bpl.n	800566e <__swbuf_r+0x64>
 8005660:	2e0a      	cmp	r6, #10
 8005662:	d104      	bne.n	800566e <__swbuf_r+0x64>
 8005664:	4621      	mov	r1, r4
 8005666:	4628      	mov	r0, r5
 8005668:	f002 feca 	bl	8008400 <_fflush_r>
 800566c:	b938      	cbnz	r0, 800567e <__swbuf_r+0x74>
 800566e:	4638      	mov	r0, r7
 8005670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005672:	4621      	mov	r1, r4
 8005674:	4628      	mov	r0, r5
 8005676:	f000 f805 	bl	8005684 <__swsetup_r>
 800567a:	2800      	cmp	r0, #0
 800567c:	d0d5      	beq.n	800562a <__swbuf_r+0x20>
 800567e:	f04f 37ff 	mov.w	r7, #4294967295
 8005682:	e7f4      	b.n	800566e <__swbuf_r+0x64>

08005684 <__swsetup_r>:
 8005684:	b538      	push	{r3, r4, r5, lr}
 8005686:	4b2a      	ldr	r3, [pc, #168]	; (8005730 <__swsetup_r+0xac>)
 8005688:	4605      	mov	r5, r0
 800568a:	6818      	ldr	r0, [r3, #0]
 800568c:	460c      	mov	r4, r1
 800568e:	b118      	cbz	r0, 8005698 <__swsetup_r+0x14>
 8005690:	6a03      	ldr	r3, [r0, #32]
 8005692:	b90b      	cbnz	r3, 8005698 <__swsetup_r+0x14>
 8005694:	f7ff fe04 	bl	80052a0 <__sinit>
 8005698:	89a3      	ldrh	r3, [r4, #12]
 800569a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800569e:	0718      	lsls	r0, r3, #28
 80056a0:	d422      	bmi.n	80056e8 <__swsetup_r+0x64>
 80056a2:	06d9      	lsls	r1, r3, #27
 80056a4:	d407      	bmi.n	80056b6 <__swsetup_r+0x32>
 80056a6:	2309      	movs	r3, #9
 80056a8:	602b      	str	r3, [r5, #0]
 80056aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80056ae:	81a3      	strh	r3, [r4, #12]
 80056b0:	f04f 30ff 	mov.w	r0, #4294967295
 80056b4:	e034      	b.n	8005720 <__swsetup_r+0x9c>
 80056b6:	0758      	lsls	r0, r3, #29
 80056b8:	d512      	bpl.n	80056e0 <__swsetup_r+0x5c>
 80056ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056bc:	b141      	cbz	r1, 80056d0 <__swsetup_r+0x4c>
 80056be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056c2:	4299      	cmp	r1, r3
 80056c4:	d002      	beq.n	80056cc <__swsetup_r+0x48>
 80056c6:	4628      	mov	r0, r5
 80056c8:	f000 ff34 	bl	8006534 <_free_r>
 80056cc:	2300      	movs	r3, #0
 80056ce:	6363      	str	r3, [r4, #52]	; 0x34
 80056d0:	89a3      	ldrh	r3, [r4, #12]
 80056d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056d6:	81a3      	strh	r3, [r4, #12]
 80056d8:	2300      	movs	r3, #0
 80056da:	6063      	str	r3, [r4, #4]
 80056dc:	6923      	ldr	r3, [r4, #16]
 80056de:	6023      	str	r3, [r4, #0]
 80056e0:	89a3      	ldrh	r3, [r4, #12]
 80056e2:	f043 0308 	orr.w	r3, r3, #8
 80056e6:	81a3      	strh	r3, [r4, #12]
 80056e8:	6923      	ldr	r3, [r4, #16]
 80056ea:	b94b      	cbnz	r3, 8005700 <__swsetup_r+0x7c>
 80056ec:	89a3      	ldrh	r3, [r4, #12]
 80056ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056f6:	d003      	beq.n	8005700 <__swsetup_r+0x7c>
 80056f8:	4621      	mov	r1, r4
 80056fa:	4628      	mov	r0, r5
 80056fc:	f002 fece 	bl	800849c <__smakebuf_r>
 8005700:	89a0      	ldrh	r0, [r4, #12]
 8005702:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005706:	f010 0301 	ands.w	r3, r0, #1
 800570a:	d00a      	beq.n	8005722 <__swsetup_r+0x9e>
 800570c:	2300      	movs	r3, #0
 800570e:	60a3      	str	r3, [r4, #8]
 8005710:	6963      	ldr	r3, [r4, #20]
 8005712:	425b      	negs	r3, r3
 8005714:	61a3      	str	r3, [r4, #24]
 8005716:	6923      	ldr	r3, [r4, #16]
 8005718:	b943      	cbnz	r3, 800572c <__swsetup_r+0xa8>
 800571a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800571e:	d1c4      	bne.n	80056aa <__swsetup_r+0x26>
 8005720:	bd38      	pop	{r3, r4, r5, pc}
 8005722:	0781      	lsls	r1, r0, #30
 8005724:	bf58      	it	pl
 8005726:	6963      	ldrpl	r3, [r4, #20]
 8005728:	60a3      	str	r3, [r4, #8]
 800572a:	e7f4      	b.n	8005716 <__swsetup_r+0x92>
 800572c:	2000      	movs	r0, #0
 800572e:	e7f7      	b.n	8005720 <__swsetup_r+0x9c>
 8005730:	20000064 	.word	0x20000064

08005734 <memset>:
 8005734:	4402      	add	r2, r0
 8005736:	4603      	mov	r3, r0
 8005738:	4293      	cmp	r3, r2
 800573a:	d100      	bne.n	800573e <memset+0xa>
 800573c:	4770      	bx	lr
 800573e:	f803 1b01 	strb.w	r1, [r3], #1
 8005742:	e7f9      	b.n	8005738 <memset+0x4>

08005744 <_localeconv_r>:
 8005744:	4800      	ldr	r0, [pc, #0]	; (8005748 <_localeconv_r+0x4>)
 8005746:	4770      	bx	lr
 8005748:	20000158 	.word	0x20000158

0800574c <_close_r>:
 800574c:	b538      	push	{r3, r4, r5, lr}
 800574e:	4d06      	ldr	r5, [pc, #24]	; (8005768 <_close_r+0x1c>)
 8005750:	2300      	movs	r3, #0
 8005752:	4604      	mov	r4, r0
 8005754:	4608      	mov	r0, r1
 8005756:	602b      	str	r3, [r5, #0]
 8005758:	f7fc faa1 	bl	8001c9e <_close>
 800575c:	1c43      	adds	r3, r0, #1
 800575e:	d102      	bne.n	8005766 <_close_r+0x1a>
 8005760:	682b      	ldr	r3, [r5, #0]
 8005762:	b103      	cbz	r3, 8005766 <_close_r+0x1a>
 8005764:	6023      	str	r3, [r4, #0]
 8005766:	bd38      	pop	{r3, r4, r5, pc}
 8005768:	2000046c 	.word	0x2000046c

0800576c <_lseek_r>:
 800576c:	b538      	push	{r3, r4, r5, lr}
 800576e:	4d07      	ldr	r5, [pc, #28]	; (800578c <_lseek_r+0x20>)
 8005770:	4604      	mov	r4, r0
 8005772:	4608      	mov	r0, r1
 8005774:	4611      	mov	r1, r2
 8005776:	2200      	movs	r2, #0
 8005778:	602a      	str	r2, [r5, #0]
 800577a:	461a      	mov	r2, r3
 800577c:	f7fc fab6 	bl	8001cec <_lseek>
 8005780:	1c43      	adds	r3, r0, #1
 8005782:	d102      	bne.n	800578a <_lseek_r+0x1e>
 8005784:	682b      	ldr	r3, [r5, #0]
 8005786:	b103      	cbz	r3, 800578a <_lseek_r+0x1e>
 8005788:	6023      	str	r3, [r4, #0]
 800578a:	bd38      	pop	{r3, r4, r5, pc}
 800578c:	2000046c 	.word	0x2000046c

08005790 <_read_r>:
 8005790:	b538      	push	{r3, r4, r5, lr}
 8005792:	4d07      	ldr	r5, [pc, #28]	; (80057b0 <_read_r+0x20>)
 8005794:	4604      	mov	r4, r0
 8005796:	4608      	mov	r0, r1
 8005798:	4611      	mov	r1, r2
 800579a:	2200      	movs	r2, #0
 800579c:	602a      	str	r2, [r5, #0]
 800579e:	461a      	mov	r2, r3
 80057a0:	f7fc fa44 	bl	8001c2c <_read>
 80057a4:	1c43      	adds	r3, r0, #1
 80057a6:	d102      	bne.n	80057ae <_read_r+0x1e>
 80057a8:	682b      	ldr	r3, [r5, #0]
 80057aa:	b103      	cbz	r3, 80057ae <_read_r+0x1e>
 80057ac:	6023      	str	r3, [r4, #0]
 80057ae:	bd38      	pop	{r3, r4, r5, pc}
 80057b0:	2000046c 	.word	0x2000046c

080057b4 <_write_r>:
 80057b4:	b538      	push	{r3, r4, r5, lr}
 80057b6:	4d07      	ldr	r5, [pc, #28]	; (80057d4 <_write_r+0x20>)
 80057b8:	4604      	mov	r4, r0
 80057ba:	4608      	mov	r0, r1
 80057bc:	4611      	mov	r1, r2
 80057be:	2200      	movs	r2, #0
 80057c0:	602a      	str	r2, [r5, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	f7fc fa4f 	bl	8001c66 <_write>
 80057c8:	1c43      	adds	r3, r0, #1
 80057ca:	d102      	bne.n	80057d2 <_write_r+0x1e>
 80057cc:	682b      	ldr	r3, [r5, #0]
 80057ce:	b103      	cbz	r3, 80057d2 <_write_r+0x1e>
 80057d0:	6023      	str	r3, [r4, #0]
 80057d2:	bd38      	pop	{r3, r4, r5, pc}
 80057d4:	2000046c 	.word	0x2000046c

080057d8 <__errno>:
 80057d8:	4b01      	ldr	r3, [pc, #4]	; (80057e0 <__errno+0x8>)
 80057da:	6818      	ldr	r0, [r3, #0]
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	20000064 	.word	0x20000064

080057e4 <__libc_init_array>:
 80057e4:	b570      	push	{r4, r5, r6, lr}
 80057e6:	4d0d      	ldr	r5, [pc, #52]	; (800581c <__libc_init_array+0x38>)
 80057e8:	4c0d      	ldr	r4, [pc, #52]	; (8005820 <__libc_init_array+0x3c>)
 80057ea:	1b64      	subs	r4, r4, r5
 80057ec:	10a4      	asrs	r4, r4, #2
 80057ee:	2600      	movs	r6, #0
 80057f0:	42a6      	cmp	r6, r4
 80057f2:	d109      	bne.n	8005808 <__libc_init_array+0x24>
 80057f4:	4d0b      	ldr	r5, [pc, #44]	; (8005824 <__libc_init_array+0x40>)
 80057f6:	4c0c      	ldr	r4, [pc, #48]	; (8005828 <__libc_init_array+0x44>)
 80057f8:	f003 fb42 	bl	8008e80 <_init>
 80057fc:	1b64      	subs	r4, r4, r5
 80057fe:	10a4      	asrs	r4, r4, #2
 8005800:	2600      	movs	r6, #0
 8005802:	42a6      	cmp	r6, r4
 8005804:	d105      	bne.n	8005812 <__libc_init_array+0x2e>
 8005806:	bd70      	pop	{r4, r5, r6, pc}
 8005808:	f855 3b04 	ldr.w	r3, [r5], #4
 800580c:	4798      	blx	r3
 800580e:	3601      	adds	r6, #1
 8005810:	e7ee      	b.n	80057f0 <__libc_init_array+0xc>
 8005812:	f855 3b04 	ldr.w	r3, [r5], #4
 8005816:	4798      	blx	r3
 8005818:	3601      	adds	r6, #1
 800581a:	e7f2      	b.n	8005802 <__libc_init_array+0x1e>
 800581c:	08009348 	.word	0x08009348
 8005820:	08009348 	.word	0x08009348
 8005824:	08009348 	.word	0x08009348
 8005828:	0800934c 	.word	0x0800934c

0800582c <__retarget_lock_init_recursive>:
 800582c:	4770      	bx	lr

0800582e <__retarget_lock_acquire_recursive>:
 800582e:	4770      	bx	lr

08005830 <__retarget_lock_release_recursive>:
 8005830:	4770      	bx	lr
	...

08005834 <nanf>:
 8005834:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800583c <nanf+0x8>
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	7fc00000 	.word	0x7fc00000

08005840 <quorem>:
 8005840:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005844:	6903      	ldr	r3, [r0, #16]
 8005846:	690c      	ldr	r4, [r1, #16]
 8005848:	42a3      	cmp	r3, r4
 800584a:	4607      	mov	r7, r0
 800584c:	db7e      	blt.n	800594c <quorem+0x10c>
 800584e:	3c01      	subs	r4, #1
 8005850:	f101 0814 	add.w	r8, r1, #20
 8005854:	f100 0514 	add.w	r5, r0, #20
 8005858:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800585c:	9301      	str	r3, [sp, #4]
 800585e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005862:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005866:	3301      	adds	r3, #1
 8005868:	429a      	cmp	r2, r3
 800586a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800586e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005872:	fbb2 f6f3 	udiv	r6, r2, r3
 8005876:	d331      	bcc.n	80058dc <quorem+0x9c>
 8005878:	f04f 0e00 	mov.w	lr, #0
 800587c:	4640      	mov	r0, r8
 800587e:	46ac      	mov	ip, r5
 8005880:	46f2      	mov	sl, lr
 8005882:	f850 2b04 	ldr.w	r2, [r0], #4
 8005886:	b293      	uxth	r3, r2
 8005888:	fb06 e303 	mla	r3, r6, r3, lr
 800588c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005890:	0c1a      	lsrs	r2, r3, #16
 8005892:	b29b      	uxth	r3, r3
 8005894:	ebaa 0303 	sub.w	r3, sl, r3
 8005898:	f8dc a000 	ldr.w	sl, [ip]
 800589c:	fa13 f38a 	uxtah	r3, r3, sl
 80058a0:	fb06 220e 	mla	r2, r6, lr, r2
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	9b00      	ldr	r3, [sp, #0]
 80058a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80058ac:	b292      	uxth	r2, r2
 80058ae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80058b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058b6:	f8bd 3000 	ldrh.w	r3, [sp]
 80058ba:	4581      	cmp	r9, r0
 80058bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058c0:	f84c 3b04 	str.w	r3, [ip], #4
 80058c4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80058c8:	d2db      	bcs.n	8005882 <quorem+0x42>
 80058ca:	f855 300b 	ldr.w	r3, [r5, fp]
 80058ce:	b92b      	cbnz	r3, 80058dc <quorem+0x9c>
 80058d0:	9b01      	ldr	r3, [sp, #4]
 80058d2:	3b04      	subs	r3, #4
 80058d4:	429d      	cmp	r5, r3
 80058d6:	461a      	mov	r2, r3
 80058d8:	d32c      	bcc.n	8005934 <quorem+0xf4>
 80058da:	613c      	str	r4, [r7, #16]
 80058dc:	4638      	mov	r0, r7
 80058de:	f001 f9ef 	bl	8006cc0 <__mcmp>
 80058e2:	2800      	cmp	r0, #0
 80058e4:	db22      	blt.n	800592c <quorem+0xec>
 80058e6:	3601      	adds	r6, #1
 80058e8:	4629      	mov	r1, r5
 80058ea:	2000      	movs	r0, #0
 80058ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80058f0:	f8d1 c000 	ldr.w	ip, [r1]
 80058f4:	b293      	uxth	r3, r2
 80058f6:	1ac3      	subs	r3, r0, r3
 80058f8:	0c12      	lsrs	r2, r2, #16
 80058fa:	fa13 f38c 	uxtah	r3, r3, ip
 80058fe:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005902:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005906:	b29b      	uxth	r3, r3
 8005908:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800590c:	45c1      	cmp	r9, r8
 800590e:	f841 3b04 	str.w	r3, [r1], #4
 8005912:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005916:	d2e9      	bcs.n	80058ec <quorem+0xac>
 8005918:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800591c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005920:	b922      	cbnz	r2, 800592c <quorem+0xec>
 8005922:	3b04      	subs	r3, #4
 8005924:	429d      	cmp	r5, r3
 8005926:	461a      	mov	r2, r3
 8005928:	d30a      	bcc.n	8005940 <quorem+0x100>
 800592a:	613c      	str	r4, [r7, #16]
 800592c:	4630      	mov	r0, r6
 800592e:	b003      	add	sp, #12
 8005930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005934:	6812      	ldr	r2, [r2, #0]
 8005936:	3b04      	subs	r3, #4
 8005938:	2a00      	cmp	r2, #0
 800593a:	d1ce      	bne.n	80058da <quorem+0x9a>
 800593c:	3c01      	subs	r4, #1
 800593e:	e7c9      	b.n	80058d4 <quorem+0x94>
 8005940:	6812      	ldr	r2, [r2, #0]
 8005942:	3b04      	subs	r3, #4
 8005944:	2a00      	cmp	r2, #0
 8005946:	d1f0      	bne.n	800592a <quorem+0xea>
 8005948:	3c01      	subs	r4, #1
 800594a:	e7eb      	b.n	8005924 <quorem+0xe4>
 800594c:	2000      	movs	r0, #0
 800594e:	e7ee      	b.n	800592e <quorem+0xee>

08005950 <_dtoa_r>:
 8005950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005954:	ed2d 8b04 	vpush	{d8-d9}
 8005958:	69c5      	ldr	r5, [r0, #28]
 800595a:	b093      	sub	sp, #76	; 0x4c
 800595c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005960:	ec57 6b10 	vmov	r6, r7, d0
 8005964:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005968:	9107      	str	r1, [sp, #28]
 800596a:	4604      	mov	r4, r0
 800596c:	920a      	str	r2, [sp, #40]	; 0x28
 800596e:	930d      	str	r3, [sp, #52]	; 0x34
 8005970:	b975      	cbnz	r5, 8005990 <_dtoa_r+0x40>
 8005972:	2010      	movs	r0, #16
 8005974:	f000 fe2a 	bl	80065cc <malloc>
 8005978:	4602      	mov	r2, r0
 800597a:	61e0      	str	r0, [r4, #28]
 800597c:	b920      	cbnz	r0, 8005988 <_dtoa_r+0x38>
 800597e:	4bae      	ldr	r3, [pc, #696]	; (8005c38 <_dtoa_r+0x2e8>)
 8005980:	21ef      	movs	r1, #239	; 0xef
 8005982:	48ae      	ldr	r0, [pc, #696]	; (8005c3c <_dtoa_r+0x2ec>)
 8005984:	f002 fe3c 	bl	8008600 <__assert_func>
 8005988:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800598c:	6005      	str	r5, [r0, #0]
 800598e:	60c5      	str	r5, [r0, #12]
 8005990:	69e3      	ldr	r3, [r4, #28]
 8005992:	6819      	ldr	r1, [r3, #0]
 8005994:	b151      	cbz	r1, 80059ac <_dtoa_r+0x5c>
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	604a      	str	r2, [r1, #4]
 800599a:	2301      	movs	r3, #1
 800599c:	4093      	lsls	r3, r2
 800599e:	608b      	str	r3, [r1, #8]
 80059a0:	4620      	mov	r0, r4
 80059a2:	f000 ff07 	bl	80067b4 <_Bfree>
 80059a6:	69e3      	ldr	r3, [r4, #28]
 80059a8:	2200      	movs	r2, #0
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	1e3b      	subs	r3, r7, #0
 80059ae:	bfbb      	ittet	lt
 80059b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80059b4:	9303      	strlt	r3, [sp, #12]
 80059b6:	2300      	movge	r3, #0
 80059b8:	2201      	movlt	r2, #1
 80059ba:	bfac      	ite	ge
 80059bc:	f8c8 3000 	strge.w	r3, [r8]
 80059c0:	f8c8 2000 	strlt.w	r2, [r8]
 80059c4:	4b9e      	ldr	r3, [pc, #632]	; (8005c40 <_dtoa_r+0x2f0>)
 80059c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80059ca:	ea33 0308 	bics.w	r3, r3, r8
 80059ce:	d11b      	bne.n	8005a08 <_dtoa_r+0xb8>
 80059d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80059d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80059d6:	6013      	str	r3, [r2, #0]
 80059d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80059dc:	4333      	orrs	r3, r6
 80059de:	f000 8593 	beq.w	8006508 <_dtoa_r+0xbb8>
 80059e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059e4:	b963      	cbnz	r3, 8005a00 <_dtoa_r+0xb0>
 80059e6:	4b97      	ldr	r3, [pc, #604]	; (8005c44 <_dtoa_r+0x2f4>)
 80059e8:	e027      	b.n	8005a3a <_dtoa_r+0xea>
 80059ea:	4b97      	ldr	r3, [pc, #604]	; (8005c48 <_dtoa_r+0x2f8>)
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	3308      	adds	r3, #8
 80059f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80059f2:	6013      	str	r3, [r2, #0]
 80059f4:	9800      	ldr	r0, [sp, #0]
 80059f6:	b013      	add	sp, #76	; 0x4c
 80059f8:	ecbd 8b04 	vpop	{d8-d9}
 80059fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a00:	4b90      	ldr	r3, [pc, #576]	; (8005c44 <_dtoa_r+0x2f4>)
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	3303      	adds	r3, #3
 8005a06:	e7f3      	b.n	80059f0 <_dtoa_r+0xa0>
 8005a08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	ec51 0b17 	vmov	r0, r1, d7
 8005a12:	eeb0 8a47 	vmov.f32	s16, s14
 8005a16:	eef0 8a67 	vmov.f32	s17, s15
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	f7fb f85c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a20:	4681      	mov	r9, r0
 8005a22:	b160      	cbz	r0, 8005a3e <_dtoa_r+0xee>
 8005a24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a26:	2301      	movs	r3, #1
 8005a28:	6013      	str	r3, [r2, #0]
 8005a2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 8568 	beq.w	8006502 <_dtoa_r+0xbb2>
 8005a32:	4b86      	ldr	r3, [pc, #536]	; (8005c4c <_dtoa_r+0x2fc>)
 8005a34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a36:	6013      	str	r3, [r2, #0]
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	e7da      	b.n	80059f4 <_dtoa_r+0xa4>
 8005a3e:	aa10      	add	r2, sp, #64	; 0x40
 8005a40:	a911      	add	r1, sp, #68	; 0x44
 8005a42:	4620      	mov	r0, r4
 8005a44:	eeb0 0a48 	vmov.f32	s0, s16
 8005a48:	eef0 0a68 	vmov.f32	s1, s17
 8005a4c:	f001 fa4e 	bl	8006eec <__d2b>
 8005a50:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005a54:	4682      	mov	sl, r0
 8005a56:	2d00      	cmp	r5, #0
 8005a58:	d07f      	beq.n	8005b5a <_dtoa_r+0x20a>
 8005a5a:	ee18 3a90 	vmov	r3, s17
 8005a5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a62:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005a66:	ec51 0b18 	vmov	r0, r1, d8
 8005a6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005a6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005a72:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005a76:	4619      	mov	r1, r3
 8005a78:	2200      	movs	r2, #0
 8005a7a:	4b75      	ldr	r3, [pc, #468]	; (8005c50 <_dtoa_r+0x300>)
 8005a7c:	f7fa fc0c 	bl	8000298 <__aeabi_dsub>
 8005a80:	a367      	add	r3, pc, #412	; (adr r3, 8005c20 <_dtoa_r+0x2d0>)
 8005a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a86:	f7fa fdbf 	bl	8000608 <__aeabi_dmul>
 8005a8a:	a367      	add	r3, pc, #412	; (adr r3, 8005c28 <_dtoa_r+0x2d8>)
 8005a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a90:	f7fa fc04 	bl	800029c <__adddf3>
 8005a94:	4606      	mov	r6, r0
 8005a96:	4628      	mov	r0, r5
 8005a98:	460f      	mov	r7, r1
 8005a9a:	f7fa fd4b 	bl	8000534 <__aeabi_i2d>
 8005a9e:	a364      	add	r3, pc, #400	; (adr r3, 8005c30 <_dtoa_r+0x2e0>)
 8005aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa4:	f7fa fdb0 	bl	8000608 <__aeabi_dmul>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	460b      	mov	r3, r1
 8005aac:	4630      	mov	r0, r6
 8005aae:	4639      	mov	r1, r7
 8005ab0:	f7fa fbf4 	bl	800029c <__adddf3>
 8005ab4:	4606      	mov	r6, r0
 8005ab6:	460f      	mov	r7, r1
 8005ab8:	f7fb f856 	bl	8000b68 <__aeabi_d2iz>
 8005abc:	2200      	movs	r2, #0
 8005abe:	4683      	mov	fp, r0
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	4639      	mov	r1, r7
 8005ac6:	f7fb f811 	bl	8000aec <__aeabi_dcmplt>
 8005aca:	b148      	cbz	r0, 8005ae0 <_dtoa_r+0x190>
 8005acc:	4658      	mov	r0, fp
 8005ace:	f7fa fd31 	bl	8000534 <__aeabi_i2d>
 8005ad2:	4632      	mov	r2, r6
 8005ad4:	463b      	mov	r3, r7
 8005ad6:	f7fa ffff 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ada:	b908      	cbnz	r0, 8005ae0 <_dtoa_r+0x190>
 8005adc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ae0:	f1bb 0f16 	cmp.w	fp, #22
 8005ae4:	d857      	bhi.n	8005b96 <_dtoa_r+0x246>
 8005ae6:	4b5b      	ldr	r3, [pc, #364]	; (8005c54 <_dtoa_r+0x304>)
 8005ae8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af0:	ec51 0b18 	vmov	r0, r1, d8
 8005af4:	f7fa fffa 	bl	8000aec <__aeabi_dcmplt>
 8005af8:	2800      	cmp	r0, #0
 8005afa:	d04e      	beq.n	8005b9a <_dtoa_r+0x24a>
 8005afc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b00:	2300      	movs	r3, #0
 8005b02:	930c      	str	r3, [sp, #48]	; 0x30
 8005b04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b06:	1b5b      	subs	r3, r3, r5
 8005b08:	1e5a      	subs	r2, r3, #1
 8005b0a:	bf45      	ittet	mi
 8005b0c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005b10:	9305      	strmi	r3, [sp, #20]
 8005b12:	2300      	movpl	r3, #0
 8005b14:	2300      	movmi	r3, #0
 8005b16:	9206      	str	r2, [sp, #24]
 8005b18:	bf54      	ite	pl
 8005b1a:	9305      	strpl	r3, [sp, #20]
 8005b1c:	9306      	strmi	r3, [sp, #24]
 8005b1e:	f1bb 0f00 	cmp.w	fp, #0
 8005b22:	db3c      	blt.n	8005b9e <_dtoa_r+0x24e>
 8005b24:	9b06      	ldr	r3, [sp, #24]
 8005b26:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005b2a:	445b      	add	r3, fp
 8005b2c:	9306      	str	r3, [sp, #24]
 8005b2e:	2300      	movs	r3, #0
 8005b30:	9308      	str	r3, [sp, #32]
 8005b32:	9b07      	ldr	r3, [sp, #28]
 8005b34:	2b09      	cmp	r3, #9
 8005b36:	d868      	bhi.n	8005c0a <_dtoa_r+0x2ba>
 8005b38:	2b05      	cmp	r3, #5
 8005b3a:	bfc4      	itt	gt
 8005b3c:	3b04      	subgt	r3, #4
 8005b3e:	9307      	strgt	r3, [sp, #28]
 8005b40:	9b07      	ldr	r3, [sp, #28]
 8005b42:	f1a3 0302 	sub.w	r3, r3, #2
 8005b46:	bfcc      	ite	gt
 8005b48:	2500      	movgt	r5, #0
 8005b4a:	2501      	movle	r5, #1
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	f200 8085 	bhi.w	8005c5c <_dtoa_r+0x30c>
 8005b52:	e8df f003 	tbb	[pc, r3]
 8005b56:	3b2e      	.short	0x3b2e
 8005b58:	5839      	.short	0x5839
 8005b5a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005b5e:	441d      	add	r5, r3
 8005b60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005b64:	2b20      	cmp	r3, #32
 8005b66:	bfc1      	itttt	gt
 8005b68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005b6c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005b70:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005b74:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005b78:	bfd6      	itet	le
 8005b7a:	f1c3 0320 	rsble	r3, r3, #32
 8005b7e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005b82:	fa06 f003 	lslle.w	r0, r6, r3
 8005b86:	f7fa fcc5 	bl	8000514 <__aeabi_ui2d>
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005b90:	3d01      	subs	r5, #1
 8005b92:	920e      	str	r2, [sp, #56]	; 0x38
 8005b94:	e76f      	b.n	8005a76 <_dtoa_r+0x126>
 8005b96:	2301      	movs	r3, #1
 8005b98:	e7b3      	b.n	8005b02 <_dtoa_r+0x1b2>
 8005b9a:	900c      	str	r0, [sp, #48]	; 0x30
 8005b9c:	e7b2      	b.n	8005b04 <_dtoa_r+0x1b4>
 8005b9e:	9b05      	ldr	r3, [sp, #20]
 8005ba0:	eba3 030b 	sub.w	r3, r3, fp
 8005ba4:	9305      	str	r3, [sp, #20]
 8005ba6:	f1cb 0300 	rsb	r3, fp, #0
 8005baa:	9308      	str	r3, [sp, #32]
 8005bac:	2300      	movs	r3, #0
 8005bae:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bb0:	e7bf      	b.n	8005b32 <_dtoa_r+0x1e2>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8005bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	dc52      	bgt.n	8005c62 <_dtoa_r+0x312>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	9301      	str	r3, [sp, #4]
 8005bc0:	9304      	str	r3, [sp, #16]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	920a      	str	r2, [sp, #40]	; 0x28
 8005bc6:	e00b      	b.n	8005be0 <_dtoa_r+0x290>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e7f3      	b.n	8005bb4 <_dtoa_r+0x264>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	9309      	str	r3, [sp, #36]	; 0x24
 8005bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bd2:	445b      	add	r3, fp
 8005bd4:	9301      	str	r3, [sp, #4]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	9304      	str	r3, [sp, #16]
 8005bdc:	bfb8      	it	lt
 8005bde:	2301      	movlt	r3, #1
 8005be0:	69e0      	ldr	r0, [r4, #28]
 8005be2:	2100      	movs	r1, #0
 8005be4:	2204      	movs	r2, #4
 8005be6:	f102 0614 	add.w	r6, r2, #20
 8005bea:	429e      	cmp	r6, r3
 8005bec:	d93d      	bls.n	8005c6a <_dtoa_r+0x31a>
 8005bee:	6041      	str	r1, [r0, #4]
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	f000 fd9f 	bl	8006734 <_Balloc>
 8005bf6:	9000      	str	r0, [sp, #0]
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	d139      	bne.n	8005c70 <_dtoa_r+0x320>
 8005bfc:	4b16      	ldr	r3, [pc, #88]	; (8005c58 <_dtoa_r+0x308>)
 8005bfe:	4602      	mov	r2, r0
 8005c00:	f240 11af 	movw	r1, #431	; 0x1af
 8005c04:	e6bd      	b.n	8005982 <_dtoa_r+0x32>
 8005c06:	2301      	movs	r3, #1
 8005c08:	e7e1      	b.n	8005bce <_dtoa_r+0x27e>
 8005c0a:	2501      	movs	r5, #1
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	9307      	str	r3, [sp, #28]
 8005c10:	9509      	str	r5, [sp, #36]	; 0x24
 8005c12:	f04f 33ff 	mov.w	r3, #4294967295
 8005c16:	9301      	str	r3, [sp, #4]
 8005c18:	9304      	str	r3, [sp, #16]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	2312      	movs	r3, #18
 8005c1e:	e7d1      	b.n	8005bc4 <_dtoa_r+0x274>
 8005c20:	636f4361 	.word	0x636f4361
 8005c24:	3fd287a7 	.word	0x3fd287a7
 8005c28:	8b60c8b3 	.word	0x8b60c8b3
 8005c2c:	3fc68a28 	.word	0x3fc68a28
 8005c30:	509f79fb 	.word	0x509f79fb
 8005c34:	3fd34413 	.word	0x3fd34413
 8005c38:	08008f5e 	.word	0x08008f5e
 8005c3c:	08008f75 	.word	0x08008f75
 8005c40:	7ff00000 	.word	0x7ff00000
 8005c44:	08008f5a 	.word	0x08008f5a
 8005c48:	08008f51 	.word	0x08008f51
 8005c4c:	08008f29 	.word	0x08008f29
 8005c50:	3ff80000 	.word	0x3ff80000
 8005c54:	08009060 	.word	0x08009060
 8005c58:	08008fcd 	.word	0x08008fcd
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c60:	e7d7      	b.n	8005c12 <_dtoa_r+0x2c2>
 8005c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c64:	9301      	str	r3, [sp, #4]
 8005c66:	9304      	str	r3, [sp, #16]
 8005c68:	e7ba      	b.n	8005be0 <_dtoa_r+0x290>
 8005c6a:	3101      	adds	r1, #1
 8005c6c:	0052      	lsls	r2, r2, #1
 8005c6e:	e7ba      	b.n	8005be6 <_dtoa_r+0x296>
 8005c70:	69e3      	ldr	r3, [r4, #28]
 8005c72:	9a00      	ldr	r2, [sp, #0]
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	9b04      	ldr	r3, [sp, #16]
 8005c78:	2b0e      	cmp	r3, #14
 8005c7a:	f200 80a8 	bhi.w	8005dce <_dtoa_r+0x47e>
 8005c7e:	2d00      	cmp	r5, #0
 8005c80:	f000 80a5 	beq.w	8005dce <_dtoa_r+0x47e>
 8005c84:	f1bb 0f00 	cmp.w	fp, #0
 8005c88:	dd38      	ble.n	8005cfc <_dtoa_r+0x3ac>
 8005c8a:	4bc0      	ldr	r3, [pc, #768]	; (8005f8c <_dtoa_r+0x63c>)
 8005c8c:	f00b 020f 	and.w	r2, fp, #15
 8005c90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005c98:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005c9c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005ca0:	d019      	beq.n	8005cd6 <_dtoa_r+0x386>
 8005ca2:	4bbb      	ldr	r3, [pc, #748]	; (8005f90 <_dtoa_r+0x640>)
 8005ca4:	ec51 0b18 	vmov	r0, r1, d8
 8005ca8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005cac:	f7fa fdd6 	bl	800085c <__aeabi_ddiv>
 8005cb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cb4:	f008 080f 	and.w	r8, r8, #15
 8005cb8:	2503      	movs	r5, #3
 8005cba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005f90 <_dtoa_r+0x640>
 8005cbe:	f1b8 0f00 	cmp.w	r8, #0
 8005cc2:	d10a      	bne.n	8005cda <_dtoa_r+0x38a>
 8005cc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cc8:	4632      	mov	r2, r6
 8005cca:	463b      	mov	r3, r7
 8005ccc:	f7fa fdc6 	bl	800085c <__aeabi_ddiv>
 8005cd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cd4:	e02b      	b.n	8005d2e <_dtoa_r+0x3de>
 8005cd6:	2502      	movs	r5, #2
 8005cd8:	e7ef      	b.n	8005cba <_dtoa_r+0x36a>
 8005cda:	f018 0f01 	tst.w	r8, #1
 8005cde:	d008      	beq.n	8005cf2 <_dtoa_r+0x3a2>
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	4639      	mov	r1, r7
 8005ce4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005ce8:	f7fa fc8e 	bl	8000608 <__aeabi_dmul>
 8005cec:	3501      	adds	r5, #1
 8005cee:	4606      	mov	r6, r0
 8005cf0:	460f      	mov	r7, r1
 8005cf2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005cf6:	f109 0908 	add.w	r9, r9, #8
 8005cfa:	e7e0      	b.n	8005cbe <_dtoa_r+0x36e>
 8005cfc:	f000 809f 	beq.w	8005e3e <_dtoa_r+0x4ee>
 8005d00:	f1cb 0600 	rsb	r6, fp, #0
 8005d04:	4ba1      	ldr	r3, [pc, #644]	; (8005f8c <_dtoa_r+0x63c>)
 8005d06:	4fa2      	ldr	r7, [pc, #648]	; (8005f90 <_dtoa_r+0x640>)
 8005d08:	f006 020f 	and.w	r2, r6, #15
 8005d0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d14:	ec51 0b18 	vmov	r0, r1, d8
 8005d18:	f7fa fc76 	bl	8000608 <__aeabi_dmul>
 8005d1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d20:	1136      	asrs	r6, r6, #4
 8005d22:	2300      	movs	r3, #0
 8005d24:	2502      	movs	r5, #2
 8005d26:	2e00      	cmp	r6, #0
 8005d28:	d17e      	bne.n	8005e28 <_dtoa_r+0x4d8>
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1d0      	bne.n	8005cd0 <_dtoa_r+0x380>
 8005d2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d30:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 8084 	beq.w	8005e42 <_dtoa_r+0x4f2>
 8005d3a:	4b96      	ldr	r3, [pc, #600]	; (8005f94 <_dtoa_r+0x644>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	4640      	mov	r0, r8
 8005d40:	4649      	mov	r1, r9
 8005d42:	f7fa fed3 	bl	8000aec <__aeabi_dcmplt>
 8005d46:	2800      	cmp	r0, #0
 8005d48:	d07b      	beq.n	8005e42 <_dtoa_r+0x4f2>
 8005d4a:	9b04      	ldr	r3, [sp, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d078      	beq.n	8005e42 <_dtoa_r+0x4f2>
 8005d50:	9b01      	ldr	r3, [sp, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	dd39      	ble.n	8005dca <_dtoa_r+0x47a>
 8005d56:	4b90      	ldr	r3, [pc, #576]	; (8005f98 <_dtoa_r+0x648>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	4640      	mov	r0, r8
 8005d5c:	4649      	mov	r1, r9
 8005d5e:	f7fa fc53 	bl	8000608 <__aeabi_dmul>
 8005d62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d66:	9e01      	ldr	r6, [sp, #4]
 8005d68:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005d6c:	3501      	adds	r5, #1
 8005d6e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005d72:	4628      	mov	r0, r5
 8005d74:	f7fa fbde 	bl	8000534 <__aeabi_i2d>
 8005d78:	4642      	mov	r2, r8
 8005d7a:	464b      	mov	r3, r9
 8005d7c:	f7fa fc44 	bl	8000608 <__aeabi_dmul>
 8005d80:	4b86      	ldr	r3, [pc, #536]	; (8005f9c <_dtoa_r+0x64c>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	f7fa fa8a 	bl	800029c <__adddf3>
 8005d88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005d8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d90:	9303      	str	r3, [sp, #12]
 8005d92:	2e00      	cmp	r6, #0
 8005d94:	d158      	bne.n	8005e48 <_dtoa_r+0x4f8>
 8005d96:	4b82      	ldr	r3, [pc, #520]	; (8005fa0 <_dtoa_r+0x650>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	4640      	mov	r0, r8
 8005d9c:	4649      	mov	r1, r9
 8005d9e:	f7fa fa7b 	bl	8000298 <__aeabi_dsub>
 8005da2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005da6:	4680      	mov	r8, r0
 8005da8:	4689      	mov	r9, r1
 8005daa:	f7fa febd 	bl	8000b28 <__aeabi_dcmpgt>
 8005dae:	2800      	cmp	r0, #0
 8005db0:	f040 8296 	bne.w	80062e0 <_dtoa_r+0x990>
 8005db4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005db8:	4640      	mov	r0, r8
 8005dba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005dbe:	4649      	mov	r1, r9
 8005dc0:	f7fa fe94 	bl	8000aec <__aeabi_dcmplt>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	f040 8289 	bne.w	80062dc <_dtoa_r+0x98c>
 8005dca:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005dce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f2c0 814e 	blt.w	8006072 <_dtoa_r+0x722>
 8005dd6:	f1bb 0f0e 	cmp.w	fp, #14
 8005dda:	f300 814a 	bgt.w	8006072 <_dtoa_r+0x722>
 8005dde:	4b6b      	ldr	r3, [pc, #428]	; (8005f8c <_dtoa_r+0x63c>)
 8005de0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005de4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f280 80dc 	bge.w	8005fa8 <_dtoa_r+0x658>
 8005df0:	9b04      	ldr	r3, [sp, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f300 80d8 	bgt.w	8005fa8 <_dtoa_r+0x658>
 8005df8:	f040 826f 	bne.w	80062da <_dtoa_r+0x98a>
 8005dfc:	4b68      	ldr	r3, [pc, #416]	; (8005fa0 <_dtoa_r+0x650>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	4640      	mov	r0, r8
 8005e02:	4649      	mov	r1, r9
 8005e04:	f7fa fc00 	bl	8000608 <__aeabi_dmul>
 8005e08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e0c:	f7fa fe82 	bl	8000b14 <__aeabi_dcmpge>
 8005e10:	9e04      	ldr	r6, [sp, #16]
 8005e12:	4637      	mov	r7, r6
 8005e14:	2800      	cmp	r0, #0
 8005e16:	f040 8245 	bne.w	80062a4 <_dtoa_r+0x954>
 8005e1a:	9d00      	ldr	r5, [sp, #0]
 8005e1c:	2331      	movs	r3, #49	; 0x31
 8005e1e:	f805 3b01 	strb.w	r3, [r5], #1
 8005e22:	f10b 0b01 	add.w	fp, fp, #1
 8005e26:	e241      	b.n	80062ac <_dtoa_r+0x95c>
 8005e28:	07f2      	lsls	r2, r6, #31
 8005e2a:	d505      	bpl.n	8005e38 <_dtoa_r+0x4e8>
 8005e2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e30:	f7fa fbea 	bl	8000608 <__aeabi_dmul>
 8005e34:	3501      	adds	r5, #1
 8005e36:	2301      	movs	r3, #1
 8005e38:	1076      	asrs	r6, r6, #1
 8005e3a:	3708      	adds	r7, #8
 8005e3c:	e773      	b.n	8005d26 <_dtoa_r+0x3d6>
 8005e3e:	2502      	movs	r5, #2
 8005e40:	e775      	b.n	8005d2e <_dtoa_r+0x3de>
 8005e42:	9e04      	ldr	r6, [sp, #16]
 8005e44:	465f      	mov	r7, fp
 8005e46:	e792      	b.n	8005d6e <_dtoa_r+0x41e>
 8005e48:	9900      	ldr	r1, [sp, #0]
 8005e4a:	4b50      	ldr	r3, [pc, #320]	; (8005f8c <_dtoa_r+0x63c>)
 8005e4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e50:	4431      	add	r1, r6
 8005e52:	9102      	str	r1, [sp, #8]
 8005e54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e56:	eeb0 9a47 	vmov.f32	s18, s14
 8005e5a:	eef0 9a67 	vmov.f32	s19, s15
 8005e5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005e62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e66:	2900      	cmp	r1, #0
 8005e68:	d044      	beq.n	8005ef4 <_dtoa_r+0x5a4>
 8005e6a:	494e      	ldr	r1, [pc, #312]	; (8005fa4 <_dtoa_r+0x654>)
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	f7fa fcf5 	bl	800085c <__aeabi_ddiv>
 8005e72:	ec53 2b19 	vmov	r2, r3, d9
 8005e76:	f7fa fa0f 	bl	8000298 <__aeabi_dsub>
 8005e7a:	9d00      	ldr	r5, [sp, #0]
 8005e7c:	ec41 0b19 	vmov	d9, r0, r1
 8005e80:	4649      	mov	r1, r9
 8005e82:	4640      	mov	r0, r8
 8005e84:	f7fa fe70 	bl	8000b68 <__aeabi_d2iz>
 8005e88:	4606      	mov	r6, r0
 8005e8a:	f7fa fb53 	bl	8000534 <__aeabi_i2d>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	4640      	mov	r0, r8
 8005e94:	4649      	mov	r1, r9
 8005e96:	f7fa f9ff 	bl	8000298 <__aeabi_dsub>
 8005e9a:	3630      	adds	r6, #48	; 0x30
 8005e9c:	f805 6b01 	strb.w	r6, [r5], #1
 8005ea0:	ec53 2b19 	vmov	r2, r3, d9
 8005ea4:	4680      	mov	r8, r0
 8005ea6:	4689      	mov	r9, r1
 8005ea8:	f7fa fe20 	bl	8000aec <__aeabi_dcmplt>
 8005eac:	2800      	cmp	r0, #0
 8005eae:	d164      	bne.n	8005f7a <_dtoa_r+0x62a>
 8005eb0:	4642      	mov	r2, r8
 8005eb2:	464b      	mov	r3, r9
 8005eb4:	4937      	ldr	r1, [pc, #220]	; (8005f94 <_dtoa_r+0x644>)
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	f7fa f9ee 	bl	8000298 <__aeabi_dsub>
 8005ebc:	ec53 2b19 	vmov	r2, r3, d9
 8005ec0:	f7fa fe14 	bl	8000aec <__aeabi_dcmplt>
 8005ec4:	2800      	cmp	r0, #0
 8005ec6:	f040 80b6 	bne.w	8006036 <_dtoa_r+0x6e6>
 8005eca:	9b02      	ldr	r3, [sp, #8]
 8005ecc:	429d      	cmp	r5, r3
 8005ece:	f43f af7c 	beq.w	8005dca <_dtoa_r+0x47a>
 8005ed2:	4b31      	ldr	r3, [pc, #196]	; (8005f98 <_dtoa_r+0x648>)
 8005ed4:	ec51 0b19 	vmov	r0, r1, d9
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f7fa fb95 	bl	8000608 <__aeabi_dmul>
 8005ede:	4b2e      	ldr	r3, [pc, #184]	; (8005f98 <_dtoa_r+0x648>)
 8005ee0:	ec41 0b19 	vmov	d9, r0, r1
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	4640      	mov	r0, r8
 8005ee8:	4649      	mov	r1, r9
 8005eea:	f7fa fb8d 	bl	8000608 <__aeabi_dmul>
 8005eee:	4680      	mov	r8, r0
 8005ef0:	4689      	mov	r9, r1
 8005ef2:	e7c5      	b.n	8005e80 <_dtoa_r+0x530>
 8005ef4:	ec51 0b17 	vmov	r0, r1, d7
 8005ef8:	f7fa fb86 	bl	8000608 <__aeabi_dmul>
 8005efc:	9b02      	ldr	r3, [sp, #8]
 8005efe:	9d00      	ldr	r5, [sp, #0]
 8005f00:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f02:	ec41 0b19 	vmov	d9, r0, r1
 8005f06:	4649      	mov	r1, r9
 8005f08:	4640      	mov	r0, r8
 8005f0a:	f7fa fe2d 	bl	8000b68 <__aeabi_d2iz>
 8005f0e:	4606      	mov	r6, r0
 8005f10:	f7fa fb10 	bl	8000534 <__aeabi_i2d>
 8005f14:	3630      	adds	r6, #48	; 0x30
 8005f16:	4602      	mov	r2, r0
 8005f18:	460b      	mov	r3, r1
 8005f1a:	4640      	mov	r0, r8
 8005f1c:	4649      	mov	r1, r9
 8005f1e:	f7fa f9bb 	bl	8000298 <__aeabi_dsub>
 8005f22:	f805 6b01 	strb.w	r6, [r5], #1
 8005f26:	9b02      	ldr	r3, [sp, #8]
 8005f28:	429d      	cmp	r5, r3
 8005f2a:	4680      	mov	r8, r0
 8005f2c:	4689      	mov	r9, r1
 8005f2e:	f04f 0200 	mov.w	r2, #0
 8005f32:	d124      	bne.n	8005f7e <_dtoa_r+0x62e>
 8005f34:	4b1b      	ldr	r3, [pc, #108]	; (8005fa4 <_dtoa_r+0x654>)
 8005f36:	ec51 0b19 	vmov	r0, r1, d9
 8005f3a:	f7fa f9af 	bl	800029c <__adddf3>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	460b      	mov	r3, r1
 8005f42:	4640      	mov	r0, r8
 8005f44:	4649      	mov	r1, r9
 8005f46:	f7fa fdef 	bl	8000b28 <__aeabi_dcmpgt>
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	d173      	bne.n	8006036 <_dtoa_r+0x6e6>
 8005f4e:	ec53 2b19 	vmov	r2, r3, d9
 8005f52:	4914      	ldr	r1, [pc, #80]	; (8005fa4 <_dtoa_r+0x654>)
 8005f54:	2000      	movs	r0, #0
 8005f56:	f7fa f99f 	bl	8000298 <__aeabi_dsub>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	4640      	mov	r0, r8
 8005f60:	4649      	mov	r1, r9
 8005f62:	f7fa fdc3 	bl	8000aec <__aeabi_dcmplt>
 8005f66:	2800      	cmp	r0, #0
 8005f68:	f43f af2f 	beq.w	8005dca <_dtoa_r+0x47a>
 8005f6c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005f6e:	1e6b      	subs	r3, r5, #1
 8005f70:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f76:	2b30      	cmp	r3, #48	; 0x30
 8005f78:	d0f8      	beq.n	8005f6c <_dtoa_r+0x61c>
 8005f7a:	46bb      	mov	fp, r7
 8005f7c:	e04a      	b.n	8006014 <_dtoa_r+0x6c4>
 8005f7e:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <_dtoa_r+0x648>)
 8005f80:	f7fa fb42 	bl	8000608 <__aeabi_dmul>
 8005f84:	4680      	mov	r8, r0
 8005f86:	4689      	mov	r9, r1
 8005f88:	e7bd      	b.n	8005f06 <_dtoa_r+0x5b6>
 8005f8a:	bf00      	nop
 8005f8c:	08009060 	.word	0x08009060
 8005f90:	08009038 	.word	0x08009038
 8005f94:	3ff00000 	.word	0x3ff00000
 8005f98:	40240000 	.word	0x40240000
 8005f9c:	401c0000 	.word	0x401c0000
 8005fa0:	40140000 	.word	0x40140000
 8005fa4:	3fe00000 	.word	0x3fe00000
 8005fa8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005fac:	9d00      	ldr	r5, [sp, #0]
 8005fae:	4642      	mov	r2, r8
 8005fb0:	464b      	mov	r3, r9
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	4639      	mov	r1, r7
 8005fb6:	f7fa fc51 	bl	800085c <__aeabi_ddiv>
 8005fba:	f7fa fdd5 	bl	8000b68 <__aeabi_d2iz>
 8005fbe:	9001      	str	r0, [sp, #4]
 8005fc0:	f7fa fab8 	bl	8000534 <__aeabi_i2d>
 8005fc4:	4642      	mov	r2, r8
 8005fc6:	464b      	mov	r3, r9
 8005fc8:	f7fa fb1e 	bl	8000608 <__aeabi_dmul>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	4639      	mov	r1, r7
 8005fd4:	f7fa f960 	bl	8000298 <__aeabi_dsub>
 8005fd8:	9e01      	ldr	r6, [sp, #4]
 8005fda:	9f04      	ldr	r7, [sp, #16]
 8005fdc:	3630      	adds	r6, #48	; 0x30
 8005fde:	f805 6b01 	strb.w	r6, [r5], #1
 8005fe2:	9e00      	ldr	r6, [sp, #0]
 8005fe4:	1bae      	subs	r6, r5, r6
 8005fe6:	42b7      	cmp	r7, r6
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	d134      	bne.n	8006058 <_dtoa_r+0x708>
 8005fee:	f7fa f955 	bl	800029c <__adddf3>
 8005ff2:	4642      	mov	r2, r8
 8005ff4:	464b      	mov	r3, r9
 8005ff6:	4606      	mov	r6, r0
 8005ff8:	460f      	mov	r7, r1
 8005ffa:	f7fa fd95 	bl	8000b28 <__aeabi_dcmpgt>
 8005ffe:	b9c8      	cbnz	r0, 8006034 <_dtoa_r+0x6e4>
 8006000:	4642      	mov	r2, r8
 8006002:	464b      	mov	r3, r9
 8006004:	4630      	mov	r0, r6
 8006006:	4639      	mov	r1, r7
 8006008:	f7fa fd66 	bl	8000ad8 <__aeabi_dcmpeq>
 800600c:	b110      	cbz	r0, 8006014 <_dtoa_r+0x6c4>
 800600e:	9b01      	ldr	r3, [sp, #4]
 8006010:	07db      	lsls	r3, r3, #31
 8006012:	d40f      	bmi.n	8006034 <_dtoa_r+0x6e4>
 8006014:	4651      	mov	r1, sl
 8006016:	4620      	mov	r0, r4
 8006018:	f000 fbcc 	bl	80067b4 <_Bfree>
 800601c:	2300      	movs	r3, #0
 800601e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006020:	702b      	strb	r3, [r5, #0]
 8006022:	f10b 0301 	add.w	r3, fp, #1
 8006026:	6013      	str	r3, [r2, #0]
 8006028:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800602a:	2b00      	cmp	r3, #0
 800602c:	f43f ace2 	beq.w	80059f4 <_dtoa_r+0xa4>
 8006030:	601d      	str	r5, [r3, #0]
 8006032:	e4df      	b.n	80059f4 <_dtoa_r+0xa4>
 8006034:	465f      	mov	r7, fp
 8006036:	462b      	mov	r3, r5
 8006038:	461d      	mov	r5, r3
 800603a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800603e:	2a39      	cmp	r2, #57	; 0x39
 8006040:	d106      	bne.n	8006050 <_dtoa_r+0x700>
 8006042:	9a00      	ldr	r2, [sp, #0]
 8006044:	429a      	cmp	r2, r3
 8006046:	d1f7      	bne.n	8006038 <_dtoa_r+0x6e8>
 8006048:	9900      	ldr	r1, [sp, #0]
 800604a:	2230      	movs	r2, #48	; 0x30
 800604c:	3701      	adds	r7, #1
 800604e:	700a      	strb	r2, [r1, #0]
 8006050:	781a      	ldrb	r2, [r3, #0]
 8006052:	3201      	adds	r2, #1
 8006054:	701a      	strb	r2, [r3, #0]
 8006056:	e790      	b.n	8005f7a <_dtoa_r+0x62a>
 8006058:	4ba3      	ldr	r3, [pc, #652]	; (80062e8 <_dtoa_r+0x998>)
 800605a:	2200      	movs	r2, #0
 800605c:	f7fa fad4 	bl	8000608 <__aeabi_dmul>
 8006060:	2200      	movs	r2, #0
 8006062:	2300      	movs	r3, #0
 8006064:	4606      	mov	r6, r0
 8006066:	460f      	mov	r7, r1
 8006068:	f7fa fd36 	bl	8000ad8 <__aeabi_dcmpeq>
 800606c:	2800      	cmp	r0, #0
 800606e:	d09e      	beq.n	8005fae <_dtoa_r+0x65e>
 8006070:	e7d0      	b.n	8006014 <_dtoa_r+0x6c4>
 8006072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006074:	2a00      	cmp	r2, #0
 8006076:	f000 80ca 	beq.w	800620e <_dtoa_r+0x8be>
 800607a:	9a07      	ldr	r2, [sp, #28]
 800607c:	2a01      	cmp	r2, #1
 800607e:	f300 80ad 	bgt.w	80061dc <_dtoa_r+0x88c>
 8006082:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006084:	2a00      	cmp	r2, #0
 8006086:	f000 80a5 	beq.w	80061d4 <_dtoa_r+0x884>
 800608a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800608e:	9e08      	ldr	r6, [sp, #32]
 8006090:	9d05      	ldr	r5, [sp, #20]
 8006092:	9a05      	ldr	r2, [sp, #20]
 8006094:	441a      	add	r2, r3
 8006096:	9205      	str	r2, [sp, #20]
 8006098:	9a06      	ldr	r2, [sp, #24]
 800609a:	2101      	movs	r1, #1
 800609c:	441a      	add	r2, r3
 800609e:	4620      	mov	r0, r4
 80060a0:	9206      	str	r2, [sp, #24]
 80060a2:	f000 fc87 	bl	80069b4 <__i2b>
 80060a6:	4607      	mov	r7, r0
 80060a8:	b165      	cbz	r5, 80060c4 <_dtoa_r+0x774>
 80060aa:	9b06      	ldr	r3, [sp, #24]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	dd09      	ble.n	80060c4 <_dtoa_r+0x774>
 80060b0:	42ab      	cmp	r3, r5
 80060b2:	9a05      	ldr	r2, [sp, #20]
 80060b4:	bfa8      	it	ge
 80060b6:	462b      	movge	r3, r5
 80060b8:	1ad2      	subs	r2, r2, r3
 80060ba:	9205      	str	r2, [sp, #20]
 80060bc:	9a06      	ldr	r2, [sp, #24]
 80060be:	1aed      	subs	r5, r5, r3
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	9306      	str	r3, [sp, #24]
 80060c4:	9b08      	ldr	r3, [sp, #32]
 80060c6:	b1f3      	cbz	r3, 8006106 <_dtoa_r+0x7b6>
 80060c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 80a3 	beq.w	8006216 <_dtoa_r+0x8c6>
 80060d0:	2e00      	cmp	r6, #0
 80060d2:	dd10      	ble.n	80060f6 <_dtoa_r+0x7a6>
 80060d4:	4639      	mov	r1, r7
 80060d6:	4632      	mov	r2, r6
 80060d8:	4620      	mov	r0, r4
 80060da:	f000 fd2b 	bl	8006b34 <__pow5mult>
 80060de:	4652      	mov	r2, sl
 80060e0:	4601      	mov	r1, r0
 80060e2:	4607      	mov	r7, r0
 80060e4:	4620      	mov	r0, r4
 80060e6:	f000 fc7b 	bl	80069e0 <__multiply>
 80060ea:	4651      	mov	r1, sl
 80060ec:	4680      	mov	r8, r0
 80060ee:	4620      	mov	r0, r4
 80060f0:	f000 fb60 	bl	80067b4 <_Bfree>
 80060f4:	46c2      	mov	sl, r8
 80060f6:	9b08      	ldr	r3, [sp, #32]
 80060f8:	1b9a      	subs	r2, r3, r6
 80060fa:	d004      	beq.n	8006106 <_dtoa_r+0x7b6>
 80060fc:	4651      	mov	r1, sl
 80060fe:	4620      	mov	r0, r4
 8006100:	f000 fd18 	bl	8006b34 <__pow5mult>
 8006104:	4682      	mov	sl, r0
 8006106:	2101      	movs	r1, #1
 8006108:	4620      	mov	r0, r4
 800610a:	f000 fc53 	bl	80069b4 <__i2b>
 800610e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006110:	2b00      	cmp	r3, #0
 8006112:	4606      	mov	r6, r0
 8006114:	f340 8081 	ble.w	800621a <_dtoa_r+0x8ca>
 8006118:	461a      	mov	r2, r3
 800611a:	4601      	mov	r1, r0
 800611c:	4620      	mov	r0, r4
 800611e:	f000 fd09 	bl	8006b34 <__pow5mult>
 8006122:	9b07      	ldr	r3, [sp, #28]
 8006124:	2b01      	cmp	r3, #1
 8006126:	4606      	mov	r6, r0
 8006128:	dd7a      	ble.n	8006220 <_dtoa_r+0x8d0>
 800612a:	f04f 0800 	mov.w	r8, #0
 800612e:	6933      	ldr	r3, [r6, #16]
 8006130:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006134:	6918      	ldr	r0, [r3, #16]
 8006136:	f000 fbef 	bl	8006918 <__hi0bits>
 800613a:	f1c0 0020 	rsb	r0, r0, #32
 800613e:	9b06      	ldr	r3, [sp, #24]
 8006140:	4418      	add	r0, r3
 8006142:	f010 001f 	ands.w	r0, r0, #31
 8006146:	f000 8094 	beq.w	8006272 <_dtoa_r+0x922>
 800614a:	f1c0 0320 	rsb	r3, r0, #32
 800614e:	2b04      	cmp	r3, #4
 8006150:	f340 8085 	ble.w	800625e <_dtoa_r+0x90e>
 8006154:	9b05      	ldr	r3, [sp, #20]
 8006156:	f1c0 001c 	rsb	r0, r0, #28
 800615a:	4403      	add	r3, r0
 800615c:	9305      	str	r3, [sp, #20]
 800615e:	9b06      	ldr	r3, [sp, #24]
 8006160:	4403      	add	r3, r0
 8006162:	4405      	add	r5, r0
 8006164:	9306      	str	r3, [sp, #24]
 8006166:	9b05      	ldr	r3, [sp, #20]
 8006168:	2b00      	cmp	r3, #0
 800616a:	dd05      	ble.n	8006178 <_dtoa_r+0x828>
 800616c:	4651      	mov	r1, sl
 800616e:	461a      	mov	r2, r3
 8006170:	4620      	mov	r0, r4
 8006172:	f000 fd39 	bl	8006be8 <__lshift>
 8006176:	4682      	mov	sl, r0
 8006178:	9b06      	ldr	r3, [sp, #24]
 800617a:	2b00      	cmp	r3, #0
 800617c:	dd05      	ble.n	800618a <_dtoa_r+0x83a>
 800617e:	4631      	mov	r1, r6
 8006180:	461a      	mov	r2, r3
 8006182:	4620      	mov	r0, r4
 8006184:	f000 fd30 	bl	8006be8 <__lshift>
 8006188:	4606      	mov	r6, r0
 800618a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800618c:	2b00      	cmp	r3, #0
 800618e:	d072      	beq.n	8006276 <_dtoa_r+0x926>
 8006190:	4631      	mov	r1, r6
 8006192:	4650      	mov	r0, sl
 8006194:	f000 fd94 	bl	8006cc0 <__mcmp>
 8006198:	2800      	cmp	r0, #0
 800619a:	da6c      	bge.n	8006276 <_dtoa_r+0x926>
 800619c:	2300      	movs	r3, #0
 800619e:	4651      	mov	r1, sl
 80061a0:	220a      	movs	r2, #10
 80061a2:	4620      	mov	r0, r4
 80061a4:	f000 fb28 	bl	80067f8 <__multadd>
 80061a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80061ae:	4682      	mov	sl, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 81b0 	beq.w	8006516 <_dtoa_r+0xbc6>
 80061b6:	2300      	movs	r3, #0
 80061b8:	4639      	mov	r1, r7
 80061ba:	220a      	movs	r2, #10
 80061bc:	4620      	mov	r0, r4
 80061be:	f000 fb1b 	bl	80067f8 <__multadd>
 80061c2:	9b01      	ldr	r3, [sp, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	4607      	mov	r7, r0
 80061c8:	f300 8096 	bgt.w	80062f8 <_dtoa_r+0x9a8>
 80061cc:	9b07      	ldr	r3, [sp, #28]
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	dc59      	bgt.n	8006286 <_dtoa_r+0x936>
 80061d2:	e091      	b.n	80062f8 <_dtoa_r+0x9a8>
 80061d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80061d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80061da:	e758      	b.n	800608e <_dtoa_r+0x73e>
 80061dc:	9b04      	ldr	r3, [sp, #16]
 80061de:	1e5e      	subs	r6, r3, #1
 80061e0:	9b08      	ldr	r3, [sp, #32]
 80061e2:	42b3      	cmp	r3, r6
 80061e4:	bfbf      	itttt	lt
 80061e6:	9b08      	ldrlt	r3, [sp, #32]
 80061e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80061ea:	9608      	strlt	r6, [sp, #32]
 80061ec:	1af3      	sublt	r3, r6, r3
 80061ee:	bfb4      	ite	lt
 80061f0:	18d2      	addlt	r2, r2, r3
 80061f2:	1b9e      	subge	r6, r3, r6
 80061f4:	9b04      	ldr	r3, [sp, #16]
 80061f6:	bfbc      	itt	lt
 80061f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80061fa:	2600      	movlt	r6, #0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	bfb7      	itett	lt
 8006200:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006204:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006208:	1a9d      	sublt	r5, r3, r2
 800620a:	2300      	movlt	r3, #0
 800620c:	e741      	b.n	8006092 <_dtoa_r+0x742>
 800620e:	9e08      	ldr	r6, [sp, #32]
 8006210:	9d05      	ldr	r5, [sp, #20]
 8006212:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006214:	e748      	b.n	80060a8 <_dtoa_r+0x758>
 8006216:	9a08      	ldr	r2, [sp, #32]
 8006218:	e770      	b.n	80060fc <_dtoa_r+0x7ac>
 800621a:	9b07      	ldr	r3, [sp, #28]
 800621c:	2b01      	cmp	r3, #1
 800621e:	dc19      	bgt.n	8006254 <_dtoa_r+0x904>
 8006220:	9b02      	ldr	r3, [sp, #8]
 8006222:	b9bb      	cbnz	r3, 8006254 <_dtoa_r+0x904>
 8006224:	9b03      	ldr	r3, [sp, #12]
 8006226:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800622a:	b99b      	cbnz	r3, 8006254 <_dtoa_r+0x904>
 800622c:	9b03      	ldr	r3, [sp, #12]
 800622e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006232:	0d1b      	lsrs	r3, r3, #20
 8006234:	051b      	lsls	r3, r3, #20
 8006236:	b183      	cbz	r3, 800625a <_dtoa_r+0x90a>
 8006238:	9b05      	ldr	r3, [sp, #20]
 800623a:	3301      	adds	r3, #1
 800623c:	9305      	str	r3, [sp, #20]
 800623e:	9b06      	ldr	r3, [sp, #24]
 8006240:	3301      	adds	r3, #1
 8006242:	9306      	str	r3, [sp, #24]
 8006244:	f04f 0801 	mov.w	r8, #1
 8006248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800624a:	2b00      	cmp	r3, #0
 800624c:	f47f af6f 	bne.w	800612e <_dtoa_r+0x7de>
 8006250:	2001      	movs	r0, #1
 8006252:	e774      	b.n	800613e <_dtoa_r+0x7ee>
 8006254:	f04f 0800 	mov.w	r8, #0
 8006258:	e7f6      	b.n	8006248 <_dtoa_r+0x8f8>
 800625a:	4698      	mov	r8, r3
 800625c:	e7f4      	b.n	8006248 <_dtoa_r+0x8f8>
 800625e:	d082      	beq.n	8006166 <_dtoa_r+0x816>
 8006260:	9a05      	ldr	r2, [sp, #20]
 8006262:	331c      	adds	r3, #28
 8006264:	441a      	add	r2, r3
 8006266:	9205      	str	r2, [sp, #20]
 8006268:	9a06      	ldr	r2, [sp, #24]
 800626a:	441a      	add	r2, r3
 800626c:	441d      	add	r5, r3
 800626e:	9206      	str	r2, [sp, #24]
 8006270:	e779      	b.n	8006166 <_dtoa_r+0x816>
 8006272:	4603      	mov	r3, r0
 8006274:	e7f4      	b.n	8006260 <_dtoa_r+0x910>
 8006276:	9b04      	ldr	r3, [sp, #16]
 8006278:	2b00      	cmp	r3, #0
 800627a:	dc37      	bgt.n	80062ec <_dtoa_r+0x99c>
 800627c:	9b07      	ldr	r3, [sp, #28]
 800627e:	2b02      	cmp	r3, #2
 8006280:	dd34      	ble.n	80062ec <_dtoa_r+0x99c>
 8006282:	9b04      	ldr	r3, [sp, #16]
 8006284:	9301      	str	r3, [sp, #4]
 8006286:	9b01      	ldr	r3, [sp, #4]
 8006288:	b963      	cbnz	r3, 80062a4 <_dtoa_r+0x954>
 800628a:	4631      	mov	r1, r6
 800628c:	2205      	movs	r2, #5
 800628e:	4620      	mov	r0, r4
 8006290:	f000 fab2 	bl	80067f8 <__multadd>
 8006294:	4601      	mov	r1, r0
 8006296:	4606      	mov	r6, r0
 8006298:	4650      	mov	r0, sl
 800629a:	f000 fd11 	bl	8006cc0 <__mcmp>
 800629e:	2800      	cmp	r0, #0
 80062a0:	f73f adbb 	bgt.w	8005e1a <_dtoa_r+0x4ca>
 80062a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062a6:	9d00      	ldr	r5, [sp, #0]
 80062a8:	ea6f 0b03 	mvn.w	fp, r3
 80062ac:	f04f 0800 	mov.w	r8, #0
 80062b0:	4631      	mov	r1, r6
 80062b2:	4620      	mov	r0, r4
 80062b4:	f000 fa7e 	bl	80067b4 <_Bfree>
 80062b8:	2f00      	cmp	r7, #0
 80062ba:	f43f aeab 	beq.w	8006014 <_dtoa_r+0x6c4>
 80062be:	f1b8 0f00 	cmp.w	r8, #0
 80062c2:	d005      	beq.n	80062d0 <_dtoa_r+0x980>
 80062c4:	45b8      	cmp	r8, r7
 80062c6:	d003      	beq.n	80062d0 <_dtoa_r+0x980>
 80062c8:	4641      	mov	r1, r8
 80062ca:	4620      	mov	r0, r4
 80062cc:	f000 fa72 	bl	80067b4 <_Bfree>
 80062d0:	4639      	mov	r1, r7
 80062d2:	4620      	mov	r0, r4
 80062d4:	f000 fa6e 	bl	80067b4 <_Bfree>
 80062d8:	e69c      	b.n	8006014 <_dtoa_r+0x6c4>
 80062da:	2600      	movs	r6, #0
 80062dc:	4637      	mov	r7, r6
 80062de:	e7e1      	b.n	80062a4 <_dtoa_r+0x954>
 80062e0:	46bb      	mov	fp, r7
 80062e2:	4637      	mov	r7, r6
 80062e4:	e599      	b.n	8005e1a <_dtoa_r+0x4ca>
 80062e6:	bf00      	nop
 80062e8:	40240000 	.word	0x40240000
 80062ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 80c8 	beq.w	8006484 <_dtoa_r+0xb34>
 80062f4:	9b04      	ldr	r3, [sp, #16]
 80062f6:	9301      	str	r3, [sp, #4]
 80062f8:	2d00      	cmp	r5, #0
 80062fa:	dd05      	ble.n	8006308 <_dtoa_r+0x9b8>
 80062fc:	4639      	mov	r1, r7
 80062fe:	462a      	mov	r2, r5
 8006300:	4620      	mov	r0, r4
 8006302:	f000 fc71 	bl	8006be8 <__lshift>
 8006306:	4607      	mov	r7, r0
 8006308:	f1b8 0f00 	cmp.w	r8, #0
 800630c:	d05b      	beq.n	80063c6 <_dtoa_r+0xa76>
 800630e:	6879      	ldr	r1, [r7, #4]
 8006310:	4620      	mov	r0, r4
 8006312:	f000 fa0f 	bl	8006734 <_Balloc>
 8006316:	4605      	mov	r5, r0
 8006318:	b928      	cbnz	r0, 8006326 <_dtoa_r+0x9d6>
 800631a:	4b83      	ldr	r3, [pc, #524]	; (8006528 <_dtoa_r+0xbd8>)
 800631c:	4602      	mov	r2, r0
 800631e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006322:	f7ff bb2e 	b.w	8005982 <_dtoa_r+0x32>
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	3202      	adds	r2, #2
 800632a:	0092      	lsls	r2, r2, #2
 800632c:	f107 010c 	add.w	r1, r7, #12
 8006330:	300c      	adds	r0, #12
 8006332:	f002 f94d 	bl	80085d0 <memcpy>
 8006336:	2201      	movs	r2, #1
 8006338:	4629      	mov	r1, r5
 800633a:	4620      	mov	r0, r4
 800633c:	f000 fc54 	bl	8006be8 <__lshift>
 8006340:	9b00      	ldr	r3, [sp, #0]
 8006342:	3301      	adds	r3, #1
 8006344:	9304      	str	r3, [sp, #16]
 8006346:	e9dd 2300 	ldrd	r2, r3, [sp]
 800634a:	4413      	add	r3, r2
 800634c:	9308      	str	r3, [sp, #32]
 800634e:	9b02      	ldr	r3, [sp, #8]
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	46b8      	mov	r8, r7
 8006356:	9306      	str	r3, [sp, #24]
 8006358:	4607      	mov	r7, r0
 800635a:	9b04      	ldr	r3, [sp, #16]
 800635c:	4631      	mov	r1, r6
 800635e:	3b01      	subs	r3, #1
 8006360:	4650      	mov	r0, sl
 8006362:	9301      	str	r3, [sp, #4]
 8006364:	f7ff fa6c 	bl	8005840 <quorem>
 8006368:	4641      	mov	r1, r8
 800636a:	9002      	str	r0, [sp, #8]
 800636c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006370:	4650      	mov	r0, sl
 8006372:	f000 fca5 	bl	8006cc0 <__mcmp>
 8006376:	463a      	mov	r2, r7
 8006378:	9005      	str	r0, [sp, #20]
 800637a:	4631      	mov	r1, r6
 800637c:	4620      	mov	r0, r4
 800637e:	f000 fcbb 	bl	8006cf8 <__mdiff>
 8006382:	68c2      	ldr	r2, [r0, #12]
 8006384:	4605      	mov	r5, r0
 8006386:	bb02      	cbnz	r2, 80063ca <_dtoa_r+0xa7a>
 8006388:	4601      	mov	r1, r0
 800638a:	4650      	mov	r0, sl
 800638c:	f000 fc98 	bl	8006cc0 <__mcmp>
 8006390:	4602      	mov	r2, r0
 8006392:	4629      	mov	r1, r5
 8006394:	4620      	mov	r0, r4
 8006396:	9209      	str	r2, [sp, #36]	; 0x24
 8006398:	f000 fa0c 	bl	80067b4 <_Bfree>
 800639c:	9b07      	ldr	r3, [sp, #28]
 800639e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063a0:	9d04      	ldr	r5, [sp, #16]
 80063a2:	ea43 0102 	orr.w	r1, r3, r2
 80063a6:	9b06      	ldr	r3, [sp, #24]
 80063a8:	4319      	orrs	r1, r3
 80063aa:	d110      	bne.n	80063ce <_dtoa_r+0xa7e>
 80063ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80063b0:	d029      	beq.n	8006406 <_dtoa_r+0xab6>
 80063b2:	9b05      	ldr	r3, [sp, #20]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	dd02      	ble.n	80063be <_dtoa_r+0xa6e>
 80063b8:	9b02      	ldr	r3, [sp, #8]
 80063ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80063be:	9b01      	ldr	r3, [sp, #4]
 80063c0:	f883 9000 	strb.w	r9, [r3]
 80063c4:	e774      	b.n	80062b0 <_dtoa_r+0x960>
 80063c6:	4638      	mov	r0, r7
 80063c8:	e7ba      	b.n	8006340 <_dtoa_r+0x9f0>
 80063ca:	2201      	movs	r2, #1
 80063cc:	e7e1      	b.n	8006392 <_dtoa_r+0xa42>
 80063ce:	9b05      	ldr	r3, [sp, #20]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	db04      	blt.n	80063de <_dtoa_r+0xa8e>
 80063d4:	9907      	ldr	r1, [sp, #28]
 80063d6:	430b      	orrs	r3, r1
 80063d8:	9906      	ldr	r1, [sp, #24]
 80063da:	430b      	orrs	r3, r1
 80063dc:	d120      	bne.n	8006420 <_dtoa_r+0xad0>
 80063de:	2a00      	cmp	r2, #0
 80063e0:	dded      	ble.n	80063be <_dtoa_r+0xa6e>
 80063e2:	4651      	mov	r1, sl
 80063e4:	2201      	movs	r2, #1
 80063e6:	4620      	mov	r0, r4
 80063e8:	f000 fbfe 	bl	8006be8 <__lshift>
 80063ec:	4631      	mov	r1, r6
 80063ee:	4682      	mov	sl, r0
 80063f0:	f000 fc66 	bl	8006cc0 <__mcmp>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	dc03      	bgt.n	8006400 <_dtoa_r+0xab0>
 80063f8:	d1e1      	bne.n	80063be <_dtoa_r+0xa6e>
 80063fa:	f019 0f01 	tst.w	r9, #1
 80063fe:	d0de      	beq.n	80063be <_dtoa_r+0xa6e>
 8006400:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006404:	d1d8      	bne.n	80063b8 <_dtoa_r+0xa68>
 8006406:	9a01      	ldr	r2, [sp, #4]
 8006408:	2339      	movs	r3, #57	; 0x39
 800640a:	7013      	strb	r3, [r2, #0]
 800640c:	462b      	mov	r3, r5
 800640e:	461d      	mov	r5, r3
 8006410:	3b01      	subs	r3, #1
 8006412:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006416:	2a39      	cmp	r2, #57	; 0x39
 8006418:	d06c      	beq.n	80064f4 <_dtoa_r+0xba4>
 800641a:	3201      	adds	r2, #1
 800641c:	701a      	strb	r2, [r3, #0]
 800641e:	e747      	b.n	80062b0 <_dtoa_r+0x960>
 8006420:	2a00      	cmp	r2, #0
 8006422:	dd07      	ble.n	8006434 <_dtoa_r+0xae4>
 8006424:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006428:	d0ed      	beq.n	8006406 <_dtoa_r+0xab6>
 800642a:	9a01      	ldr	r2, [sp, #4]
 800642c:	f109 0301 	add.w	r3, r9, #1
 8006430:	7013      	strb	r3, [r2, #0]
 8006432:	e73d      	b.n	80062b0 <_dtoa_r+0x960>
 8006434:	9b04      	ldr	r3, [sp, #16]
 8006436:	9a08      	ldr	r2, [sp, #32]
 8006438:	f803 9c01 	strb.w	r9, [r3, #-1]
 800643c:	4293      	cmp	r3, r2
 800643e:	d043      	beq.n	80064c8 <_dtoa_r+0xb78>
 8006440:	4651      	mov	r1, sl
 8006442:	2300      	movs	r3, #0
 8006444:	220a      	movs	r2, #10
 8006446:	4620      	mov	r0, r4
 8006448:	f000 f9d6 	bl	80067f8 <__multadd>
 800644c:	45b8      	cmp	r8, r7
 800644e:	4682      	mov	sl, r0
 8006450:	f04f 0300 	mov.w	r3, #0
 8006454:	f04f 020a 	mov.w	r2, #10
 8006458:	4641      	mov	r1, r8
 800645a:	4620      	mov	r0, r4
 800645c:	d107      	bne.n	800646e <_dtoa_r+0xb1e>
 800645e:	f000 f9cb 	bl	80067f8 <__multadd>
 8006462:	4680      	mov	r8, r0
 8006464:	4607      	mov	r7, r0
 8006466:	9b04      	ldr	r3, [sp, #16]
 8006468:	3301      	adds	r3, #1
 800646a:	9304      	str	r3, [sp, #16]
 800646c:	e775      	b.n	800635a <_dtoa_r+0xa0a>
 800646e:	f000 f9c3 	bl	80067f8 <__multadd>
 8006472:	4639      	mov	r1, r7
 8006474:	4680      	mov	r8, r0
 8006476:	2300      	movs	r3, #0
 8006478:	220a      	movs	r2, #10
 800647a:	4620      	mov	r0, r4
 800647c:	f000 f9bc 	bl	80067f8 <__multadd>
 8006480:	4607      	mov	r7, r0
 8006482:	e7f0      	b.n	8006466 <_dtoa_r+0xb16>
 8006484:	9b04      	ldr	r3, [sp, #16]
 8006486:	9301      	str	r3, [sp, #4]
 8006488:	9d00      	ldr	r5, [sp, #0]
 800648a:	4631      	mov	r1, r6
 800648c:	4650      	mov	r0, sl
 800648e:	f7ff f9d7 	bl	8005840 <quorem>
 8006492:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006496:	9b00      	ldr	r3, [sp, #0]
 8006498:	f805 9b01 	strb.w	r9, [r5], #1
 800649c:	1aea      	subs	r2, r5, r3
 800649e:	9b01      	ldr	r3, [sp, #4]
 80064a0:	4293      	cmp	r3, r2
 80064a2:	dd07      	ble.n	80064b4 <_dtoa_r+0xb64>
 80064a4:	4651      	mov	r1, sl
 80064a6:	2300      	movs	r3, #0
 80064a8:	220a      	movs	r2, #10
 80064aa:	4620      	mov	r0, r4
 80064ac:	f000 f9a4 	bl	80067f8 <__multadd>
 80064b0:	4682      	mov	sl, r0
 80064b2:	e7ea      	b.n	800648a <_dtoa_r+0xb3a>
 80064b4:	9b01      	ldr	r3, [sp, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	bfc8      	it	gt
 80064ba:	461d      	movgt	r5, r3
 80064bc:	9b00      	ldr	r3, [sp, #0]
 80064be:	bfd8      	it	le
 80064c0:	2501      	movle	r5, #1
 80064c2:	441d      	add	r5, r3
 80064c4:	f04f 0800 	mov.w	r8, #0
 80064c8:	4651      	mov	r1, sl
 80064ca:	2201      	movs	r2, #1
 80064cc:	4620      	mov	r0, r4
 80064ce:	f000 fb8b 	bl	8006be8 <__lshift>
 80064d2:	4631      	mov	r1, r6
 80064d4:	4682      	mov	sl, r0
 80064d6:	f000 fbf3 	bl	8006cc0 <__mcmp>
 80064da:	2800      	cmp	r0, #0
 80064dc:	dc96      	bgt.n	800640c <_dtoa_r+0xabc>
 80064de:	d102      	bne.n	80064e6 <_dtoa_r+0xb96>
 80064e0:	f019 0f01 	tst.w	r9, #1
 80064e4:	d192      	bne.n	800640c <_dtoa_r+0xabc>
 80064e6:	462b      	mov	r3, r5
 80064e8:	461d      	mov	r5, r3
 80064ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064ee:	2a30      	cmp	r2, #48	; 0x30
 80064f0:	d0fa      	beq.n	80064e8 <_dtoa_r+0xb98>
 80064f2:	e6dd      	b.n	80062b0 <_dtoa_r+0x960>
 80064f4:	9a00      	ldr	r2, [sp, #0]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d189      	bne.n	800640e <_dtoa_r+0xabe>
 80064fa:	f10b 0b01 	add.w	fp, fp, #1
 80064fe:	2331      	movs	r3, #49	; 0x31
 8006500:	e796      	b.n	8006430 <_dtoa_r+0xae0>
 8006502:	4b0a      	ldr	r3, [pc, #40]	; (800652c <_dtoa_r+0xbdc>)
 8006504:	f7ff ba99 	b.w	8005a3a <_dtoa_r+0xea>
 8006508:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800650a:	2b00      	cmp	r3, #0
 800650c:	f47f aa6d 	bne.w	80059ea <_dtoa_r+0x9a>
 8006510:	4b07      	ldr	r3, [pc, #28]	; (8006530 <_dtoa_r+0xbe0>)
 8006512:	f7ff ba92 	b.w	8005a3a <_dtoa_r+0xea>
 8006516:	9b01      	ldr	r3, [sp, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	dcb5      	bgt.n	8006488 <_dtoa_r+0xb38>
 800651c:	9b07      	ldr	r3, [sp, #28]
 800651e:	2b02      	cmp	r3, #2
 8006520:	f73f aeb1 	bgt.w	8006286 <_dtoa_r+0x936>
 8006524:	e7b0      	b.n	8006488 <_dtoa_r+0xb38>
 8006526:	bf00      	nop
 8006528:	08008fcd 	.word	0x08008fcd
 800652c:	08008f28 	.word	0x08008f28
 8006530:	08008f51 	.word	0x08008f51

08006534 <_free_r>:
 8006534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006536:	2900      	cmp	r1, #0
 8006538:	d044      	beq.n	80065c4 <_free_r+0x90>
 800653a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800653e:	9001      	str	r0, [sp, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	f1a1 0404 	sub.w	r4, r1, #4
 8006546:	bfb8      	it	lt
 8006548:	18e4      	addlt	r4, r4, r3
 800654a:	f000 f8e7 	bl	800671c <__malloc_lock>
 800654e:	4a1e      	ldr	r2, [pc, #120]	; (80065c8 <_free_r+0x94>)
 8006550:	9801      	ldr	r0, [sp, #4]
 8006552:	6813      	ldr	r3, [r2, #0]
 8006554:	b933      	cbnz	r3, 8006564 <_free_r+0x30>
 8006556:	6063      	str	r3, [r4, #4]
 8006558:	6014      	str	r4, [r2, #0]
 800655a:	b003      	add	sp, #12
 800655c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006560:	f000 b8e2 	b.w	8006728 <__malloc_unlock>
 8006564:	42a3      	cmp	r3, r4
 8006566:	d908      	bls.n	800657a <_free_r+0x46>
 8006568:	6825      	ldr	r5, [r4, #0]
 800656a:	1961      	adds	r1, r4, r5
 800656c:	428b      	cmp	r3, r1
 800656e:	bf01      	itttt	eq
 8006570:	6819      	ldreq	r1, [r3, #0]
 8006572:	685b      	ldreq	r3, [r3, #4]
 8006574:	1949      	addeq	r1, r1, r5
 8006576:	6021      	streq	r1, [r4, #0]
 8006578:	e7ed      	b.n	8006556 <_free_r+0x22>
 800657a:	461a      	mov	r2, r3
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	b10b      	cbz	r3, 8006584 <_free_r+0x50>
 8006580:	42a3      	cmp	r3, r4
 8006582:	d9fa      	bls.n	800657a <_free_r+0x46>
 8006584:	6811      	ldr	r1, [r2, #0]
 8006586:	1855      	adds	r5, r2, r1
 8006588:	42a5      	cmp	r5, r4
 800658a:	d10b      	bne.n	80065a4 <_free_r+0x70>
 800658c:	6824      	ldr	r4, [r4, #0]
 800658e:	4421      	add	r1, r4
 8006590:	1854      	adds	r4, r2, r1
 8006592:	42a3      	cmp	r3, r4
 8006594:	6011      	str	r1, [r2, #0]
 8006596:	d1e0      	bne.n	800655a <_free_r+0x26>
 8006598:	681c      	ldr	r4, [r3, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	6053      	str	r3, [r2, #4]
 800659e:	440c      	add	r4, r1
 80065a0:	6014      	str	r4, [r2, #0]
 80065a2:	e7da      	b.n	800655a <_free_r+0x26>
 80065a4:	d902      	bls.n	80065ac <_free_r+0x78>
 80065a6:	230c      	movs	r3, #12
 80065a8:	6003      	str	r3, [r0, #0]
 80065aa:	e7d6      	b.n	800655a <_free_r+0x26>
 80065ac:	6825      	ldr	r5, [r4, #0]
 80065ae:	1961      	adds	r1, r4, r5
 80065b0:	428b      	cmp	r3, r1
 80065b2:	bf04      	itt	eq
 80065b4:	6819      	ldreq	r1, [r3, #0]
 80065b6:	685b      	ldreq	r3, [r3, #4]
 80065b8:	6063      	str	r3, [r4, #4]
 80065ba:	bf04      	itt	eq
 80065bc:	1949      	addeq	r1, r1, r5
 80065be:	6021      	streq	r1, [r4, #0]
 80065c0:	6054      	str	r4, [r2, #4]
 80065c2:	e7ca      	b.n	800655a <_free_r+0x26>
 80065c4:	b003      	add	sp, #12
 80065c6:	bd30      	pop	{r4, r5, pc}
 80065c8:	20000474 	.word	0x20000474

080065cc <malloc>:
 80065cc:	4b02      	ldr	r3, [pc, #8]	; (80065d8 <malloc+0xc>)
 80065ce:	4601      	mov	r1, r0
 80065d0:	6818      	ldr	r0, [r3, #0]
 80065d2:	f000 b823 	b.w	800661c <_malloc_r>
 80065d6:	bf00      	nop
 80065d8:	20000064 	.word	0x20000064

080065dc <sbrk_aligned>:
 80065dc:	b570      	push	{r4, r5, r6, lr}
 80065de:	4e0e      	ldr	r6, [pc, #56]	; (8006618 <sbrk_aligned+0x3c>)
 80065e0:	460c      	mov	r4, r1
 80065e2:	6831      	ldr	r1, [r6, #0]
 80065e4:	4605      	mov	r5, r0
 80065e6:	b911      	cbnz	r1, 80065ee <sbrk_aligned+0x12>
 80065e8:	f001 ffe2 	bl	80085b0 <_sbrk_r>
 80065ec:	6030      	str	r0, [r6, #0]
 80065ee:	4621      	mov	r1, r4
 80065f0:	4628      	mov	r0, r5
 80065f2:	f001 ffdd 	bl	80085b0 <_sbrk_r>
 80065f6:	1c43      	adds	r3, r0, #1
 80065f8:	d00a      	beq.n	8006610 <sbrk_aligned+0x34>
 80065fa:	1cc4      	adds	r4, r0, #3
 80065fc:	f024 0403 	bic.w	r4, r4, #3
 8006600:	42a0      	cmp	r0, r4
 8006602:	d007      	beq.n	8006614 <sbrk_aligned+0x38>
 8006604:	1a21      	subs	r1, r4, r0
 8006606:	4628      	mov	r0, r5
 8006608:	f001 ffd2 	bl	80085b0 <_sbrk_r>
 800660c:	3001      	adds	r0, #1
 800660e:	d101      	bne.n	8006614 <sbrk_aligned+0x38>
 8006610:	f04f 34ff 	mov.w	r4, #4294967295
 8006614:	4620      	mov	r0, r4
 8006616:	bd70      	pop	{r4, r5, r6, pc}
 8006618:	20000478 	.word	0x20000478

0800661c <_malloc_r>:
 800661c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006620:	1ccd      	adds	r5, r1, #3
 8006622:	f025 0503 	bic.w	r5, r5, #3
 8006626:	3508      	adds	r5, #8
 8006628:	2d0c      	cmp	r5, #12
 800662a:	bf38      	it	cc
 800662c:	250c      	movcc	r5, #12
 800662e:	2d00      	cmp	r5, #0
 8006630:	4607      	mov	r7, r0
 8006632:	db01      	blt.n	8006638 <_malloc_r+0x1c>
 8006634:	42a9      	cmp	r1, r5
 8006636:	d905      	bls.n	8006644 <_malloc_r+0x28>
 8006638:	230c      	movs	r3, #12
 800663a:	603b      	str	r3, [r7, #0]
 800663c:	2600      	movs	r6, #0
 800663e:	4630      	mov	r0, r6
 8006640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006644:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006718 <_malloc_r+0xfc>
 8006648:	f000 f868 	bl	800671c <__malloc_lock>
 800664c:	f8d8 3000 	ldr.w	r3, [r8]
 8006650:	461c      	mov	r4, r3
 8006652:	bb5c      	cbnz	r4, 80066ac <_malloc_r+0x90>
 8006654:	4629      	mov	r1, r5
 8006656:	4638      	mov	r0, r7
 8006658:	f7ff ffc0 	bl	80065dc <sbrk_aligned>
 800665c:	1c43      	adds	r3, r0, #1
 800665e:	4604      	mov	r4, r0
 8006660:	d155      	bne.n	800670e <_malloc_r+0xf2>
 8006662:	f8d8 4000 	ldr.w	r4, [r8]
 8006666:	4626      	mov	r6, r4
 8006668:	2e00      	cmp	r6, #0
 800666a:	d145      	bne.n	80066f8 <_malloc_r+0xdc>
 800666c:	2c00      	cmp	r4, #0
 800666e:	d048      	beq.n	8006702 <_malloc_r+0xe6>
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	4631      	mov	r1, r6
 8006674:	4638      	mov	r0, r7
 8006676:	eb04 0903 	add.w	r9, r4, r3
 800667a:	f001 ff99 	bl	80085b0 <_sbrk_r>
 800667e:	4581      	cmp	r9, r0
 8006680:	d13f      	bne.n	8006702 <_malloc_r+0xe6>
 8006682:	6821      	ldr	r1, [r4, #0]
 8006684:	1a6d      	subs	r5, r5, r1
 8006686:	4629      	mov	r1, r5
 8006688:	4638      	mov	r0, r7
 800668a:	f7ff ffa7 	bl	80065dc <sbrk_aligned>
 800668e:	3001      	adds	r0, #1
 8006690:	d037      	beq.n	8006702 <_malloc_r+0xe6>
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	442b      	add	r3, r5
 8006696:	6023      	str	r3, [r4, #0]
 8006698:	f8d8 3000 	ldr.w	r3, [r8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d038      	beq.n	8006712 <_malloc_r+0xf6>
 80066a0:	685a      	ldr	r2, [r3, #4]
 80066a2:	42a2      	cmp	r2, r4
 80066a4:	d12b      	bne.n	80066fe <_malloc_r+0xe2>
 80066a6:	2200      	movs	r2, #0
 80066a8:	605a      	str	r2, [r3, #4]
 80066aa:	e00f      	b.n	80066cc <_malloc_r+0xb0>
 80066ac:	6822      	ldr	r2, [r4, #0]
 80066ae:	1b52      	subs	r2, r2, r5
 80066b0:	d41f      	bmi.n	80066f2 <_malloc_r+0xd6>
 80066b2:	2a0b      	cmp	r2, #11
 80066b4:	d917      	bls.n	80066e6 <_malloc_r+0xca>
 80066b6:	1961      	adds	r1, r4, r5
 80066b8:	42a3      	cmp	r3, r4
 80066ba:	6025      	str	r5, [r4, #0]
 80066bc:	bf18      	it	ne
 80066be:	6059      	strne	r1, [r3, #4]
 80066c0:	6863      	ldr	r3, [r4, #4]
 80066c2:	bf08      	it	eq
 80066c4:	f8c8 1000 	streq.w	r1, [r8]
 80066c8:	5162      	str	r2, [r4, r5]
 80066ca:	604b      	str	r3, [r1, #4]
 80066cc:	4638      	mov	r0, r7
 80066ce:	f104 060b 	add.w	r6, r4, #11
 80066d2:	f000 f829 	bl	8006728 <__malloc_unlock>
 80066d6:	f026 0607 	bic.w	r6, r6, #7
 80066da:	1d23      	adds	r3, r4, #4
 80066dc:	1af2      	subs	r2, r6, r3
 80066de:	d0ae      	beq.n	800663e <_malloc_r+0x22>
 80066e0:	1b9b      	subs	r3, r3, r6
 80066e2:	50a3      	str	r3, [r4, r2]
 80066e4:	e7ab      	b.n	800663e <_malloc_r+0x22>
 80066e6:	42a3      	cmp	r3, r4
 80066e8:	6862      	ldr	r2, [r4, #4]
 80066ea:	d1dd      	bne.n	80066a8 <_malloc_r+0x8c>
 80066ec:	f8c8 2000 	str.w	r2, [r8]
 80066f0:	e7ec      	b.n	80066cc <_malloc_r+0xb0>
 80066f2:	4623      	mov	r3, r4
 80066f4:	6864      	ldr	r4, [r4, #4]
 80066f6:	e7ac      	b.n	8006652 <_malloc_r+0x36>
 80066f8:	4634      	mov	r4, r6
 80066fa:	6876      	ldr	r6, [r6, #4]
 80066fc:	e7b4      	b.n	8006668 <_malloc_r+0x4c>
 80066fe:	4613      	mov	r3, r2
 8006700:	e7cc      	b.n	800669c <_malloc_r+0x80>
 8006702:	230c      	movs	r3, #12
 8006704:	603b      	str	r3, [r7, #0]
 8006706:	4638      	mov	r0, r7
 8006708:	f000 f80e 	bl	8006728 <__malloc_unlock>
 800670c:	e797      	b.n	800663e <_malloc_r+0x22>
 800670e:	6025      	str	r5, [r4, #0]
 8006710:	e7dc      	b.n	80066cc <_malloc_r+0xb0>
 8006712:	605b      	str	r3, [r3, #4]
 8006714:	deff      	udf	#255	; 0xff
 8006716:	bf00      	nop
 8006718:	20000474 	.word	0x20000474

0800671c <__malloc_lock>:
 800671c:	4801      	ldr	r0, [pc, #4]	; (8006724 <__malloc_lock+0x8>)
 800671e:	f7ff b886 	b.w	800582e <__retarget_lock_acquire_recursive>
 8006722:	bf00      	nop
 8006724:	20000470 	.word	0x20000470

08006728 <__malloc_unlock>:
 8006728:	4801      	ldr	r0, [pc, #4]	; (8006730 <__malloc_unlock+0x8>)
 800672a:	f7ff b881 	b.w	8005830 <__retarget_lock_release_recursive>
 800672e:	bf00      	nop
 8006730:	20000470 	.word	0x20000470

08006734 <_Balloc>:
 8006734:	b570      	push	{r4, r5, r6, lr}
 8006736:	69c6      	ldr	r6, [r0, #28]
 8006738:	4604      	mov	r4, r0
 800673a:	460d      	mov	r5, r1
 800673c:	b976      	cbnz	r6, 800675c <_Balloc+0x28>
 800673e:	2010      	movs	r0, #16
 8006740:	f7ff ff44 	bl	80065cc <malloc>
 8006744:	4602      	mov	r2, r0
 8006746:	61e0      	str	r0, [r4, #28]
 8006748:	b920      	cbnz	r0, 8006754 <_Balloc+0x20>
 800674a:	4b18      	ldr	r3, [pc, #96]	; (80067ac <_Balloc+0x78>)
 800674c:	4818      	ldr	r0, [pc, #96]	; (80067b0 <_Balloc+0x7c>)
 800674e:	216b      	movs	r1, #107	; 0x6b
 8006750:	f001 ff56 	bl	8008600 <__assert_func>
 8006754:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006758:	6006      	str	r6, [r0, #0]
 800675a:	60c6      	str	r6, [r0, #12]
 800675c:	69e6      	ldr	r6, [r4, #28]
 800675e:	68f3      	ldr	r3, [r6, #12]
 8006760:	b183      	cbz	r3, 8006784 <_Balloc+0x50>
 8006762:	69e3      	ldr	r3, [r4, #28]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800676a:	b9b8      	cbnz	r0, 800679c <_Balloc+0x68>
 800676c:	2101      	movs	r1, #1
 800676e:	fa01 f605 	lsl.w	r6, r1, r5
 8006772:	1d72      	adds	r2, r6, #5
 8006774:	0092      	lsls	r2, r2, #2
 8006776:	4620      	mov	r0, r4
 8006778:	f001 ff60 	bl	800863c <_calloc_r>
 800677c:	b160      	cbz	r0, 8006798 <_Balloc+0x64>
 800677e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006782:	e00e      	b.n	80067a2 <_Balloc+0x6e>
 8006784:	2221      	movs	r2, #33	; 0x21
 8006786:	2104      	movs	r1, #4
 8006788:	4620      	mov	r0, r4
 800678a:	f001 ff57 	bl	800863c <_calloc_r>
 800678e:	69e3      	ldr	r3, [r4, #28]
 8006790:	60f0      	str	r0, [r6, #12]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1e4      	bne.n	8006762 <_Balloc+0x2e>
 8006798:	2000      	movs	r0, #0
 800679a:	bd70      	pop	{r4, r5, r6, pc}
 800679c:	6802      	ldr	r2, [r0, #0]
 800679e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80067a2:	2300      	movs	r3, #0
 80067a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80067a8:	e7f7      	b.n	800679a <_Balloc+0x66>
 80067aa:	bf00      	nop
 80067ac:	08008f5e 	.word	0x08008f5e
 80067b0:	08008fde 	.word	0x08008fde

080067b4 <_Bfree>:
 80067b4:	b570      	push	{r4, r5, r6, lr}
 80067b6:	69c6      	ldr	r6, [r0, #28]
 80067b8:	4605      	mov	r5, r0
 80067ba:	460c      	mov	r4, r1
 80067bc:	b976      	cbnz	r6, 80067dc <_Bfree+0x28>
 80067be:	2010      	movs	r0, #16
 80067c0:	f7ff ff04 	bl	80065cc <malloc>
 80067c4:	4602      	mov	r2, r0
 80067c6:	61e8      	str	r0, [r5, #28]
 80067c8:	b920      	cbnz	r0, 80067d4 <_Bfree+0x20>
 80067ca:	4b09      	ldr	r3, [pc, #36]	; (80067f0 <_Bfree+0x3c>)
 80067cc:	4809      	ldr	r0, [pc, #36]	; (80067f4 <_Bfree+0x40>)
 80067ce:	218f      	movs	r1, #143	; 0x8f
 80067d0:	f001 ff16 	bl	8008600 <__assert_func>
 80067d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067d8:	6006      	str	r6, [r0, #0]
 80067da:	60c6      	str	r6, [r0, #12]
 80067dc:	b13c      	cbz	r4, 80067ee <_Bfree+0x3a>
 80067de:	69eb      	ldr	r3, [r5, #28]
 80067e0:	6862      	ldr	r2, [r4, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067e8:	6021      	str	r1, [r4, #0]
 80067ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80067ee:	bd70      	pop	{r4, r5, r6, pc}
 80067f0:	08008f5e 	.word	0x08008f5e
 80067f4:	08008fde 	.word	0x08008fde

080067f8 <__multadd>:
 80067f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067fc:	690d      	ldr	r5, [r1, #16]
 80067fe:	4607      	mov	r7, r0
 8006800:	460c      	mov	r4, r1
 8006802:	461e      	mov	r6, r3
 8006804:	f101 0c14 	add.w	ip, r1, #20
 8006808:	2000      	movs	r0, #0
 800680a:	f8dc 3000 	ldr.w	r3, [ip]
 800680e:	b299      	uxth	r1, r3
 8006810:	fb02 6101 	mla	r1, r2, r1, r6
 8006814:	0c1e      	lsrs	r6, r3, #16
 8006816:	0c0b      	lsrs	r3, r1, #16
 8006818:	fb02 3306 	mla	r3, r2, r6, r3
 800681c:	b289      	uxth	r1, r1
 800681e:	3001      	adds	r0, #1
 8006820:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006824:	4285      	cmp	r5, r0
 8006826:	f84c 1b04 	str.w	r1, [ip], #4
 800682a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800682e:	dcec      	bgt.n	800680a <__multadd+0x12>
 8006830:	b30e      	cbz	r6, 8006876 <__multadd+0x7e>
 8006832:	68a3      	ldr	r3, [r4, #8]
 8006834:	42ab      	cmp	r3, r5
 8006836:	dc19      	bgt.n	800686c <__multadd+0x74>
 8006838:	6861      	ldr	r1, [r4, #4]
 800683a:	4638      	mov	r0, r7
 800683c:	3101      	adds	r1, #1
 800683e:	f7ff ff79 	bl	8006734 <_Balloc>
 8006842:	4680      	mov	r8, r0
 8006844:	b928      	cbnz	r0, 8006852 <__multadd+0x5a>
 8006846:	4602      	mov	r2, r0
 8006848:	4b0c      	ldr	r3, [pc, #48]	; (800687c <__multadd+0x84>)
 800684a:	480d      	ldr	r0, [pc, #52]	; (8006880 <__multadd+0x88>)
 800684c:	21ba      	movs	r1, #186	; 0xba
 800684e:	f001 fed7 	bl	8008600 <__assert_func>
 8006852:	6922      	ldr	r2, [r4, #16]
 8006854:	3202      	adds	r2, #2
 8006856:	f104 010c 	add.w	r1, r4, #12
 800685a:	0092      	lsls	r2, r2, #2
 800685c:	300c      	adds	r0, #12
 800685e:	f001 feb7 	bl	80085d0 <memcpy>
 8006862:	4621      	mov	r1, r4
 8006864:	4638      	mov	r0, r7
 8006866:	f7ff ffa5 	bl	80067b4 <_Bfree>
 800686a:	4644      	mov	r4, r8
 800686c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006870:	3501      	adds	r5, #1
 8006872:	615e      	str	r6, [r3, #20]
 8006874:	6125      	str	r5, [r4, #16]
 8006876:	4620      	mov	r0, r4
 8006878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800687c:	08008fcd 	.word	0x08008fcd
 8006880:	08008fde 	.word	0x08008fde

08006884 <__s2b>:
 8006884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006888:	460c      	mov	r4, r1
 800688a:	4615      	mov	r5, r2
 800688c:	461f      	mov	r7, r3
 800688e:	2209      	movs	r2, #9
 8006890:	3308      	adds	r3, #8
 8006892:	4606      	mov	r6, r0
 8006894:	fb93 f3f2 	sdiv	r3, r3, r2
 8006898:	2100      	movs	r1, #0
 800689a:	2201      	movs	r2, #1
 800689c:	429a      	cmp	r2, r3
 800689e:	db09      	blt.n	80068b4 <__s2b+0x30>
 80068a0:	4630      	mov	r0, r6
 80068a2:	f7ff ff47 	bl	8006734 <_Balloc>
 80068a6:	b940      	cbnz	r0, 80068ba <__s2b+0x36>
 80068a8:	4602      	mov	r2, r0
 80068aa:	4b19      	ldr	r3, [pc, #100]	; (8006910 <__s2b+0x8c>)
 80068ac:	4819      	ldr	r0, [pc, #100]	; (8006914 <__s2b+0x90>)
 80068ae:	21d3      	movs	r1, #211	; 0xd3
 80068b0:	f001 fea6 	bl	8008600 <__assert_func>
 80068b4:	0052      	lsls	r2, r2, #1
 80068b6:	3101      	adds	r1, #1
 80068b8:	e7f0      	b.n	800689c <__s2b+0x18>
 80068ba:	9b08      	ldr	r3, [sp, #32]
 80068bc:	6143      	str	r3, [r0, #20]
 80068be:	2d09      	cmp	r5, #9
 80068c0:	f04f 0301 	mov.w	r3, #1
 80068c4:	6103      	str	r3, [r0, #16]
 80068c6:	dd16      	ble.n	80068f6 <__s2b+0x72>
 80068c8:	f104 0909 	add.w	r9, r4, #9
 80068cc:	46c8      	mov	r8, r9
 80068ce:	442c      	add	r4, r5
 80068d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80068d4:	4601      	mov	r1, r0
 80068d6:	3b30      	subs	r3, #48	; 0x30
 80068d8:	220a      	movs	r2, #10
 80068da:	4630      	mov	r0, r6
 80068dc:	f7ff ff8c 	bl	80067f8 <__multadd>
 80068e0:	45a0      	cmp	r8, r4
 80068e2:	d1f5      	bne.n	80068d0 <__s2b+0x4c>
 80068e4:	f1a5 0408 	sub.w	r4, r5, #8
 80068e8:	444c      	add	r4, r9
 80068ea:	1b2d      	subs	r5, r5, r4
 80068ec:	1963      	adds	r3, r4, r5
 80068ee:	42bb      	cmp	r3, r7
 80068f0:	db04      	blt.n	80068fc <__s2b+0x78>
 80068f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068f6:	340a      	adds	r4, #10
 80068f8:	2509      	movs	r5, #9
 80068fa:	e7f6      	b.n	80068ea <__s2b+0x66>
 80068fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006900:	4601      	mov	r1, r0
 8006902:	3b30      	subs	r3, #48	; 0x30
 8006904:	220a      	movs	r2, #10
 8006906:	4630      	mov	r0, r6
 8006908:	f7ff ff76 	bl	80067f8 <__multadd>
 800690c:	e7ee      	b.n	80068ec <__s2b+0x68>
 800690e:	bf00      	nop
 8006910:	08008fcd 	.word	0x08008fcd
 8006914:	08008fde 	.word	0x08008fde

08006918 <__hi0bits>:
 8006918:	0c03      	lsrs	r3, r0, #16
 800691a:	041b      	lsls	r3, r3, #16
 800691c:	b9d3      	cbnz	r3, 8006954 <__hi0bits+0x3c>
 800691e:	0400      	lsls	r0, r0, #16
 8006920:	2310      	movs	r3, #16
 8006922:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006926:	bf04      	itt	eq
 8006928:	0200      	lsleq	r0, r0, #8
 800692a:	3308      	addeq	r3, #8
 800692c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006930:	bf04      	itt	eq
 8006932:	0100      	lsleq	r0, r0, #4
 8006934:	3304      	addeq	r3, #4
 8006936:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800693a:	bf04      	itt	eq
 800693c:	0080      	lsleq	r0, r0, #2
 800693e:	3302      	addeq	r3, #2
 8006940:	2800      	cmp	r0, #0
 8006942:	db05      	blt.n	8006950 <__hi0bits+0x38>
 8006944:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006948:	f103 0301 	add.w	r3, r3, #1
 800694c:	bf08      	it	eq
 800694e:	2320      	moveq	r3, #32
 8006950:	4618      	mov	r0, r3
 8006952:	4770      	bx	lr
 8006954:	2300      	movs	r3, #0
 8006956:	e7e4      	b.n	8006922 <__hi0bits+0xa>

08006958 <__lo0bits>:
 8006958:	6803      	ldr	r3, [r0, #0]
 800695a:	f013 0207 	ands.w	r2, r3, #7
 800695e:	d00c      	beq.n	800697a <__lo0bits+0x22>
 8006960:	07d9      	lsls	r1, r3, #31
 8006962:	d422      	bmi.n	80069aa <__lo0bits+0x52>
 8006964:	079a      	lsls	r2, r3, #30
 8006966:	bf49      	itett	mi
 8006968:	085b      	lsrmi	r3, r3, #1
 800696a:	089b      	lsrpl	r3, r3, #2
 800696c:	6003      	strmi	r3, [r0, #0]
 800696e:	2201      	movmi	r2, #1
 8006970:	bf5c      	itt	pl
 8006972:	6003      	strpl	r3, [r0, #0]
 8006974:	2202      	movpl	r2, #2
 8006976:	4610      	mov	r0, r2
 8006978:	4770      	bx	lr
 800697a:	b299      	uxth	r1, r3
 800697c:	b909      	cbnz	r1, 8006982 <__lo0bits+0x2a>
 800697e:	0c1b      	lsrs	r3, r3, #16
 8006980:	2210      	movs	r2, #16
 8006982:	b2d9      	uxtb	r1, r3
 8006984:	b909      	cbnz	r1, 800698a <__lo0bits+0x32>
 8006986:	3208      	adds	r2, #8
 8006988:	0a1b      	lsrs	r3, r3, #8
 800698a:	0719      	lsls	r1, r3, #28
 800698c:	bf04      	itt	eq
 800698e:	091b      	lsreq	r3, r3, #4
 8006990:	3204      	addeq	r2, #4
 8006992:	0799      	lsls	r1, r3, #30
 8006994:	bf04      	itt	eq
 8006996:	089b      	lsreq	r3, r3, #2
 8006998:	3202      	addeq	r2, #2
 800699a:	07d9      	lsls	r1, r3, #31
 800699c:	d403      	bmi.n	80069a6 <__lo0bits+0x4e>
 800699e:	085b      	lsrs	r3, r3, #1
 80069a0:	f102 0201 	add.w	r2, r2, #1
 80069a4:	d003      	beq.n	80069ae <__lo0bits+0x56>
 80069a6:	6003      	str	r3, [r0, #0]
 80069a8:	e7e5      	b.n	8006976 <__lo0bits+0x1e>
 80069aa:	2200      	movs	r2, #0
 80069ac:	e7e3      	b.n	8006976 <__lo0bits+0x1e>
 80069ae:	2220      	movs	r2, #32
 80069b0:	e7e1      	b.n	8006976 <__lo0bits+0x1e>
	...

080069b4 <__i2b>:
 80069b4:	b510      	push	{r4, lr}
 80069b6:	460c      	mov	r4, r1
 80069b8:	2101      	movs	r1, #1
 80069ba:	f7ff febb 	bl	8006734 <_Balloc>
 80069be:	4602      	mov	r2, r0
 80069c0:	b928      	cbnz	r0, 80069ce <__i2b+0x1a>
 80069c2:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <__i2b+0x24>)
 80069c4:	4805      	ldr	r0, [pc, #20]	; (80069dc <__i2b+0x28>)
 80069c6:	f240 1145 	movw	r1, #325	; 0x145
 80069ca:	f001 fe19 	bl	8008600 <__assert_func>
 80069ce:	2301      	movs	r3, #1
 80069d0:	6144      	str	r4, [r0, #20]
 80069d2:	6103      	str	r3, [r0, #16]
 80069d4:	bd10      	pop	{r4, pc}
 80069d6:	bf00      	nop
 80069d8:	08008fcd 	.word	0x08008fcd
 80069dc:	08008fde 	.word	0x08008fde

080069e0 <__multiply>:
 80069e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e4:	4691      	mov	r9, r2
 80069e6:	690a      	ldr	r2, [r1, #16]
 80069e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	bfb8      	it	lt
 80069f0:	460b      	movlt	r3, r1
 80069f2:	460c      	mov	r4, r1
 80069f4:	bfbc      	itt	lt
 80069f6:	464c      	movlt	r4, r9
 80069f8:	4699      	movlt	r9, r3
 80069fa:	6927      	ldr	r7, [r4, #16]
 80069fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006a00:	68a3      	ldr	r3, [r4, #8]
 8006a02:	6861      	ldr	r1, [r4, #4]
 8006a04:	eb07 060a 	add.w	r6, r7, sl
 8006a08:	42b3      	cmp	r3, r6
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	bfb8      	it	lt
 8006a0e:	3101      	addlt	r1, #1
 8006a10:	f7ff fe90 	bl	8006734 <_Balloc>
 8006a14:	b930      	cbnz	r0, 8006a24 <__multiply+0x44>
 8006a16:	4602      	mov	r2, r0
 8006a18:	4b44      	ldr	r3, [pc, #272]	; (8006b2c <__multiply+0x14c>)
 8006a1a:	4845      	ldr	r0, [pc, #276]	; (8006b30 <__multiply+0x150>)
 8006a1c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006a20:	f001 fdee 	bl	8008600 <__assert_func>
 8006a24:	f100 0514 	add.w	r5, r0, #20
 8006a28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006a2c:	462b      	mov	r3, r5
 8006a2e:	2200      	movs	r2, #0
 8006a30:	4543      	cmp	r3, r8
 8006a32:	d321      	bcc.n	8006a78 <__multiply+0x98>
 8006a34:	f104 0314 	add.w	r3, r4, #20
 8006a38:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006a3c:	f109 0314 	add.w	r3, r9, #20
 8006a40:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006a44:	9202      	str	r2, [sp, #8]
 8006a46:	1b3a      	subs	r2, r7, r4
 8006a48:	3a15      	subs	r2, #21
 8006a4a:	f022 0203 	bic.w	r2, r2, #3
 8006a4e:	3204      	adds	r2, #4
 8006a50:	f104 0115 	add.w	r1, r4, #21
 8006a54:	428f      	cmp	r7, r1
 8006a56:	bf38      	it	cc
 8006a58:	2204      	movcc	r2, #4
 8006a5a:	9201      	str	r2, [sp, #4]
 8006a5c:	9a02      	ldr	r2, [sp, #8]
 8006a5e:	9303      	str	r3, [sp, #12]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d80c      	bhi.n	8006a7e <__multiply+0x9e>
 8006a64:	2e00      	cmp	r6, #0
 8006a66:	dd03      	ble.n	8006a70 <__multiply+0x90>
 8006a68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d05b      	beq.n	8006b28 <__multiply+0x148>
 8006a70:	6106      	str	r6, [r0, #16]
 8006a72:	b005      	add	sp, #20
 8006a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a78:	f843 2b04 	str.w	r2, [r3], #4
 8006a7c:	e7d8      	b.n	8006a30 <__multiply+0x50>
 8006a7e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006a82:	f1ba 0f00 	cmp.w	sl, #0
 8006a86:	d024      	beq.n	8006ad2 <__multiply+0xf2>
 8006a88:	f104 0e14 	add.w	lr, r4, #20
 8006a8c:	46a9      	mov	r9, r5
 8006a8e:	f04f 0c00 	mov.w	ip, #0
 8006a92:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006a96:	f8d9 1000 	ldr.w	r1, [r9]
 8006a9a:	fa1f fb82 	uxth.w	fp, r2
 8006a9e:	b289      	uxth	r1, r1
 8006aa0:	fb0a 110b 	mla	r1, sl, fp, r1
 8006aa4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006aa8:	f8d9 2000 	ldr.w	r2, [r9]
 8006aac:	4461      	add	r1, ip
 8006aae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006ab2:	fb0a c20b 	mla	r2, sl, fp, ip
 8006ab6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006aba:	b289      	uxth	r1, r1
 8006abc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ac0:	4577      	cmp	r7, lr
 8006ac2:	f849 1b04 	str.w	r1, [r9], #4
 8006ac6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006aca:	d8e2      	bhi.n	8006a92 <__multiply+0xb2>
 8006acc:	9a01      	ldr	r2, [sp, #4]
 8006ace:	f845 c002 	str.w	ip, [r5, r2]
 8006ad2:	9a03      	ldr	r2, [sp, #12]
 8006ad4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006ad8:	3304      	adds	r3, #4
 8006ada:	f1b9 0f00 	cmp.w	r9, #0
 8006ade:	d021      	beq.n	8006b24 <__multiply+0x144>
 8006ae0:	6829      	ldr	r1, [r5, #0]
 8006ae2:	f104 0c14 	add.w	ip, r4, #20
 8006ae6:	46ae      	mov	lr, r5
 8006ae8:	f04f 0a00 	mov.w	sl, #0
 8006aec:	f8bc b000 	ldrh.w	fp, [ip]
 8006af0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006af4:	fb09 220b 	mla	r2, r9, fp, r2
 8006af8:	4452      	add	r2, sl
 8006afa:	b289      	uxth	r1, r1
 8006afc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b00:	f84e 1b04 	str.w	r1, [lr], #4
 8006b04:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006b08:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006b0c:	f8be 1000 	ldrh.w	r1, [lr]
 8006b10:	fb09 110a 	mla	r1, r9, sl, r1
 8006b14:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006b18:	4567      	cmp	r7, ip
 8006b1a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006b1e:	d8e5      	bhi.n	8006aec <__multiply+0x10c>
 8006b20:	9a01      	ldr	r2, [sp, #4]
 8006b22:	50a9      	str	r1, [r5, r2]
 8006b24:	3504      	adds	r5, #4
 8006b26:	e799      	b.n	8006a5c <__multiply+0x7c>
 8006b28:	3e01      	subs	r6, #1
 8006b2a:	e79b      	b.n	8006a64 <__multiply+0x84>
 8006b2c:	08008fcd 	.word	0x08008fcd
 8006b30:	08008fde 	.word	0x08008fde

08006b34 <__pow5mult>:
 8006b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b38:	4615      	mov	r5, r2
 8006b3a:	f012 0203 	ands.w	r2, r2, #3
 8006b3e:	4606      	mov	r6, r0
 8006b40:	460f      	mov	r7, r1
 8006b42:	d007      	beq.n	8006b54 <__pow5mult+0x20>
 8006b44:	4c25      	ldr	r4, [pc, #148]	; (8006bdc <__pow5mult+0xa8>)
 8006b46:	3a01      	subs	r2, #1
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b4e:	f7ff fe53 	bl	80067f8 <__multadd>
 8006b52:	4607      	mov	r7, r0
 8006b54:	10ad      	asrs	r5, r5, #2
 8006b56:	d03d      	beq.n	8006bd4 <__pow5mult+0xa0>
 8006b58:	69f4      	ldr	r4, [r6, #28]
 8006b5a:	b97c      	cbnz	r4, 8006b7c <__pow5mult+0x48>
 8006b5c:	2010      	movs	r0, #16
 8006b5e:	f7ff fd35 	bl	80065cc <malloc>
 8006b62:	4602      	mov	r2, r0
 8006b64:	61f0      	str	r0, [r6, #28]
 8006b66:	b928      	cbnz	r0, 8006b74 <__pow5mult+0x40>
 8006b68:	4b1d      	ldr	r3, [pc, #116]	; (8006be0 <__pow5mult+0xac>)
 8006b6a:	481e      	ldr	r0, [pc, #120]	; (8006be4 <__pow5mult+0xb0>)
 8006b6c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006b70:	f001 fd46 	bl	8008600 <__assert_func>
 8006b74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b78:	6004      	str	r4, [r0, #0]
 8006b7a:	60c4      	str	r4, [r0, #12]
 8006b7c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006b80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b84:	b94c      	cbnz	r4, 8006b9a <__pow5mult+0x66>
 8006b86:	f240 2171 	movw	r1, #625	; 0x271
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	f7ff ff12 	bl	80069b4 <__i2b>
 8006b90:	2300      	movs	r3, #0
 8006b92:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b96:	4604      	mov	r4, r0
 8006b98:	6003      	str	r3, [r0, #0]
 8006b9a:	f04f 0900 	mov.w	r9, #0
 8006b9e:	07eb      	lsls	r3, r5, #31
 8006ba0:	d50a      	bpl.n	8006bb8 <__pow5mult+0x84>
 8006ba2:	4639      	mov	r1, r7
 8006ba4:	4622      	mov	r2, r4
 8006ba6:	4630      	mov	r0, r6
 8006ba8:	f7ff ff1a 	bl	80069e0 <__multiply>
 8006bac:	4639      	mov	r1, r7
 8006bae:	4680      	mov	r8, r0
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	f7ff fdff 	bl	80067b4 <_Bfree>
 8006bb6:	4647      	mov	r7, r8
 8006bb8:	106d      	asrs	r5, r5, #1
 8006bba:	d00b      	beq.n	8006bd4 <__pow5mult+0xa0>
 8006bbc:	6820      	ldr	r0, [r4, #0]
 8006bbe:	b938      	cbnz	r0, 8006bd0 <__pow5mult+0x9c>
 8006bc0:	4622      	mov	r2, r4
 8006bc2:	4621      	mov	r1, r4
 8006bc4:	4630      	mov	r0, r6
 8006bc6:	f7ff ff0b 	bl	80069e0 <__multiply>
 8006bca:	6020      	str	r0, [r4, #0]
 8006bcc:	f8c0 9000 	str.w	r9, [r0]
 8006bd0:	4604      	mov	r4, r0
 8006bd2:	e7e4      	b.n	8006b9e <__pow5mult+0x6a>
 8006bd4:	4638      	mov	r0, r7
 8006bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bda:	bf00      	nop
 8006bdc:	08009128 	.word	0x08009128
 8006be0:	08008f5e 	.word	0x08008f5e
 8006be4:	08008fde 	.word	0x08008fde

08006be8 <__lshift>:
 8006be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bec:	460c      	mov	r4, r1
 8006bee:	6849      	ldr	r1, [r1, #4]
 8006bf0:	6923      	ldr	r3, [r4, #16]
 8006bf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006bf6:	68a3      	ldr	r3, [r4, #8]
 8006bf8:	4607      	mov	r7, r0
 8006bfa:	4691      	mov	r9, r2
 8006bfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c00:	f108 0601 	add.w	r6, r8, #1
 8006c04:	42b3      	cmp	r3, r6
 8006c06:	db0b      	blt.n	8006c20 <__lshift+0x38>
 8006c08:	4638      	mov	r0, r7
 8006c0a:	f7ff fd93 	bl	8006734 <_Balloc>
 8006c0e:	4605      	mov	r5, r0
 8006c10:	b948      	cbnz	r0, 8006c26 <__lshift+0x3e>
 8006c12:	4602      	mov	r2, r0
 8006c14:	4b28      	ldr	r3, [pc, #160]	; (8006cb8 <__lshift+0xd0>)
 8006c16:	4829      	ldr	r0, [pc, #164]	; (8006cbc <__lshift+0xd4>)
 8006c18:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006c1c:	f001 fcf0 	bl	8008600 <__assert_func>
 8006c20:	3101      	adds	r1, #1
 8006c22:	005b      	lsls	r3, r3, #1
 8006c24:	e7ee      	b.n	8006c04 <__lshift+0x1c>
 8006c26:	2300      	movs	r3, #0
 8006c28:	f100 0114 	add.w	r1, r0, #20
 8006c2c:	f100 0210 	add.w	r2, r0, #16
 8006c30:	4618      	mov	r0, r3
 8006c32:	4553      	cmp	r3, sl
 8006c34:	db33      	blt.n	8006c9e <__lshift+0xb6>
 8006c36:	6920      	ldr	r0, [r4, #16]
 8006c38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c3c:	f104 0314 	add.w	r3, r4, #20
 8006c40:	f019 091f 	ands.w	r9, r9, #31
 8006c44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006c4c:	d02b      	beq.n	8006ca6 <__lshift+0xbe>
 8006c4e:	f1c9 0e20 	rsb	lr, r9, #32
 8006c52:	468a      	mov	sl, r1
 8006c54:	2200      	movs	r2, #0
 8006c56:	6818      	ldr	r0, [r3, #0]
 8006c58:	fa00 f009 	lsl.w	r0, r0, r9
 8006c5c:	4310      	orrs	r0, r2
 8006c5e:	f84a 0b04 	str.w	r0, [sl], #4
 8006c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c66:	459c      	cmp	ip, r3
 8006c68:	fa22 f20e 	lsr.w	r2, r2, lr
 8006c6c:	d8f3      	bhi.n	8006c56 <__lshift+0x6e>
 8006c6e:	ebac 0304 	sub.w	r3, ip, r4
 8006c72:	3b15      	subs	r3, #21
 8006c74:	f023 0303 	bic.w	r3, r3, #3
 8006c78:	3304      	adds	r3, #4
 8006c7a:	f104 0015 	add.w	r0, r4, #21
 8006c7e:	4584      	cmp	ip, r0
 8006c80:	bf38      	it	cc
 8006c82:	2304      	movcc	r3, #4
 8006c84:	50ca      	str	r2, [r1, r3]
 8006c86:	b10a      	cbz	r2, 8006c8c <__lshift+0xa4>
 8006c88:	f108 0602 	add.w	r6, r8, #2
 8006c8c:	3e01      	subs	r6, #1
 8006c8e:	4638      	mov	r0, r7
 8006c90:	612e      	str	r6, [r5, #16]
 8006c92:	4621      	mov	r1, r4
 8006c94:	f7ff fd8e 	bl	80067b4 <_Bfree>
 8006c98:	4628      	mov	r0, r5
 8006c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	e7c5      	b.n	8006c32 <__lshift+0x4a>
 8006ca6:	3904      	subs	r1, #4
 8006ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cac:	f841 2f04 	str.w	r2, [r1, #4]!
 8006cb0:	459c      	cmp	ip, r3
 8006cb2:	d8f9      	bhi.n	8006ca8 <__lshift+0xc0>
 8006cb4:	e7ea      	b.n	8006c8c <__lshift+0xa4>
 8006cb6:	bf00      	nop
 8006cb8:	08008fcd 	.word	0x08008fcd
 8006cbc:	08008fde 	.word	0x08008fde

08006cc0 <__mcmp>:
 8006cc0:	b530      	push	{r4, r5, lr}
 8006cc2:	6902      	ldr	r2, [r0, #16]
 8006cc4:	690c      	ldr	r4, [r1, #16]
 8006cc6:	1b12      	subs	r2, r2, r4
 8006cc8:	d10e      	bne.n	8006ce8 <__mcmp+0x28>
 8006cca:	f100 0314 	add.w	r3, r0, #20
 8006cce:	3114      	adds	r1, #20
 8006cd0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006cd4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006cd8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006cdc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006ce0:	42a5      	cmp	r5, r4
 8006ce2:	d003      	beq.n	8006cec <__mcmp+0x2c>
 8006ce4:	d305      	bcc.n	8006cf2 <__mcmp+0x32>
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	4610      	mov	r0, r2
 8006cea:	bd30      	pop	{r4, r5, pc}
 8006cec:	4283      	cmp	r3, r0
 8006cee:	d3f3      	bcc.n	8006cd8 <__mcmp+0x18>
 8006cf0:	e7fa      	b.n	8006ce8 <__mcmp+0x28>
 8006cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf6:	e7f7      	b.n	8006ce8 <__mcmp+0x28>

08006cf8 <__mdiff>:
 8006cf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfc:	460c      	mov	r4, r1
 8006cfe:	4606      	mov	r6, r0
 8006d00:	4611      	mov	r1, r2
 8006d02:	4620      	mov	r0, r4
 8006d04:	4690      	mov	r8, r2
 8006d06:	f7ff ffdb 	bl	8006cc0 <__mcmp>
 8006d0a:	1e05      	subs	r5, r0, #0
 8006d0c:	d110      	bne.n	8006d30 <__mdiff+0x38>
 8006d0e:	4629      	mov	r1, r5
 8006d10:	4630      	mov	r0, r6
 8006d12:	f7ff fd0f 	bl	8006734 <_Balloc>
 8006d16:	b930      	cbnz	r0, 8006d26 <__mdiff+0x2e>
 8006d18:	4b3a      	ldr	r3, [pc, #232]	; (8006e04 <__mdiff+0x10c>)
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	f240 2137 	movw	r1, #567	; 0x237
 8006d20:	4839      	ldr	r0, [pc, #228]	; (8006e08 <__mdiff+0x110>)
 8006d22:	f001 fc6d 	bl	8008600 <__assert_func>
 8006d26:	2301      	movs	r3, #1
 8006d28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006d2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d30:	bfa4      	itt	ge
 8006d32:	4643      	movge	r3, r8
 8006d34:	46a0      	movge	r8, r4
 8006d36:	4630      	mov	r0, r6
 8006d38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006d3c:	bfa6      	itte	ge
 8006d3e:	461c      	movge	r4, r3
 8006d40:	2500      	movge	r5, #0
 8006d42:	2501      	movlt	r5, #1
 8006d44:	f7ff fcf6 	bl	8006734 <_Balloc>
 8006d48:	b920      	cbnz	r0, 8006d54 <__mdiff+0x5c>
 8006d4a:	4b2e      	ldr	r3, [pc, #184]	; (8006e04 <__mdiff+0x10c>)
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	f240 2145 	movw	r1, #581	; 0x245
 8006d52:	e7e5      	b.n	8006d20 <__mdiff+0x28>
 8006d54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006d58:	6926      	ldr	r6, [r4, #16]
 8006d5a:	60c5      	str	r5, [r0, #12]
 8006d5c:	f104 0914 	add.w	r9, r4, #20
 8006d60:	f108 0514 	add.w	r5, r8, #20
 8006d64:	f100 0e14 	add.w	lr, r0, #20
 8006d68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006d6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006d70:	f108 0210 	add.w	r2, r8, #16
 8006d74:	46f2      	mov	sl, lr
 8006d76:	2100      	movs	r1, #0
 8006d78:	f859 3b04 	ldr.w	r3, [r9], #4
 8006d7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006d80:	fa11 f88b 	uxtah	r8, r1, fp
 8006d84:	b299      	uxth	r1, r3
 8006d86:	0c1b      	lsrs	r3, r3, #16
 8006d88:	eba8 0801 	sub.w	r8, r8, r1
 8006d8c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006d90:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006d94:	fa1f f888 	uxth.w	r8, r8
 8006d98:	1419      	asrs	r1, r3, #16
 8006d9a:	454e      	cmp	r6, r9
 8006d9c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006da0:	f84a 3b04 	str.w	r3, [sl], #4
 8006da4:	d8e8      	bhi.n	8006d78 <__mdiff+0x80>
 8006da6:	1b33      	subs	r3, r6, r4
 8006da8:	3b15      	subs	r3, #21
 8006daa:	f023 0303 	bic.w	r3, r3, #3
 8006dae:	3304      	adds	r3, #4
 8006db0:	3415      	adds	r4, #21
 8006db2:	42a6      	cmp	r6, r4
 8006db4:	bf38      	it	cc
 8006db6:	2304      	movcc	r3, #4
 8006db8:	441d      	add	r5, r3
 8006dba:	4473      	add	r3, lr
 8006dbc:	469e      	mov	lr, r3
 8006dbe:	462e      	mov	r6, r5
 8006dc0:	4566      	cmp	r6, ip
 8006dc2:	d30e      	bcc.n	8006de2 <__mdiff+0xea>
 8006dc4:	f10c 0203 	add.w	r2, ip, #3
 8006dc8:	1b52      	subs	r2, r2, r5
 8006dca:	f022 0203 	bic.w	r2, r2, #3
 8006dce:	3d03      	subs	r5, #3
 8006dd0:	45ac      	cmp	ip, r5
 8006dd2:	bf38      	it	cc
 8006dd4:	2200      	movcc	r2, #0
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006ddc:	b17a      	cbz	r2, 8006dfe <__mdiff+0x106>
 8006dde:	6107      	str	r7, [r0, #16]
 8006de0:	e7a4      	b.n	8006d2c <__mdiff+0x34>
 8006de2:	f856 8b04 	ldr.w	r8, [r6], #4
 8006de6:	fa11 f288 	uxtah	r2, r1, r8
 8006dea:	1414      	asrs	r4, r2, #16
 8006dec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006df0:	b292      	uxth	r2, r2
 8006df2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006df6:	f84e 2b04 	str.w	r2, [lr], #4
 8006dfa:	1421      	asrs	r1, r4, #16
 8006dfc:	e7e0      	b.n	8006dc0 <__mdiff+0xc8>
 8006dfe:	3f01      	subs	r7, #1
 8006e00:	e7ea      	b.n	8006dd8 <__mdiff+0xe0>
 8006e02:	bf00      	nop
 8006e04:	08008fcd 	.word	0x08008fcd
 8006e08:	08008fde 	.word	0x08008fde

08006e0c <__ulp>:
 8006e0c:	b082      	sub	sp, #8
 8006e0e:	ed8d 0b00 	vstr	d0, [sp]
 8006e12:	9a01      	ldr	r2, [sp, #4]
 8006e14:	4b0f      	ldr	r3, [pc, #60]	; (8006e54 <__ulp+0x48>)
 8006e16:	4013      	ands	r3, r2
 8006e18:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	dc08      	bgt.n	8006e32 <__ulp+0x26>
 8006e20:	425b      	negs	r3, r3
 8006e22:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006e26:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006e2a:	da04      	bge.n	8006e36 <__ulp+0x2a>
 8006e2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006e30:	4113      	asrs	r3, r2
 8006e32:	2200      	movs	r2, #0
 8006e34:	e008      	b.n	8006e48 <__ulp+0x3c>
 8006e36:	f1a2 0314 	sub.w	r3, r2, #20
 8006e3a:	2b1e      	cmp	r3, #30
 8006e3c:	bfda      	itte	le
 8006e3e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006e42:	40da      	lsrle	r2, r3
 8006e44:	2201      	movgt	r2, #1
 8006e46:	2300      	movs	r3, #0
 8006e48:	4619      	mov	r1, r3
 8006e4a:	4610      	mov	r0, r2
 8006e4c:	ec41 0b10 	vmov	d0, r0, r1
 8006e50:	b002      	add	sp, #8
 8006e52:	4770      	bx	lr
 8006e54:	7ff00000 	.word	0x7ff00000

08006e58 <__b2d>:
 8006e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e5c:	6906      	ldr	r6, [r0, #16]
 8006e5e:	f100 0814 	add.w	r8, r0, #20
 8006e62:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006e66:	1f37      	subs	r7, r6, #4
 8006e68:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	f7ff fd53 	bl	8006918 <__hi0bits>
 8006e72:	f1c0 0320 	rsb	r3, r0, #32
 8006e76:	280a      	cmp	r0, #10
 8006e78:	600b      	str	r3, [r1, #0]
 8006e7a:	491b      	ldr	r1, [pc, #108]	; (8006ee8 <__b2d+0x90>)
 8006e7c:	dc15      	bgt.n	8006eaa <__b2d+0x52>
 8006e7e:	f1c0 0c0b 	rsb	ip, r0, #11
 8006e82:	fa22 f30c 	lsr.w	r3, r2, ip
 8006e86:	45b8      	cmp	r8, r7
 8006e88:	ea43 0501 	orr.w	r5, r3, r1
 8006e8c:	bf34      	ite	cc
 8006e8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006e92:	2300      	movcs	r3, #0
 8006e94:	3015      	adds	r0, #21
 8006e96:	fa02 f000 	lsl.w	r0, r2, r0
 8006e9a:	fa23 f30c 	lsr.w	r3, r3, ip
 8006e9e:	4303      	orrs	r3, r0
 8006ea0:	461c      	mov	r4, r3
 8006ea2:	ec45 4b10 	vmov	d0, r4, r5
 8006ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eaa:	45b8      	cmp	r8, r7
 8006eac:	bf3a      	itte	cc
 8006eae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006eb2:	f1a6 0708 	subcc.w	r7, r6, #8
 8006eb6:	2300      	movcs	r3, #0
 8006eb8:	380b      	subs	r0, #11
 8006eba:	d012      	beq.n	8006ee2 <__b2d+0x8a>
 8006ebc:	f1c0 0120 	rsb	r1, r0, #32
 8006ec0:	fa23 f401 	lsr.w	r4, r3, r1
 8006ec4:	4082      	lsls	r2, r0
 8006ec6:	4322      	orrs	r2, r4
 8006ec8:	4547      	cmp	r7, r8
 8006eca:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8006ece:	bf8c      	ite	hi
 8006ed0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006ed4:	2200      	movls	r2, #0
 8006ed6:	4083      	lsls	r3, r0
 8006ed8:	40ca      	lsrs	r2, r1
 8006eda:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	e7de      	b.n	8006ea0 <__b2d+0x48>
 8006ee2:	ea42 0501 	orr.w	r5, r2, r1
 8006ee6:	e7db      	b.n	8006ea0 <__b2d+0x48>
 8006ee8:	3ff00000 	.word	0x3ff00000

08006eec <__d2b>:
 8006eec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ef0:	460f      	mov	r7, r1
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	ec59 8b10 	vmov	r8, r9, d0
 8006ef8:	4616      	mov	r6, r2
 8006efa:	f7ff fc1b 	bl	8006734 <_Balloc>
 8006efe:	4604      	mov	r4, r0
 8006f00:	b930      	cbnz	r0, 8006f10 <__d2b+0x24>
 8006f02:	4602      	mov	r2, r0
 8006f04:	4b24      	ldr	r3, [pc, #144]	; (8006f98 <__d2b+0xac>)
 8006f06:	4825      	ldr	r0, [pc, #148]	; (8006f9c <__d2b+0xb0>)
 8006f08:	f240 310f 	movw	r1, #783	; 0x30f
 8006f0c:	f001 fb78 	bl	8008600 <__assert_func>
 8006f10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006f14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f18:	bb2d      	cbnz	r5, 8006f66 <__d2b+0x7a>
 8006f1a:	9301      	str	r3, [sp, #4]
 8006f1c:	f1b8 0300 	subs.w	r3, r8, #0
 8006f20:	d026      	beq.n	8006f70 <__d2b+0x84>
 8006f22:	4668      	mov	r0, sp
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	f7ff fd17 	bl	8006958 <__lo0bits>
 8006f2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006f2e:	b1e8      	cbz	r0, 8006f6c <__d2b+0x80>
 8006f30:	f1c0 0320 	rsb	r3, r0, #32
 8006f34:	fa02 f303 	lsl.w	r3, r2, r3
 8006f38:	430b      	orrs	r3, r1
 8006f3a:	40c2      	lsrs	r2, r0
 8006f3c:	6163      	str	r3, [r4, #20]
 8006f3e:	9201      	str	r2, [sp, #4]
 8006f40:	9b01      	ldr	r3, [sp, #4]
 8006f42:	61a3      	str	r3, [r4, #24]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	bf14      	ite	ne
 8006f48:	2202      	movne	r2, #2
 8006f4a:	2201      	moveq	r2, #1
 8006f4c:	6122      	str	r2, [r4, #16]
 8006f4e:	b1bd      	cbz	r5, 8006f80 <__d2b+0x94>
 8006f50:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006f54:	4405      	add	r5, r0
 8006f56:	603d      	str	r5, [r7, #0]
 8006f58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006f5c:	6030      	str	r0, [r6, #0]
 8006f5e:	4620      	mov	r0, r4
 8006f60:	b003      	add	sp, #12
 8006f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f6a:	e7d6      	b.n	8006f1a <__d2b+0x2e>
 8006f6c:	6161      	str	r1, [r4, #20]
 8006f6e:	e7e7      	b.n	8006f40 <__d2b+0x54>
 8006f70:	a801      	add	r0, sp, #4
 8006f72:	f7ff fcf1 	bl	8006958 <__lo0bits>
 8006f76:	9b01      	ldr	r3, [sp, #4]
 8006f78:	6163      	str	r3, [r4, #20]
 8006f7a:	3020      	adds	r0, #32
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	e7e5      	b.n	8006f4c <__d2b+0x60>
 8006f80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f88:	6038      	str	r0, [r7, #0]
 8006f8a:	6918      	ldr	r0, [r3, #16]
 8006f8c:	f7ff fcc4 	bl	8006918 <__hi0bits>
 8006f90:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f94:	e7e2      	b.n	8006f5c <__d2b+0x70>
 8006f96:	bf00      	nop
 8006f98:	08008fcd 	.word	0x08008fcd
 8006f9c:	08008fde 	.word	0x08008fde

08006fa0 <__ratio>:
 8006fa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa4:	4688      	mov	r8, r1
 8006fa6:	4669      	mov	r1, sp
 8006fa8:	4681      	mov	r9, r0
 8006faa:	f7ff ff55 	bl	8006e58 <__b2d>
 8006fae:	a901      	add	r1, sp, #4
 8006fb0:	4640      	mov	r0, r8
 8006fb2:	ec55 4b10 	vmov	r4, r5, d0
 8006fb6:	f7ff ff4f 	bl	8006e58 <__b2d>
 8006fba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006fbe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006fc2:	eba3 0c02 	sub.w	ip, r3, r2
 8006fc6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006fca:	1a9b      	subs	r3, r3, r2
 8006fcc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006fd0:	ec51 0b10 	vmov	r0, r1, d0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	bfd6      	itet	le
 8006fd8:	460a      	movle	r2, r1
 8006fda:	462a      	movgt	r2, r5
 8006fdc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006fe0:	468b      	mov	fp, r1
 8006fe2:	462f      	mov	r7, r5
 8006fe4:	bfd4      	ite	le
 8006fe6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006fea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006fee:	4620      	mov	r0, r4
 8006ff0:	ee10 2a10 	vmov	r2, s0
 8006ff4:	465b      	mov	r3, fp
 8006ff6:	4639      	mov	r1, r7
 8006ff8:	f7f9 fc30 	bl	800085c <__aeabi_ddiv>
 8006ffc:	ec41 0b10 	vmov	d0, r0, r1
 8007000:	b003      	add	sp, #12
 8007002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007006 <__copybits>:
 8007006:	3901      	subs	r1, #1
 8007008:	b570      	push	{r4, r5, r6, lr}
 800700a:	1149      	asrs	r1, r1, #5
 800700c:	6914      	ldr	r4, [r2, #16]
 800700e:	3101      	adds	r1, #1
 8007010:	f102 0314 	add.w	r3, r2, #20
 8007014:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007018:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800701c:	1f05      	subs	r5, r0, #4
 800701e:	42a3      	cmp	r3, r4
 8007020:	d30c      	bcc.n	800703c <__copybits+0x36>
 8007022:	1aa3      	subs	r3, r4, r2
 8007024:	3b11      	subs	r3, #17
 8007026:	f023 0303 	bic.w	r3, r3, #3
 800702a:	3211      	adds	r2, #17
 800702c:	42a2      	cmp	r2, r4
 800702e:	bf88      	it	hi
 8007030:	2300      	movhi	r3, #0
 8007032:	4418      	add	r0, r3
 8007034:	2300      	movs	r3, #0
 8007036:	4288      	cmp	r0, r1
 8007038:	d305      	bcc.n	8007046 <__copybits+0x40>
 800703a:	bd70      	pop	{r4, r5, r6, pc}
 800703c:	f853 6b04 	ldr.w	r6, [r3], #4
 8007040:	f845 6f04 	str.w	r6, [r5, #4]!
 8007044:	e7eb      	b.n	800701e <__copybits+0x18>
 8007046:	f840 3b04 	str.w	r3, [r0], #4
 800704a:	e7f4      	b.n	8007036 <__copybits+0x30>

0800704c <__any_on>:
 800704c:	f100 0214 	add.w	r2, r0, #20
 8007050:	6900      	ldr	r0, [r0, #16]
 8007052:	114b      	asrs	r3, r1, #5
 8007054:	4298      	cmp	r0, r3
 8007056:	b510      	push	{r4, lr}
 8007058:	db11      	blt.n	800707e <__any_on+0x32>
 800705a:	dd0a      	ble.n	8007072 <__any_on+0x26>
 800705c:	f011 011f 	ands.w	r1, r1, #31
 8007060:	d007      	beq.n	8007072 <__any_on+0x26>
 8007062:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007066:	fa24 f001 	lsr.w	r0, r4, r1
 800706a:	fa00 f101 	lsl.w	r1, r0, r1
 800706e:	428c      	cmp	r4, r1
 8007070:	d10b      	bne.n	800708a <__any_on+0x3e>
 8007072:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007076:	4293      	cmp	r3, r2
 8007078:	d803      	bhi.n	8007082 <__any_on+0x36>
 800707a:	2000      	movs	r0, #0
 800707c:	bd10      	pop	{r4, pc}
 800707e:	4603      	mov	r3, r0
 8007080:	e7f7      	b.n	8007072 <__any_on+0x26>
 8007082:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007086:	2900      	cmp	r1, #0
 8007088:	d0f5      	beq.n	8007076 <__any_on+0x2a>
 800708a:	2001      	movs	r0, #1
 800708c:	e7f6      	b.n	800707c <__any_on+0x30>

0800708e <sulp>:
 800708e:	b570      	push	{r4, r5, r6, lr}
 8007090:	4604      	mov	r4, r0
 8007092:	460d      	mov	r5, r1
 8007094:	ec45 4b10 	vmov	d0, r4, r5
 8007098:	4616      	mov	r6, r2
 800709a:	f7ff feb7 	bl	8006e0c <__ulp>
 800709e:	ec51 0b10 	vmov	r0, r1, d0
 80070a2:	b17e      	cbz	r6, 80070c4 <sulp+0x36>
 80070a4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80070a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	dd09      	ble.n	80070c4 <sulp+0x36>
 80070b0:	051b      	lsls	r3, r3, #20
 80070b2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80070b6:	2400      	movs	r4, #0
 80070b8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80070bc:	4622      	mov	r2, r4
 80070be:	462b      	mov	r3, r5
 80070c0:	f7f9 faa2 	bl	8000608 <__aeabi_dmul>
 80070c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080070c8 <_strtod_l>:
 80070c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070cc:	ed2d 8b02 	vpush	{d8}
 80070d0:	b09b      	sub	sp, #108	; 0x6c
 80070d2:	4604      	mov	r4, r0
 80070d4:	9213      	str	r2, [sp, #76]	; 0x4c
 80070d6:	2200      	movs	r2, #0
 80070d8:	9216      	str	r2, [sp, #88]	; 0x58
 80070da:	460d      	mov	r5, r1
 80070dc:	f04f 0800 	mov.w	r8, #0
 80070e0:	f04f 0900 	mov.w	r9, #0
 80070e4:	460a      	mov	r2, r1
 80070e6:	9215      	str	r2, [sp, #84]	; 0x54
 80070e8:	7811      	ldrb	r1, [r2, #0]
 80070ea:	292b      	cmp	r1, #43	; 0x2b
 80070ec:	d04c      	beq.n	8007188 <_strtod_l+0xc0>
 80070ee:	d83a      	bhi.n	8007166 <_strtod_l+0x9e>
 80070f0:	290d      	cmp	r1, #13
 80070f2:	d834      	bhi.n	800715e <_strtod_l+0x96>
 80070f4:	2908      	cmp	r1, #8
 80070f6:	d834      	bhi.n	8007162 <_strtod_l+0x9a>
 80070f8:	2900      	cmp	r1, #0
 80070fa:	d03d      	beq.n	8007178 <_strtod_l+0xb0>
 80070fc:	2200      	movs	r2, #0
 80070fe:	920a      	str	r2, [sp, #40]	; 0x28
 8007100:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007102:	7832      	ldrb	r2, [r6, #0]
 8007104:	2a30      	cmp	r2, #48	; 0x30
 8007106:	f040 80b4 	bne.w	8007272 <_strtod_l+0x1aa>
 800710a:	7872      	ldrb	r2, [r6, #1]
 800710c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007110:	2a58      	cmp	r2, #88	; 0x58
 8007112:	d170      	bne.n	80071f6 <_strtod_l+0x12e>
 8007114:	9302      	str	r3, [sp, #8]
 8007116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007118:	9301      	str	r3, [sp, #4]
 800711a:	ab16      	add	r3, sp, #88	; 0x58
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	4a8e      	ldr	r2, [pc, #568]	; (8007358 <_strtod_l+0x290>)
 8007120:	ab17      	add	r3, sp, #92	; 0x5c
 8007122:	a915      	add	r1, sp, #84	; 0x54
 8007124:	4620      	mov	r0, r4
 8007126:	f001 fb07 	bl	8008738 <__gethex>
 800712a:	f010 070f 	ands.w	r7, r0, #15
 800712e:	4605      	mov	r5, r0
 8007130:	d005      	beq.n	800713e <_strtod_l+0x76>
 8007132:	2f06      	cmp	r7, #6
 8007134:	d12a      	bne.n	800718c <_strtod_l+0xc4>
 8007136:	3601      	adds	r6, #1
 8007138:	2300      	movs	r3, #0
 800713a:	9615      	str	r6, [sp, #84]	; 0x54
 800713c:	930a      	str	r3, [sp, #40]	; 0x28
 800713e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007140:	2b00      	cmp	r3, #0
 8007142:	f040 857f 	bne.w	8007c44 <_strtod_l+0xb7c>
 8007146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007148:	b1db      	cbz	r3, 8007182 <_strtod_l+0xba>
 800714a:	4642      	mov	r2, r8
 800714c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007150:	ec43 2b10 	vmov	d0, r2, r3
 8007154:	b01b      	add	sp, #108	; 0x6c
 8007156:	ecbd 8b02 	vpop	{d8}
 800715a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800715e:	2920      	cmp	r1, #32
 8007160:	d1cc      	bne.n	80070fc <_strtod_l+0x34>
 8007162:	3201      	adds	r2, #1
 8007164:	e7bf      	b.n	80070e6 <_strtod_l+0x1e>
 8007166:	292d      	cmp	r1, #45	; 0x2d
 8007168:	d1c8      	bne.n	80070fc <_strtod_l+0x34>
 800716a:	2101      	movs	r1, #1
 800716c:	910a      	str	r1, [sp, #40]	; 0x28
 800716e:	1c51      	adds	r1, r2, #1
 8007170:	9115      	str	r1, [sp, #84]	; 0x54
 8007172:	7852      	ldrb	r2, [r2, #1]
 8007174:	2a00      	cmp	r2, #0
 8007176:	d1c3      	bne.n	8007100 <_strtod_l+0x38>
 8007178:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800717a:	9515      	str	r5, [sp, #84]	; 0x54
 800717c:	2b00      	cmp	r3, #0
 800717e:	f040 855f 	bne.w	8007c40 <_strtod_l+0xb78>
 8007182:	4642      	mov	r2, r8
 8007184:	464b      	mov	r3, r9
 8007186:	e7e3      	b.n	8007150 <_strtod_l+0x88>
 8007188:	2100      	movs	r1, #0
 800718a:	e7ef      	b.n	800716c <_strtod_l+0xa4>
 800718c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800718e:	b13a      	cbz	r2, 80071a0 <_strtod_l+0xd8>
 8007190:	2135      	movs	r1, #53	; 0x35
 8007192:	a818      	add	r0, sp, #96	; 0x60
 8007194:	f7ff ff37 	bl	8007006 <__copybits>
 8007198:	9916      	ldr	r1, [sp, #88]	; 0x58
 800719a:	4620      	mov	r0, r4
 800719c:	f7ff fb0a 	bl	80067b4 <_Bfree>
 80071a0:	3f01      	subs	r7, #1
 80071a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80071a4:	2f04      	cmp	r7, #4
 80071a6:	d806      	bhi.n	80071b6 <_strtod_l+0xee>
 80071a8:	e8df f007 	tbb	[pc, r7]
 80071ac:	201d0314 	.word	0x201d0314
 80071b0:	14          	.byte	0x14
 80071b1:	00          	.byte	0x00
 80071b2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80071b6:	05e9      	lsls	r1, r5, #23
 80071b8:	bf48      	it	mi
 80071ba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80071be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80071c2:	0d1b      	lsrs	r3, r3, #20
 80071c4:	051b      	lsls	r3, r3, #20
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1b9      	bne.n	800713e <_strtod_l+0x76>
 80071ca:	f7fe fb05 	bl	80057d8 <__errno>
 80071ce:	2322      	movs	r3, #34	; 0x22
 80071d0:	6003      	str	r3, [r0, #0]
 80071d2:	e7b4      	b.n	800713e <_strtod_l+0x76>
 80071d4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80071d8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80071dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80071e0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80071e4:	e7e7      	b.n	80071b6 <_strtod_l+0xee>
 80071e6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007360 <_strtod_l+0x298>
 80071ea:	e7e4      	b.n	80071b6 <_strtod_l+0xee>
 80071ec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80071f0:	f04f 38ff 	mov.w	r8, #4294967295
 80071f4:	e7df      	b.n	80071b6 <_strtod_l+0xee>
 80071f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	9215      	str	r2, [sp, #84]	; 0x54
 80071fc:	785b      	ldrb	r3, [r3, #1]
 80071fe:	2b30      	cmp	r3, #48	; 0x30
 8007200:	d0f9      	beq.n	80071f6 <_strtod_l+0x12e>
 8007202:	2b00      	cmp	r3, #0
 8007204:	d09b      	beq.n	800713e <_strtod_l+0x76>
 8007206:	2301      	movs	r3, #1
 8007208:	f04f 0a00 	mov.w	sl, #0
 800720c:	9304      	str	r3, [sp, #16]
 800720e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007210:	930b      	str	r3, [sp, #44]	; 0x2c
 8007212:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007216:	46d3      	mov	fp, sl
 8007218:	220a      	movs	r2, #10
 800721a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800721c:	7806      	ldrb	r6, [r0, #0]
 800721e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007222:	b2d9      	uxtb	r1, r3
 8007224:	2909      	cmp	r1, #9
 8007226:	d926      	bls.n	8007276 <_strtod_l+0x1ae>
 8007228:	494c      	ldr	r1, [pc, #304]	; (800735c <_strtod_l+0x294>)
 800722a:	2201      	movs	r2, #1
 800722c:	f001 f98c 	bl	8008548 <strncmp>
 8007230:	2800      	cmp	r0, #0
 8007232:	d030      	beq.n	8007296 <_strtod_l+0x1ce>
 8007234:	2000      	movs	r0, #0
 8007236:	4632      	mov	r2, r6
 8007238:	9005      	str	r0, [sp, #20]
 800723a:	465e      	mov	r6, fp
 800723c:	4603      	mov	r3, r0
 800723e:	2a65      	cmp	r2, #101	; 0x65
 8007240:	d001      	beq.n	8007246 <_strtod_l+0x17e>
 8007242:	2a45      	cmp	r2, #69	; 0x45
 8007244:	d113      	bne.n	800726e <_strtod_l+0x1a6>
 8007246:	b91e      	cbnz	r6, 8007250 <_strtod_l+0x188>
 8007248:	9a04      	ldr	r2, [sp, #16]
 800724a:	4302      	orrs	r2, r0
 800724c:	d094      	beq.n	8007178 <_strtod_l+0xb0>
 800724e:	2600      	movs	r6, #0
 8007250:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007252:	1c6a      	adds	r2, r5, #1
 8007254:	9215      	str	r2, [sp, #84]	; 0x54
 8007256:	786a      	ldrb	r2, [r5, #1]
 8007258:	2a2b      	cmp	r2, #43	; 0x2b
 800725a:	d074      	beq.n	8007346 <_strtod_l+0x27e>
 800725c:	2a2d      	cmp	r2, #45	; 0x2d
 800725e:	d078      	beq.n	8007352 <_strtod_l+0x28a>
 8007260:	f04f 0c00 	mov.w	ip, #0
 8007264:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007268:	2909      	cmp	r1, #9
 800726a:	d97f      	bls.n	800736c <_strtod_l+0x2a4>
 800726c:	9515      	str	r5, [sp, #84]	; 0x54
 800726e:	2700      	movs	r7, #0
 8007270:	e09e      	b.n	80073b0 <_strtod_l+0x2e8>
 8007272:	2300      	movs	r3, #0
 8007274:	e7c8      	b.n	8007208 <_strtod_l+0x140>
 8007276:	f1bb 0f08 	cmp.w	fp, #8
 800727a:	bfd8      	it	le
 800727c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800727e:	f100 0001 	add.w	r0, r0, #1
 8007282:	bfda      	itte	le
 8007284:	fb02 3301 	mlale	r3, r2, r1, r3
 8007288:	9309      	strle	r3, [sp, #36]	; 0x24
 800728a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800728e:	f10b 0b01 	add.w	fp, fp, #1
 8007292:	9015      	str	r0, [sp, #84]	; 0x54
 8007294:	e7c1      	b.n	800721a <_strtod_l+0x152>
 8007296:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	9215      	str	r2, [sp, #84]	; 0x54
 800729c:	785a      	ldrb	r2, [r3, #1]
 800729e:	f1bb 0f00 	cmp.w	fp, #0
 80072a2:	d037      	beq.n	8007314 <_strtod_l+0x24c>
 80072a4:	9005      	str	r0, [sp, #20]
 80072a6:	465e      	mov	r6, fp
 80072a8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80072ac:	2b09      	cmp	r3, #9
 80072ae:	d912      	bls.n	80072d6 <_strtod_l+0x20e>
 80072b0:	2301      	movs	r3, #1
 80072b2:	e7c4      	b.n	800723e <_strtod_l+0x176>
 80072b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	9215      	str	r2, [sp, #84]	; 0x54
 80072ba:	785a      	ldrb	r2, [r3, #1]
 80072bc:	3001      	adds	r0, #1
 80072be:	2a30      	cmp	r2, #48	; 0x30
 80072c0:	d0f8      	beq.n	80072b4 <_strtod_l+0x1ec>
 80072c2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80072c6:	2b08      	cmp	r3, #8
 80072c8:	f200 84c1 	bhi.w	8007c4e <_strtod_l+0xb86>
 80072cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072ce:	9005      	str	r0, [sp, #20]
 80072d0:	2000      	movs	r0, #0
 80072d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80072d4:	4606      	mov	r6, r0
 80072d6:	3a30      	subs	r2, #48	; 0x30
 80072d8:	f100 0301 	add.w	r3, r0, #1
 80072dc:	d014      	beq.n	8007308 <_strtod_l+0x240>
 80072de:	9905      	ldr	r1, [sp, #20]
 80072e0:	4419      	add	r1, r3
 80072e2:	9105      	str	r1, [sp, #20]
 80072e4:	4633      	mov	r3, r6
 80072e6:	eb00 0c06 	add.w	ip, r0, r6
 80072ea:	210a      	movs	r1, #10
 80072ec:	4563      	cmp	r3, ip
 80072ee:	d113      	bne.n	8007318 <_strtod_l+0x250>
 80072f0:	1833      	adds	r3, r6, r0
 80072f2:	2b08      	cmp	r3, #8
 80072f4:	f106 0601 	add.w	r6, r6, #1
 80072f8:	4406      	add	r6, r0
 80072fa:	dc1a      	bgt.n	8007332 <_strtod_l+0x26a>
 80072fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072fe:	230a      	movs	r3, #10
 8007300:	fb03 2301 	mla	r3, r3, r1, r2
 8007304:	9309      	str	r3, [sp, #36]	; 0x24
 8007306:	2300      	movs	r3, #0
 8007308:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800730a:	1c51      	adds	r1, r2, #1
 800730c:	9115      	str	r1, [sp, #84]	; 0x54
 800730e:	7852      	ldrb	r2, [r2, #1]
 8007310:	4618      	mov	r0, r3
 8007312:	e7c9      	b.n	80072a8 <_strtod_l+0x1e0>
 8007314:	4658      	mov	r0, fp
 8007316:	e7d2      	b.n	80072be <_strtod_l+0x1f6>
 8007318:	2b08      	cmp	r3, #8
 800731a:	f103 0301 	add.w	r3, r3, #1
 800731e:	dc03      	bgt.n	8007328 <_strtod_l+0x260>
 8007320:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007322:	434f      	muls	r7, r1
 8007324:	9709      	str	r7, [sp, #36]	; 0x24
 8007326:	e7e1      	b.n	80072ec <_strtod_l+0x224>
 8007328:	2b10      	cmp	r3, #16
 800732a:	bfd8      	it	le
 800732c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007330:	e7dc      	b.n	80072ec <_strtod_l+0x224>
 8007332:	2e10      	cmp	r6, #16
 8007334:	bfdc      	itt	le
 8007336:	230a      	movle	r3, #10
 8007338:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800733c:	e7e3      	b.n	8007306 <_strtod_l+0x23e>
 800733e:	2300      	movs	r3, #0
 8007340:	9305      	str	r3, [sp, #20]
 8007342:	2301      	movs	r3, #1
 8007344:	e780      	b.n	8007248 <_strtod_l+0x180>
 8007346:	f04f 0c00 	mov.w	ip, #0
 800734a:	1caa      	adds	r2, r5, #2
 800734c:	9215      	str	r2, [sp, #84]	; 0x54
 800734e:	78aa      	ldrb	r2, [r5, #2]
 8007350:	e788      	b.n	8007264 <_strtod_l+0x19c>
 8007352:	f04f 0c01 	mov.w	ip, #1
 8007356:	e7f8      	b.n	800734a <_strtod_l+0x282>
 8007358:	08009138 	.word	0x08009138
 800735c:	08009134 	.word	0x08009134
 8007360:	7ff00000 	.word	0x7ff00000
 8007364:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007366:	1c51      	adds	r1, r2, #1
 8007368:	9115      	str	r1, [sp, #84]	; 0x54
 800736a:	7852      	ldrb	r2, [r2, #1]
 800736c:	2a30      	cmp	r2, #48	; 0x30
 800736e:	d0f9      	beq.n	8007364 <_strtod_l+0x29c>
 8007370:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007374:	2908      	cmp	r1, #8
 8007376:	f63f af7a 	bhi.w	800726e <_strtod_l+0x1a6>
 800737a:	3a30      	subs	r2, #48	; 0x30
 800737c:	9208      	str	r2, [sp, #32]
 800737e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007380:	920c      	str	r2, [sp, #48]	; 0x30
 8007382:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007384:	1c57      	adds	r7, r2, #1
 8007386:	9715      	str	r7, [sp, #84]	; 0x54
 8007388:	7852      	ldrb	r2, [r2, #1]
 800738a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800738e:	f1be 0f09 	cmp.w	lr, #9
 8007392:	d938      	bls.n	8007406 <_strtod_l+0x33e>
 8007394:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007396:	1a7f      	subs	r7, r7, r1
 8007398:	2f08      	cmp	r7, #8
 800739a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800739e:	dc03      	bgt.n	80073a8 <_strtod_l+0x2e0>
 80073a0:	9908      	ldr	r1, [sp, #32]
 80073a2:	428f      	cmp	r7, r1
 80073a4:	bfa8      	it	ge
 80073a6:	460f      	movge	r7, r1
 80073a8:	f1bc 0f00 	cmp.w	ip, #0
 80073ac:	d000      	beq.n	80073b0 <_strtod_l+0x2e8>
 80073ae:	427f      	negs	r7, r7
 80073b0:	2e00      	cmp	r6, #0
 80073b2:	d14f      	bne.n	8007454 <_strtod_l+0x38c>
 80073b4:	9904      	ldr	r1, [sp, #16]
 80073b6:	4301      	orrs	r1, r0
 80073b8:	f47f aec1 	bne.w	800713e <_strtod_l+0x76>
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f47f aedb 	bne.w	8007178 <_strtod_l+0xb0>
 80073c2:	2a69      	cmp	r2, #105	; 0x69
 80073c4:	d029      	beq.n	800741a <_strtod_l+0x352>
 80073c6:	dc26      	bgt.n	8007416 <_strtod_l+0x34e>
 80073c8:	2a49      	cmp	r2, #73	; 0x49
 80073ca:	d026      	beq.n	800741a <_strtod_l+0x352>
 80073cc:	2a4e      	cmp	r2, #78	; 0x4e
 80073ce:	f47f aed3 	bne.w	8007178 <_strtod_l+0xb0>
 80073d2:	499b      	ldr	r1, [pc, #620]	; (8007640 <_strtod_l+0x578>)
 80073d4:	a815      	add	r0, sp, #84	; 0x54
 80073d6:	f001 fbef 	bl	8008bb8 <__match>
 80073da:	2800      	cmp	r0, #0
 80073dc:	f43f aecc 	beq.w	8007178 <_strtod_l+0xb0>
 80073e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	2b28      	cmp	r3, #40	; 0x28
 80073e6:	d12f      	bne.n	8007448 <_strtod_l+0x380>
 80073e8:	4996      	ldr	r1, [pc, #600]	; (8007644 <_strtod_l+0x57c>)
 80073ea:	aa18      	add	r2, sp, #96	; 0x60
 80073ec:	a815      	add	r0, sp, #84	; 0x54
 80073ee:	f001 fbf7 	bl	8008be0 <__hexnan>
 80073f2:	2805      	cmp	r0, #5
 80073f4:	d128      	bne.n	8007448 <_strtod_l+0x380>
 80073f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80073fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007400:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007404:	e69b      	b.n	800713e <_strtod_l+0x76>
 8007406:	9f08      	ldr	r7, [sp, #32]
 8007408:	210a      	movs	r1, #10
 800740a:	fb01 2107 	mla	r1, r1, r7, r2
 800740e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007412:	9208      	str	r2, [sp, #32]
 8007414:	e7b5      	b.n	8007382 <_strtod_l+0x2ba>
 8007416:	2a6e      	cmp	r2, #110	; 0x6e
 8007418:	e7d9      	b.n	80073ce <_strtod_l+0x306>
 800741a:	498b      	ldr	r1, [pc, #556]	; (8007648 <_strtod_l+0x580>)
 800741c:	a815      	add	r0, sp, #84	; 0x54
 800741e:	f001 fbcb 	bl	8008bb8 <__match>
 8007422:	2800      	cmp	r0, #0
 8007424:	f43f aea8 	beq.w	8007178 <_strtod_l+0xb0>
 8007428:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800742a:	4988      	ldr	r1, [pc, #544]	; (800764c <_strtod_l+0x584>)
 800742c:	3b01      	subs	r3, #1
 800742e:	a815      	add	r0, sp, #84	; 0x54
 8007430:	9315      	str	r3, [sp, #84]	; 0x54
 8007432:	f001 fbc1 	bl	8008bb8 <__match>
 8007436:	b910      	cbnz	r0, 800743e <_strtod_l+0x376>
 8007438:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800743a:	3301      	adds	r3, #1
 800743c:	9315      	str	r3, [sp, #84]	; 0x54
 800743e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800765c <_strtod_l+0x594>
 8007442:	f04f 0800 	mov.w	r8, #0
 8007446:	e67a      	b.n	800713e <_strtod_l+0x76>
 8007448:	4881      	ldr	r0, [pc, #516]	; (8007650 <_strtod_l+0x588>)
 800744a:	f001 f8d1 	bl	80085f0 <nan>
 800744e:	ec59 8b10 	vmov	r8, r9, d0
 8007452:	e674      	b.n	800713e <_strtod_l+0x76>
 8007454:	9b05      	ldr	r3, [sp, #20]
 8007456:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007458:	1afb      	subs	r3, r7, r3
 800745a:	f1bb 0f00 	cmp.w	fp, #0
 800745e:	bf08      	it	eq
 8007460:	46b3      	moveq	fp, r6
 8007462:	2e10      	cmp	r6, #16
 8007464:	9308      	str	r3, [sp, #32]
 8007466:	4635      	mov	r5, r6
 8007468:	bfa8      	it	ge
 800746a:	2510      	movge	r5, #16
 800746c:	f7f9 f852 	bl	8000514 <__aeabi_ui2d>
 8007470:	2e09      	cmp	r6, #9
 8007472:	4680      	mov	r8, r0
 8007474:	4689      	mov	r9, r1
 8007476:	dd13      	ble.n	80074a0 <_strtod_l+0x3d8>
 8007478:	4b76      	ldr	r3, [pc, #472]	; (8007654 <_strtod_l+0x58c>)
 800747a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800747e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007482:	f7f9 f8c1 	bl	8000608 <__aeabi_dmul>
 8007486:	4680      	mov	r8, r0
 8007488:	4650      	mov	r0, sl
 800748a:	4689      	mov	r9, r1
 800748c:	f7f9 f842 	bl	8000514 <__aeabi_ui2d>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	4640      	mov	r0, r8
 8007496:	4649      	mov	r1, r9
 8007498:	f7f8 ff00 	bl	800029c <__adddf3>
 800749c:	4680      	mov	r8, r0
 800749e:	4689      	mov	r9, r1
 80074a0:	2e0f      	cmp	r6, #15
 80074a2:	dc38      	bgt.n	8007516 <_strtod_l+0x44e>
 80074a4:	9b08      	ldr	r3, [sp, #32]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f43f ae49 	beq.w	800713e <_strtod_l+0x76>
 80074ac:	dd24      	ble.n	80074f8 <_strtod_l+0x430>
 80074ae:	2b16      	cmp	r3, #22
 80074b0:	dc0b      	bgt.n	80074ca <_strtod_l+0x402>
 80074b2:	4968      	ldr	r1, [pc, #416]	; (8007654 <_strtod_l+0x58c>)
 80074b4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80074b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074bc:	4642      	mov	r2, r8
 80074be:	464b      	mov	r3, r9
 80074c0:	f7f9 f8a2 	bl	8000608 <__aeabi_dmul>
 80074c4:	4680      	mov	r8, r0
 80074c6:	4689      	mov	r9, r1
 80074c8:	e639      	b.n	800713e <_strtod_l+0x76>
 80074ca:	9a08      	ldr	r2, [sp, #32]
 80074cc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80074d0:	4293      	cmp	r3, r2
 80074d2:	db20      	blt.n	8007516 <_strtod_l+0x44e>
 80074d4:	4c5f      	ldr	r4, [pc, #380]	; (8007654 <_strtod_l+0x58c>)
 80074d6:	f1c6 060f 	rsb	r6, r6, #15
 80074da:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80074de:	4642      	mov	r2, r8
 80074e0:	464b      	mov	r3, r9
 80074e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074e6:	f7f9 f88f 	bl	8000608 <__aeabi_dmul>
 80074ea:	9b08      	ldr	r3, [sp, #32]
 80074ec:	1b9e      	subs	r6, r3, r6
 80074ee:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80074f2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80074f6:	e7e3      	b.n	80074c0 <_strtod_l+0x3f8>
 80074f8:	9b08      	ldr	r3, [sp, #32]
 80074fa:	3316      	adds	r3, #22
 80074fc:	db0b      	blt.n	8007516 <_strtod_l+0x44e>
 80074fe:	9b05      	ldr	r3, [sp, #20]
 8007500:	1bdf      	subs	r7, r3, r7
 8007502:	4b54      	ldr	r3, [pc, #336]	; (8007654 <_strtod_l+0x58c>)
 8007504:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800750c:	4640      	mov	r0, r8
 800750e:	4649      	mov	r1, r9
 8007510:	f7f9 f9a4 	bl	800085c <__aeabi_ddiv>
 8007514:	e7d6      	b.n	80074c4 <_strtod_l+0x3fc>
 8007516:	9b08      	ldr	r3, [sp, #32]
 8007518:	1b75      	subs	r5, r6, r5
 800751a:	441d      	add	r5, r3
 800751c:	2d00      	cmp	r5, #0
 800751e:	dd70      	ble.n	8007602 <_strtod_l+0x53a>
 8007520:	f015 030f 	ands.w	r3, r5, #15
 8007524:	d00a      	beq.n	800753c <_strtod_l+0x474>
 8007526:	494b      	ldr	r1, [pc, #300]	; (8007654 <_strtod_l+0x58c>)
 8007528:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800752c:	4642      	mov	r2, r8
 800752e:	464b      	mov	r3, r9
 8007530:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007534:	f7f9 f868 	bl	8000608 <__aeabi_dmul>
 8007538:	4680      	mov	r8, r0
 800753a:	4689      	mov	r9, r1
 800753c:	f035 050f 	bics.w	r5, r5, #15
 8007540:	d04d      	beq.n	80075de <_strtod_l+0x516>
 8007542:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007546:	dd22      	ble.n	800758e <_strtod_l+0x4c6>
 8007548:	2500      	movs	r5, #0
 800754a:	46ab      	mov	fp, r5
 800754c:	9509      	str	r5, [sp, #36]	; 0x24
 800754e:	9505      	str	r5, [sp, #20]
 8007550:	2322      	movs	r3, #34	; 0x22
 8007552:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800765c <_strtod_l+0x594>
 8007556:	6023      	str	r3, [r4, #0]
 8007558:	f04f 0800 	mov.w	r8, #0
 800755c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800755e:	2b00      	cmp	r3, #0
 8007560:	f43f aded 	beq.w	800713e <_strtod_l+0x76>
 8007564:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007566:	4620      	mov	r0, r4
 8007568:	f7ff f924 	bl	80067b4 <_Bfree>
 800756c:	9905      	ldr	r1, [sp, #20]
 800756e:	4620      	mov	r0, r4
 8007570:	f7ff f920 	bl	80067b4 <_Bfree>
 8007574:	4659      	mov	r1, fp
 8007576:	4620      	mov	r0, r4
 8007578:	f7ff f91c 	bl	80067b4 <_Bfree>
 800757c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800757e:	4620      	mov	r0, r4
 8007580:	f7ff f918 	bl	80067b4 <_Bfree>
 8007584:	4629      	mov	r1, r5
 8007586:	4620      	mov	r0, r4
 8007588:	f7ff f914 	bl	80067b4 <_Bfree>
 800758c:	e5d7      	b.n	800713e <_strtod_l+0x76>
 800758e:	4b32      	ldr	r3, [pc, #200]	; (8007658 <_strtod_l+0x590>)
 8007590:	9304      	str	r3, [sp, #16]
 8007592:	2300      	movs	r3, #0
 8007594:	112d      	asrs	r5, r5, #4
 8007596:	4640      	mov	r0, r8
 8007598:	4649      	mov	r1, r9
 800759a:	469a      	mov	sl, r3
 800759c:	2d01      	cmp	r5, #1
 800759e:	dc21      	bgt.n	80075e4 <_strtod_l+0x51c>
 80075a0:	b10b      	cbz	r3, 80075a6 <_strtod_l+0x4de>
 80075a2:	4680      	mov	r8, r0
 80075a4:	4689      	mov	r9, r1
 80075a6:	492c      	ldr	r1, [pc, #176]	; (8007658 <_strtod_l+0x590>)
 80075a8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80075ac:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80075b0:	4642      	mov	r2, r8
 80075b2:	464b      	mov	r3, r9
 80075b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075b8:	f7f9 f826 	bl	8000608 <__aeabi_dmul>
 80075bc:	4b27      	ldr	r3, [pc, #156]	; (800765c <_strtod_l+0x594>)
 80075be:	460a      	mov	r2, r1
 80075c0:	400b      	ands	r3, r1
 80075c2:	4927      	ldr	r1, [pc, #156]	; (8007660 <_strtod_l+0x598>)
 80075c4:	428b      	cmp	r3, r1
 80075c6:	4680      	mov	r8, r0
 80075c8:	d8be      	bhi.n	8007548 <_strtod_l+0x480>
 80075ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80075ce:	428b      	cmp	r3, r1
 80075d0:	bf86      	itte	hi
 80075d2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007664 <_strtod_l+0x59c>
 80075d6:	f04f 38ff 	movhi.w	r8, #4294967295
 80075da:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80075de:	2300      	movs	r3, #0
 80075e0:	9304      	str	r3, [sp, #16]
 80075e2:	e07b      	b.n	80076dc <_strtod_l+0x614>
 80075e4:	07ea      	lsls	r2, r5, #31
 80075e6:	d505      	bpl.n	80075f4 <_strtod_l+0x52c>
 80075e8:	9b04      	ldr	r3, [sp, #16]
 80075ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ee:	f7f9 f80b 	bl	8000608 <__aeabi_dmul>
 80075f2:	2301      	movs	r3, #1
 80075f4:	9a04      	ldr	r2, [sp, #16]
 80075f6:	3208      	adds	r2, #8
 80075f8:	f10a 0a01 	add.w	sl, sl, #1
 80075fc:	106d      	asrs	r5, r5, #1
 80075fe:	9204      	str	r2, [sp, #16]
 8007600:	e7cc      	b.n	800759c <_strtod_l+0x4d4>
 8007602:	d0ec      	beq.n	80075de <_strtod_l+0x516>
 8007604:	426d      	negs	r5, r5
 8007606:	f015 020f 	ands.w	r2, r5, #15
 800760a:	d00a      	beq.n	8007622 <_strtod_l+0x55a>
 800760c:	4b11      	ldr	r3, [pc, #68]	; (8007654 <_strtod_l+0x58c>)
 800760e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007612:	4640      	mov	r0, r8
 8007614:	4649      	mov	r1, r9
 8007616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761a:	f7f9 f91f 	bl	800085c <__aeabi_ddiv>
 800761e:	4680      	mov	r8, r0
 8007620:	4689      	mov	r9, r1
 8007622:	112d      	asrs	r5, r5, #4
 8007624:	d0db      	beq.n	80075de <_strtod_l+0x516>
 8007626:	2d1f      	cmp	r5, #31
 8007628:	dd1e      	ble.n	8007668 <_strtod_l+0x5a0>
 800762a:	2500      	movs	r5, #0
 800762c:	46ab      	mov	fp, r5
 800762e:	9509      	str	r5, [sp, #36]	; 0x24
 8007630:	9505      	str	r5, [sp, #20]
 8007632:	2322      	movs	r3, #34	; 0x22
 8007634:	f04f 0800 	mov.w	r8, #0
 8007638:	f04f 0900 	mov.w	r9, #0
 800763c:	6023      	str	r3, [r4, #0]
 800763e:	e78d      	b.n	800755c <_strtod_l+0x494>
 8007640:	08008f25 	.word	0x08008f25
 8007644:	0800914c 	.word	0x0800914c
 8007648:	08008f1d 	.word	0x08008f1d
 800764c:	08008f54 	.word	0x08008f54
 8007650:	080092dd 	.word	0x080092dd
 8007654:	08009060 	.word	0x08009060
 8007658:	08009038 	.word	0x08009038
 800765c:	7ff00000 	.word	0x7ff00000
 8007660:	7ca00000 	.word	0x7ca00000
 8007664:	7fefffff 	.word	0x7fefffff
 8007668:	f015 0310 	ands.w	r3, r5, #16
 800766c:	bf18      	it	ne
 800766e:	236a      	movne	r3, #106	; 0x6a
 8007670:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007a14 <_strtod_l+0x94c>
 8007674:	9304      	str	r3, [sp, #16]
 8007676:	4640      	mov	r0, r8
 8007678:	4649      	mov	r1, r9
 800767a:	2300      	movs	r3, #0
 800767c:	07ea      	lsls	r2, r5, #31
 800767e:	d504      	bpl.n	800768a <_strtod_l+0x5c2>
 8007680:	e9da 2300 	ldrd	r2, r3, [sl]
 8007684:	f7f8 ffc0 	bl	8000608 <__aeabi_dmul>
 8007688:	2301      	movs	r3, #1
 800768a:	106d      	asrs	r5, r5, #1
 800768c:	f10a 0a08 	add.w	sl, sl, #8
 8007690:	d1f4      	bne.n	800767c <_strtod_l+0x5b4>
 8007692:	b10b      	cbz	r3, 8007698 <_strtod_l+0x5d0>
 8007694:	4680      	mov	r8, r0
 8007696:	4689      	mov	r9, r1
 8007698:	9b04      	ldr	r3, [sp, #16]
 800769a:	b1bb      	cbz	r3, 80076cc <_strtod_l+0x604>
 800769c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80076a0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	4649      	mov	r1, r9
 80076a8:	dd10      	ble.n	80076cc <_strtod_l+0x604>
 80076aa:	2b1f      	cmp	r3, #31
 80076ac:	f340 811e 	ble.w	80078ec <_strtod_l+0x824>
 80076b0:	2b34      	cmp	r3, #52	; 0x34
 80076b2:	bfde      	ittt	le
 80076b4:	f04f 33ff 	movle.w	r3, #4294967295
 80076b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80076bc:	4093      	lslle	r3, r2
 80076be:	f04f 0800 	mov.w	r8, #0
 80076c2:	bfcc      	ite	gt
 80076c4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80076c8:	ea03 0901 	andle.w	r9, r3, r1
 80076cc:	2200      	movs	r2, #0
 80076ce:	2300      	movs	r3, #0
 80076d0:	4640      	mov	r0, r8
 80076d2:	4649      	mov	r1, r9
 80076d4:	f7f9 fa00 	bl	8000ad8 <__aeabi_dcmpeq>
 80076d8:	2800      	cmp	r0, #0
 80076da:	d1a6      	bne.n	800762a <_strtod_l+0x562>
 80076dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076e2:	4633      	mov	r3, r6
 80076e4:	465a      	mov	r2, fp
 80076e6:	4620      	mov	r0, r4
 80076e8:	f7ff f8cc 	bl	8006884 <__s2b>
 80076ec:	9009      	str	r0, [sp, #36]	; 0x24
 80076ee:	2800      	cmp	r0, #0
 80076f0:	f43f af2a 	beq.w	8007548 <_strtod_l+0x480>
 80076f4:	9a08      	ldr	r2, [sp, #32]
 80076f6:	9b05      	ldr	r3, [sp, #20]
 80076f8:	2a00      	cmp	r2, #0
 80076fa:	eba3 0307 	sub.w	r3, r3, r7
 80076fe:	bfa8      	it	ge
 8007700:	2300      	movge	r3, #0
 8007702:	930c      	str	r3, [sp, #48]	; 0x30
 8007704:	2500      	movs	r5, #0
 8007706:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800770a:	9312      	str	r3, [sp, #72]	; 0x48
 800770c:	46ab      	mov	fp, r5
 800770e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007710:	4620      	mov	r0, r4
 8007712:	6859      	ldr	r1, [r3, #4]
 8007714:	f7ff f80e 	bl	8006734 <_Balloc>
 8007718:	9005      	str	r0, [sp, #20]
 800771a:	2800      	cmp	r0, #0
 800771c:	f43f af18 	beq.w	8007550 <_strtod_l+0x488>
 8007720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007722:	691a      	ldr	r2, [r3, #16]
 8007724:	3202      	adds	r2, #2
 8007726:	f103 010c 	add.w	r1, r3, #12
 800772a:	0092      	lsls	r2, r2, #2
 800772c:	300c      	adds	r0, #12
 800772e:	f000 ff4f 	bl	80085d0 <memcpy>
 8007732:	ec49 8b10 	vmov	d0, r8, r9
 8007736:	aa18      	add	r2, sp, #96	; 0x60
 8007738:	a917      	add	r1, sp, #92	; 0x5c
 800773a:	4620      	mov	r0, r4
 800773c:	f7ff fbd6 	bl	8006eec <__d2b>
 8007740:	ec49 8b18 	vmov	d8, r8, r9
 8007744:	9016      	str	r0, [sp, #88]	; 0x58
 8007746:	2800      	cmp	r0, #0
 8007748:	f43f af02 	beq.w	8007550 <_strtod_l+0x488>
 800774c:	2101      	movs	r1, #1
 800774e:	4620      	mov	r0, r4
 8007750:	f7ff f930 	bl	80069b4 <__i2b>
 8007754:	4683      	mov	fp, r0
 8007756:	2800      	cmp	r0, #0
 8007758:	f43f aefa 	beq.w	8007550 <_strtod_l+0x488>
 800775c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800775e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007760:	2e00      	cmp	r6, #0
 8007762:	bfab      	itete	ge
 8007764:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007766:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007768:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800776a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800776e:	bfac      	ite	ge
 8007770:	eb06 0a03 	addge.w	sl, r6, r3
 8007774:	1b9f      	sublt	r7, r3, r6
 8007776:	9b04      	ldr	r3, [sp, #16]
 8007778:	1af6      	subs	r6, r6, r3
 800777a:	4416      	add	r6, r2
 800777c:	4ba0      	ldr	r3, [pc, #640]	; (8007a00 <_strtod_l+0x938>)
 800777e:	3e01      	subs	r6, #1
 8007780:	429e      	cmp	r6, r3
 8007782:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007786:	f280 80c4 	bge.w	8007912 <_strtod_l+0x84a>
 800778a:	1b9b      	subs	r3, r3, r6
 800778c:	2b1f      	cmp	r3, #31
 800778e:	eba2 0203 	sub.w	r2, r2, r3
 8007792:	f04f 0101 	mov.w	r1, #1
 8007796:	f300 80b0 	bgt.w	80078fa <_strtod_l+0x832>
 800779a:	fa01 f303 	lsl.w	r3, r1, r3
 800779e:	930e      	str	r3, [sp, #56]	; 0x38
 80077a0:	2300      	movs	r3, #0
 80077a2:	930d      	str	r3, [sp, #52]	; 0x34
 80077a4:	eb0a 0602 	add.w	r6, sl, r2
 80077a8:	9b04      	ldr	r3, [sp, #16]
 80077aa:	45b2      	cmp	sl, r6
 80077ac:	4417      	add	r7, r2
 80077ae:	441f      	add	r7, r3
 80077b0:	4653      	mov	r3, sl
 80077b2:	bfa8      	it	ge
 80077b4:	4633      	movge	r3, r6
 80077b6:	42bb      	cmp	r3, r7
 80077b8:	bfa8      	it	ge
 80077ba:	463b      	movge	r3, r7
 80077bc:	2b00      	cmp	r3, #0
 80077be:	bfc2      	ittt	gt
 80077c0:	1af6      	subgt	r6, r6, r3
 80077c2:	1aff      	subgt	r7, r7, r3
 80077c4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80077c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	dd17      	ble.n	80077fe <_strtod_l+0x736>
 80077ce:	4659      	mov	r1, fp
 80077d0:	461a      	mov	r2, r3
 80077d2:	4620      	mov	r0, r4
 80077d4:	f7ff f9ae 	bl	8006b34 <__pow5mult>
 80077d8:	4683      	mov	fp, r0
 80077da:	2800      	cmp	r0, #0
 80077dc:	f43f aeb8 	beq.w	8007550 <_strtod_l+0x488>
 80077e0:	4601      	mov	r1, r0
 80077e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80077e4:	4620      	mov	r0, r4
 80077e6:	f7ff f8fb 	bl	80069e0 <__multiply>
 80077ea:	900b      	str	r0, [sp, #44]	; 0x2c
 80077ec:	2800      	cmp	r0, #0
 80077ee:	f43f aeaf 	beq.w	8007550 <_strtod_l+0x488>
 80077f2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80077f4:	4620      	mov	r0, r4
 80077f6:	f7fe ffdd 	bl	80067b4 <_Bfree>
 80077fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077fc:	9316      	str	r3, [sp, #88]	; 0x58
 80077fe:	2e00      	cmp	r6, #0
 8007800:	f300 808c 	bgt.w	800791c <_strtod_l+0x854>
 8007804:	9b08      	ldr	r3, [sp, #32]
 8007806:	2b00      	cmp	r3, #0
 8007808:	dd08      	ble.n	800781c <_strtod_l+0x754>
 800780a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800780c:	9905      	ldr	r1, [sp, #20]
 800780e:	4620      	mov	r0, r4
 8007810:	f7ff f990 	bl	8006b34 <__pow5mult>
 8007814:	9005      	str	r0, [sp, #20]
 8007816:	2800      	cmp	r0, #0
 8007818:	f43f ae9a 	beq.w	8007550 <_strtod_l+0x488>
 800781c:	2f00      	cmp	r7, #0
 800781e:	dd08      	ble.n	8007832 <_strtod_l+0x76a>
 8007820:	9905      	ldr	r1, [sp, #20]
 8007822:	463a      	mov	r2, r7
 8007824:	4620      	mov	r0, r4
 8007826:	f7ff f9df 	bl	8006be8 <__lshift>
 800782a:	9005      	str	r0, [sp, #20]
 800782c:	2800      	cmp	r0, #0
 800782e:	f43f ae8f 	beq.w	8007550 <_strtod_l+0x488>
 8007832:	f1ba 0f00 	cmp.w	sl, #0
 8007836:	dd08      	ble.n	800784a <_strtod_l+0x782>
 8007838:	4659      	mov	r1, fp
 800783a:	4652      	mov	r2, sl
 800783c:	4620      	mov	r0, r4
 800783e:	f7ff f9d3 	bl	8006be8 <__lshift>
 8007842:	4683      	mov	fp, r0
 8007844:	2800      	cmp	r0, #0
 8007846:	f43f ae83 	beq.w	8007550 <_strtod_l+0x488>
 800784a:	9a05      	ldr	r2, [sp, #20]
 800784c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800784e:	4620      	mov	r0, r4
 8007850:	f7ff fa52 	bl	8006cf8 <__mdiff>
 8007854:	4605      	mov	r5, r0
 8007856:	2800      	cmp	r0, #0
 8007858:	f43f ae7a 	beq.w	8007550 <_strtod_l+0x488>
 800785c:	68c3      	ldr	r3, [r0, #12]
 800785e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007860:	2300      	movs	r3, #0
 8007862:	60c3      	str	r3, [r0, #12]
 8007864:	4659      	mov	r1, fp
 8007866:	f7ff fa2b 	bl	8006cc0 <__mcmp>
 800786a:	2800      	cmp	r0, #0
 800786c:	da60      	bge.n	8007930 <_strtod_l+0x868>
 800786e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007870:	ea53 0308 	orrs.w	r3, r3, r8
 8007874:	f040 8084 	bne.w	8007980 <_strtod_l+0x8b8>
 8007878:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800787c:	2b00      	cmp	r3, #0
 800787e:	d17f      	bne.n	8007980 <_strtod_l+0x8b8>
 8007880:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007884:	0d1b      	lsrs	r3, r3, #20
 8007886:	051b      	lsls	r3, r3, #20
 8007888:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800788c:	d978      	bls.n	8007980 <_strtod_l+0x8b8>
 800788e:	696b      	ldr	r3, [r5, #20]
 8007890:	b913      	cbnz	r3, 8007898 <_strtod_l+0x7d0>
 8007892:	692b      	ldr	r3, [r5, #16]
 8007894:	2b01      	cmp	r3, #1
 8007896:	dd73      	ble.n	8007980 <_strtod_l+0x8b8>
 8007898:	4629      	mov	r1, r5
 800789a:	2201      	movs	r2, #1
 800789c:	4620      	mov	r0, r4
 800789e:	f7ff f9a3 	bl	8006be8 <__lshift>
 80078a2:	4659      	mov	r1, fp
 80078a4:	4605      	mov	r5, r0
 80078a6:	f7ff fa0b 	bl	8006cc0 <__mcmp>
 80078aa:	2800      	cmp	r0, #0
 80078ac:	dd68      	ble.n	8007980 <_strtod_l+0x8b8>
 80078ae:	9904      	ldr	r1, [sp, #16]
 80078b0:	4a54      	ldr	r2, [pc, #336]	; (8007a04 <_strtod_l+0x93c>)
 80078b2:	464b      	mov	r3, r9
 80078b4:	2900      	cmp	r1, #0
 80078b6:	f000 8084 	beq.w	80079c2 <_strtod_l+0x8fa>
 80078ba:	ea02 0109 	and.w	r1, r2, r9
 80078be:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80078c2:	dc7e      	bgt.n	80079c2 <_strtod_l+0x8fa>
 80078c4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80078c8:	f77f aeb3 	ble.w	8007632 <_strtod_l+0x56a>
 80078cc:	4b4e      	ldr	r3, [pc, #312]	; (8007a08 <_strtod_l+0x940>)
 80078ce:	4640      	mov	r0, r8
 80078d0:	4649      	mov	r1, r9
 80078d2:	2200      	movs	r2, #0
 80078d4:	f7f8 fe98 	bl	8000608 <__aeabi_dmul>
 80078d8:	4b4a      	ldr	r3, [pc, #296]	; (8007a04 <_strtod_l+0x93c>)
 80078da:	400b      	ands	r3, r1
 80078dc:	4680      	mov	r8, r0
 80078de:	4689      	mov	r9, r1
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f47f ae3f 	bne.w	8007564 <_strtod_l+0x49c>
 80078e6:	2322      	movs	r3, #34	; 0x22
 80078e8:	6023      	str	r3, [r4, #0]
 80078ea:	e63b      	b.n	8007564 <_strtod_l+0x49c>
 80078ec:	f04f 32ff 	mov.w	r2, #4294967295
 80078f0:	fa02 f303 	lsl.w	r3, r2, r3
 80078f4:	ea03 0808 	and.w	r8, r3, r8
 80078f8:	e6e8      	b.n	80076cc <_strtod_l+0x604>
 80078fa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80078fe:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007902:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007906:	36e2      	adds	r6, #226	; 0xe2
 8007908:	fa01 f306 	lsl.w	r3, r1, r6
 800790c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007910:	e748      	b.n	80077a4 <_strtod_l+0x6dc>
 8007912:	2100      	movs	r1, #0
 8007914:	2301      	movs	r3, #1
 8007916:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800791a:	e743      	b.n	80077a4 <_strtod_l+0x6dc>
 800791c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800791e:	4632      	mov	r2, r6
 8007920:	4620      	mov	r0, r4
 8007922:	f7ff f961 	bl	8006be8 <__lshift>
 8007926:	9016      	str	r0, [sp, #88]	; 0x58
 8007928:	2800      	cmp	r0, #0
 800792a:	f47f af6b 	bne.w	8007804 <_strtod_l+0x73c>
 800792e:	e60f      	b.n	8007550 <_strtod_l+0x488>
 8007930:	46ca      	mov	sl, r9
 8007932:	d171      	bne.n	8007a18 <_strtod_l+0x950>
 8007934:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007936:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800793a:	b352      	cbz	r2, 8007992 <_strtod_l+0x8ca>
 800793c:	4a33      	ldr	r2, [pc, #204]	; (8007a0c <_strtod_l+0x944>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d12a      	bne.n	8007998 <_strtod_l+0x8d0>
 8007942:	9b04      	ldr	r3, [sp, #16]
 8007944:	4641      	mov	r1, r8
 8007946:	b1fb      	cbz	r3, 8007988 <_strtod_l+0x8c0>
 8007948:	4b2e      	ldr	r3, [pc, #184]	; (8007a04 <_strtod_l+0x93c>)
 800794a:	ea09 0303 	and.w	r3, r9, r3
 800794e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007952:	f04f 32ff 	mov.w	r2, #4294967295
 8007956:	d81a      	bhi.n	800798e <_strtod_l+0x8c6>
 8007958:	0d1b      	lsrs	r3, r3, #20
 800795a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800795e:	fa02 f303 	lsl.w	r3, r2, r3
 8007962:	4299      	cmp	r1, r3
 8007964:	d118      	bne.n	8007998 <_strtod_l+0x8d0>
 8007966:	4b2a      	ldr	r3, [pc, #168]	; (8007a10 <_strtod_l+0x948>)
 8007968:	459a      	cmp	sl, r3
 800796a:	d102      	bne.n	8007972 <_strtod_l+0x8aa>
 800796c:	3101      	adds	r1, #1
 800796e:	f43f adef 	beq.w	8007550 <_strtod_l+0x488>
 8007972:	4b24      	ldr	r3, [pc, #144]	; (8007a04 <_strtod_l+0x93c>)
 8007974:	ea0a 0303 	and.w	r3, sl, r3
 8007978:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800797c:	f04f 0800 	mov.w	r8, #0
 8007980:	9b04      	ldr	r3, [sp, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1a2      	bne.n	80078cc <_strtod_l+0x804>
 8007986:	e5ed      	b.n	8007564 <_strtod_l+0x49c>
 8007988:	f04f 33ff 	mov.w	r3, #4294967295
 800798c:	e7e9      	b.n	8007962 <_strtod_l+0x89a>
 800798e:	4613      	mov	r3, r2
 8007990:	e7e7      	b.n	8007962 <_strtod_l+0x89a>
 8007992:	ea53 0308 	orrs.w	r3, r3, r8
 8007996:	d08a      	beq.n	80078ae <_strtod_l+0x7e6>
 8007998:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800799a:	b1e3      	cbz	r3, 80079d6 <_strtod_l+0x90e>
 800799c:	ea13 0f0a 	tst.w	r3, sl
 80079a0:	d0ee      	beq.n	8007980 <_strtod_l+0x8b8>
 80079a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079a4:	9a04      	ldr	r2, [sp, #16]
 80079a6:	4640      	mov	r0, r8
 80079a8:	4649      	mov	r1, r9
 80079aa:	b1c3      	cbz	r3, 80079de <_strtod_l+0x916>
 80079ac:	f7ff fb6f 	bl	800708e <sulp>
 80079b0:	4602      	mov	r2, r0
 80079b2:	460b      	mov	r3, r1
 80079b4:	ec51 0b18 	vmov	r0, r1, d8
 80079b8:	f7f8 fc70 	bl	800029c <__adddf3>
 80079bc:	4680      	mov	r8, r0
 80079be:	4689      	mov	r9, r1
 80079c0:	e7de      	b.n	8007980 <_strtod_l+0x8b8>
 80079c2:	4013      	ands	r3, r2
 80079c4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80079c8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80079cc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80079d0:	f04f 38ff 	mov.w	r8, #4294967295
 80079d4:	e7d4      	b.n	8007980 <_strtod_l+0x8b8>
 80079d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079d8:	ea13 0f08 	tst.w	r3, r8
 80079dc:	e7e0      	b.n	80079a0 <_strtod_l+0x8d8>
 80079de:	f7ff fb56 	bl	800708e <sulp>
 80079e2:	4602      	mov	r2, r0
 80079e4:	460b      	mov	r3, r1
 80079e6:	ec51 0b18 	vmov	r0, r1, d8
 80079ea:	f7f8 fc55 	bl	8000298 <__aeabi_dsub>
 80079ee:	2200      	movs	r2, #0
 80079f0:	2300      	movs	r3, #0
 80079f2:	4680      	mov	r8, r0
 80079f4:	4689      	mov	r9, r1
 80079f6:	f7f9 f86f 	bl	8000ad8 <__aeabi_dcmpeq>
 80079fa:	2800      	cmp	r0, #0
 80079fc:	d0c0      	beq.n	8007980 <_strtod_l+0x8b8>
 80079fe:	e618      	b.n	8007632 <_strtod_l+0x56a>
 8007a00:	fffffc02 	.word	0xfffffc02
 8007a04:	7ff00000 	.word	0x7ff00000
 8007a08:	39500000 	.word	0x39500000
 8007a0c:	000fffff 	.word	0x000fffff
 8007a10:	7fefffff 	.word	0x7fefffff
 8007a14:	08009160 	.word	0x08009160
 8007a18:	4659      	mov	r1, fp
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	f7ff fac0 	bl	8006fa0 <__ratio>
 8007a20:	ec57 6b10 	vmov	r6, r7, d0
 8007a24:	ee10 0a10 	vmov	r0, s0
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a2e:	4639      	mov	r1, r7
 8007a30:	f7f9 f866 	bl	8000b00 <__aeabi_dcmple>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	d071      	beq.n	8007b1c <_strtod_l+0xa54>
 8007a38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d17c      	bne.n	8007b38 <_strtod_l+0xa70>
 8007a3e:	f1b8 0f00 	cmp.w	r8, #0
 8007a42:	d15a      	bne.n	8007afa <_strtod_l+0xa32>
 8007a44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d15d      	bne.n	8007b08 <_strtod_l+0xa40>
 8007a4c:	4b90      	ldr	r3, [pc, #576]	; (8007c90 <_strtod_l+0xbc8>)
 8007a4e:	2200      	movs	r2, #0
 8007a50:	4630      	mov	r0, r6
 8007a52:	4639      	mov	r1, r7
 8007a54:	f7f9 f84a 	bl	8000aec <__aeabi_dcmplt>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d15c      	bne.n	8007b16 <_strtod_l+0xa4e>
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	4639      	mov	r1, r7
 8007a60:	4b8c      	ldr	r3, [pc, #560]	; (8007c94 <_strtod_l+0xbcc>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	f7f8 fdd0 	bl	8000608 <__aeabi_dmul>
 8007a68:	4606      	mov	r6, r0
 8007a6a:	460f      	mov	r7, r1
 8007a6c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007a70:	9606      	str	r6, [sp, #24]
 8007a72:	9307      	str	r3, [sp, #28]
 8007a74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a78:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007a7c:	4b86      	ldr	r3, [pc, #536]	; (8007c98 <_strtod_l+0xbd0>)
 8007a7e:	ea0a 0303 	and.w	r3, sl, r3
 8007a82:	930d      	str	r3, [sp, #52]	; 0x34
 8007a84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a86:	4b85      	ldr	r3, [pc, #532]	; (8007c9c <_strtod_l+0xbd4>)
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	f040 8090 	bne.w	8007bae <_strtod_l+0xae6>
 8007a8e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007a92:	ec49 8b10 	vmov	d0, r8, r9
 8007a96:	f7ff f9b9 	bl	8006e0c <__ulp>
 8007a9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a9e:	ec51 0b10 	vmov	r0, r1, d0
 8007aa2:	f7f8 fdb1 	bl	8000608 <__aeabi_dmul>
 8007aa6:	4642      	mov	r2, r8
 8007aa8:	464b      	mov	r3, r9
 8007aaa:	f7f8 fbf7 	bl	800029c <__adddf3>
 8007aae:	460b      	mov	r3, r1
 8007ab0:	4979      	ldr	r1, [pc, #484]	; (8007c98 <_strtod_l+0xbd0>)
 8007ab2:	4a7b      	ldr	r2, [pc, #492]	; (8007ca0 <_strtod_l+0xbd8>)
 8007ab4:	4019      	ands	r1, r3
 8007ab6:	4291      	cmp	r1, r2
 8007ab8:	4680      	mov	r8, r0
 8007aba:	d944      	bls.n	8007b46 <_strtod_l+0xa7e>
 8007abc:	ee18 2a90 	vmov	r2, s17
 8007ac0:	4b78      	ldr	r3, [pc, #480]	; (8007ca4 <_strtod_l+0xbdc>)
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d104      	bne.n	8007ad0 <_strtod_l+0xa08>
 8007ac6:	ee18 3a10 	vmov	r3, s16
 8007aca:	3301      	adds	r3, #1
 8007acc:	f43f ad40 	beq.w	8007550 <_strtod_l+0x488>
 8007ad0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8007ca4 <_strtod_l+0xbdc>
 8007ad4:	f04f 38ff 	mov.w	r8, #4294967295
 8007ad8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007ada:	4620      	mov	r0, r4
 8007adc:	f7fe fe6a 	bl	80067b4 <_Bfree>
 8007ae0:	9905      	ldr	r1, [sp, #20]
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f7fe fe66 	bl	80067b4 <_Bfree>
 8007ae8:	4659      	mov	r1, fp
 8007aea:	4620      	mov	r0, r4
 8007aec:	f7fe fe62 	bl	80067b4 <_Bfree>
 8007af0:	4629      	mov	r1, r5
 8007af2:	4620      	mov	r0, r4
 8007af4:	f7fe fe5e 	bl	80067b4 <_Bfree>
 8007af8:	e609      	b.n	800770e <_strtod_l+0x646>
 8007afa:	f1b8 0f01 	cmp.w	r8, #1
 8007afe:	d103      	bne.n	8007b08 <_strtod_l+0xa40>
 8007b00:	f1b9 0f00 	cmp.w	r9, #0
 8007b04:	f43f ad95 	beq.w	8007632 <_strtod_l+0x56a>
 8007b08:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007c60 <_strtod_l+0xb98>
 8007b0c:	4f60      	ldr	r7, [pc, #384]	; (8007c90 <_strtod_l+0xbc8>)
 8007b0e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007b12:	2600      	movs	r6, #0
 8007b14:	e7ae      	b.n	8007a74 <_strtod_l+0x9ac>
 8007b16:	4f5f      	ldr	r7, [pc, #380]	; (8007c94 <_strtod_l+0xbcc>)
 8007b18:	2600      	movs	r6, #0
 8007b1a:	e7a7      	b.n	8007a6c <_strtod_l+0x9a4>
 8007b1c:	4b5d      	ldr	r3, [pc, #372]	; (8007c94 <_strtod_l+0xbcc>)
 8007b1e:	4630      	mov	r0, r6
 8007b20:	4639      	mov	r1, r7
 8007b22:	2200      	movs	r2, #0
 8007b24:	f7f8 fd70 	bl	8000608 <__aeabi_dmul>
 8007b28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b2a:	4606      	mov	r6, r0
 8007b2c:	460f      	mov	r7, r1
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d09c      	beq.n	8007a6c <_strtod_l+0x9a4>
 8007b32:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007b36:	e79d      	b.n	8007a74 <_strtod_l+0x9ac>
 8007b38:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007c68 <_strtod_l+0xba0>
 8007b3c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007b40:	ec57 6b17 	vmov	r6, r7, d7
 8007b44:	e796      	b.n	8007a74 <_strtod_l+0x9ac>
 8007b46:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007b4a:	9b04      	ldr	r3, [sp, #16]
 8007b4c:	46ca      	mov	sl, r9
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1c2      	bne.n	8007ad8 <_strtod_l+0xa10>
 8007b52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b58:	0d1b      	lsrs	r3, r3, #20
 8007b5a:	051b      	lsls	r3, r3, #20
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d1bb      	bne.n	8007ad8 <_strtod_l+0xa10>
 8007b60:	4630      	mov	r0, r6
 8007b62:	4639      	mov	r1, r7
 8007b64:	f7f9 f8b0 	bl	8000cc8 <__aeabi_d2lz>
 8007b68:	f7f8 fd20 	bl	80005ac <__aeabi_l2d>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4630      	mov	r0, r6
 8007b72:	4639      	mov	r1, r7
 8007b74:	f7f8 fb90 	bl	8000298 <__aeabi_dsub>
 8007b78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b7a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b7e:	ea43 0308 	orr.w	r3, r3, r8
 8007b82:	4313      	orrs	r3, r2
 8007b84:	4606      	mov	r6, r0
 8007b86:	460f      	mov	r7, r1
 8007b88:	d054      	beq.n	8007c34 <_strtod_l+0xb6c>
 8007b8a:	a339      	add	r3, pc, #228	; (adr r3, 8007c70 <_strtod_l+0xba8>)
 8007b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b90:	f7f8 ffac 	bl	8000aec <__aeabi_dcmplt>
 8007b94:	2800      	cmp	r0, #0
 8007b96:	f47f ace5 	bne.w	8007564 <_strtod_l+0x49c>
 8007b9a:	a337      	add	r3, pc, #220	; (adr r3, 8007c78 <_strtod_l+0xbb0>)
 8007b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	4639      	mov	r1, r7
 8007ba4:	f7f8 ffc0 	bl	8000b28 <__aeabi_dcmpgt>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	d095      	beq.n	8007ad8 <_strtod_l+0xa10>
 8007bac:	e4da      	b.n	8007564 <_strtod_l+0x49c>
 8007bae:	9b04      	ldr	r3, [sp, #16]
 8007bb0:	b333      	cbz	r3, 8007c00 <_strtod_l+0xb38>
 8007bb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bb4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007bb8:	d822      	bhi.n	8007c00 <_strtod_l+0xb38>
 8007bba:	a331      	add	r3, pc, #196	; (adr r3, 8007c80 <_strtod_l+0xbb8>)
 8007bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	4639      	mov	r1, r7
 8007bc4:	f7f8 ff9c 	bl	8000b00 <__aeabi_dcmple>
 8007bc8:	b1a0      	cbz	r0, 8007bf4 <_strtod_l+0xb2c>
 8007bca:	4639      	mov	r1, r7
 8007bcc:	4630      	mov	r0, r6
 8007bce:	f7f8 fff3 	bl	8000bb8 <__aeabi_d2uiz>
 8007bd2:	2801      	cmp	r0, #1
 8007bd4:	bf38      	it	cc
 8007bd6:	2001      	movcc	r0, #1
 8007bd8:	f7f8 fc9c 	bl	8000514 <__aeabi_ui2d>
 8007bdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bde:	4606      	mov	r6, r0
 8007be0:	460f      	mov	r7, r1
 8007be2:	bb23      	cbnz	r3, 8007c2e <_strtod_l+0xb66>
 8007be4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007be8:	9010      	str	r0, [sp, #64]	; 0x40
 8007bea:	9311      	str	r3, [sp, #68]	; 0x44
 8007bec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007bf0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007bf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007bf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007bf8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007bfc:	1a9b      	subs	r3, r3, r2
 8007bfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c00:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007c04:	eeb0 0a48 	vmov.f32	s0, s16
 8007c08:	eef0 0a68 	vmov.f32	s1, s17
 8007c0c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007c10:	f7ff f8fc 	bl	8006e0c <__ulp>
 8007c14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007c18:	ec53 2b10 	vmov	r2, r3, d0
 8007c1c:	f7f8 fcf4 	bl	8000608 <__aeabi_dmul>
 8007c20:	ec53 2b18 	vmov	r2, r3, d8
 8007c24:	f7f8 fb3a 	bl	800029c <__adddf3>
 8007c28:	4680      	mov	r8, r0
 8007c2a:	4689      	mov	r9, r1
 8007c2c:	e78d      	b.n	8007b4a <_strtod_l+0xa82>
 8007c2e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007c32:	e7db      	b.n	8007bec <_strtod_l+0xb24>
 8007c34:	a314      	add	r3, pc, #80	; (adr r3, 8007c88 <_strtod_l+0xbc0>)
 8007c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3a:	f7f8 ff57 	bl	8000aec <__aeabi_dcmplt>
 8007c3e:	e7b3      	b.n	8007ba8 <_strtod_l+0xae0>
 8007c40:	2300      	movs	r3, #0
 8007c42:	930a      	str	r3, [sp, #40]	; 0x28
 8007c44:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007c46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c48:	6013      	str	r3, [r2, #0]
 8007c4a:	f7ff ba7c 	b.w	8007146 <_strtod_l+0x7e>
 8007c4e:	2a65      	cmp	r2, #101	; 0x65
 8007c50:	f43f ab75 	beq.w	800733e <_strtod_l+0x276>
 8007c54:	2a45      	cmp	r2, #69	; 0x45
 8007c56:	f43f ab72 	beq.w	800733e <_strtod_l+0x276>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	f7ff bbaa 	b.w	80073b4 <_strtod_l+0x2ec>
 8007c60:	00000000 	.word	0x00000000
 8007c64:	bff00000 	.word	0xbff00000
 8007c68:	00000000 	.word	0x00000000
 8007c6c:	3ff00000 	.word	0x3ff00000
 8007c70:	94a03595 	.word	0x94a03595
 8007c74:	3fdfffff 	.word	0x3fdfffff
 8007c78:	35afe535 	.word	0x35afe535
 8007c7c:	3fe00000 	.word	0x3fe00000
 8007c80:	ffc00000 	.word	0xffc00000
 8007c84:	41dfffff 	.word	0x41dfffff
 8007c88:	94a03595 	.word	0x94a03595
 8007c8c:	3fcfffff 	.word	0x3fcfffff
 8007c90:	3ff00000 	.word	0x3ff00000
 8007c94:	3fe00000 	.word	0x3fe00000
 8007c98:	7ff00000 	.word	0x7ff00000
 8007c9c:	7fe00000 	.word	0x7fe00000
 8007ca0:	7c9fffff 	.word	0x7c9fffff
 8007ca4:	7fefffff 	.word	0x7fefffff

08007ca8 <_strtod_r>:
 8007ca8:	4b01      	ldr	r3, [pc, #4]	; (8007cb0 <_strtod_r+0x8>)
 8007caa:	f7ff ba0d 	b.w	80070c8 <_strtod_l>
 8007cae:	bf00      	nop
 8007cb0:	20000068 	.word	0x20000068

08007cb4 <_strtol_l.constprop.0>:
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cba:	d001      	beq.n	8007cc0 <_strtol_l.constprop.0+0xc>
 8007cbc:	2b24      	cmp	r3, #36	; 0x24
 8007cbe:	d906      	bls.n	8007cce <_strtol_l.constprop.0+0x1a>
 8007cc0:	f7fd fd8a 	bl	80057d8 <__errno>
 8007cc4:	2316      	movs	r3, #22
 8007cc6:	6003      	str	r3, [r0, #0]
 8007cc8:	2000      	movs	r0, #0
 8007cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007db4 <_strtol_l.constprop.0+0x100>
 8007cd2:	460d      	mov	r5, r1
 8007cd4:	462e      	mov	r6, r5
 8007cd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cda:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007cde:	f017 0708 	ands.w	r7, r7, #8
 8007ce2:	d1f7      	bne.n	8007cd4 <_strtol_l.constprop.0+0x20>
 8007ce4:	2c2d      	cmp	r4, #45	; 0x2d
 8007ce6:	d132      	bne.n	8007d4e <_strtol_l.constprop.0+0x9a>
 8007ce8:	782c      	ldrb	r4, [r5, #0]
 8007cea:	2701      	movs	r7, #1
 8007cec:	1cb5      	adds	r5, r6, #2
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d05b      	beq.n	8007daa <_strtol_l.constprop.0+0xf6>
 8007cf2:	2b10      	cmp	r3, #16
 8007cf4:	d109      	bne.n	8007d0a <_strtol_l.constprop.0+0x56>
 8007cf6:	2c30      	cmp	r4, #48	; 0x30
 8007cf8:	d107      	bne.n	8007d0a <_strtol_l.constprop.0+0x56>
 8007cfa:	782c      	ldrb	r4, [r5, #0]
 8007cfc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007d00:	2c58      	cmp	r4, #88	; 0x58
 8007d02:	d14d      	bne.n	8007da0 <_strtol_l.constprop.0+0xec>
 8007d04:	786c      	ldrb	r4, [r5, #1]
 8007d06:	2310      	movs	r3, #16
 8007d08:	3502      	adds	r5, #2
 8007d0a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007d0e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d12:	f04f 0e00 	mov.w	lr, #0
 8007d16:	fbb8 f9f3 	udiv	r9, r8, r3
 8007d1a:	4676      	mov	r6, lr
 8007d1c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007d20:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007d24:	f1bc 0f09 	cmp.w	ip, #9
 8007d28:	d816      	bhi.n	8007d58 <_strtol_l.constprop.0+0xa4>
 8007d2a:	4664      	mov	r4, ip
 8007d2c:	42a3      	cmp	r3, r4
 8007d2e:	dd24      	ble.n	8007d7a <_strtol_l.constprop.0+0xc6>
 8007d30:	f1be 3fff 	cmp.w	lr, #4294967295
 8007d34:	d008      	beq.n	8007d48 <_strtol_l.constprop.0+0x94>
 8007d36:	45b1      	cmp	r9, r6
 8007d38:	d31c      	bcc.n	8007d74 <_strtol_l.constprop.0+0xc0>
 8007d3a:	d101      	bne.n	8007d40 <_strtol_l.constprop.0+0x8c>
 8007d3c:	45a2      	cmp	sl, r4
 8007d3e:	db19      	blt.n	8007d74 <_strtol_l.constprop.0+0xc0>
 8007d40:	fb06 4603 	mla	r6, r6, r3, r4
 8007d44:	f04f 0e01 	mov.w	lr, #1
 8007d48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d4c:	e7e8      	b.n	8007d20 <_strtol_l.constprop.0+0x6c>
 8007d4e:	2c2b      	cmp	r4, #43	; 0x2b
 8007d50:	bf04      	itt	eq
 8007d52:	782c      	ldrbeq	r4, [r5, #0]
 8007d54:	1cb5      	addeq	r5, r6, #2
 8007d56:	e7ca      	b.n	8007cee <_strtol_l.constprop.0+0x3a>
 8007d58:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007d5c:	f1bc 0f19 	cmp.w	ip, #25
 8007d60:	d801      	bhi.n	8007d66 <_strtol_l.constprop.0+0xb2>
 8007d62:	3c37      	subs	r4, #55	; 0x37
 8007d64:	e7e2      	b.n	8007d2c <_strtol_l.constprop.0+0x78>
 8007d66:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007d6a:	f1bc 0f19 	cmp.w	ip, #25
 8007d6e:	d804      	bhi.n	8007d7a <_strtol_l.constprop.0+0xc6>
 8007d70:	3c57      	subs	r4, #87	; 0x57
 8007d72:	e7db      	b.n	8007d2c <_strtol_l.constprop.0+0x78>
 8007d74:	f04f 3eff 	mov.w	lr, #4294967295
 8007d78:	e7e6      	b.n	8007d48 <_strtol_l.constprop.0+0x94>
 8007d7a:	f1be 3fff 	cmp.w	lr, #4294967295
 8007d7e:	d105      	bne.n	8007d8c <_strtol_l.constprop.0+0xd8>
 8007d80:	2322      	movs	r3, #34	; 0x22
 8007d82:	6003      	str	r3, [r0, #0]
 8007d84:	4646      	mov	r6, r8
 8007d86:	b942      	cbnz	r2, 8007d9a <_strtol_l.constprop.0+0xe6>
 8007d88:	4630      	mov	r0, r6
 8007d8a:	e79e      	b.n	8007cca <_strtol_l.constprop.0+0x16>
 8007d8c:	b107      	cbz	r7, 8007d90 <_strtol_l.constprop.0+0xdc>
 8007d8e:	4276      	negs	r6, r6
 8007d90:	2a00      	cmp	r2, #0
 8007d92:	d0f9      	beq.n	8007d88 <_strtol_l.constprop.0+0xd4>
 8007d94:	f1be 0f00 	cmp.w	lr, #0
 8007d98:	d000      	beq.n	8007d9c <_strtol_l.constprop.0+0xe8>
 8007d9a:	1e69      	subs	r1, r5, #1
 8007d9c:	6011      	str	r1, [r2, #0]
 8007d9e:	e7f3      	b.n	8007d88 <_strtol_l.constprop.0+0xd4>
 8007da0:	2430      	movs	r4, #48	; 0x30
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1b1      	bne.n	8007d0a <_strtol_l.constprop.0+0x56>
 8007da6:	2308      	movs	r3, #8
 8007da8:	e7af      	b.n	8007d0a <_strtol_l.constprop.0+0x56>
 8007daa:	2c30      	cmp	r4, #48	; 0x30
 8007dac:	d0a5      	beq.n	8007cfa <_strtol_l.constprop.0+0x46>
 8007dae:	230a      	movs	r3, #10
 8007db0:	e7ab      	b.n	8007d0a <_strtol_l.constprop.0+0x56>
 8007db2:	bf00      	nop
 8007db4:	08009189 	.word	0x08009189

08007db8 <_strtol_r>:
 8007db8:	f7ff bf7c 	b.w	8007cb4 <_strtol_l.constprop.0>

08007dbc <__ssputs_r>:
 8007dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc0:	688e      	ldr	r6, [r1, #8]
 8007dc2:	461f      	mov	r7, r3
 8007dc4:	42be      	cmp	r6, r7
 8007dc6:	680b      	ldr	r3, [r1, #0]
 8007dc8:	4682      	mov	sl, r0
 8007dca:	460c      	mov	r4, r1
 8007dcc:	4690      	mov	r8, r2
 8007dce:	d82c      	bhi.n	8007e2a <__ssputs_r+0x6e>
 8007dd0:	898a      	ldrh	r2, [r1, #12]
 8007dd2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007dd6:	d026      	beq.n	8007e26 <__ssputs_r+0x6a>
 8007dd8:	6965      	ldr	r5, [r4, #20]
 8007dda:	6909      	ldr	r1, [r1, #16]
 8007ddc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007de0:	eba3 0901 	sub.w	r9, r3, r1
 8007de4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007de8:	1c7b      	adds	r3, r7, #1
 8007dea:	444b      	add	r3, r9
 8007dec:	106d      	asrs	r5, r5, #1
 8007dee:	429d      	cmp	r5, r3
 8007df0:	bf38      	it	cc
 8007df2:	461d      	movcc	r5, r3
 8007df4:	0553      	lsls	r3, r2, #21
 8007df6:	d527      	bpl.n	8007e48 <__ssputs_r+0x8c>
 8007df8:	4629      	mov	r1, r5
 8007dfa:	f7fe fc0f 	bl	800661c <_malloc_r>
 8007dfe:	4606      	mov	r6, r0
 8007e00:	b360      	cbz	r0, 8007e5c <__ssputs_r+0xa0>
 8007e02:	6921      	ldr	r1, [r4, #16]
 8007e04:	464a      	mov	r2, r9
 8007e06:	f000 fbe3 	bl	80085d0 <memcpy>
 8007e0a:	89a3      	ldrh	r3, [r4, #12]
 8007e0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e14:	81a3      	strh	r3, [r4, #12]
 8007e16:	6126      	str	r6, [r4, #16]
 8007e18:	6165      	str	r5, [r4, #20]
 8007e1a:	444e      	add	r6, r9
 8007e1c:	eba5 0509 	sub.w	r5, r5, r9
 8007e20:	6026      	str	r6, [r4, #0]
 8007e22:	60a5      	str	r5, [r4, #8]
 8007e24:	463e      	mov	r6, r7
 8007e26:	42be      	cmp	r6, r7
 8007e28:	d900      	bls.n	8007e2c <__ssputs_r+0x70>
 8007e2a:	463e      	mov	r6, r7
 8007e2c:	6820      	ldr	r0, [r4, #0]
 8007e2e:	4632      	mov	r2, r6
 8007e30:	4641      	mov	r1, r8
 8007e32:	f000 fb6f 	bl	8008514 <memmove>
 8007e36:	68a3      	ldr	r3, [r4, #8]
 8007e38:	1b9b      	subs	r3, r3, r6
 8007e3a:	60a3      	str	r3, [r4, #8]
 8007e3c:	6823      	ldr	r3, [r4, #0]
 8007e3e:	4433      	add	r3, r6
 8007e40:	6023      	str	r3, [r4, #0]
 8007e42:	2000      	movs	r0, #0
 8007e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e48:	462a      	mov	r2, r5
 8007e4a:	f000 ff76 	bl	8008d3a <_realloc_r>
 8007e4e:	4606      	mov	r6, r0
 8007e50:	2800      	cmp	r0, #0
 8007e52:	d1e0      	bne.n	8007e16 <__ssputs_r+0x5a>
 8007e54:	6921      	ldr	r1, [r4, #16]
 8007e56:	4650      	mov	r0, sl
 8007e58:	f7fe fb6c 	bl	8006534 <_free_r>
 8007e5c:	230c      	movs	r3, #12
 8007e5e:	f8ca 3000 	str.w	r3, [sl]
 8007e62:	89a3      	ldrh	r3, [r4, #12]
 8007e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e68:	81a3      	strh	r3, [r4, #12]
 8007e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e6e:	e7e9      	b.n	8007e44 <__ssputs_r+0x88>

08007e70 <_svfiprintf_r>:
 8007e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e74:	4698      	mov	r8, r3
 8007e76:	898b      	ldrh	r3, [r1, #12]
 8007e78:	061b      	lsls	r3, r3, #24
 8007e7a:	b09d      	sub	sp, #116	; 0x74
 8007e7c:	4607      	mov	r7, r0
 8007e7e:	460d      	mov	r5, r1
 8007e80:	4614      	mov	r4, r2
 8007e82:	d50e      	bpl.n	8007ea2 <_svfiprintf_r+0x32>
 8007e84:	690b      	ldr	r3, [r1, #16]
 8007e86:	b963      	cbnz	r3, 8007ea2 <_svfiprintf_r+0x32>
 8007e88:	2140      	movs	r1, #64	; 0x40
 8007e8a:	f7fe fbc7 	bl	800661c <_malloc_r>
 8007e8e:	6028      	str	r0, [r5, #0]
 8007e90:	6128      	str	r0, [r5, #16]
 8007e92:	b920      	cbnz	r0, 8007e9e <_svfiprintf_r+0x2e>
 8007e94:	230c      	movs	r3, #12
 8007e96:	603b      	str	r3, [r7, #0]
 8007e98:	f04f 30ff 	mov.w	r0, #4294967295
 8007e9c:	e0d0      	b.n	8008040 <_svfiprintf_r+0x1d0>
 8007e9e:	2340      	movs	r3, #64	; 0x40
 8007ea0:	616b      	str	r3, [r5, #20]
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ea6:	2320      	movs	r3, #32
 8007ea8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007eac:	f8cd 800c 	str.w	r8, [sp, #12]
 8007eb0:	2330      	movs	r3, #48	; 0x30
 8007eb2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008058 <_svfiprintf_r+0x1e8>
 8007eb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007eba:	f04f 0901 	mov.w	r9, #1
 8007ebe:	4623      	mov	r3, r4
 8007ec0:	469a      	mov	sl, r3
 8007ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ec6:	b10a      	cbz	r2, 8007ecc <_svfiprintf_r+0x5c>
 8007ec8:	2a25      	cmp	r2, #37	; 0x25
 8007eca:	d1f9      	bne.n	8007ec0 <_svfiprintf_r+0x50>
 8007ecc:	ebba 0b04 	subs.w	fp, sl, r4
 8007ed0:	d00b      	beq.n	8007eea <_svfiprintf_r+0x7a>
 8007ed2:	465b      	mov	r3, fp
 8007ed4:	4622      	mov	r2, r4
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	4638      	mov	r0, r7
 8007eda:	f7ff ff6f 	bl	8007dbc <__ssputs_r>
 8007ede:	3001      	adds	r0, #1
 8007ee0:	f000 80a9 	beq.w	8008036 <_svfiprintf_r+0x1c6>
 8007ee4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ee6:	445a      	add	r2, fp
 8007ee8:	9209      	str	r2, [sp, #36]	; 0x24
 8007eea:	f89a 3000 	ldrb.w	r3, [sl]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 80a1 	beq.w	8008036 <_svfiprintf_r+0x1c6>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8007efa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007efe:	f10a 0a01 	add.w	sl, sl, #1
 8007f02:	9304      	str	r3, [sp, #16]
 8007f04:	9307      	str	r3, [sp, #28]
 8007f06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f0a:	931a      	str	r3, [sp, #104]	; 0x68
 8007f0c:	4654      	mov	r4, sl
 8007f0e:	2205      	movs	r2, #5
 8007f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f14:	4850      	ldr	r0, [pc, #320]	; (8008058 <_svfiprintf_r+0x1e8>)
 8007f16:	f7f8 f963 	bl	80001e0 <memchr>
 8007f1a:	9a04      	ldr	r2, [sp, #16]
 8007f1c:	b9d8      	cbnz	r0, 8007f56 <_svfiprintf_r+0xe6>
 8007f1e:	06d0      	lsls	r0, r2, #27
 8007f20:	bf44      	itt	mi
 8007f22:	2320      	movmi	r3, #32
 8007f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f28:	0711      	lsls	r1, r2, #28
 8007f2a:	bf44      	itt	mi
 8007f2c:	232b      	movmi	r3, #43	; 0x2b
 8007f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f32:	f89a 3000 	ldrb.w	r3, [sl]
 8007f36:	2b2a      	cmp	r3, #42	; 0x2a
 8007f38:	d015      	beq.n	8007f66 <_svfiprintf_r+0xf6>
 8007f3a:	9a07      	ldr	r2, [sp, #28]
 8007f3c:	4654      	mov	r4, sl
 8007f3e:	2000      	movs	r0, #0
 8007f40:	f04f 0c0a 	mov.w	ip, #10
 8007f44:	4621      	mov	r1, r4
 8007f46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f4a:	3b30      	subs	r3, #48	; 0x30
 8007f4c:	2b09      	cmp	r3, #9
 8007f4e:	d94d      	bls.n	8007fec <_svfiprintf_r+0x17c>
 8007f50:	b1b0      	cbz	r0, 8007f80 <_svfiprintf_r+0x110>
 8007f52:	9207      	str	r2, [sp, #28]
 8007f54:	e014      	b.n	8007f80 <_svfiprintf_r+0x110>
 8007f56:	eba0 0308 	sub.w	r3, r0, r8
 8007f5a:	fa09 f303 	lsl.w	r3, r9, r3
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	9304      	str	r3, [sp, #16]
 8007f62:	46a2      	mov	sl, r4
 8007f64:	e7d2      	b.n	8007f0c <_svfiprintf_r+0x9c>
 8007f66:	9b03      	ldr	r3, [sp, #12]
 8007f68:	1d19      	adds	r1, r3, #4
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	9103      	str	r1, [sp, #12]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	bfbb      	ittet	lt
 8007f72:	425b      	neglt	r3, r3
 8007f74:	f042 0202 	orrlt.w	r2, r2, #2
 8007f78:	9307      	strge	r3, [sp, #28]
 8007f7a:	9307      	strlt	r3, [sp, #28]
 8007f7c:	bfb8      	it	lt
 8007f7e:	9204      	strlt	r2, [sp, #16]
 8007f80:	7823      	ldrb	r3, [r4, #0]
 8007f82:	2b2e      	cmp	r3, #46	; 0x2e
 8007f84:	d10c      	bne.n	8007fa0 <_svfiprintf_r+0x130>
 8007f86:	7863      	ldrb	r3, [r4, #1]
 8007f88:	2b2a      	cmp	r3, #42	; 0x2a
 8007f8a:	d134      	bne.n	8007ff6 <_svfiprintf_r+0x186>
 8007f8c:	9b03      	ldr	r3, [sp, #12]
 8007f8e:	1d1a      	adds	r2, r3, #4
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	9203      	str	r2, [sp, #12]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	bfb8      	it	lt
 8007f98:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f9c:	3402      	adds	r4, #2
 8007f9e:	9305      	str	r3, [sp, #20]
 8007fa0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008068 <_svfiprintf_r+0x1f8>
 8007fa4:	7821      	ldrb	r1, [r4, #0]
 8007fa6:	2203      	movs	r2, #3
 8007fa8:	4650      	mov	r0, sl
 8007faa:	f7f8 f919 	bl	80001e0 <memchr>
 8007fae:	b138      	cbz	r0, 8007fc0 <_svfiprintf_r+0x150>
 8007fb0:	9b04      	ldr	r3, [sp, #16]
 8007fb2:	eba0 000a 	sub.w	r0, r0, sl
 8007fb6:	2240      	movs	r2, #64	; 0x40
 8007fb8:	4082      	lsls	r2, r0
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	3401      	adds	r4, #1
 8007fbe:	9304      	str	r3, [sp, #16]
 8007fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fc4:	4825      	ldr	r0, [pc, #148]	; (800805c <_svfiprintf_r+0x1ec>)
 8007fc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fca:	2206      	movs	r2, #6
 8007fcc:	f7f8 f908 	bl	80001e0 <memchr>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	d038      	beq.n	8008046 <_svfiprintf_r+0x1d6>
 8007fd4:	4b22      	ldr	r3, [pc, #136]	; (8008060 <_svfiprintf_r+0x1f0>)
 8007fd6:	bb1b      	cbnz	r3, 8008020 <_svfiprintf_r+0x1b0>
 8007fd8:	9b03      	ldr	r3, [sp, #12]
 8007fda:	3307      	adds	r3, #7
 8007fdc:	f023 0307 	bic.w	r3, r3, #7
 8007fe0:	3308      	adds	r3, #8
 8007fe2:	9303      	str	r3, [sp, #12]
 8007fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe6:	4433      	add	r3, r6
 8007fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8007fea:	e768      	b.n	8007ebe <_svfiprintf_r+0x4e>
 8007fec:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ff0:	460c      	mov	r4, r1
 8007ff2:	2001      	movs	r0, #1
 8007ff4:	e7a6      	b.n	8007f44 <_svfiprintf_r+0xd4>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	3401      	adds	r4, #1
 8007ffa:	9305      	str	r3, [sp, #20]
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	f04f 0c0a 	mov.w	ip, #10
 8008002:	4620      	mov	r0, r4
 8008004:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008008:	3a30      	subs	r2, #48	; 0x30
 800800a:	2a09      	cmp	r2, #9
 800800c:	d903      	bls.n	8008016 <_svfiprintf_r+0x1a6>
 800800e:	2b00      	cmp	r3, #0
 8008010:	d0c6      	beq.n	8007fa0 <_svfiprintf_r+0x130>
 8008012:	9105      	str	r1, [sp, #20]
 8008014:	e7c4      	b.n	8007fa0 <_svfiprintf_r+0x130>
 8008016:	fb0c 2101 	mla	r1, ip, r1, r2
 800801a:	4604      	mov	r4, r0
 800801c:	2301      	movs	r3, #1
 800801e:	e7f0      	b.n	8008002 <_svfiprintf_r+0x192>
 8008020:	ab03      	add	r3, sp, #12
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	462a      	mov	r2, r5
 8008026:	4b0f      	ldr	r3, [pc, #60]	; (8008064 <_svfiprintf_r+0x1f4>)
 8008028:	a904      	add	r1, sp, #16
 800802a:	4638      	mov	r0, r7
 800802c:	f7fc fad6 	bl	80045dc <_printf_float>
 8008030:	1c42      	adds	r2, r0, #1
 8008032:	4606      	mov	r6, r0
 8008034:	d1d6      	bne.n	8007fe4 <_svfiprintf_r+0x174>
 8008036:	89ab      	ldrh	r3, [r5, #12]
 8008038:	065b      	lsls	r3, r3, #25
 800803a:	f53f af2d 	bmi.w	8007e98 <_svfiprintf_r+0x28>
 800803e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008040:	b01d      	add	sp, #116	; 0x74
 8008042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008046:	ab03      	add	r3, sp, #12
 8008048:	9300      	str	r3, [sp, #0]
 800804a:	462a      	mov	r2, r5
 800804c:	4b05      	ldr	r3, [pc, #20]	; (8008064 <_svfiprintf_r+0x1f4>)
 800804e:	a904      	add	r1, sp, #16
 8008050:	4638      	mov	r0, r7
 8008052:	f7fc fd67 	bl	8004b24 <_printf_i>
 8008056:	e7eb      	b.n	8008030 <_svfiprintf_r+0x1c0>
 8008058:	08009289 	.word	0x08009289
 800805c:	08009293 	.word	0x08009293
 8008060:	080045dd 	.word	0x080045dd
 8008064:	08007dbd 	.word	0x08007dbd
 8008068:	0800928f 	.word	0x0800928f

0800806c <__sfputc_r>:
 800806c:	6893      	ldr	r3, [r2, #8]
 800806e:	3b01      	subs	r3, #1
 8008070:	2b00      	cmp	r3, #0
 8008072:	b410      	push	{r4}
 8008074:	6093      	str	r3, [r2, #8]
 8008076:	da08      	bge.n	800808a <__sfputc_r+0x1e>
 8008078:	6994      	ldr	r4, [r2, #24]
 800807a:	42a3      	cmp	r3, r4
 800807c:	db01      	blt.n	8008082 <__sfputc_r+0x16>
 800807e:	290a      	cmp	r1, #10
 8008080:	d103      	bne.n	800808a <__sfputc_r+0x1e>
 8008082:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008086:	f7fd bac0 	b.w	800560a <__swbuf_r>
 800808a:	6813      	ldr	r3, [r2, #0]
 800808c:	1c58      	adds	r0, r3, #1
 800808e:	6010      	str	r0, [r2, #0]
 8008090:	7019      	strb	r1, [r3, #0]
 8008092:	4608      	mov	r0, r1
 8008094:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008098:	4770      	bx	lr

0800809a <__sfputs_r>:
 800809a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809c:	4606      	mov	r6, r0
 800809e:	460f      	mov	r7, r1
 80080a0:	4614      	mov	r4, r2
 80080a2:	18d5      	adds	r5, r2, r3
 80080a4:	42ac      	cmp	r4, r5
 80080a6:	d101      	bne.n	80080ac <__sfputs_r+0x12>
 80080a8:	2000      	movs	r0, #0
 80080aa:	e007      	b.n	80080bc <__sfputs_r+0x22>
 80080ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080b0:	463a      	mov	r2, r7
 80080b2:	4630      	mov	r0, r6
 80080b4:	f7ff ffda 	bl	800806c <__sfputc_r>
 80080b8:	1c43      	adds	r3, r0, #1
 80080ba:	d1f3      	bne.n	80080a4 <__sfputs_r+0xa>
 80080bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080080c0 <_vfiprintf_r>:
 80080c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c4:	460d      	mov	r5, r1
 80080c6:	b09d      	sub	sp, #116	; 0x74
 80080c8:	4614      	mov	r4, r2
 80080ca:	4698      	mov	r8, r3
 80080cc:	4606      	mov	r6, r0
 80080ce:	b118      	cbz	r0, 80080d8 <_vfiprintf_r+0x18>
 80080d0:	6a03      	ldr	r3, [r0, #32]
 80080d2:	b90b      	cbnz	r3, 80080d8 <_vfiprintf_r+0x18>
 80080d4:	f7fd f8e4 	bl	80052a0 <__sinit>
 80080d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080da:	07d9      	lsls	r1, r3, #31
 80080dc:	d405      	bmi.n	80080ea <_vfiprintf_r+0x2a>
 80080de:	89ab      	ldrh	r3, [r5, #12]
 80080e0:	059a      	lsls	r2, r3, #22
 80080e2:	d402      	bmi.n	80080ea <_vfiprintf_r+0x2a>
 80080e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080e6:	f7fd fba2 	bl	800582e <__retarget_lock_acquire_recursive>
 80080ea:	89ab      	ldrh	r3, [r5, #12]
 80080ec:	071b      	lsls	r3, r3, #28
 80080ee:	d501      	bpl.n	80080f4 <_vfiprintf_r+0x34>
 80080f0:	692b      	ldr	r3, [r5, #16]
 80080f2:	b99b      	cbnz	r3, 800811c <_vfiprintf_r+0x5c>
 80080f4:	4629      	mov	r1, r5
 80080f6:	4630      	mov	r0, r6
 80080f8:	f7fd fac4 	bl	8005684 <__swsetup_r>
 80080fc:	b170      	cbz	r0, 800811c <_vfiprintf_r+0x5c>
 80080fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008100:	07dc      	lsls	r4, r3, #31
 8008102:	d504      	bpl.n	800810e <_vfiprintf_r+0x4e>
 8008104:	f04f 30ff 	mov.w	r0, #4294967295
 8008108:	b01d      	add	sp, #116	; 0x74
 800810a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800810e:	89ab      	ldrh	r3, [r5, #12]
 8008110:	0598      	lsls	r0, r3, #22
 8008112:	d4f7      	bmi.n	8008104 <_vfiprintf_r+0x44>
 8008114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008116:	f7fd fb8b 	bl	8005830 <__retarget_lock_release_recursive>
 800811a:	e7f3      	b.n	8008104 <_vfiprintf_r+0x44>
 800811c:	2300      	movs	r3, #0
 800811e:	9309      	str	r3, [sp, #36]	; 0x24
 8008120:	2320      	movs	r3, #32
 8008122:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008126:	f8cd 800c 	str.w	r8, [sp, #12]
 800812a:	2330      	movs	r3, #48	; 0x30
 800812c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80082e0 <_vfiprintf_r+0x220>
 8008130:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008134:	f04f 0901 	mov.w	r9, #1
 8008138:	4623      	mov	r3, r4
 800813a:	469a      	mov	sl, r3
 800813c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008140:	b10a      	cbz	r2, 8008146 <_vfiprintf_r+0x86>
 8008142:	2a25      	cmp	r2, #37	; 0x25
 8008144:	d1f9      	bne.n	800813a <_vfiprintf_r+0x7a>
 8008146:	ebba 0b04 	subs.w	fp, sl, r4
 800814a:	d00b      	beq.n	8008164 <_vfiprintf_r+0xa4>
 800814c:	465b      	mov	r3, fp
 800814e:	4622      	mov	r2, r4
 8008150:	4629      	mov	r1, r5
 8008152:	4630      	mov	r0, r6
 8008154:	f7ff ffa1 	bl	800809a <__sfputs_r>
 8008158:	3001      	adds	r0, #1
 800815a:	f000 80a9 	beq.w	80082b0 <_vfiprintf_r+0x1f0>
 800815e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008160:	445a      	add	r2, fp
 8008162:	9209      	str	r2, [sp, #36]	; 0x24
 8008164:	f89a 3000 	ldrb.w	r3, [sl]
 8008168:	2b00      	cmp	r3, #0
 800816a:	f000 80a1 	beq.w	80082b0 <_vfiprintf_r+0x1f0>
 800816e:	2300      	movs	r3, #0
 8008170:	f04f 32ff 	mov.w	r2, #4294967295
 8008174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008178:	f10a 0a01 	add.w	sl, sl, #1
 800817c:	9304      	str	r3, [sp, #16]
 800817e:	9307      	str	r3, [sp, #28]
 8008180:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008184:	931a      	str	r3, [sp, #104]	; 0x68
 8008186:	4654      	mov	r4, sl
 8008188:	2205      	movs	r2, #5
 800818a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800818e:	4854      	ldr	r0, [pc, #336]	; (80082e0 <_vfiprintf_r+0x220>)
 8008190:	f7f8 f826 	bl	80001e0 <memchr>
 8008194:	9a04      	ldr	r2, [sp, #16]
 8008196:	b9d8      	cbnz	r0, 80081d0 <_vfiprintf_r+0x110>
 8008198:	06d1      	lsls	r1, r2, #27
 800819a:	bf44      	itt	mi
 800819c:	2320      	movmi	r3, #32
 800819e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081a2:	0713      	lsls	r3, r2, #28
 80081a4:	bf44      	itt	mi
 80081a6:	232b      	movmi	r3, #43	; 0x2b
 80081a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081ac:	f89a 3000 	ldrb.w	r3, [sl]
 80081b0:	2b2a      	cmp	r3, #42	; 0x2a
 80081b2:	d015      	beq.n	80081e0 <_vfiprintf_r+0x120>
 80081b4:	9a07      	ldr	r2, [sp, #28]
 80081b6:	4654      	mov	r4, sl
 80081b8:	2000      	movs	r0, #0
 80081ba:	f04f 0c0a 	mov.w	ip, #10
 80081be:	4621      	mov	r1, r4
 80081c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081c4:	3b30      	subs	r3, #48	; 0x30
 80081c6:	2b09      	cmp	r3, #9
 80081c8:	d94d      	bls.n	8008266 <_vfiprintf_r+0x1a6>
 80081ca:	b1b0      	cbz	r0, 80081fa <_vfiprintf_r+0x13a>
 80081cc:	9207      	str	r2, [sp, #28]
 80081ce:	e014      	b.n	80081fa <_vfiprintf_r+0x13a>
 80081d0:	eba0 0308 	sub.w	r3, r0, r8
 80081d4:	fa09 f303 	lsl.w	r3, r9, r3
 80081d8:	4313      	orrs	r3, r2
 80081da:	9304      	str	r3, [sp, #16]
 80081dc:	46a2      	mov	sl, r4
 80081de:	e7d2      	b.n	8008186 <_vfiprintf_r+0xc6>
 80081e0:	9b03      	ldr	r3, [sp, #12]
 80081e2:	1d19      	adds	r1, r3, #4
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	9103      	str	r1, [sp, #12]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	bfbb      	ittet	lt
 80081ec:	425b      	neglt	r3, r3
 80081ee:	f042 0202 	orrlt.w	r2, r2, #2
 80081f2:	9307      	strge	r3, [sp, #28]
 80081f4:	9307      	strlt	r3, [sp, #28]
 80081f6:	bfb8      	it	lt
 80081f8:	9204      	strlt	r2, [sp, #16]
 80081fa:	7823      	ldrb	r3, [r4, #0]
 80081fc:	2b2e      	cmp	r3, #46	; 0x2e
 80081fe:	d10c      	bne.n	800821a <_vfiprintf_r+0x15a>
 8008200:	7863      	ldrb	r3, [r4, #1]
 8008202:	2b2a      	cmp	r3, #42	; 0x2a
 8008204:	d134      	bne.n	8008270 <_vfiprintf_r+0x1b0>
 8008206:	9b03      	ldr	r3, [sp, #12]
 8008208:	1d1a      	adds	r2, r3, #4
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	9203      	str	r2, [sp, #12]
 800820e:	2b00      	cmp	r3, #0
 8008210:	bfb8      	it	lt
 8008212:	f04f 33ff 	movlt.w	r3, #4294967295
 8008216:	3402      	adds	r4, #2
 8008218:	9305      	str	r3, [sp, #20]
 800821a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80082f0 <_vfiprintf_r+0x230>
 800821e:	7821      	ldrb	r1, [r4, #0]
 8008220:	2203      	movs	r2, #3
 8008222:	4650      	mov	r0, sl
 8008224:	f7f7 ffdc 	bl	80001e0 <memchr>
 8008228:	b138      	cbz	r0, 800823a <_vfiprintf_r+0x17a>
 800822a:	9b04      	ldr	r3, [sp, #16]
 800822c:	eba0 000a 	sub.w	r0, r0, sl
 8008230:	2240      	movs	r2, #64	; 0x40
 8008232:	4082      	lsls	r2, r0
 8008234:	4313      	orrs	r3, r2
 8008236:	3401      	adds	r4, #1
 8008238:	9304      	str	r3, [sp, #16]
 800823a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800823e:	4829      	ldr	r0, [pc, #164]	; (80082e4 <_vfiprintf_r+0x224>)
 8008240:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008244:	2206      	movs	r2, #6
 8008246:	f7f7 ffcb 	bl	80001e0 <memchr>
 800824a:	2800      	cmp	r0, #0
 800824c:	d03f      	beq.n	80082ce <_vfiprintf_r+0x20e>
 800824e:	4b26      	ldr	r3, [pc, #152]	; (80082e8 <_vfiprintf_r+0x228>)
 8008250:	bb1b      	cbnz	r3, 800829a <_vfiprintf_r+0x1da>
 8008252:	9b03      	ldr	r3, [sp, #12]
 8008254:	3307      	adds	r3, #7
 8008256:	f023 0307 	bic.w	r3, r3, #7
 800825a:	3308      	adds	r3, #8
 800825c:	9303      	str	r3, [sp, #12]
 800825e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008260:	443b      	add	r3, r7
 8008262:	9309      	str	r3, [sp, #36]	; 0x24
 8008264:	e768      	b.n	8008138 <_vfiprintf_r+0x78>
 8008266:	fb0c 3202 	mla	r2, ip, r2, r3
 800826a:	460c      	mov	r4, r1
 800826c:	2001      	movs	r0, #1
 800826e:	e7a6      	b.n	80081be <_vfiprintf_r+0xfe>
 8008270:	2300      	movs	r3, #0
 8008272:	3401      	adds	r4, #1
 8008274:	9305      	str	r3, [sp, #20]
 8008276:	4619      	mov	r1, r3
 8008278:	f04f 0c0a 	mov.w	ip, #10
 800827c:	4620      	mov	r0, r4
 800827e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008282:	3a30      	subs	r2, #48	; 0x30
 8008284:	2a09      	cmp	r2, #9
 8008286:	d903      	bls.n	8008290 <_vfiprintf_r+0x1d0>
 8008288:	2b00      	cmp	r3, #0
 800828a:	d0c6      	beq.n	800821a <_vfiprintf_r+0x15a>
 800828c:	9105      	str	r1, [sp, #20]
 800828e:	e7c4      	b.n	800821a <_vfiprintf_r+0x15a>
 8008290:	fb0c 2101 	mla	r1, ip, r1, r2
 8008294:	4604      	mov	r4, r0
 8008296:	2301      	movs	r3, #1
 8008298:	e7f0      	b.n	800827c <_vfiprintf_r+0x1bc>
 800829a:	ab03      	add	r3, sp, #12
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	462a      	mov	r2, r5
 80082a0:	4b12      	ldr	r3, [pc, #72]	; (80082ec <_vfiprintf_r+0x22c>)
 80082a2:	a904      	add	r1, sp, #16
 80082a4:	4630      	mov	r0, r6
 80082a6:	f7fc f999 	bl	80045dc <_printf_float>
 80082aa:	4607      	mov	r7, r0
 80082ac:	1c78      	adds	r0, r7, #1
 80082ae:	d1d6      	bne.n	800825e <_vfiprintf_r+0x19e>
 80082b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082b2:	07d9      	lsls	r1, r3, #31
 80082b4:	d405      	bmi.n	80082c2 <_vfiprintf_r+0x202>
 80082b6:	89ab      	ldrh	r3, [r5, #12]
 80082b8:	059a      	lsls	r2, r3, #22
 80082ba:	d402      	bmi.n	80082c2 <_vfiprintf_r+0x202>
 80082bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082be:	f7fd fab7 	bl	8005830 <__retarget_lock_release_recursive>
 80082c2:	89ab      	ldrh	r3, [r5, #12]
 80082c4:	065b      	lsls	r3, r3, #25
 80082c6:	f53f af1d 	bmi.w	8008104 <_vfiprintf_r+0x44>
 80082ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082cc:	e71c      	b.n	8008108 <_vfiprintf_r+0x48>
 80082ce:	ab03      	add	r3, sp, #12
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	462a      	mov	r2, r5
 80082d4:	4b05      	ldr	r3, [pc, #20]	; (80082ec <_vfiprintf_r+0x22c>)
 80082d6:	a904      	add	r1, sp, #16
 80082d8:	4630      	mov	r0, r6
 80082da:	f7fc fc23 	bl	8004b24 <_printf_i>
 80082de:	e7e4      	b.n	80082aa <_vfiprintf_r+0x1ea>
 80082e0:	08009289 	.word	0x08009289
 80082e4:	08009293 	.word	0x08009293
 80082e8:	080045dd 	.word	0x080045dd
 80082ec:	0800809b 	.word	0x0800809b
 80082f0:	0800928f 	.word	0x0800928f

080082f4 <__sflush_r>:
 80082f4:	898a      	ldrh	r2, [r1, #12]
 80082f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082fa:	4605      	mov	r5, r0
 80082fc:	0710      	lsls	r0, r2, #28
 80082fe:	460c      	mov	r4, r1
 8008300:	d458      	bmi.n	80083b4 <__sflush_r+0xc0>
 8008302:	684b      	ldr	r3, [r1, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	dc05      	bgt.n	8008314 <__sflush_r+0x20>
 8008308:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800830a:	2b00      	cmp	r3, #0
 800830c:	dc02      	bgt.n	8008314 <__sflush_r+0x20>
 800830e:	2000      	movs	r0, #0
 8008310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008316:	2e00      	cmp	r6, #0
 8008318:	d0f9      	beq.n	800830e <__sflush_r+0x1a>
 800831a:	2300      	movs	r3, #0
 800831c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008320:	682f      	ldr	r7, [r5, #0]
 8008322:	6a21      	ldr	r1, [r4, #32]
 8008324:	602b      	str	r3, [r5, #0]
 8008326:	d032      	beq.n	800838e <__sflush_r+0x9a>
 8008328:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800832a:	89a3      	ldrh	r3, [r4, #12]
 800832c:	075a      	lsls	r2, r3, #29
 800832e:	d505      	bpl.n	800833c <__sflush_r+0x48>
 8008330:	6863      	ldr	r3, [r4, #4]
 8008332:	1ac0      	subs	r0, r0, r3
 8008334:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008336:	b10b      	cbz	r3, 800833c <__sflush_r+0x48>
 8008338:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800833a:	1ac0      	subs	r0, r0, r3
 800833c:	2300      	movs	r3, #0
 800833e:	4602      	mov	r2, r0
 8008340:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008342:	6a21      	ldr	r1, [r4, #32]
 8008344:	4628      	mov	r0, r5
 8008346:	47b0      	blx	r6
 8008348:	1c43      	adds	r3, r0, #1
 800834a:	89a3      	ldrh	r3, [r4, #12]
 800834c:	d106      	bne.n	800835c <__sflush_r+0x68>
 800834e:	6829      	ldr	r1, [r5, #0]
 8008350:	291d      	cmp	r1, #29
 8008352:	d82b      	bhi.n	80083ac <__sflush_r+0xb8>
 8008354:	4a29      	ldr	r2, [pc, #164]	; (80083fc <__sflush_r+0x108>)
 8008356:	410a      	asrs	r2, r1
 8008358:	07d6      	lsls	r6, r2, #31
 800835a:	d427      	bmi.n	80083ac <__sflush_r+0xb8>
 800835c:	2200      	movs	r2, #0
 800835e:	6062      	str	r2, [r4, #4]
 8008360:	04d9      	lsls	r1, r3, #19
 8008362:	6922      	ldr	r2, [r4, #16]
 8008364:	6022      	str	r2, [r4, #0]
 8008366:	d504      	bpl.n	8008372 <__sflush_r+0x7e>
 8008368:	1c42      	adds	r2, r0, #1
 800836a:	d101      	bne.n	8008370 <__sflush_r+0x7c>
 800836c:	682b      	ldr	r3, [r5, #0]
 800836e:	b903      	cbnz	r3, 8008372 <__sflush_r+0x7e>
 8008370:	6560      	str	r0, [r4, #84]	; 0x54
 8008372:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008374:	602f      	str	r7, [r5, #0]
 8008376:	2900      	cmp	r1, #0
 8008378:	d0c9      	beq.n	800830e <__sflush_r+0x1a>
 800837a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800837e:	4299      	cmp	r1, r3
 8008380:	d002      	beq.n	8008388 <__sflush_r+0x94>
 8008382:	4628      	mov	r0, r5
 8008384:	f7fe f8d6 	bl	8006534 <_free_r>
 8008388:	2000      	movs	r0, #0
 800838a:	6360      	str	r0, [r4, #52]	; 0x34
 800838c:	e7c0      	b.n	8008310 <__sflush_r+0x1c>
 800838e:	2301      	movs	r3, #1
 8008390:	4628      	mov	r0, r5
 8008392:	47b0      	blx	r6
 8008394:	1c41      	adds	r1, r0, #1
 8008396:	d1c8      	bne.n	800832a <__sflush_r+0x36>
 8008398:	682b      	ldr	r3, [r5, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d0c5      	beq.n	800832a <__sflush_r+0x36>
 800839e:	2b1d      	cmp	r3, #29
 80083a0:	d001      	beq.n	80083a6 <__sflush_r+0xb2>
 80083a2:	2b16      	cmp	r3, #22
 80083a4:	d101      	bne.n	80083aa <__sflush_r+0xb6>
 80083a6:	602f      	str	r7, [r5, #0]
 80083a8:	e7b1      	b.n	800830e <__sflush_r+0x1a>
 80083aa:	89a3      	ldrh	r3, [r4, #12]
 80083ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083b0:	81a3      	strh	r3, [r4, #12]
 80083b2:	e7ad      	b.n	8008310 <__sflush_r+0x1c>
 80083b4:	690f      	ldr	r7, [r1, #16]
 80083b6:	2f00      	cmp	r7, #0
 80083b8:	d0a9      	beq.n	800830e <__sflush_r+0x1a>
 80083ba:	0793      	lsls	r3, r2, #30
 80083bc:	680e      	ldr	r6, [r1, #0]
 80083be:	bf08      	it	eq
 80083c0:	694b      	ldreq	r3, [r1, #20]
 80083c2:	600f      	str	r7, [r1, #0]
 80083c4:	bf18      	it	ne
 80083c6:	2300      	movne	r3, #0
 80083c8:	eba6 0807 	sub.w	r8, r6, r7
 80083cc:	608b      	str	r3, [r1, #8]
 80083ce:	f1b8 0f00 	cmp.w	r8, #0
 80083d2:	dd9c      	ble.n	800830e <__sflush_r+0x1a>
 80083d4:	6a21      	ldr	r1, [r4, #32]
 80083d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083d8:	4643      	mov	r3, r8
 80083da:	463a      	mov	r2, r7
 80083dc:	4628      	mov	r0, r5
 80083de:	47b0      	blx	r6
 80083e0:	2800      	cmp	r0, #0
 80083e2:	dc06      	bgt.n	80083f2 <__sflush_r+0xfe>
 80083e4:	89a3      	ldrh	r3, [r4, #12]
 80083e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083ea:	81a3      	strh	r3, [r4, #12]
 80083ec:	f04f 30ff 	mov.w	r0, #4294967295
 80083f0:	e78e      	b.n	8008310 <__sflush_r+0x1c>
 80083f2:	4407      	add	r7, r0
 80083f4:	eba8 0800 	sub.w	r8, r8, r0
 80083f8:	e7e9      	b.n	80083ce <__sflush_r+0xda>
 80083fa:	bf00      	nop
 80083fc:	dfbffffe 	.word	0xdfbffffe

08008400 <_fflush_r>:
 8008400:	b538      	push	{r3, r4, r5, lr}
 8008402:	690b      	ldr	r3, [r1, #16]
 8008404:	4605      	mov	r5, r0
 8008406:	460c      	mov	r4, r1
 8008408:	b913      	cbnz	r3, 8008410 <_fflush_r+0x10>
 800840a:	2500      	movs	r5, #0
 800840c:	4628      	mov	r0, r5
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	b118      	cbz	r0, 800841a <_fflush_r+0x1a>
 8008412:	6a03      	ldr	r3, [r0, #32]
 8008414:	b90b      	cbnz	r3, 800841a <_fflush_r+0x1a>
 8008416:	f7fc ff43 	bl	80052a0 <__sinit>
 800841a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d0f3      	beq.n	800840a <_fflush_r+0xa>
 8008422:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008424:	07d0      	lsls	r0, r2, #31
 8008426:	d404      	bmi.n	8008432 <_fflush_r+0x32>
 8008428:	0599      	lsls	r1, r3, #22
 800842a:	d402      	bmi.n	8008432 <_fflush_r+0x32>
 800842c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800842e:	f7fd f9fe 	bl	800582e <__retarget_lock_acquire_recursive>
 8008432:	4628      	mov	r0, r5
 8008434:	4621      	mov	r1, r4
 8008436:	f7ff ff5d 	bl	80082f4 <__sflush_r>
 800843a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800843c:	07da      	lsls	r2, r3, #31
 800843e:	4605      	mov	r5, r0
 8008440:	d4e4      	bmi.n	800840c <_fflush_r+0xc>
 8008442:	89a3      	ldrh	r3, [r4, #12]
 8008444:	059b      	lsls	r3, r3, #22
 8008446:	d4e1      	bmi.n	800840c <_fflush_r+0xc>
 8008448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800844a:	f7fd f9f1 	bl	8005830 <__retarget_lock_release_recursive>
 800844e:	e7dd      	b.n	800840c <_fflush_r+0xc>

08008450 <__swhatbuf_r>:
 8008450:	b570      	push	{r4, r5, r6, lr}
 8008452:	460c      	mov	r4, r1
 8008454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008458:	2900      	cmp	r1, #0
 800845a:	b096      	sub	sp, #88	; 0x58
 800845c:	4615      	mov	r5, r2
 800845e:	461e      	mov	r6, r3
 8008460:	da0d      	bge.n	800847e <__swhatbuf_r+0x2e>
 8008462:	89a3      	ldrh	r3, [r4, #12]
 8008464:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008468:	f04f 0100 	mov.w	r1, #0
 800846c:	bf0c      	ite	eq
 800846e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008472:	2340      	movne	r3, #64	; 0x40
 8008474:	2000      	movs	r0, #0
 8008476:	6031      	str	r1, [r6, #0]
 8008478:	602b      	str	r3, [r5, #0]
 800847a:	b016      	add	sp, #88	; 0x58
 800847c:	bd70      	pop	{r4, r5, r6, pc}
 800847e:	466a      	mov	r2, sp
 8008480:	f000 f874 	bl	800856c <_fstat_r>
 8008484:	2800      	cmp	r0, #0
 8008486:	dbec      	blt.n	8008462 <__swhatbuf_r+0x12>
 8008488:	9901      	ldr	r1, [sp, #4]
 800848a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800848e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008492:	4259      	negs	r1, r3
 8008494:	4159      	adcs	r1, r3
 8008496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800849a:	e7eb      	b.n	8008474 <__swhatbuf_r+0x24>

0800849c <__smakebuf_r>:
 800849c:	898b      	ldrh	r3, [r1, #12]
 800849e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084a0:	079d      	lsls	r5, r3, #30
 80084a2:	4606      	mov	r6, r0
 80084a4:	460c      	mov	r4, r1
 80084a6:	d507      	bpl.n	80084b8 <__smakebuf_r+0x1c>
 80084a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084ac:	6023      	str	r3, [r4, #0]
 80084ae:	6123      	str	r3, [r4, #16]
 80084b0:	2301      	movs	r3, #1
 80084b2:	6163      	str	r3, [r4, #20]
 80084b4:	b002      	add	sp, #8
 80084b6:	bd70      	pop	{r4, r5, r6, pc}
 80084b8:	ab01      	add	r3, sp, #4
 80084ba:	466a      	mov	r2, sp
 80084bc:	f7ff ffc8 	bl	8008450 <__swhatbuf_r>
 80084c0:	9900      	ldr	r1, [sp, #0]
 80084c2:	4605      	mov	r5, r0
 80084c4:	4630      	mov	r0, r6
 80084c6:	f7fe f8a9 	bl	800661c <_malloc_r>
 80084ca:	b948      	cbnz	r0, 80084e0 <__smakebuf_r+0x44>
 80084cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084d0:	059a      	lsls	r2, r3, #22
 80084d2:	d4ef      	bmi.n	80084b4 <__smakebuf_r+0x18>
 80084d4:	f023 0303 	bic.w	r3, r3, #3
 80084d8:	f043 0302 	orr.w	r3, r3, #2
 80084dc:	81a3      	strh	r3, [r4, #12]
 80084de:	e7e3      	b.n	80084a8 <__smakebuf_r+0xc>
 80084e0:	89a3      	ldrh	r3, [r4, #12]
 80084e2:	6020      	str	r0, [r4, #0]
 80084e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084e8:	81a3      	strh	r3, [r4, #12]
 80084ea:	9b00      	ldr	r3, [sp, #0]
 80084ec:	6163      	str	r3, [r4, #20]
 80084ee:	9b01      	ldr	r3, [sp, #4]
 80084f0:	6120      	str	r0, [r4, #16]
 80084f2:	b15b      	cbz	r3, 800850c <__smakebuf_r+0x70>
 80084f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084f8:	4630      	mov	r0, r6
 80084fa:	f000 f849 	bl	8008590 <_isatty_r>
 80084fe:	b128      	cbz	r0, 800850c <__smakebuf_r+0x70>
 8008500:	89a3      	ldrh	r3, [r4, #12]
 8008502:	f023 0303 	bic.w	r3, r3, #3
 8008506:	f043 0301 	orr.w	r3, r3, #1
 800850a:	81a3      	strh	r3, [r4, #12]
 800850c:	89a3      	ldrh	r3, [r4, #12]
 800850e:	431d      	orrs	r5, r3
 8008510:	81a5      	strh	r5, [r4, #12]
 8008512:	e7cf      	b.n	80084b4 <__smakebuf_r+0x18>

08008514 <memmove>:
 8008514:	4288      	cmp	r0, r1
 8008516:	b510      	push	{r4, lr}
 8008518:	eb01 0402 	add.w	r4, r1, r2
 800851c:	d902      	bls.n	8008524 <memmove+0x10>
 800851e:	4284      	cmp	r4, r0
 8008520:	4623      	mov	r3, r4
 8008522:	d807      	bhi.n	8008534 <memmove+0x20>
 8008524:	1e43      	subs	r3, r0, #1
 8008526:	42a1      	cmp	r1, r4
 8008528:	d008      	beq.n	800853c <memmove+0x28>
 800852a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800852e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008532:	e7f8      	b.n	8008526 <memmove+0x12>
 8008534:	4402      	add	r2, r0
 8008536:	4601      	mov	r1, r0
 8008538:	428a      	cmp	r2, r1
 800853a:	d100      	bne.n	800853e <memmove+0x2a>
 800853c:	bd10      	pop	{r4, pc}
 800853e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008546:	e7f7      	b.n	8008538 <memmove+0x24>

08008548 <strncmp>:
 8008548:	b510      	push	{r4, lr}
 800854a:	b16a      	cbz	r2, 8008568 <strncmp+0x20>
 800854c:	3901      	subs	r1, #1
 800854e:	1884      	adds	r4, r0, r2
 8008550:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008554:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008558:	429a      	cmp	r2, r3
 800855a:	d103      	bne.n	8008564 <strncmp+0x1c>
 800855c:	42a0      	cmp	r0, r4
 800855e:	d001      	beq.n	8008564 <strncmp+0x1c>
 8008560:	2a00      	cmp	r2, #0
 8008562:	d1f5      	bne.n	8008550 <strncmp+0x8>
 8008564:	1ad0      	subs	r0, r2, r3
 8008566:	bd10      	pop	{r4, pc}
 8008568:	4610      	mov	r0, r2
 800856a:	e7fc      	b.n	8008566 <strncmp+0x1e>

0800856c <_fstat_r>:
 800856c:	b538      	push	{r3, r4, r5, lr}
 800856e:	4d07      	ldr	r5, [pc, #28]	; (800858c <_fstat_r+0x20>)
 8008570:	2300      	movs	r3, #0
 8008572:	4604      	mov	r4, r0
 8008574:	4608      	mov	r0, r1
 8008576:	4611      	mov	r1, r2
 8008578:	602b      	str	r3, [r5, #0]
 800857a:	f7f9 fb9c 	bl	8001cb6 <_fstat>
 800857e:	1c43      	adds	r3, r0, #1
 8008580:	d102      	bne.n	8008588 <_fstat_r+0x1c>
 8008582:	682b      	ldr	r3, [r5, #0]
 8008584:	b103      	cbz	r3, 8008588 <_fstat_r+0x1c>
 8008586:	6023      	str	r3, [r4, #0]
 8008588:	bd38      	pop	{r3, r4, r5, pc}
 800858a:	bf00      	nop
 800858c:	2000046c 	.word	0x2000046c

08008590 <_isatty_r>:
 8008590:	b538      	push	{r3, r4, r5, lr}
 8008592:	4d06      	ldr	r5, [pc, #24]	; (80085ac <_isatty_r+0x1c>)
 8008594:	2300      	movs	r3, #0
 8008596:	4604      	mov	r4, r0
 8008598:	4608      	mov	r0, r1
 800859a:	602b      	str	r3, [r5, #0]
 800859c:	f7f9 fb9b 	bl	8001cd6 <_isatty>
 80085a0:	1c43      	adds	r3, r0, #1
 80085a2:	d102      	bne.n	80085aa <_isatty_r+0x1a>
 80085a4:	682b      	ldr	r3, [r5, #0]
 80085a6:	b103      	cbz	r3, 80085aa <_isatty_r+0x1a>
 80085a8:	6023      	str	r3, [r4, #0]
 80085aa:	bd38      	pop	{r3, r4, r5, pc}
 80085ac:	2000046c 	.word	0x2000046c

080085b0 <_sbrk_r>:
 80085b0:	b538      	push	{r3, r4, r5, lr}
 80085b2:	4d06      	ldr	r5, [pc, #24]	; (80085cc <_sbrk_r+0x1c>)
 80085b4:	2300      	movs	r3, #0
 80085b6:	4604      	mov	r4, r0
 80085b8:	4608      	mov	r0, r1
 80085ba:	602b      	str	r3, [r5, #0]
 80085bc:	f7f9 fba4 	bl	8001d08 <_sbrk>
 80085c0:	1c43      	adds	r3, r0, #1
 80085c2:	d102      	bne.n	80085ca <_sbrk_r+0x1a>
 80085c4:	682b      	ldr	r3, [r5, #0]
 80085c6:	b103      	cbz	r3, 80085ca <_sbrk_r+0x1a>
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	bd38      	pop	{r3, r4, r5, pc}
 80085cc:	2000046c 	.word	0x2000046c

080085d0 <memcpy>:
 80085d0:	440a      	add	r2, r1
 80085d2:	4291      	cmp	r1, r2
 80085d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80085d8:	d100      	bne.n	80085dc <memcpy+0xc>
 80085da:	4770      	bx	lr
 80085dc:	b510      	push	{r4, lr}
 80085de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085e6:	4291      	cmp	r1, r2
 80085e8:	d1f9      	bne.n	80085de <memcpy+0xe>
 80085ea:	bd10      	pop	{r4, pc}
 80085ec:	0000      	movs	r0, r0
	...

080085f0 <nan>:
 80085f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80085f8 <nan+0x8>
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	00000000 	.word	0x00000000
 80085fc:	7ff80000 	.word	0x7ff80000

08008600 <__assert_func>:
 8008600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008602:	4614      	mov	r4, r2
 8008604:	461a      	mov	r2, r3
 8008606:	4b09      	ldr	r3, [pc, #36]	; (800862c <__assert_func+0x2c>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4605      	mov	r5, r0
 800860c:	68d8      	ldr	r0, [r3, #12]
 800860e:	b14c      	cbz	r4, 8008624 <__assert_func+0x24>
 8008610:	4b07      	ldr	r3, [pc, #28]	; (8008630 <__assert_func+0x30>)
 8008612:	9100      	str	r1, [sp, #0]
 8008614:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008618:	4906      	ldr	r1, [pc, #24]	; (8008634 <__assert_func+0x34>)
 800861a:	462b      	mov	r3, r5
 800861c:	f000 fbca 	bl	8008db4 <fiprintf>
 8008620:	f000 fbda 	bl	8008dd8 <abort>
 8008624:	4b04      	ldr	r3, [pc, #16]	; (8008638 <__assert_func+0x38>)
 8008626:	461c      	mov	r4, r3
 8008628:	e7f3      	b.n	8008612 <__assert_func+0x12>
 800862a:	bf00      	nop
 800862c:	20000064 	.word	0x20000064
 8008630:	080092a2 	.word	0x080092a2
 8008634:	080092af 	.word	0x080092af
 8008638:	080092dd 	.word	0x080092dd

0800863c <_calloc_r>:
 800863c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800863e:	fba1 2402 	umull	r2, r4, r1, r2
 8008642:	b94c      	cbnz	r4, 8008658 <_calloc_r+0x1c>
 8008644:	4611      	mov	r1, r2
 8008646:	9201      	str	r2, [sp, #4]
 8008648:	f7fd ffe8 	bl	800661c <_malloc_r>
 800864c:	9a01      	ldr	r2, [sp, #4]
 800864e:	4605      	mov	r5, r0
 8008650:	b930      	cbnz	r0, 8008660 <_calloc_r+0x24>
 8008652:	4628      	mov	r0, r5
 8008654:	b003      	add	sp, #12
 8008656:	bd30      	pop	{r4, r5, pc}
 8008658:	220c      	movs	r2, #12
 800865a:	6002      	str	r2, [r0, #0]
 800865c:	2500      	movs	r5, #0
 800865e:	e7f8      	b.n	8008652 <_calloc_r+0x16>
 8008660:	4621      	mov	r1, r4
 8008662:	f7fd f867 	bl	8005734 <memset>
 8008666:	e7f4      	b.n	8008652 <_calloc_r+0x16>

08008668 <rshift>:
 8008668:	6903      	ldr	r3, [r0, #16]
 800866a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800866e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008672:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008676:	f100 0414 	add.w	r4, r0, #20
 800867a:	dd45      	ble.n	8008708 <rshift+0xa0>
 800867c:	f011 011f 	ands.w	r1, r1, #31
 8008680:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008684:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008688:	d10c      	bne.n	80086a4 <rshift+0x3c>
 800868a:	f100 0710 	add.w	r7, r0, #16
 800868e:	4629      	mov	r1, r5
 8008690:	42b1      	cmp	r1, r6
 8008692:	d334      	bcc.n	80086fe <rshift+0x96>
 8008694:	1a9b      	subs	r3, r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	1eea      	subs	r2, r5, #3
 800869a:	4296      	cmp	r6, r2
 800869c:	bf38      	it	cc
 800869e:	2300      	movcc	r3, #0
 80086a0:	4423      	add	r3, r4
 80086a2:	e015      	b.n	80086d0 <rshift+0x68>
 80086a4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80086a8:	f1c1 0820 	rsb	r8, r1, #32
 80086ac:	40cf      	lsrs	r7, r1
 80086ae:	f105 0e04 	add.w	lr, r5, #4
 80086b2:	46a1      	mov	r9, r4
 80086b4:	4576      	cmp	r6, lr
 80086b6:	46f4      	mov	ip, lr
 80086b8:	d815      	bhi.n	80086e6 <rshift+0x7e>
 80086ba:	1a9a      	subs	r2, r3, r2
 80086bc:	0092      	lsls	r2, r2, #2
 80086be:	3a04      	subs	r2, #4
 80086c0:	3501      	adds	r5, #1
 80086c2:	42ae      	cmp	r6, r5
 80086c4:	bf38      	it	cc
 80086c6:	2200      	movcc	r2, #0
 80086c8:	18a3      	adds	r3, r4, r2
 80086ca:	50a7      	str	r7, [r4, r2]
 80086cc:	b107      	cbz	r7, 80086d0 <rshift+0x68>
 80086ce:	3304      	adds	r3, #4
 80086d0:	1b1a      	subs	r2, r3, r4
 80086d2:	42a3      	cmp	r3, r4
 80086d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80086d8:	bf08      	it	eq
 80086da:	2300      	moveq	r3, #0
 80086dc:	6102      	str	r2, [r0, #16]
 80086de:	bf08      	it	eq
 80086e0:	6143      	streq	r3, [r0, #20]
 80086e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086e6:	f8dc c000 	ldr.w	ip, [ip]
 80086ea:	fa0c fc08 	lsl.w	ip, ip, r8
 80086ee:	ea4c 0707 	orr.w	r7, ip, r7
 80086f2:	f849 7b04 	str.w	r7, [r9], #4
 80086f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80086fa:	40cf      	lsrs	r7, r1
 80086fc:	e7da      	b.n	80086b4 <rshift+0x4c>
 80086fe:	f851 cb04 	ldr.w	ip, [r1], #4
 8008702:	f847 cf04 	str.w	ip, [r7, #4]!
 8008706:	e7c3      	b.n	8008690 <rshift+0x28>
 8008708:	4623      	mov	r3, r4
 800870a:	e7e1      	b.n	80086d0 <rshift+0x68>

0800870c <__hexdig_fun>:
 800870c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008710:	2b09      	cmp	r3, #9
 8008712:	d802      	bhi.n	800871a <__hexdig_fun+0xe>
 8008714:	3820      	subs	r0, #32
 8008716:	b2c0      	uxtb	r0, r0
 8008718:	4770      	bx	lr
 800871a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800871e:	2b05      	cmp	r3, #5
 8008720:	d801      	bhi.n	8008726 <__hexdig_fun+0x1a>
 8008722:	3847      	subs	r0, #71	; 0x47
 8008724:	e7f7      	b.n	8008716 <__hexdig_fun+0xa>
 8008726:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800872a:	2b05      	cmp	r3, #5
 800872c:	d801      	bhi.n	8008732 <__hexdig_fun+0x26>
 800872e:	3827      	subs	r0, #39	; 0x27
 8008730:	e7f1      	b.n	8008716 <__hexdig_fun+0xa>
 8008732:	2000      	movs	r0, #0
 8008734:	4770      	bx	lr
	...

08008738 <__gethex>:
 8008738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873c:	4617      	mov	r7, r2
 800873e:	680a      	ldr	r2, [r1, #0]
 8008740:	b085      	sub	sp, #20
 8008742:	f102 0b02 	add.w	fp, r2, #2
 8008746:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800874a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800874e:	4681      	mov	r9, r0
 8008750:	468a      	mov	sl, r1
 8008752:	9302      	str	r3, [sp, #8]
 8008754:	32fe      	adds	r2, #254	; 0xfe
 8008756:	eb02 030b 	add.w	r3, r2, fp
 800875a:	46d8      	mov	r8, fp
 800875c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008760:	9301      	str	r3, [sp, #4]
 8008762:	2830      	cmp	r0, #48	; 0x30
 8008764:	d0f7      	beq.n	8008756 <__gethex+0x1e>
 8008766:	f7ff ffd1 	bl	800870c <__hexdig_fun>
 800876a:	4604      	mov	r4, r0
 800876c:	2800      	cmp	r0, #0
 800876e:	d138      	bne.n	80087e2 <__gethex+0xaa>
 8008770:	49a7      	ldr	r1, [pc, #668]	; (8008a10 <__gethex+0x2d8>)
 8008772:	2201      	movs	r2, #1
 8008774:	4640      	mov	r0, r8
 8008776:	f7ff fee7 	bl	8008548 <strncmp>
 800877a:	4606      	mov	r6, r0
 800877c:	2800      	cmp	r0, #0
 800877e:	d169      	bne.n	8008854 <__gethex+0x11c>
 8008780:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008784:	465d      	mov	r5, fp
 8008786:	f7ff ffc1 	bl	800870c <__hexdig_fun>
 800878a:	2800      	cmp	r0, #0
 800878c:	d064      	beq.n	8008858 <__gethex+0x120>
 800878e:	465a      	mov	r2, fp
 8008790:	7810      	ldrb	r0, [r2, #0]
 8008792:	2830      	cmp	r0, #48	; 0x30
 8008794:	4690      	mov	r8, r2
 8008796:	f102 0201 	add.w	r2, r2, #1
 800879a:	d0f9      	beq.n	8008790 <__gethex+0x58>
 800879c:	f7ff ffb6 	bl	800870c <__hexdig_fun>
 80087a0:	2301      	movs	r3, #1
 80087a2:	fab0 f480 	clz	r4, r0
 80087a6:	0964      	lsrs	r4, r4, #5
 80087a8:	465e      	mov	r6, fp
 80087aa:	9301      	str	r3, [sp, #4]
 80087ac:	4642      	mov	r2, r8
 80087ae:	4615      	mov	r5, r2
 80087b0:	3201      	adds	r2, #1
 80087b2:	7828      	ldrb	r0, [r5, #0]
 80087b4:	f7ff ffaa 	bl	800870c <__hexdig_fun>
 80087b8:	2800      	cmp	r0, #0
 80087ba:	d1f8      	bne.n	80087ae <__gethex+0x76>
 80087bc:	4994      	ldr	r1, [pc, #592]	; (8008a10 <__gethex+0x2d8>)
 80087be:	2201      	movs	r2, #1
 80087c0:	4628      	mov	r0, r5
 80087c2:	f7ff fec1 	bl	8008548 <strncmp>
 80087c6:	b978      	cbnz	r0, 80087e8 <__gethex+0xb0>
 80087c8:	b946      	cbnz	r6, 80087dc <__gethex+0xa4>
 80087ca:	1c6e      	adds	r6, r5, #1
 80087cc:	4632      	mov	r2, r6
 80087ce:	4615      	mov	r5, r2
 80087d0:	3201      	adds	r2, #1
 80087d2:	7828      	ldrb	r0, [r5, #0]
 80087d4:	f7ff ff9a 	bl	800870c <__hexdig_fun>
 80087d8:	2800      	cmp	r0, #0
 80087da:	d1f8      	bne.n	80087ce <__gethex+0x96>
 80087dc:	1b73      	subs	r3, r6, r5
 80087de:	009e      	lsls	r6, r3, #2
 80087e0:	e004      	b.n	80087ec <__gethex+0xb4>
 80087e2:	2400      	movs	r4, #0
 80087e4:	4626      	mov	r6, r4
 80087e6:	e7e1      	b.n	80087ac <__gethex+0x74>
 80087e8:	2e00      	cmp	r6, #0
 80087ea:	d1f7      	bne.n	80087dc <__gethex+0xa4>
 80087ec:	782b      	ldrb	r3, [r5, #0]
 80087ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80087f2:	2b50      	cmp	r3, #80	; 0x50
 80087f4:	d13d      	bne.n	8008872 <__gethex+0x13a>
 80087f6:	786b      	ldrb	r3, [r5, #1]
 80087f8:	2b2b      	cmp	r3, #43	; 0x2b
 80087fa:	d02f      	beq.n	800885c <__gethex+0x124>
 80087fc:	2b2d      	cmp	r3, #45	; 0x2d
 80087fe:	d031      	beq.n	8008864 <__gethex+0x12c>
 8008800:	1c69      	adds	r1, r5, #1
 8008802:	f04f 0b00 	mov.w	fp, #0
 8008806:	7808      	ldrb	r0, [r1, #0]
 8008808:	f7ff ff80 	bl	800870c <__hexdig_fun>
 800880c:	1e42      	subs	r2, r0, #1
 800880e:	b2d2      	uxtb	r2, r2
 8008810:	2a18      	cmp	r2, #24
 8008812:	d82e      	bhi.n	8008872 <__gethex+0x13a>
 8008814:	f1a0 0210 	sub.w	r2, r0, #16
 8008818:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800881c:	f7ff ff76 	bl	800870c <__hexdig_fun>
 8008820:	f100 3cff 	add.w	ip, r0, #4294967295
 8008824:	fa5f fc8c 	uxtb.w	ip, ip
 8008828:	f1bc 0f18 	cmp.w	ip, #24
 800882c:	d91d      	bls.n	800886a <__gethex+0x132>
 800882e:	f1bb 0f00 	cmp.w	fp, #0
 8008832:	d000      	beq.n	8008836 <__gethex+0xfe>
 8008834:	4252      	negs	r2, r2
 8008836:	4416      	add	r6, r2
 8008838:	f8ca 1000 	str.w	r1, [sl]
 800883c:	b1dc      	cbz	r4, 8008876 <__gethex+0x13e>
 800883e:	9b01      	ldr	r3, [sp, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	bf14      	ite	ne
 8008844:	f04f 0800 	movne.w	r8, #0
 8008848:	f04f 0806 	moveq.w	r8, #6
 800884c:	4640      	mov	r0, r8
 800884e:	b005      	add	sp, #20
 8008850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008854:	4645      	mov	r5, r8
 8008856:	4626      	mov	r6, r4
 8008858:	2401      	movs	r4, #1
 800885a:	e7c7      	b.n	80087ec <__gethex+0xb4>
 800885c:	f04f 0b00 	mov.w	fp, #0
 8008860:	1ca9      	adds	r1, r5, #2
 8008862:	e7d0      	b.n	8008806 <__gethex+0xce>
 8008864:	f04f 0b01 	mov.w	fp, #1
 8008868:	e7fa      	b.n	8008860 <__gethex+0x128>
 800886a:	230a      	movs	r3, #10
 800886c:	fb03 0002 	mla	r0, r3, r2, r0
 8008870:	e7d0      	b.n	8008814 <__gethex+0xdc>
 8008872:	4629      	mov	r1, r5
 8008874:	e7e0      	b.n	8008838 <__gethex+0x100>
 8008876:	eba5 0308 	sub.w	r3, r5, r8
 800887a:	3b01      	subs	r3, #1
 800887c:	4621      	mov	r1, r4
 800887e:	2b07      	cmp	r3, #7
 8008880:	dc0a      	bgt.n	8008898 <__gethex+0x160>
 8008882:	4648      	mov	r0, r9
 8008884:	f7fd ff56 	bl	8006734 <_Balloc>
 8008888:	4604      	mov	r4, r0
 800888a:	b940      	cbnz	r0, 800889e <__gethex+0x166>
 800888c:	4b61      	ldr	r3, [pc, #388]	; (8008a14 <__gethex+0x2dc>)
 800888e:	4602      	mov	r2, r0
 8008890:	21e4      	movs	r1, #228	; 0xe4
 8008892:	4861      	ldr	r0, [pc, #388]	; (8008a18 <__gethex+0x2e0>)
 8008894:	f7ff feb4 	bl	8008600 <__assert_func>
 8008898:	3101      	adds	r1, #1
 800889a:	105b      	asrs	r3, r3, #1
 800889c:	e7ef      	b.n	800887e <__gethex+0x146>
 800889e:	f100 0a14 	add.w	sl, r0, #20
 80088a2:	2300      	movs	r3, #0
 80088a4:	495a      	ldr	r1, [pc, #360]	; (8008a10 <__gethex+0x2d8>)
 80088a6:	f8cd a004 	str.w	sl, [sp, #4]
 80088aa:	469b      	mov	fp, r3
 80088ac:	45a8      	cmp	r8, r5
 80088ae:	d342      	bcc.n	8008936 <__gethex+0x1fe>
 80088b0:	9801      	ldr	r0, [sp, #4]
 80088b2:	f840 bb04 	str.w	fp, [r0], #4
 80088b6:	eba0 000a 	sub.w	r0, r0, sl
 80088ba:	1080      	asrs	r0, r0, #2
 80088bc:	6120      	str	r0, [r4, #16]
 80088be:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80088c2:	4658      	mov	r0, fp
 80088c4:	f7fe f828 	bl	8006918 <__hi0bits>
 80088c8:	683d      	ldr	r5, [r7, #0]
 80088ca:	eba8 0000 	sub.w	r0, r8, r0
 80088ce:	42a8      	cmp	r0, r5
 80088d0:	dd59      	ble.n	8008986 <__gethex+0x24e>
 80088d2:	eba0 0805 	sub.w	r8, r0, r5
 80088d6:	4641      	mov	r1, r8
 80088d8:	4620      	mov	r0, r4
 80088da:	f7fe fbb7 	bl	800704c <__any_on>
 80088de:	4683      	mov	fp, r0
 80088e0:	b1b8      	cbz	r0, 8008912 <__gethex+0x1da>
 80088e2:	f108 33ff 	add.w	r3, r8, #4294967295
 80088e6:	1159      	asrs	r1, r3, #5
 80088e8:	f003 021f 	and.w	r2, r3, #31
 80088ec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80088f0:	f04f 0b01 	mov.w	fp, #1
 80088f4:	fa0b f202 	lsl.w	r2, fp, r2
 80088f8:	420a      	tst	r2, r1
 80088fa:	d00a      	beq.n	8008912 <__gethex+0x1da>
 80088fc:	455b      	cmp	r3, fp
 80088fe:	dd06      	ble.n	800890e <__gethex+0x1d6>
 8008900:	f1a8 0102 	sub.w	r1, r8, #2
 8008904:	4620      	mov	r0, r4
 8008906:	f7fe fba1 	bl	800704c <__any_on>
 800890a:	2800      	cmp	r0, #0
 800890c:	d138      	bne.n	8008980 <__gethex+0x248>
 800890e:	f04f 0b02 	mov.w	fp, #2
 8008912:	4641      	mov	r1, r8
 8008914:	4620      	mov	r0, r4
 8008916:	f7ff fea7 	bl	8008668 <rshift>
 800891a:	4446      	add	r6, r8
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	42b3      	cmp	r3, r6
 8008920:	da41      	bge.n	80089a6 <__gethex+0x26e>
 8008922:	4621      	mov	r1, r4
 8008924:	4648      	mov	r0, r9
 8008926:	f7fd ff45 	bl	80067b4 <_Bfree>
 800892a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800892c:	2300      	movs	r3, #0
 800892e:	6013      	str	r3, [r2, #0]
 8008930:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008934:	e78a      	b.n	800884c <__gethex+0x114>
 8008936:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800893a:	2a2e      	cmp	r2, #46	; 0x2e
 800893c:	d014      	beq.n	8008968 <__gethex+0x230>
 800893e:	2b20      	cmp	r3, #32
 8008940:	d106      	bne.n	8008950 <__gethex+0x218>
 8008942:	9b01      	ldr	r3, [sp, #4]
 8008944:	f843 bb04 	str.w	fp, [r3], #4
 8008948:	f04f 0b00 	mov.w	fp, #0
 800894c:	9301      	str	r3, [sp, #4]
 800894e:	465b      	mov	r3, fp
 8008950:	7828      	ldrb	r0, [r5, #0]
 8008952:	9303      	str	r3, [sp, #12]
 8008954:	f7ff feda 	bl	800870c <__hexdig_fun>
 8008958:	9b03      	ldr	r3, [sp, #12]
 800895a:	f000 000f 	and.w	r0, r0, #15
 800895e:	4098      	lsls	r0, r3
 8008960:	ea4b 0b00 	orr.w	fp, fp, r0
 8008964:	3304      	adds	r3, #4
 8008966:	e7a1      	b.n	80088ac <__gethex+0x174>
 8008968:	45a8      	cmp	r8, r5
 800896a:	d8e8      	bhi.n	800893e <__gethex+0x206>
 800896c:	2201      	movs	r2, #1
 800896e:	4628      	mov	r0, r5
 8008970:	9303      	str	r3, [sp, #12]
 8008972:	f7ff fde9 	bl	8008548 <strncmp>
 8008976:	4926      	ldr	r1, [pc, #152]	; (8008a10 <__gethex+0x2d8>)
 8008978:	9b03      	ldr	r3, [sp, #12]
 800897a:	2800      	cmp	r0, #0
 800897c:	d1df      	bne.n	800893e <__gethex+0x206>
 800897e:	e795      	b.n	80088ac <__gethex+0x174>
 8008980:	f04f 0b03 	mov.w	fp, #3
 8008984:	e7c5      	b.n	8008912 <__gethex+0x1da>
 8008986:	da0b      	bge.n	80089a0 <__gethex+0x268>
 8008988:	eba5 0800 	sub.w	r8, r5, r0
 800898c:	4621      	mov	r1, r4
 800898e:	4642      	mov	r2, r8
 8008990:	4648      	mov	r0, r9
 8008992:	f7fe f929 	bl	8006be8 <__lshift>
 8008996:	eba6 0608 	sub.w	r6, r6, r8
 800899a:	4604      	mov	r4, r0
 800899c:	f100 0a14 	add.w	sl, r0, #20
 80089a0:	f04f 0b00 	mov.w	fp, #0
 80089a4:	e7ba      	b.n	800891c <__gethex+0x1e4>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	42b3      	cmp	r3, r6
 80089aa:	dd73      	ble.n	8008a94 <__gethex+0x35c>
 80089ac:	1b9e      	subs	r6, r3, r6
 80089ae:	42b5      	cmp	r5, r6
 80089b0:	dc34      	bgt.n	8008a1c <__gethex+0x2e4>
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d023      	beq.n	8008a00 <__gethex+0x2c8>
 80089b8:	2b03      	cmp	r3, #3
 80089ba:	d025      	beq.n	8008a08 <__gethex+0x2d0>
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d115      	bne.n	80089ec <__gethex+0x2b4>
 80089c0:	42b5      	cmp	r5, r6
 80089c2:	d113      	bne.n	80089ec <__gethex+0x2b4>
 80089c4:	2d01      	cmp	r5, #1
 80089c6:	d10b      	bne.n	80089e0 <__gethex+0x2a8>
 80089c8:	9a02      	ldr	r2, [sp, #8]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6013      	str	r3, [r2, #0]
 80089ce:	2301      	movs	r3, #1
 80089d0:	6123      	str	r3, [r4, #16]
 80089d2:	f8ca 3000 	str.w	r3, [sl]
 80089d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089d8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80089dc:	601c      	str	r4, [r3, #0]
 80089de:	e735      	b.n	800884c <__gethex+0x114>
 80089e0:	1e69      	subs	r1, r5, #1
 80089e2:	4620      	mov	r0, r4
 80089e4:	f7fe fb32 	bl	800704c <__any_on>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d1ed      	bne.n	80089c8 <__gethex+0x290>
 80089ec:	4621      	mov	r1, r4
 80089ee:	4648      	mov	r0, r9
 80089f0:	f7fd fee0 	bl	80067b4 <_Bfree>
 80089f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089f6:	2300      	movs	r3, #0
 80089f8:	6013      	str	r3, [r2, #0]
 80089fa:	f04f 0850 	mov.w	r8, #80	; 0x50
 80089fe:	e725      	b.n	800884c <__gethex+0x114>
 8008a00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1f2      	bne.n	80089ec <__gethex+0x2b4>
 8008a06:	e7df      	b.n	80089c8 <__gethex+0x290>
 8008a08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1dc      	bne.n	80089c8 <__gethex+0x290>
 8008a0e:	e7ed      	b.n	80089ec <__gethex+0x2b4>
 8008a10:	08009134 	.word	0x08009134
 8008a14:	08008fcd 	.word	0x08008fcd
 8008a18:	080092de 	.word	0x080092de
 8008a1c:	f106 38ff 	add.w	r8, r6, #4294967295
 8008a20:	f1bb 0f00 	cmp.w	fp, #0
 8008a24:	d133      	bne.n	8008a8e <__gethex+0x356>
 8008a26:	f1b8 0f00 	cmp.w	r8, #0
 8008a2a:	d004      	beq.n	8008a36 <__gethex+0x2fe>
 8008a2c:	4641      	mov	r1, r8
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f7fe fb0c 	bl	800704c <__any_on>
 8008a34:	4683      	mov	fp, r0
 8008a36:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008a40:	f008 081f 	and.w	r8, r8, #31
 8008a44:	fa03 f308 	lsl.w	r3, r3, r8
 8008a48:	4213      	tst	r3, r2
 8008a4a:	4631      	mov	r1, r6
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	bf18      	it	ne
 8008a50:	f04b 0b02 	orrne.w	fp, fp, #2
 8008a54:	1bad      	subs	r5, r5, r6
 8008a56:	f7ff fe07 	bl	8008668 <rshift>
 8008a5a:	687e      	ldr	r6, [r7, #4]
 8008a5c:	f04f 0802 	mov.w	r8, #2
 8008a60:	f1bb 0f00 	cmp.w	fp, #0
 8008a64:	d04a      	beq.n	8008afc <__gethex+0x3c4>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2b02      	cmp	r3, #2
 8008a6a:	d016      	beq.n	8008a9a <__gethex+0x362>
 8008a6c:	2b03      	cmp	r3, #3
 8008a6e:	d018      	beq.n	8008aa2 <__gethex+0x36a>
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d109      	bne.n	8008a88 <__gethex+0x350>
 8008a74:	f01b 0f02 	tst.w	fp, #2
 8008a78:	d006      	beq.n	8008a88 <__gethex+0x350>
 8008a7a:	f8da 3000 	ldr.w	r3, [sl]
 8008a7e:	ea4b 0b03 	orr.w	fp, fp, r3
 8008a82:	f01b 0f01 	tst.w	fp, #1
 8008a86:	d10f      	bne.n	8008aa8 <__gethex+0x370>
 8008a88:	f048 0810 	orr.w	r8, r8, #16
 8008a8c:	e036      	b.n	8008afc <__gethex+0x3c4>
 8008a8e:	f04f 0b01 	mov.w	fp, #1
 8008a92:	e7d0      	b.n	8008a36 <__gethex+0x2fe>
 8008a94:	f04f 0801 	mov.w	r8, #1
 8008a98:	e7e2      	b.n	8008a60 <__gethex+0x328>
 8008a9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a9c:	f1c3 0301 	rsb	r3, r3, #1
 8008aa0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008aa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d0ef      	beq.n	8008a88 <__gethex+0x350>
 8008aa8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008aac:	f104 0214 	add.w	r2, r4, #20
 8008ab0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008ab4:	9301      	str	r3, [sp, #4]
 8008ab6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008aba:	2300      	movs	r3, #0
 8008abc:	4694      	mov	ip, r2
 8008abe:	f852 1b04 	ldr.w	r1, [r2], #4
 8008ac2:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008ac6:	d01e      	beq.n	8008b06 <__gethex+0x3ce>
 8008ac8:	3101      	adds	r1, #1
 8008aca:	f8cc 1000 	str.w	r1, [ip]
 8008ace:	f1b8 0f02 	cmp.w	r8, #2
 8008ad2:	f104 0214 	add.w	r2, r4, #20
 8008ad6:	d13d      	bne.n	8008b54 <__gethex+0x41c>
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	3b01      	subs	r3, #1
 8008adc:	42ab      	cmp	r3, r5
 8008ade:	d10b      	bne.n	8008af8 <__gethex+0x3c0>
 8008ae0:	1169      	asrs	r1, r5, #5
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	f005 051f 	and.w	r5, r5, #31
 8008ae8:	fa03 f505 	lsl.w	r5, r3, r5
 8008aec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008af0:	421d      	tst	r5, r3
 8008af2:	bf18      	it	ne
 8008af4:	f04f 0801 	movne.w	r8, #1
 8008af8:	f048 0820 	orr.w	r8, r8, #32
 8008afc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008afe:	601c      	str	r4, [r3, #0]
 8008b00:	9b02      	ldr	r3, [sp, #8]
 8008b02:	601e      	str	r6, [r3, #0]
 8008b04:	e6a2      	b.n	800884c <__gethex+0x114>
 8008b06:	4290      	cmp	r0, r2
 8008b08:	f842 3c04 	str.w	r3, [r2, #-4]
 8008b0c:	d8d6      	bhi.n	8008abc <__gethex+0x384>
 8008b0e:	68a2      	ldr	r2, [r4, #8]
 8008b10:	4593      	cmp	fp, r2
 8008b12:	db17      	blt.n	8008b44 <__gethex+0x40c>
 8008b14:	6861      	ldr	r1, [r4, #4]
 8008b16:	4648      	mov	r0, r9
 8008b18:	3101      	adds	r1, #1
 8008b1a:	f7fd fe0b 	bl	8006734 <_Balloc>
 8008b1e:	4682      	mov	sl, r0
 8008b20:	b918      	cbnz	r0, 8008b2a <__gethex+0x3f2>
 8008b22:	4b1b      	ldr	r3, [pc, #108]	; (8008b90 <__gethex+0x458>)
 8008b24:	4602      	mov	r2, r0
 8008b26:	2184      	movs	r1, #132	; 0x84
 8008b28:	e6b3      	b.n	8008892 <__gethex+0x15a>
 8008b2a:	6922      	ldr	r2, [r4, #16]
 8008b2c:	3202      	adds	r2, #2
 8008b2e:	f104 010c 	add.w	r1, r4, #12
 8008b32:	0092      	lsls	r2, r2, #2
 8008b34:	300c      	adds	r0, #12
 8008b36:	f7ff fd4b 	bl	80085d0 <memcpy>
 8008b3a:	4621      	mov	r1, r4
 8008b3c:	4648      	mov	r0, r9
 8008b3e:	f7fd fe39 	bl	80067b4 <_Bfree>
 8008b42:	4654      	mov	r4, sl
 8008b44:	6922      	ldr	r2, [r4, #16]
 8008b46:	1c51      	adds	r1, r2, #1
 8008b48:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008b4c:	6121      	str	r1, [r4, #16]
 8008b4e:	2101      	movs	r1, #1
 8008b50:	6151      	str	r1, [r2, #20]
 8008b52:	e7bc      	b.n	8008ace <__gethex+0x396>
 8008b54:	6921      	ldr	r1, [r4, #16]
 8008b56:	4559      	cmp	r1, fp
 8008b58:	dd0b      	ble.n	8008b72 <__gethex+0x43a>
 8008b5a:	2101      	movs	r1, #1
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	f7ff fd83 	bl	8008668 <rshift>
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	3601      	adds	r6, #1
 8008b66:	42b3      	cmp	r3, r6
 8008b68:	f6ff aedb 	blt.w	8008922 <__gethex+0x1ea>
 8008b6c:	f04f 0801 	mov.w	r8, #1
 8008b70:	e7c2      	b.n	8008af8 <__gethex+0x3c0>
 8008b72:	f015 051f 	ands.w	r5, r5, #31
 8008b76:	d0f9      	beq.n	8008b6c <__gethex+0x434>
 8008b78:	9b01      	ldr	r3, [sp, #4]
 8008b7a:	441a      	add	r2, r3
 8008b7c:	f1c5 0520 	rsb	r5, r5, #32
 8008b80:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008b84:	f7fd fec8 	bl	8006918 <__hi0bits>
 8008b88:	42a8      	cmp	r0, r5
 8008b8a:	dbe6      	blt.n	8008b5a <__gethex+0x422>
 8008b8c:	e7ee      	b.n	8008b6c <__gethex+0x434>
 8008b8e:	bf00      	nop
 8008b90:	08008fcd 	.word	0x08008fcd

08008b94 <L_shift>:
 8008b94:	f1c2 0208 	rsb	r2, r2, #8
 8008b98:	0092      	lsls	r2, r2, #2
 8008b9a:	b570      	push	{r4, r5, r6, lr}
 8008b9c:	f1c2 0620 	rsb	r6, r2, #32
 8008ba0:	6843      	ldr	r3, [r0, #4]
 8008ba2:	6804      	ldr	r4, [r0, #0]
 8008ba4:	fa03 f506 	lsl.w	r5, r3, r6
 8008ba8:	432c      	orrs	r4, r5
 8008baa:	40d3      	lsrs	r3, r2
 8008bac:	6004      	str	r4, [r0, #0]
 8008bae:	f840 3f04 	str.w	r3, [r0, #4]!
 8008bb2:	4288      	cmp	r0, r1
 8008bb4:	d3f4      	bcc.n	8008ba0 <L_shift+0xc>
 8008bb6:	bd70      	pop	{r4, r5, r6, pc}

08008bb8 <__match>:
 8008bb8:	b530      	push	{r4, r5, lr}
 8008bba:	6803      	ldr	r3, [r0, #0]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bc2:	b914      	cbnz	r4, 8008bca <__match+0x12>
 8008bc4:	6003      	str	r3, [r0, #0]
 8008bc6:	2001      	movs	r0, #1
 8008bc8:	bd30      	pop	{r4, r5, pc}
 8008bca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008bd2:	2d19      	cmp	r5, #25
 8008bd4:	bf98      	it	ls
 8008bd6:	3220      	addls	r2, #32
 8008bd8:	42a2      	cmp	r2, r4
 8008bda:	d0f0      	beq.n	8008bbe <__match+0x6>
 8008bdc:	2000      	movs	r0, #0
 8008bde:	e7f3      	b.n	8008bc8 <__match+0x10>

08008be0 <__hexnan>:
 8008be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be4:	680b      	ldr	r3, [r1, #0]
 8008be6:	6801      	ldr	r1, [r0, #0]
 8008be8:	115e      	asrs	r6, r3, #5
 8008bea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008bee:	f013 031f 	ands.w	r3, r3, #31
 8008bf2:	b087      	sub	sp, #28
 8008bf4:	bf18      	it	ne
 8008bf6:	3604      	addne	r6, #4
 8008bf8:	2500      	movs	r5, #0
 8008bfa:	1f37      	subs	r7, r6, #4
 8008bfc:	4682      	mov	sl, r0
 8008bfe:	4690      	mov	r8, r2
 8008c00:	9301      	str	r3, [sp, #4]
 8008c02:	f846 5c04 	str.w	r5, [r6, #-4]
 8008c06:	46b9      	mov	r9, r7
 8008c08:	463c      	mov	r4, r7
 8008c0a:	9502      	str	r5, [sp, #8]
 8008c0c:	46ab      	mov	fp, r5
 8008c0e:	784a      	ldrb	r2, [r1, #1]
 8008c10:	1c4b      	adds	r3, r1, #1
 8008c12:	9303      	str	r3, [sp, #12]
 8008c14:	b342      	cbz	r2, 8008c68 <__hexnan+0x88>
 8008c16:	4610      	mov	r0, r2
 8008c18:	9105      	str	r1, [sp, #20]
 8008c1a:	9204      	str	r2, [sp, #16]
 8008c1c:	f7ff fd76 	bl	800870c <__hexdig_fun>
 8008c20:	2800      	cmp	r0, #0
 8008c22:	d14f      	bne.n	8008cc4 <__hexnan+0xe4>
 8008c24:	9a04      	ldr	r2, [sp, #16]
 8008c26:	9905      	ldr	r1, [sp, #20]
 8008c28:	2a20      	cmp	r2, #32
 8008c2a:	d818      	bhi.n	8008c5e <__hexnan+0x7e>
 8008c2c:	9b02      	ldr	r3, [sp, #8]
 8008c2e:	459b      	cmp	fp, r3
 8008c30:	dd13      	ble.n	8008c5a <__hexnan+0x7a>
 8008c32:	454c      	cmp	r4, r9
 8008c34:	d206      	bcs.n	8008c44 <__hexnan+0x64>
 8008c36:	2d07      	cmp	r5, #7
 8008c38:	dc04      	bgt.n	8008c44 <__hexnan+0x64>
 8008c3a:	462a      	mov	r2, r5
 8008c3c:	4649      	mov	r1, r9
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f7ff ffa8 	bl	8008b94 <L_shift>
 8008c44:	4544      	cmp	r4, r8
 8008c46:	d950      	bls.n	8008cea <__hexnan+0x10a>
 8008c48:	2300      	movs	r3, #0
 8008c4a:	f1a4 0904 	sub.w	r9, r4, #4
 8008c4e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c52:	f8cd b008 	str.w	fp, [sp, #8]
 8008c56:	464c      	mov	r4, r9
 8008c58:	461d      	mov	r5, r3
 8008c5a:	9903      	ldr	r1, [sp, #12]
 8008c5c:	e7d7      	b.n	8008c0e <__hexnan+0x2e>
 8008c5e:	2a29      	cmp	r2, #41	; 0x29
 8008c60:	d155      	bne.n	8008d0e <__hexnan+0x12e>
 8008c62:	3102      	adds	r1, #2
 8008c64:	f8ca 1000 	str.w	r1, [sl]
 8008c68:	f1bb 0f00 	cmp.w	fp, #0
 8008c6c:	d04f      	beq.n	8008d0e <__hexnan+0x12e>
 8008c6e:	454c      	cmp	r4, r9
 8008c70:	d206      	bcs.n	8008c80 <__hexnan+0xa0>
 8008c72:	2d07      	cmp	r5, #7
 8008c74:	dc04      	bgt.n	8008c80 <__hexnan+0xa0>
 8008c76:	462a      	mov	r2, r5
 8008c78:	4649      	mov	r1, r9
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f7ff ff8a 	bl	8008b94 <L_shift>
 8008c80:	4544      	cmp	r4, r8
 8008c82:	d934      	bls.n	8008cee <__hexnan+0x10e>
 8008c84:	f1a8 0204 	sub.w	r2, r8, #4
 8008c88:	4623      	mov	r3, r4
 8008c8a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008c8e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008c92:	429f      	cmp	r7, r3
 8008c94:	d2f9      	bcs.n	8008c8a <__hexnan+0xaa>
 8008c96:	1b3b      	subs	r3, r7, r4
 8008c98:	f023 0303 	bic.w	r3, r3, #3
 8008c9c:	3304      	adds	r3, #4
 8008c9e:	3e03      	subs	r6, #3
 8008ca0:	3401      	adds	r4, #1
 8008ca2:	42a6      	cmp	r6, r4
 8008ca4:	bf38      	it	cc
 8008ca6:	2304      	movcc	r3, #4
 8008ca8:	4443      	add	r3, r8
 8008caa:	2200      	movs	r2, #0
 8008cac:	f843 2b04 	str.w	r2, [r3], #4
 8008cb0:	429f      	cmp	r7, r3
 8008cb2:	d2fb      	bcs.n	8008cac <__hexnan+0xcc>
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	b91b      	cbnz	r3, 8008cc0 <__hexnan+0xe0>
 8008cb8:	4547      	cmp	r7, r8
 8008cba:	d126      	bne.n	8008d0a <__hexnan+0x12a>
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	603b      	str	r3, [r7, #0]
 8008cc0:	2005      	movs	r0, #5
 8008cc2:	e025      	b.n	8008d10 <__hexnan+0x130>
 8008cc4:	3501      	adds	r5, #1
 8008cc6:	2d08      	cmp	r5, #8
 8008cc8:	f10b 0b01 	add.w	fp, fp, #1
 8008ccc:	dd06      	ble.n	8008cdc <__hexnan+0xfc>
 8008cce:	4544      	cmp	r4, r8
 8008cd0:	d9c3      	bls.n	8008c5a <__hexnan+0x7a>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	f844 3c04 	str.w	r3, [r4, #-4]
 8008cd8:	2501      	movs	r5, #1
 8008cda:	3c04      	subs	r4, #4
 8008cdc:	6822      	ldr	r2, [r4, #0]
 8008cde:	f000 000f 	and.w	r0, r0, #15
 8008ce2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008ce6:	6020      	str	r0, [r4, #0]
 8008ce8:	e7b7      	b.n	8008c5a <__hexnan+0x7a>
 8008cea:	2508      	movs	r5, #8
 8008cec:	e7b5      	b.n	8008c5a <__hexnan+0x7a>
 8008cee:	9b01      	ldr	r3, [sp, #4]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d0df      	beq.n	8008cb4 <__hexnan+0xd4>
 8008cf4:	f1c3 0320 	rsb	r3, r3, #32
 8008cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cfc:	40da      	lsrs	r2, r3
 8008cfe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008d02:	4013      	ands	r3, r2
 8008d04:	f846 3c04 	str.w	r3, [r6, #-4]
 8008d08:	e7d4      	b.n	8008cb4 <__hexnan+0xd4>
 8008d0a:	3f04      	subs	r7, #4
 8008d0c:	e7d2      	b.n	8008cb4 <__hexnan+0xd4>
 8008d0e:	2004      	movs	r0, #4
 8008d10:	b007      	add	sp, #28
 8008d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d16 <__ascii_mbtowc>:
 8008d16:	b082      	sub	sp, #8
 8008d18:	b901      	cbnz	r1, 8008d1c <__ascii_mbtowc+0x6>
 8008d1a:	a901      	add	r1, sp, #4
 8008d1c:	b142      	cbz	r2, 8008d30 <__ascii_mbtowc+0x1a>
 8008d1e:	b14b      	cbz	r3, 8008d34 <__ascii_mbtowc+0x1e>
 8008d20:	7813      	ldrb	r3, [r2, #0]
 8008d22:	600b      	str	r3, [r1, #0]
 8008d24:	7812      	ldrb	r2, [r2, #0]
 8008d26:	1e10      	subs	r0, r2, #0
 8008d28:	bf18      	it	ne
 8008d2a:	2001      	movne	r0, #1
 8008d2c:	b002      	add	sp, #8
 8008d2e:	4770      	bx	lr
 8008d30:	4610      	mov	r0, r2
 8008d32:	e7fb      	b.n	8008d2c <__ascii_mbtowc+0x16>
 8008d34:	f06f 0001 	mvn.w	r0, #1
 8008d38:	e7f8      	b.n	8008d2c <__ascii_mbtowc+0x16>

08008d3a <_realloc_r>:
 8008d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d3e:	4680      	mov	r8, r0
 8008d40:	4614      	mov	r4, r2
 8008d42:	460e      	mov	r6, r1
 8008d44:	b921      	cbnz	r1, 8008d50 <_realloc_r+0x16>
 8008d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d4a:	4611      	mov	r1, r2
 8008d4c:	f7fd bc66 	b.w	800661c <_malloc_r>
 8008d50:	b92a      	cbnz	r2, 8008d5e <_realloc_r+0x24>
 8008d52:	f7fd fbef 	bl	8006534 <_free_r>
 8008d56:	4625      	mov	r5, r4
 8008d58:	4628      	mov	r0, r5
 8008d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d5e:	f000 f842 	bl	8008de6 <_malloc_usable_size_r>
 8008d62:	4284      	cmp	r4, r0
 8008d64:	4607      	mov	r7, r0
 8008d66:	d802      	bhi.n	8008d6e <_realloc_r+0x34>
 8008d68:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d6c:	d812      	bhi.n	8008d94 <_realloc_r+0x5a>
 8008d6e:	4621      	mov	r1, r4
 8008d70:	4640      	mov	r0, r8
 8008d72:	f7fd fc53 	bl	800661c <_malloc_r>
 8008d76:	4605      	mov	r5, r0
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	d0ed      	beq.n	8008d58 <_realloc_r+0x1e>
 8008d7c:	42bc      	cmp	r4, r7
 8008d7e:	4622      	mov	r2, r4
 8008d80:	4631      	mov	r1, r6
 8008d82:	bf28      	it	cs
 8008d84:	463a      	movcs	r2, r7
 8008d86:	f7ff fc23 	bl	80085d0 <memcpy>
 8008d8a:	4631      	mov	r1, r6
 8008d8c:	4640      	mov	r0, r8
 8008d8e:	f7fd fbd1 	bl	8006534 <_free_r>
 8008d92:	e7e1      	b.n	8008d58 <_realloc_r+0x1e>
 8008d94:	4635      	mov	r5, r6
 8008d96:	e7df      	b.n	8008d58 <_realloc_r+0x1e>

08008d98 <__ascii_wctomb>:
 8008d98:	b149      	cbz	r1, 8008dae <__ascii_wctomb+0x16>
 8008d9a:	2aff      	cmp	r2, #255	; 0xff
 8008d9c:	bf85      	ittet	hi
 8008d9e:	238a      	movhi	r3, #138	; 0x8a
 8008da0:	6003      	strhi	r3, [r0, #0]
 8008da2:	700a      	strbls	r2, [r1, #0]
 8008da4:	f04f 30ff 	movhi.w	r0, #4294967295
 8008da8:	bf98      	it	ls
 8008daa:	2001      	movls	r0, #1
 8008dac:	4770      	bx	lr
 8008dae:	4608      	mov	r0, r1
 8008db0:	4770      	bx	lr
	...

08008db4 <fiprintf>:
 8008db4:	b40e      	push	{r1, r2, r3}
 8008db6:	b503      	push	{r0, r1, lr}
 8008db8:	4601      	mov	r1, r0
 8008dba:	ab03      	add	r3, sp, #12
 8008dbc:	4805      	ldr	r0, [pc, #20]	; (8008dd4 <fiprintf+0x20>)
 8008dbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dc2:	6800      	ldr	r0, [r0, #0]
 8008dc4:	9301      	str	r3, [sp, #4]
 8008dc6:	f7ff f97b 	bl	80080c0 <_vfiprintf_r>
 8008dca:	b002      	add	sp, #8
 8008dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dd0:	b003      	add	sp, #12
 8008dd2:	4770      	bx	lr
 8008dd4:	20000064 	.word	0x20000064

08008dd8 <abort>:
 8008dd8:	b508      	push	{r3, lr}
 8008dda:	2006      	movs	r0, #6
 8008ddc:	f000 f834 	bl	8008e48 <raise>
 8008de0:	2001      	movs	r0, #1
 8008de2:	f7f8 ff19 	bl	8001c18 <_exit>

08008de6 <_malloc_usable_size_r>:
 8008de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dea:	1f18      	subs	r0, r3, #4
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	bfbc      	itt	lt
 8008df0:	580b      	ldrlt	r3, [r1, r0]
 8008df2:	18c0      	addlt	r0, r0, r3
 8008df4:	4770      	bx	lr

08008df6 <_raise_r>:
 8008df6:	291f      	cmp	r1, #31
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4604      	mov	r4, r0
 8008dfc:	460d      	mov	r5, r1
 8008dfe:	d904      	bls.n	8008e0a <_raise_r+0x14>
 8008e00:	2316      	movs	r3, #22
 8008e02:	6003      	str	r3, [r0, #0]
 8008e04:	f04f 30ff 	mov.w	r0, #4294967295
 8008e08:	bd38      	pop	{r3, r4, r5, pc}
 8008e0a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008e0c:	b112      	cbz	r2, 8008e14 <_raise_r+0x1e>
 8008e0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e12:	b94b      	cbnz	r3, 8008e28 <_raise_r+0x32>
 8008e14:	4620      	mov	r0, r4
 8008e16:	f000 f831 	bl	8008e7c <_getpid_r>
 8008e1a:	462a      	mov	r2, r5
 8008e1c:	4601      	mov	r1, r0
 8008e1e:	4620      	mov	r0, r4
 8008e20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e24:	f000 b818 	b.w	8008e58 <_kill_r>
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d00a      	beq.n	8008e42 <_raise_r+0x4c>
 8008e2c:	1c59      	adds	r1, r3, #1
 8008e2e:	d103      	bne.n	8008e38 <_raise_r+0x42>
 8008e30:	2316      	movs	r3, #22
 8008e32:	6003      	str	r3, [r0, #0]
 8008e34:	2001      	movs	r0, #1
 8008e36:	e7e7      	b.n	8008e08 <_raise_r+0x12>
 8008e38:	2400      	movs	r4, #0
 8008e3a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e3e:	4628      	mov	r0, r5
 8008e40:	4798      	blx	r3
 8008e42:	2000      	movs	r0, #0
 8008e44:	e7e0      	b.n	8008e08 <_raise_r+0x12>
	...

08008e48 <raise>:
 8008e48:	4b02      	ldr	r3, [pc, #8]	; (8008e54 <raise+0xc>)
 8008e4a:	4601      	mov	r1, r0
 8008e4c:	6818      	ldr	r0, [r3, #0]
 8008e4e:	f7ff bfd2 	b.w	8008df6 <_raise_r>
 8008e52:	bf00      	nop
 8008e54:	20000064 	.word	0x20000064

08008e58 <_kill_r>:
 8008e58:	b538      	push	{r3, r4, r5, lr}
 8008e5a:	4d07      	ldr	r5, [pc, #28]	; (8008e78 <_kill_r+0x20>)
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	4604      	mov	r4, r0
 8008e60:	4608      	mov	r0, r1
 8008e62:	4611      	mov	r1, r2
 8008e64:	602b      	str	r3, [r5, #0]
 8008e66:	f7f8 fec7 	bl	8001bf8 <_kill>
 8008e6a:	1c43      	adds	r3, r0, #1
 8008e6c:	d102      	bne.n	8008e74 <_kill_r+0x1c>
 8008e6e:	682b      	ldr	r3, [r5, #0]
 8008e70:	b103      	cbz	r3, 8008e74 <_kill_r+0x1c>
 8008e72:	6023      	str	r3, [r4, #0]
 8008e74:	bd38      	pop	{r3, r4, r5, pc}
 8008e76:	bf00      	nop
 8008e78:	2000046c 	.word	0x2000046c

08008e7c <_getpid_r>:
 8008e7c:	f7f8 beb4 	b.w	8001be8 <_getpid>

08008e80 <_init>:
 8008e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e82:	bf00      	nop
 8008e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e86:	bc08      	pop	{r3}
 8008e88:	469e      	mov	lr, r3
 8008e8a:	4770      	bx	lr

08008e8c <_fini>:
 8008e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8e:	bf00      	nop
 8008e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e92:	bc08      	pop	{r3}
 8008e94:	469e      	mov	lr, r3
 8008e96:	4770      	bx	lr
